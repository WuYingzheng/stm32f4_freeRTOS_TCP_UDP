
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed6c  080188f4  080188f4  000288f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027660  08027660  00037660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08027668  08027668  00037668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802766c  0802766c  0003766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000034c  20000000  08027670  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0004034c  2**0
                  CONTENTS
  8 .bss          00004b70  20000350  20000350  00040350  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20004ec0  20004ec0  00040350  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0004034c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00018766  00000000  00000000  0004037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0005da8f  00000000  00000000  00058ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000aa1b  00000000  00000000  000b6571  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e60  00000000  00000000  000c0f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000032e8  00000000  00000000  000c2df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0002da86  00000000  00000000  000c60d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000e0e2  00000000  00000000  000f3b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00101c40  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000064bc  00000000  00000000  00101cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  00108178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080188dc 	.word	0x080188dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	080188dc 	.word	0x080188dc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005b6:	e003      	b.n	80005c0 <LoopCopyDataInit>

080005b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005be:	3104      	adds	r1, #4

080005c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005c8:	d3f6      	bcc.n	80005b8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005cc:	e002      	b.n	80005d4 <LoopFillZerobss>

080005ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005d0:	f842 3b04 	str.w	r3, [r2], #4

080005d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005d8:	d3f9      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005da:	f000 f823 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f017 f89d 	bl	801771c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e2:	f016 fd81 	bl	80170e8 <main>
  bx  lr    
 80005e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005ec:	08027670 	.word	0x08027670
  ldr  r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005f4:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 80005f8:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80005fc:	20004ec0 	.word	0x20004ec0

08000600 <ADC_IRQHandler>:
 * @param  None     
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
  ldr r3, NVIC_INT_CTRL_CONST
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <NVIC_INT_CTRL_CONST>)
  ldr r2, [r3, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
  uxtb r2, r2
 8000604:	b2d2      	uxtb	r2, r2

08000606 <Infinite_Loop>:
Infinite_Loop:
  /* The number of the active interrupt vector is stored in r2. */
  b  Infinite_Loop
 8000606:	e7fe      	b.n	8000606 <Infinite_Loop>
 8000608:	f3af 8000 	nop.w
 800060c:	f3af 8000 	nop.w

08000610 <NVIC_INT_CTRL_CONST>:
 8000610:	e000ed04 	.word	0xe000ed04
	...

08000620 <HardFault_Handler>:

    .section  .text.HardFault_Handler,"ax",%progbits
    .align 4
HardFault_Handler:
HardFault_Infinite_Loop:
  b  HardFault_Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <HardFault_Handler>
 8000622:	bf00      	nop

08000624 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000624:	490f      	ldr	r1, [pc, #60]	; (8000664 <SystemInit+0x40>)
 8000626:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800062a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <SystemInit+0x44>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800063c:	2000      	movs	r0, #0
 800063e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800064a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <SystemInit+0x48>)
 800064e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000656:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000658:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800065e:	608b      	str	r3, [r1, #8]
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00
 8000668:	40023800 	.word	0x40023800
 800066c:	24003010 	.word	0x24003010

08000670 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000670:	4770      	bx	lr
	...

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b510      	push	{r4, lr}
 8000676:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000678:	f002 ff4c 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_InitTick+0x24>)
 800067e:	fba3 3000 	umull	r3, r0, r3, r0
 8000682:	0980      	lsrs	r0, r0, #6
 8000684:	f000 f88e 	bl	80007a4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000688:	2200      	movs	r2, #0
 800068a:	4621      	mov	r1, r4
 800068c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000690:	f000 f84c 	bl	800072c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000694:	2000      	movs	r0, #0
 8000696:	bd10      	pop	{r4, pc}
 8000698:	10624dd3 	.word	0x10624dd3

0800069c <HAL_Init>:
{
 800069c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_Init+0x30>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006a6:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 f825 	bl	8000708 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ffd8 	bl	8000674 <HAL_InitTick>
  HAL_MspInit();
 80006c4:	f7ff ffd4 	bl	8000670 <HAL_MspInit>
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40023c00 	.word	0x40023c00

080006d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80006d0:	4a02      	ldr	r2, [pc, #8]	; (80006dc <HAL_IncTick+0xc>)
 80006d2:	6813      	ldr	r3, [r2, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000036c 	.word	0x2000036c

080006e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_GetTick+0x8>)
 80006e2:	6818      	ldr	r0, [r3, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000036c 	.word	0x2000036c

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80006ec:	b510      	push	{r4, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80006f2:	f7ff fff5 	bl	80006e0 <HAL_GetTick>
 80006f6:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80006f8:	f7ff fff2 	bl	80006e0 <HAL_GetTick>
 80006fc:	9b01      	ldr	r3, [sp, #4]
 80006fe:	1b00      	subs	r0, r0, r4
 8000700:	4298      	cmp	r0, r3
 8000702:	d3f9      	bcc.n	80006f8 <HAL_Delay+0xc>
  {
  }
}
 8000704:	b002      	add	sp, #8
 8000706:	bd10      	pop	{r4, pc}

08000708 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800070a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800070c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000710:	041b      	lsls	r3, r3, #16
 8000712:	0c1b      	lsrs	r3, r3, #16
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 800071c:	0200      	lsls	r0, r0, #8
 800071e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                 |
 8000722:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000724:	60d3      	str	r3, [r2, #12]
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b430      	push	{r4, r5}

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_NVIC_SetPriority+0x58>)
 8000730:	68dc      	ldr	r4, [r3, #12]
 8000732:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8000736:	f1c4 0307 	rsb	r3, r4, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8000740:	1d25      	adds	r5, r4, #4
 8000742:	2d06      	cmp	r5, #6
 8000744:	bf8c      	ite	hi
 8000746:	1ee5      	subhi	r5, r4, #3
 8000748:	2500      	movls	r5, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800074a:	2401      	movs	r4, #1
 800074c:	fa04 f303 	lsl.w	r3, r4, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	4019      	ands	r1, r3
 8000754:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8000756:	40ac      	lsls	r4, r5
 8000758:	3c01      	subs	r4, #1
 800075a:	4022      	ands	r2, r4
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800075c:	4311      	orrs	r1, r2
  if(IRQn < 0) {
 800075e:	2800      	cmp	r0, #0
 8000760:	db09      	blt.n	8000776 <HAL_NVIC_SetPriority+0x4a>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000762:	0109      	lsls	r1, r1, #4
 8000764:	b2c9      	uxtb	r1, r1
 8000766:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800076a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800076e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000772:	bc30      	pop	{r4, r5}
 8000774:	4770      	bx	lr
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000776:	f000 000f 	and.w	r0, r0, #15
 800077a:	0109      	lsls	r1, r1, #4
 800077c:	b2c9      	uxtb	r1, r1
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_NVIC_SetPriority+0x5c>)
 8000780:	5419      	strb	r1, [r3, r0]
 8000782:	e7f6      	b.n	8000772 <HAL_NVIC_SetPriority+0x46>
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	e000ed14 	.word	0xe000ed14

0800078c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800078c:	0942      	lsrs	r2, r0, #5
 800078e:	f000 001f 	and.w	r0, r0, #31
 8000792:	2301      	movs	r3, #1
 8000794:	fa03 f000 	lsl.w	r0, r3, r0
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <HAL_NVIC_EnableIRQ+0x14>)
 800079a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800079e:	4770      	bx	lr
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80007a4:	3801      	subs	r0, #1
 80007a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007aa:	d20a      	bcs.n	80007c2 <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_SYSTICK_Config+0x24>)
 80007ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80007b0:	21f0      	movs	r1, #240	; 0xf0
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_SYSTICK_Config+0x28>)
 80007b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80007b8:	2000      	movs	r0, #0
 80007ba:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80007c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d033      	beq.n	800083c <HAL_DMA_Init+0x6c>
{
 80007d4:	b430      	push	{r4, r5}
 80007d6:	4604      	mov	r4, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80007d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007da:	2302      	movs	r3, #2
 80007dc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80007e0:	6805      	ldr	r5, [r0, #0]
 80007e2:	682b      	ldr	r3, [r5, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <HAL_DMA_Init+0x70>)
 80007e6:	4018      	ands	r0, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	6862      	ldr	r2, [r4, #4]
 80007ea:	68a3      	ldr	r3, [r4, #8]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	68e2      	ldr	r2, [r4, #12]
 80007f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007f2:	6922      	ldr	r2, [r4, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	6962      	ldr	r2, [r4, #20]
 80007f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007fa:	69a2      	ldr	r2, [r4, #24]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	69e2      	ldr	r2, [r4, #28]
 8000800:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000802:	6a22      	ldr	r2, [r4, #32]
 8000804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000806:	4303      	orrs	r3, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000808:	2904      	cmp	r1, #4
 800080a:	d012      	beq.n	8000832 <HAL_DMA_Init+0x62>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }

  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;
 800080c:	602b      	str	r3, [r5, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800080e:	6822      	ldr	r2, [r4, #0]
 8000810:	6953      	ldr	r3, [r2, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000812:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000816:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000818:	430b      	orrs	r3, r1

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800081a:	2904      	cmp	r1, #4
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800081c:	bf04      	itt	eq
 800081e:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8000820:	430b      	orreq	r3, r1
  }

  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000822:	6153      	str	r3, [r2, #20]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000824:	2000      	movs	r0, #0
 8000826:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000828:	2301      	movs	r3, #1
 800082a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 800082e:	bc30      	pop	{r4, r5}
 8000830:	4770      	bx	lr
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000834:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000836:	430a      	orrs	r2, r1
 8000838:	4313      	orrs	r3, r2
 800083a:	e7e7      	b.n	800080c <HAL_DMA_Init+0x3c>
    return HAL_ERROR;
 800083c:	2001      	movs	r0, #1
 800083e:	4770      	bx	lr
 8000840:	f010803f 	.word	0xf010803f

08000844 <HAL_DMA_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000844:	4603      	mov	r3, r0
 8000846:	2800      	cmp	r0, #0
 8000848:	f000 839e 	beq.w	8000f88 <HAL_DMA_DeInit+0x744>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800084c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	2a02      	cmp	r2, #2
 8000854:	f000 839a 	beq.w	8000f8c <HAL_DMA_DeInit+0x748>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8000858:	6801      	ldr	r1, [r0, #0]
 800085a:	680a      	ldr	r2, [r1, #0]
 800085c:	f022 0201 	bic.w	r2, r2, #1
 8000860:	600a      	str	r2, [r1, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 8000862:	6801      	ldr	r1, [r0, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	600a      	str	r2, [r1, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 8000868:	6801      	ldr	r1, [r0, #0]
 800086a:	604a      	str	r2, [r1, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 800086c:	6801      	ldr	r1, [r0, #0]
 800086e:	608a      	str	r2, [r1, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 8000870:	6801      	ldr	r1, [r0, #0]
 8000872:	60ca      	str	r2, [r1, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 8000874:	6801      	ldr	r1, [r0, #0]
 8000876:	610a      	str	r2, [r1, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8000878:	6802      	ldr	r2, [r0, #0]
 800087a:	2121      	movs	r1, #33	; 0x21
 800087c:	6151      	str	r1, [r2, #20]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800087e:	6802      	ldr	r2, [r0, #0]
 8000880:	49bc      	ldr	r1, [pc, #752]	; (8000b74 <HAL_DMA_DeInit+0x330>)
 8000882:	428a      	cmp	r2, r1
 8000884:	d94b      	bls.n	800091e <HAL_DMA_DeInit+0xda>
 8000886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800088a:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800088e:	428a      	cmp	r2, r1
 8000890:	d013      	beq.n	80008ba <HAL_DMA_DeInit+0x76>
 8000892:	3160      	adds	r1, #96	; 0x60
 8000894:	428a      	cmp	r2, r1
 8000896:	d037      	beq.n	8000908 <HAL_DMA_DeInit+0xc4>
 8000898:	3948      	subs	r1, #72	; 0x48
 800089a:	428a      	cmp	r2, r1
 800089c:	d036      	beq.n	800090c <HAL_DMA_DeInit+0xc8>
 800089e:	3160      	adds	r1, #96	; 0x60
 80008a0:	428a      	cmp	r2, r1
 80008a2:	d036      	beq.n	8000912 <HAL_DMA_DeInit+0xce>
 80008a4:	3948      	subs	r1, #72	; 0x48
 80008a6:	428a      	cmp	r2, r1
 80008a8:	d036      	beq.n	8000918 <HAL_DMA_DeInit+0xd4>
 80008aa:	3160      	adds	r1, #96	; 0x60
 80008ac:	428a      	cmp	r2, r1
 80008ae:	bf0c      	ite	eq
 80008b0:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80008b4:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80008b8:	e000      	b.n	80008bc <HAL_DMA_DeInit+0x78>
 80008ba:	4aaf      	ldr	r2, [pc, #700]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 80008bc:	49af      	ldr	r1, [pc, #700]	; (8000b7c <HAL_DMA_DeInit+0x338>)
 80008be:	60ca      	str	r2, [r1, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	49ac      	ldr	r1, [pc, #688]	; (8000b74 <HAL_DMA_DeInit+0x330>)
 80008c4:	428a      	cmp	r2, r1
 80008c6:	f240 80da 	bls.w	8000a7e <HAL_DMA_DeInit+0x23a>
 80008ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008ce:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80008d2:	428a      	cmp	r2, r1
 80008d4:	f000 80a1 	beq.w	8000a1a <HAL_DMA_DeInit+0x1d6>
 80008d8:	3160      	adds	r1, #96	; 0x60
 80008da:	428a      	cmp	r2, r1
 80008dc:	f000 80c4 	beq.w	8000a68 <HAL_DMA_DeInit+0x224>
 80008e0:	3948      	subs	r1, #72	; 0x48
 80008e2:	428a      	cmp	r2, r1
 80008e4:	f000 80c2 	beq.w	8000a6c <HAL_DMA_DeInit+0x228>
 80008e8:	3160      	adds	r1, #96	; 0x60
 80008ea:	428a      	cmp	r2, r1
 80008ec:	f000 80c1 	beq.w	8000a72 <HAL_DMA_DeInit+0x22e>
 80008f0:	3948      	subs	r1, #72	; 0x48
 80008f2:	428a      	cmp	r2, r1
 80008f4:	f000 80c0 	beq.w	8000a78 <HAL_DMA_DeInit+0x234>
 80008f8:	3160      	adds	r1, #96	; 0x60
 80008fa:	428a      	cmp	r2, r1
 80008fc:	bf0c      	ite	eq
 80008fe:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000902:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000906:	e089      	b.n	8000a1c <HAL_DMA_DeInit+0x1d8>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000908:	4a9b      	ldr	r2, [pc, #620]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 800090a:	e7d7      	b.n	80008bc <HAL_DMA_DeInit+0x78>
 800090c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000910:	e7d4      	b.n	80008bc <HAL_DMA_DeInit+0x78>
 8000912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000916:	e7d1      	b.n	80008bc <HAL_DMA_DeInit+0x78>
 8000918:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800091c:	e7ce      	b.n	80008bc <HAL_DMA_DeInit+0x78>
 800091e:	4998      	ldr	r1, [pc, #608]	; (8000b80 <HAL_DMA_DeInit+0x33c>)
 8000920:	428a      	cmp	r2, r1
 8000922:	d927      	bls.n	8000974 <HAL_DMA_DeInit+0x130>
 8000924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000928:	39a8      	subs	r1, #168	; 0xa8
 800092a:	428a      	cmp	r2, r1
 800092c:	d013      	beq.n	8000956 <HAL_DMA_DeInit+0x112>
 800092e:	3160      	adds	r1, #96	; 0x60
 8000930:	428a      	cmp	r2, r1
 8000932:	d014      	beq.n	800095e <HAL_DMA_DeInit+0x11a>
 8000934:	3948      	subs	r1, #72	; 0x48
 8000936:	428a      	cmp	r2, r1
 8000938:	d013      	beq.n	8000962 <HAL_DMA_DeInit+0x11e>
 800093a:	3160      	adds	r1, #96	; 0x60
 800093c:	428a      	cmp	r2, r1
 800093e:	d013      	beq.n	8000968 <HAL_DMA_DeInit+0x124>
 8000940:	3948      	subs	r1, #72	; 0x48
 8000942:	428a      	cmp	r2, r1
 8000944:	d013      	beq.n	800096e <HAL_DMA_DeInit+0x12a>
 8000946:	3160      	adds	r1, #96	; 0x60
 8000948:	428a      	cmp	r2, r1
 800094a:	bf0c      	ite	eq
 800094c:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8000950:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8000954:	e000      	b.n	8000958 <HAL_DMA_DeInit+0x114>
 8000956:	4a88      	ldr	r2, [pc, #544]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 8000958:	4988      	ldr	r1, [pc, #544]	; (8000b7c <HAL_DMA_DeInit+0x338>)
 800095a:	608a      	str	r2, [r1, #8]
 800095c:	e7b0      	b.n	80008c0 <HAL_DMA_DeInit+0x7c>
 800095e:	4a86      	ldr	r2, [pc, #536]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 8000960:	e7fa      	b.n	8000958 <HAL_DMA_DeInit+0x114>
 8000962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000966:	e7f7      	b.n	8000958 <HAL_DMA_DeInit+0x114>
 8000968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096c:	e7f4      	b.n	8000958 <HAL_DMA_DeInit+0x114>
 800096e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000972:	e7f1      	b.n	8000958 <HAL_DMA_DeInit+0x114>
 8000974:	4983      	ldr	r1, [pc, #524]	; (8000b84 <HAL_DMA_DeInit+0x340>)
 8000976:	428a      	cmp	r2, r1
 8000978:	d927      	bls.n	80009ca <HAL_DMA_DeInit+0x186>
 800097a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800097e:	3948      	subs	r1, #72	; 0x48
 8000980:	428a      	cmp	r2, r1
 8000982:	d013      	beq.n	80009ac <HAL_DMA_DeInit+0x168>
 8000984:	3160      	adds	r1, #96	; 0x60
 8000986:	428a      	cmp	r2, r1
 8000988:	d014      	beq.n	80009b4 <HAL_DMA_DeInit+0x170>
 800098a:	3948      	subs	r1, #72	; 0x48
 800098c:	428a      	cmp	r2, r1
 800098e:	d013      	beq.n	80009b8 <HAL_DMA_DeInit+0x174>
 8000990:	3160      	adds	r1, #96	; 0x60
 8000992:	428a      	cmp	r2, r1
 8000994:	d013      	beq.n	80009be <HAL_DMA_DeInit+0x17a>
 8000996:	3948      	subs	r1, #72	; 0x48
 8000998:	428a      	cmp	r2, r1
 800099a:	d013      	beq.n	80009c4 <HAL_DMA_DeInit+0x180>
 800099c:	3160      	adds	r1, #96	; 0x60
 800099e:	428a      	cmp	r2, r1
 80009a0:	bf0c      	ite	eq
 80009a2:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80009a6:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80009aa:	e000      	b.n	80009ae <HAL_DMA_DeInit+0x16a>
 80009ac:	4a72      	ldr	r2, [pc, #456]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <HAL_DMA_DeInit+0x344>)
 80009b0:	60ca      	str	r2, [r1, #12]
 80009b2:	e785      	b.n	80008c0 <HAL_DMA_DeInit+0x7c>
 80009b4:	4a70      	ldr	r2, [pc, #448]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 80009b6:	e7fa      	b.n	80009ae <HAL_DMA_DeInit+0x16a>
 80009b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009bc:	e7f7      	b.n	80009ae <HAL_DMA_DeInit+0x16a>
 80009be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c2:	e7f4      	b.n	80009ae <HAL_DMA_DeInit+0x16a>
 80009c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009c8:	e7f1      	b.n	80009ae <HAL_DMA_DeInit+0x16a>
 80009ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009ce:	496f      	ldr	r1, [pc, #444]	; (8000b8c <HAL_DMA_DeInit+0x348>)
 80009d0:	428a      	cmp	r2, r1
 80009d2:	d013      	beq.n	80009fc <HAL_DMA_DeInit+0x1b8>
 80009d4:	3160      	adds	r1, #96	; 0x60
 80009d6:	428a      	cmp	r2, r1
 80009d8:	d014      	beq.n	8000a04 <HAL_DMA_DeInit+0x1c0>
 80009da:	3948      	subs	r1, #72	; 0x48
 80009dc:	428a      	cmp	r2, r1
 80009de:	d013      	beq.n	8000a08 <HAL_DMA_DeInit+0x1c4>
 80009e0:	3160      	adds	r1, #96	; 0x60
 80009e2:	428a      	cmp	r2, r1
 80009e4:	d013      	beq.n	8000a0e <HAL_DMA_DeInit+0x1ca>
 80009e6:	3948      	subs	r1, #72	; 0x48
 80009e8:	428a      	cmp	r2, r1
 80009ea:	d013      	beq.n	8000a14 <HAL_DMA_DeInit+0x1d0>
 80009ec:	3160      	adds	r1, #96	; 0x60
 80009ee:	428a      	cmp	r2, r1
 80009f0:	bf0c      	ite	eq
 80009f2:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80009f6:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80009fa:	e000      	b.n	80009fe <HAL_DMA_DeInit+0x1ba>
 80009fc:	4a5e      	ldr	r2, [pc, #376]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 80009fe:	4962      	ldr	r1, [pc, #392]	; (8000b88 <HAL_DMA_DeInit+0x344>)
 8000a00:	608a      	str	r2, [r1, #8]
 8000a02:	e75d      	b.n	80008c0 <HAL_DMA_DeInit+0x7c>
 8000a04:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <HAL_DMA_DeInit+0x334>)
 8000a06:	e7fa      	b.n	80009fe <HAL_DMA_DeInit+0x1ba>
 8000a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0c:	e7f7      	b.n	80009fe <HAL_DMA_DeInit+0x1ba>
 8000a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a12:	e7f4      	b.n	80009fe <HAL_DMA_DeInit+0x1ba>
 8000a14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a18:	e7f1      	b.n	80009fe <HAL_DMA_DeInit+0x1ba>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	4957      	ldr	r1, [pc, #348]	; (8000b7c <HAL_DMA_DeInit+0x338>)
 8000a1e:	60ca      	str	r2, [r1, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4954      	ldr	r1, [pc, #336]	; (8000b74 <HAL_DMA_DeInit+0x330>)
 8000a24:	428a      	cmp	r2, r1
 8000a26:	f240 80e8 	bls.w	8000bfa <HAL_DMA_DeInit+0x3b6>
 8000a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a2e:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8000a32:	428a      	cmp	r2, r1
 8000a34:	f000 80af 	beq.w	8000b96 <HAL_DMA_DeInit+0x352>
 8000a38:	3160      	adds	r1, #96	; 0x60
 8000a3a:	428a      	cmp	r2, r1
 8000a3c:	f000 80d2 	beq.w	8000be4 <HAL_DMA_DeInit+0x3a0>
 8000a40:	3948      	subs	r1, #72	; 0x48
 8000a42:	428a      	cmp	r2, r1
 8000a44:	f000 80d0 	beq.w	8000be8 <HAL_DMA_DeInit+0x3a4>
 8000a48:	3160      	adds	r1, #96	; 0x60
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	f000 80cf 	beq.w	8000bee <HAL_DMA_DeInit+0x3aa>
 8000a50:	3948      	subs	r1, #72	; 0x48
 8000a52:	428a      	cmp	r2, r1
 8000a54:	f000 80ce 	beq.w	8000bf4 <HAL_DMA_DeInit+0x3b0>
 8000a58:	3160      	adds	r1, #96	; 0x60
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	bf0c      	ite	eq
 8000a5e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8000a62:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8000a66:	e097      	b.n	8000b98 <HAL_DMA_DeInit+0x354>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a68:	2220      	movs	r2, #32
 8000a6a:	e7d7      	b.n	8000a1c <HAL_DMA_DeInit+0x1d8>
 8000a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a70:	e7d4      	b.n	8000a1c <HAL_DMA_DeInit+0x1d8>
 8000a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a76:	e7d1      	b.n	8000a1c <HAL_DMA_DeInit+0x1d8>
 8000a78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a7c:	e7ce      	b.n	8000a1c <HAL_DMA_DeInit+0x1d8>
 8000a7e:	4940      	ldr	r1, [pc, #256]	; (8000b80 <HAL_DMA_DeInit+0x33c>)
 8000a80:	428a      	cmp	r2, r1
 8000a82:	d927      	bls.n	8000ad4 <HAL_DMA_DeInit+0x290>
 8000a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a88:	39a8      	subs	r1, #168	; 0xa8
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	d013      	beq.n	8000ab6 <HAL_DMA_DeInit+0x272>
 8000a8e:	3160      	adds	r1, #96	; 0x60
 8000a90:	428a      	cmp	r2, r1
 8000a92:	d014      	beq.n	8000abe <HAL_DMA_DeInit+0x27a>
 8000a94:	3948      	subs	r1, #72	; 0x48
 8000a96:	428a      	cmp	r2, r1
 8000a98:	d013      	beq.n	8000ac2 <HAL_DMA_DeInit+0x27e>
 8000a9a:	3160      	adds	r1, #96	; 0x60
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	d013      	beq.n	8000ac8 <HAL_DMA_DeInit+0x284>
 8000aa0:	3948      	subs	r1, #72	; 0x48
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	d013      	beq.n	8000ace <HAL_DMA_DeInit+0x28a>
 8000aa6:	3160      	adds	r1, #96	; 0x60
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	bf0c      	ite	eq
 8000aac:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000ab0:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000ab4:	e000      	b.n	8000ab8 <HAL_DMA_DeInit+0x274>
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	4930      	ldr	r1, [pc, #192]	; (8000b7c <HAL_DMA_DeInit+0x338>)
 8000aba:	608a      	str	r2, [r1, #8]
 8000abc:	e7b0      	b.n	8000a20 <HAL_DMA_DeInit+0x1dc>
 8000abe:	2220      	movs	r2, #32
 8000ac0:	e7fa      	b.n	8000ab8 <HAL_DMA_DeInit+0x274>
 8000ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac6:	e7f7      	b.n	8000ab8 <HAL_DMA_DeInit+0x274>
 8000ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000acc:	e7f4      	b.n	8000ab8 <HAL_DMA_DeInit+0x274>
 8000ace:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ad2:	e7f1      	b.n	8000ab8 <HAL_DMA_DeInit+0x274>
 8000ad4:	492b      	ldr	r1, [pc, #172]	; (8000b84 <HAL_DMA_DeInit+0x340>)
 8000ad6:	428a      	cmp	r2, r1
 8000ad8:	d927      	bls.n	8000b2a <HAL_DMA_DeInit+0x2e6>
 8000ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ade:	3948      	subs	r1, #72	; 0x48
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	d013      	beq.n	8000b0c <HAL_DMA_DeInit+0x2c8>
 8000ae4:	3160      	adds	r1, #96	; 0x60
 8000ae6:	428a      	cmp	r2, r1
 8000ae8:	d014      	beq.n	8000b14 <HAL_DMA_DeInit+0x2d0>
 8000aea:	3948      	subs	r1, #72	; 0x48
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d013      	beq.n	8000b18 <HAL_DMA_DeInit+0x2d4>
 8000af0:	3160      	adds	r1, #96	; 0x60
 8000af2:	428a      	cmp	r2, r1
 8000af4:	d013      	beq.n	8000b1e <HAL_DMA_DeInit+0x2da>
 8000af6:	3948      	subs	r1, #72	; 0x48
 8000af8:	428a      	cmp	r2, r1
 8000afa:	d013      	beq.n	8000b24 <HAL_DMA_DeInit+0x2e0>
 8000afc:	3160      	adds	r1, #96	; 0x60
 8000afe:	428a      	cmp	r2, r1
 8000b00:	bf0c      	ite	eq
 8000b02:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000b06:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000b0a:	e000      	b.n	8000b0e <HAL_DMA_DeInit+0x2ca>
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	491e      	ldr	r1, [pc, #120]	; (8000b88 <HAL_DMA_DeInit+0x344>)
 8000b10:	60ca      	str	r2, [r1, #12]
 8000b12:	e785      	b.n	8000a20 <HAL_DMA_DeInit+0x1dc>
 8000b14:	2220      	movs	r2, #32
 8000b16:	e7fa      	b.n	8000b0e <HAL_DMA_DeInit+0x2ca>
 8000b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1c:	e7f7      	b.n	8000b0e <HAL_DMA_DeInit+0x2ca>
 8000b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b22:	e7f4      	b.n	8000b0e <HAL_DMA_DeInit+0x2ca>
 8000b24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b28:	e7f1      	b.n	8000b0e <HAL_DMA_DeInit+0x2ca>
 8000b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b2e:	4917      	ldr	r1, [pc, #92]	; (8000b8c <HAL_DMA_DeInit+0x348>)
 8000b30:	428a      	cmp	r2, r1
 8000b32:	d013      	beq.n	8000b5c <HAL_DMA_DeInit+0x318>
 8000b34:	3160      	adds	r1, #96	; 0x60
 8000b36:	428a      	cmp	r2, r1
 8000b38:	d014      	beq.n	8000b64 <HAL_DMA_DeInit+0x320>
 8000b3a:	3948      	subs	r1, #72	; 0x48
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	d013      	beq.n	8000b68 <HAL_DMA_DeInit+0x324>
 8000b40:	3160      	adds	r1, #96	; 0x60
 8000b42:	428a      	cmp	r2, r1
 8000b44:	d013      	beq.n	8000b6e <HAL_DMA_DeInit+0x32a>
 8000b46:	3948      	subs	r1, #72	; 0x48
 8000b48:	428a      	cmp	r2, r1
 8000b4a:	d021      	beq.n	8000b90 <HAL_DMA_DeInit+0x34c>
 8000b4c:	3160      	adds	r1, #96	; 0x60
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	bf0c      	ite	eq
 8000b52:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000b56:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000b5a:	e000      	b.n	8000b5e <HAL_DMA_DeInit+0x31a>
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	490a      	ldr	r1, [pc, #40]	; (8000b88 <HAL_DMA_DeInit+0x344>)
 8000b60:	608a      	str	r2, [r1, #8]
 8000b62:	e75d      	b.n	8000a20 <HAL_DMA_DeInit+0x1dc>
 8000b64:	2220      	movs	r2, #32
 8000b66:	e7fa      	b.n	8000b5e <HAL_DMA_DeInit+0x31a>
 8000b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6c:	e7f7      	b.n	8000b5e <HAL_DMA_DeInit+0x31a>
 8000b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b72:	e7f4      	b.n	8000b5e <HAL_DMA_DeInit+0x31a>
 8000b74:	40026458 	.word	0x40026458
 8000b78:	00800004 	.word	0x00800004
 8000b7c:	40026400 	.word	0x40026400
 8000b80:	400260b8 	.word	0x400260b8
 8000b84:	40026058 	.word	0x40026058
 8000b88:	40026000 	.word	0x40026000
 8000b8c:	40026010 	.word	0x40026010
 8000b90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b94:	e7e3      	b.n	8000b5e <HAL_DMA_DeInit+0x31a>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000b96:	2208      	movs	r2, #8
 8000b98:	49b5      	ldr	r1, [pc, #724]	; (8000e70 <HAL_DMA_DeInit+0x62c>)
 8000b9a:	60ca      	str	r2, [r1, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	49b5      	ldr	r1, [pc, #724]	; (8000e74 <HAL_DMA_DeInit+0x630>)
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	f240 80d8 	bls.w	8000d56 <HAL_DMA_DeInit+0x512>
 8000ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000baa:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8000bae:	428a      	cmp	r2, r1
 8000bb0:	f000 80a1 	beq.w	8000cf6 <HAL_DMA_DeInit+0x4b2>
 8000bb4:	3160      	adds	r1, #96	; 0x60
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	f000 80c4 	beq.w	8000d44 <HAL_DMA_DeInit+0x500>
 8000bbc:	3948      	subs	r1, #72	; 0x48
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	f000 80c2 	beq.w	8000d48 <HAL_DMA_DeInit+0x504>
 8000bc4:	3160      	adds	r1, #96	; 0x60
 8000bc6:	428a      	cmp	r2, r1
 8000bc8:	f000 80c0 	beq.w	8000d4c <HAL_DMA_DeInit+0x508>
 8000bcc:	3948      	subs	r1, #72	; 0x48
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	f000 80be 	beq.w	8000d50 <HAL_DMA_DeInit+0x50c>
 8000bd4:	3160      	adds	r1, #96	; 0x60
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	bf0c      	ite	eq
 8000bda:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8000bde:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8000be2:	e089      	b.n	8000cf8 <HAL_DMA_DeInit+0x4b4>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000be4:	2208      	movs	r2, #8
 8000be6:	e7d7      	b.n	8000b98 <HAL_DMA_DeInit+0x354>
 8000be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bec:	e7d4      	b.n	8000b98 <HAL_DMA_DeInit+0x354>
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	e7d1      	b.n	8000b98 <HAL_DMA_DeInit+0x354>
 8000bf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bf8:	e7ce      	b.n	8000b98 <HAL_DMA_DeInit+0x354>
 8000bfa:	499f      	ldr	r1, [pc, #636]	; (8000e78 <HAL_DMA_DeInit+0x634>)
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d927      	bls.n	8000c50 <HAL_DMA_DeInit+0x40c>
 8000c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c04:	39a8      	subs	r1, #168	; 0xa8
 8000c06:	428a      	cmp	r2, r1
 8000c08:	d013      	beq.n	8000c32 <HAL_DMA_DeInit+0x3ee>
 8000c0a:	3160      	adds	r1, #96	; 0x60
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	d014      	beq.n	8000c3a <HAL_DMA_DeInit+0x3f6>
 8000c10:	3948      	subs	r1, #72	; 0x48
 8000c12:	428a      	cmp	r2, r1
 8000c14:	d013      	beq.n	8000c3e <HAL_DMA_DeInit+0x3fa>
 8000c16:	3160      	adds	r1, #96	; 0x60
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	d013      	beq.n	8000c44 <HAL_DMA_DeInit+0x400>
 8000c1c:	3948      	subs	r1, #72	; 0x48
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	d013      	beq.n	8000c4a <HAL_DMA_DeInit+0x406>
 8000c22:	3160      	adds	r1, #96	; 0x60
 8000c24:	428a      	cmp	r2, r1
 8000c26:	bf0c      	ite	eq
 8000c28:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8000c2c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8000c30:	e000      	b.n	8000c34 <HAL_DMA_DeInit+0x3f0>
 8000c32:	2208      	movs	r2, #8
 8000c34:	498e      	ldr	r1, [pc, #568]	; (8000e70 <HAL_DMA_DeInit+0x62c>)
 8000c36:	608a      	str	r2, [r1, #8]
 8000c38:	e7b0      	b.n	8000b9c <HAL_DMA_DeInit+0x358>
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	e7fa      	b.n	8000c34 <HAL_DMA_DeInit+0x3f0>
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	e7f7      	b.n	8000c34 <HAL_DMA_DeInit+0x3f0>
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	e7f4      	b.n	8000c34 <HAL_DMA_DeInit+0x3f0>
 8000c4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c4e:	e7f1      	b.n	8000c34 <HAL_DMA_DeInit+0x3f0>
 8000c50:	498a      	ldr	r1, [pc, #552]	; (8000e7c <HAL_DMA_DeInit+0x638>)
 8000c52:	428a      	cmp	r2, r1
 8000c54:	d927      	bls.n	8000ca6 <HAL_DMA_DeInit+0x462>
 8000c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c5a:	3948      	subs	r1, #72	; 0x48
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d013      	beq.n	8000c88 <HAL_DMA_DeInit+0x444>
 8000c60:	3160      	adds	r1, #96	; 0x60
 8000c62:	428a      	cmp	r2, r1
 8000c64:	d014      	beq.n	8000c90 <HAL_DMA_DeInit+0x44c>
 8000c66:	3948      	subs	r1, #72	; 0x48
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d013      	beq.n	8000c94 <HAL_DMA_DeInit+0x450>
 8000c6c:	3160      	adds	r1, #96	; 0x60
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	d013      	beq.n	8000c9a <HAL_DMA_DeInit+0x456>
 8000c72:	3948      	subs	r1, #72	; 0x48
 8000c74:	428a      	cmp	r2, r1
 8000c76:	d013      	beq.n	8000ca0 <HAL_DMA_DeInit+0x45c>
 8000c78:	3160      	adds	r1, #96	; 0x60
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	bf0c      	ite	eq
 8000c7e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8000c82:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8000c86:	e000      	b.n	8000c8a <HAL_DMA_DeInit+0x446>
 8000c88:	2208      	movs	r2, #8
 8000c8a:	497d      	ldr	r1, [pc, #500]	; (8000e80 <HAL_DMA_DeInit+0x63c>)
 8000c8c:	60ca      	str	r2, [r1, #12]
 8000c8e:	e785      	b.n	8000b9c <HAL_DMA_DeInit+0x358>
 8000c90:	2208      	movs	r2, #8
 8000c92:	e7fa      	b.n	8000c8a <HAL_DMA_DeInit+0x446>
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	e7f7      	b.n	8000c8a <HAL_DMA_DeInit+0x446>
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	e7f4      	b.n	8000c8a <HAL_DMA_DeInit+0x446>
 8000ca0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ca4:	e7f1      	b.n	8000c8a <HAL_DMA_DeInit+0x446>
 8000ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000caa:	4976      	ldr	r1, [pc, #472]	; (8000e84 <HAL_DMA_DeInit+0x640>)
 8000cac:	428a      	cmp	r2, r1
 8000cae:	d013      	beq.n	8000cd8 <HAL_DMA_DeInit+0x494>
 8000cb0:	3160      	adds	r1, #96	; 0x60
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	d014      	beq.n	8000ce0 <HAL_DMA_DeInit+0x49c>
 8000cb6:	3948      	subs	r1, #72	; 0x48
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	d013      	beq.n	8000ce4 <HAL_DMA_DeInit+0x4a0>
 8000cbc:	3160      	adds	r1, #96	; 0x60
 8000cbe:	428a      	cmp	r2, r1
 8000cc0:	d013      	beq.n	8000cea <HAL_DMA_DeInit+0x4a6>
 8000cc2:	3948      	subs	r1, #72	; 0x48
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	d013      	beq.n	8000cf0 <HAL_DMA_DeInit+0x4ac>
 8000cc8:	3160      	adds	r1, #96	; 0x60
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	bf0c      	ite	eq
 8000cce:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8000cd2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8000cd6:	e000      	b.n	8000cda <HAL_DMA_DeInit+0x496>
 8000cd8:	2208      	movs	r2, #8
 8000cda:	4969      	ldr	r1, [pc, #420]	; (8000e80 <HAL_DMA_DeInit+0x63c>)
 8000cdc:	608a      	str	r2, [r1, #8]
 8000cde:	e75d      	b.n	8000b9c <HAL_DMA_DeInit+0x358>
 8000ce0:	2208      	movs	r2, #8
 8000ce2:	e7fa      	b.n	8000cda <HAL_DMA_DeInit+0x496>
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	e7f7      	b.n	8000cda <HAL_DMA_DeInit+0x496>
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	e7f4      	b.n	8000cda <HAL_DMA_DeInit+0x496>
 8000cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf4:	e7f1      	b.n	8000cda <HAL_DMA_DeInit+0x496>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000cf6:	4a64      	ldr	r2, [pc, #400]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000cf8:	495d      	ldr	r1, [pc, #372]	; (8000e70 <HAL_DMA_DeInit+0x62c>)
 8000cfa:	60ca      	str	r2, [r1, #12]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	495d      	ldr	r1, [pc, #372]	; (8000e74 <HAL_DMA_DeInit+0x630>)
 8000d00:	428a      	cmp	r2, r1
 8000d02:	f240 80c3 	bls.w	8000e8c <HAL_DMA_DeInit+0x648>
 8000d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d0a:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 8000d0e:	428a      	cmp	r2, r1
 8000d10:	f000 8099 	beq.w	8000e46 <HAL_DMA_DeInit+0x602>
 8000d14:	3160      	adds	r1, #96	; 0x60
 8000d16:	428a      	cmp	r2, r1
 8000d18:	f000 809f 	beq.w	8000e5a <HAL_DMA_DeInit+0x616>
 8000d1c:	3948      	subs	r1, #72	; 0x48
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	f000 809d 	beq.w	8000e5e <HAL_DMA_DeInit+0x61a>
 8000d24:	3160      	adds	r1, #96	; 0x60
 8000d26:	428a      	cmp	r2, r1
 8000d28:	f000 809c 	beq.w	8000e64 <HAL_DMA_DeInit+0x620>
 8000d2c:	3948      	subs	r1, #72	; 0x48
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	f000 809b 	beq.w	8000e6a <HAL_DMA_DeInit+0x626>
 8000d34:	3160      	adds	r1, #96	; 0x60
 8000d36:	428a      	cmp	r2, r1
 8000d38:	bf0c      	ite	eq
 8000d3a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000d3e:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000d42:	e081      	b.n	8000e48 <HAL_DMA_DeInit+0x604>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000d44:	4a50      	ldr	r2, [pc, #320]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000d46:	e7d7      	b.n	8000cf8 <HAL_DMA_DeInit+0x4b4>
 8000d48:	2240      	movs	r2, #64	; 0x40
 8000d4a:	e7d5      	b.n	8000cf8 <HAL_DMA_DeInit+0x4b4>
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	e7d3      	b.n	8000cf8 <HAL_DMA_DeInit+0x4b4>
 8000d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d54:	e7d0      	b.n	8000cf8 <HAL_DMA_DeInit+0x4b4>
 8000d56:	4948      	ldr	r1, [pc, #288]	; (8000e78 <HAL_DMA_DeInit+0x634>)
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	d925      	bls.n	8000da8 <HAL_DMA_DeInit+0x564>
 8000d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d60:	39a8      	subs	r1, #168	; 0xa8
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d013      	beq.n	8000d8e <HAL_DMA_DeInit+0x54a>
 8000d66:	3160      	adds	r1, #96	; 0x60
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d014      	beq.n	8000d96 <HAL_DMA_DeInit+0x552>
 8000d6c:	3948      	subs	r1, #72	; 0x48
 8000d6e:	428a      	cmp	r2, r1
 8000d70:	d013      	beq.n	8000d9a <HAL_DMA_DeInit+0x556>
 8000d72:	3160      	adds	r1, #96	; 0x60
 8000d74:	428a      	cmp	r2, r1
 8000d76:	d012      	beq.n	8000d9e <HAL_DMA_DeInit+0x55a>
 8000d78:	3948      	subs	r1, #72	; 0x48
 8000d7a:	428a      	cmp	r2, r1
 8000d7c:	d011      	beq.n	8000da2 <HAL_DMA_DeInit+0x55e>
 8000d7e:	3160      	adds	r1, #96	; 0x60
 8000d80:	428a      	cmp	r2, r1
 8000d82:	bf0c      	ite	eq
 8000d84:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8000d88:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8000d8c:	e000      	b.n	8000d90 <HAL_DMA_DeInit+0x54c>
 8000d8e:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000d90:	4937      	ldr	r1, [pc, #220]	; (8000e70 <HAL_DMA_DeInit+0x62c>)
 8000d92:	608a      	str	r2, [r1, #8]
 8000d94:	e7b2      	b.n	8000cfc <HAL_DMA_DeInit+0x4b8>
 8000d96:	4a3c      	ldr	r2, [pc, #240]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000d98:	e7fa      	b.n	8000d90 <HAL_DMA_DeInit+0x54c>
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	e7f8      	b.n	8000d90 <HAL_DMA_DeInit+0x54c>
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	e7f6      	b.n	8000d90 <HAL_DMA_DeInit+0x54c>
 8000da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da6:	e7f3      	b.n	8000d90 <HAL_DMA_DeInit+0x54c>
 8000da8:	4934      	ldr	r1, [pc, #208]	; (8000e7c <HAL_DMA_DeInit+0x638>)
 8000daa:	428a      	cmp	r2, r1
 8000dac:	d925      	bls.n	8000dfa <HAL_DMA_DeInit+0x5b6>
 8000dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000db2:	3948      	subs	r1, #72	; 0x48
 8000db4:	428a      	cmp	r2, r1
 8000db6:	d013      	beq.n	8000de0 <HAL_DMA_DeInit+0x59c>
 8000db8:	3160      	adds	r1, #96	; 0x60
 8000dba:	428a      	cmp	r2, r1
 8000dbc:	d014      	beq.n	8000de8 <HAL_DMA_DeInit+0x5a4>
 8000dbe:	3948      	subs	r1, #72	; 0x48
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	d013      	beq.n	8000dec <HAL_DMA_DeInit+0x5a8>
 8000dc4:	3160      	adds	r1, #96	; 0x60
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	d012      	beq.n	8000df0 <HAL_DMA_DeInit+0x5ac>
 8000dca:	3948      	subs	r1, #72	; 0x48
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d011      	beq.n	8000df4 <HAL_DMA_DeInit+0x5b0>
 8000dd0:	3160      	adds	r1, #96	; 0x60
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	bf0c      	ite	eq
 8000dd6:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8000dda:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8000dde:	e000      	b.n	8000de2 <HAL_DMA_DeInit+0x59e>
 8000de0:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000de2:	4927      	ldr	r1, [pc, #156]	; (8000e80 <HAL_DMA_DeInit+0x63c>)
 8000de4:	60ca      	str	r2, [r1, #12]
 8000de6:	e789      	b.n	8000cfc <HAL_DMA_DeInit+0x4b8>
 8000de8:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000dea:	e7fa      	b.n	8000de2 <HAL_DMA_DeInit+0x59e>
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	e7f8      	b.n	8000de2 <HAL_DMA_DeInit+0x59e>
 8000df0:	2240      	movs	r2, #64	; 0x40
 8000df2:	e7f6      	b.n	8000de2 <HAL_DMA_DeInit+0x59e>
 8000df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000df8:	e7f3      	b.n	8000de2 <HAL_DMA_DeInit+0x59e>
 8000dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dfe:	4921      	ldr	r1, [pc, #132]	; (8000e84 <HAL_DMA_DeInit+0x640>)
 8000e00:	428a      	cmp	r2, r1
 8000e02:	d013      	beq.n	8000e2c <HAL_DMA_DeInit+0x5e8>
 8000e04:	3160      	adds	r1, #96	; 0x60
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d014      	beq.n	8000e34 <HAL_DMA_DeInit+0x5f0>
 8000e0a:	3948      	subs	r1, #72	; 0x48
 8000e0c:	428a      	cmp	r2, r1
 8000e0e:	d013      	beq.n	8000e38 <HAL_DMA_DeInit+0x5f4>
 8000e10:	3160      	adds	r1, #96	; 0x60
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d012      	beq.n	8000e3c <HAL_DMA_DeInit+0x5f8>
 8000e16:	3948      	subs	r1, #72	; 0x48
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d011      	beq.n	8000e40 <HAL_DMA_DeInit+0x5fc>
 8000e1c:	3160      	adds	r1, #96	; 0x60
 8000e1e:	428a      	cmp	r2, r1
 8000e20:	bf0c      	ite	eq
 8000e22:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
 8000e26:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
 8000e2a:	e000      	b.n	8000e2e <HAL_DMA_DeInit+0x5ea>
 8000e2c:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000e2e:	4914      	ldr	r1, [pc, #80]	; (8000e80 <HAL_DMA_DeInit+0x63c>)
 8000e30:	608a      	str	r2, [r1, #8]
 8000e32:	e763      	b.n	8000cfc <HAL_DMA_DeInit+0x4b8>
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_DMA_DeInit+0x644>)
 8000e36:	e7fa      	b.n	8000e2e <HAL_DMA_DeInit+0x5ea>
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	e7f8      	b.n	8000e2e <HAL_DMA_DeInit+0x5ea>
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	e7f6      	b.n	8000e2e <HAL_DMA_DeInit+0x5ea>
 8000e40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e44:	e7f3      	b.n	8000e2e <HAL_DMA_DeInit+0x5ea>
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e46:	2210      	movs	r2, #16
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <HAL_DMA_DeInit+0x62c>)
 8000e4a:	60ca      	str	r2, [r1, #12]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	64d8      	str	r0, [r3, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000e50:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e54:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34

  return HAL_OK;
 8000e58:	4770      	bx	lr
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	e7f4      	b.n	8000e48 <HAL_DMA_DeInit+0x604>
 8000e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e62:	e7f1      	b.n	8000e48 <HAL_DMA_DeInit+0x604>
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	e7ee      	b.n	8000e48 <HAL_DMA_DeInit+0x604>
 8000e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e6e:	e7eb      	b.n	8000e48 <HAL_DMA_DeInit+0x604>
 8000e70:	40026400 	.word	0x40026400
 8000e74:	40026458 	.word	0x40026458
 8000e78:	400260b8 	.word	0x400260b8
 8000e7c:	40026058 	.word	0x40026058
 8000e80:	40026000 	.word	0x40026000
 8000e84:	40026010 	.word	0x40026010
 8000e88:	00800001 	.word	0x00800001
 8000e8c:	4940      	ldr	r1, [pc, #256]	; (8000f90 <HAL_DMA_DeInit+0x74c>)
 8000e8e:	428a      	cmp	r2, r1
 8000e90:	d927      	bls.n	8000ee2 <HAL_DMA_DeInit+0x69e>
 8000e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e96:	39a8      	subs	r1, #168	; 0xa8
 8000e98:	428a      	cmp	r2, r1
 8000e9a:	d013      	beq.n	8000ec4 <HAL_DMA_DeInit+0x680>
 8000e9c:	3160      	adds	r1, #96	; 0x60
 8000e9e:	428a      	cmp	r2, r1
 8000ea0:	d014      	beq.n	8000ecc <HAL_DMA_DeInit+0x688>
 8000ea2:	3948      	subs	r1, #72	; 0x48
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	d013      	beq.n	8000ed0 <HAL_DMA_DeInit+0x68c>
 8000ea8:	3160      	adds	r1, #96	; 0x60
 8000eaa:	428a      	cmp	r2, r1
 8000eac:	d013      	beq.n	8000ed6 <HAL_DMA_DeInit+0x692>
 8000eae:	3948      	subs	r1, #72	; 0x48
 8000eb0:	428a      	cmp	r2, r1
 8000eb2:	d013      	beq.n	8000edc <HAL_DMA_DeInit+0x698>
 8000eb4:	3160      	adds	r1, #96	; 0x60
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	bf0c      	ite	eq
 8000eba:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000ebe:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000ec2:	e000      	b.n	8000ec6 <HAL_DMA_DeInit+0x682>
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	4933      	ldr	r1, [pc, #204]	; (8000f94 <HAL_DMA_DeInit+0x750>)
 8000ec8:	608a      	str	r2, [r1, #8]
 8000eca:	e7bf      	b.n	8000e4c <HAL_DMA_DeInit+0x608>
 8000ecc:	2210      	movs	r2, #16
 8000ece:	e7fa      	b.n	8000ec6 <HAL_DMA_DeInit+0x682>
 8000ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed4:	e7f7      	b.n	8000ec6 <HAL_DMA_DeInit+0x682>
 8000ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eda:	e7f4      	b.n	8000ec6 <HAL_DMA_DeInit+0x682>
 8000edc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ee0:	e7f1      	b.n	8000ec6 <HAL_DMA_DeInit+0x682>
 8000ee2:	492d      	ldr	r1, [pc, #180]	; (8000f98 <HAL_DMA_DeInit+0x754>)
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	d927      	bls.n	8000f38 <HAL_DMA_DeInit+0x6f4>
 8000ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eec:	3948      	subs	r1, #72	; 0x48
 8000eee:	428a      	cmp	r2, r1
 8000ef0:	d013      	beq.n	8000f1a <HAL_DMA_DeInit+0x6d6>
 8000ef2:	3160      	adds	r1, #96	; 0x60
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	d014      	beq.n	8000f22 <HAL_DMA_DeInit+0x6de>
 8000ef8:	3948      	subs	r1, #72	; 0x48
 8000efa:	428a      	cmp	r2, r1
 8000efc:	d013      	beq.n	8000f26 <HAL_DMA_DeInit+0x6e2>
 8000efe:	3160      	adds	r1, #96	; 0x60
 8000f00:	428a      	cmp	r2, r1
 8000f02:	d013      	beq.n	8000f2c <HAL_DMA_DeInit+0x6e8>
 8000f04:	3948      	subs	r1, #72	; 0x48
 8000f06:	428a      	cmp	r2, r1
 8000f08:	d013      	beq.n	8000f32 <HAL_DMA_DeInit+0x6ee>
 8000f0a:	3160      	adds	r1, #96	; 0x60
 8000f0c:	428a      	cmp	r2, r1
 8000f0e:	bf0c      	ite	eq
 8000f10:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000f14:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000f18:	e000      	b.n	8000f1c <HAL_DMA_DeInit+0x6d8>
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	491f      	ldr	r1, [pc, #124]	; (8000f9c <HAL_DMA_DeInit+0x758>)
 8000f1e:	60ca      	str	r2, [r1, #12]
 8000f20:	e794      	b.n	8000e4c <HAL_DMA_DeInit+0x608>
 8000f22:	2210      	movs	r2, #16
 8000f24:	e7fa      	b.n	8000f1c <HAL_DMA_DeInit+0x6d8>
 8000f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2a:	e7f7      	b.n	8000f1c <HAL_DMA_DeInit+0x6d8>
 8000f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f30:	e7f4      	b.n	8000f1c <HAL_DMA_DeInit+0x6d8>
 8000f32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f36:	e7f1      	b.n	8000f1c <HAL_DMA_DeInit+0x6d8>
 8000f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f3c:	4918      	ldr	r1, [pc, #96]	; (8000fa0 <HAL_DMA_DeInit+0x75c>)
 8000f3e:	428a      	cmp	r2, r1
 8000f40:	d013      	beq.n	8000f6a <HAL_DMA_DeInit+0x726>
 8000f42:	3160      	adds	r1, #96	; 0x60
 8000f44:	428a      	cmp	r2, r1
 8000f46:	d014      	beq.n	8000f72 <HAL_DMA_DeInit+0x72e>
 8000f48:	3948      	subs	r1, #72	; 0x48
 8000f4a:	428a      	cmp	r2, r1
 8000f4c:	d013      	beq.n	8000f76 <HAL_DMA_DeInit+0x732>
 8000f4e:	3160      	adds	r1, #96	; 0x60
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d013      	beq.n	8000f7c <HAL_DMA_DeInit+0x738>
 8000f54:	3948      	subs	r1, #72	; 0x48
 8000f56:	428a      	cmp	r2, r1
 8000f58:	d013      	beq.n	8000f82 <HAL_DMA_DeInit+0x73e>
 8000f5a:	3160      	adds	r1, #96	; 0x60
 8000f5c:	428a      	cmp	r2, r1
 8000f5e:	bf0c      	ite	eq
 8000f60:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000f64:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000f68:	e000      	b.n	8000f6c <HAL_DMA_DeInit+0x728>
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	490b      	ldr	r1, [pc, #44]	; (8000f9c <HAL_DMA_DeInit+0x758>)
 8000f6e:	608a      	str	r2, [r1, #8]
 8000f70:	e76c      	b.n	8000e4c <HAL_DMA_DeInit+0x608>
 8000f72:	2210      	movs	r2, #16
 8000f74:	e7fa      	b.n	8000f6c <HAL_DMA_DeInit+0x728>
 8000f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7a:	e7f7      	b.n	8000f6c <HAL_DMA_DeInit+0x728>
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	e7f4      	b.n	8000f6c <HAL_DMA_DeInit+0x728>
 8000f82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f86:	e7f1      	b.n	8000f6c <HAL_DMA_DeInit+0x728>
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	4770      	bx	lr
     return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
}
 8000f8e:	4770      	bx	lr
 8000f90:	400260b8 	.word	0x400260b8
 8000f94:	40026400 	.word	0x40026400
 8000f98:	40026058 	.word	0x40026058
 8000f9c:	40026000 	.word	0x40026000
 8000fa0:	40026010 	.word	0x40026010

08000fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa4:	b430      	push	{r4, r5}
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fa6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000faa:	2c01      	cmp	r4, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_DMA_Start_IT+0x10>
 8000fae:	2002      	movs	r0, #2

   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);

  return HAL_OK;
}
 8000fb0:	bc30      	pop	{r4, r5}
 8000fb2:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8000fb4:	2401      	movs	r4, #1
 8000fb6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fba:	2402      	movs	r4, #2
 8000fbc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000fc0:	6805      	ldr	r5, [r0, #0]
 8000fc2:	682c      	ldr	r4, [r5, #0]
 8000fc4:	f024 0401 	bic.w	r4, r4, #1
 8000fc8:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fca:	6805      	ldr	r5, [r0, #0]
 8000fcc:	682c      	ldr	r4, [r5, #0]
 8000fce:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000fd2:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000fd4:	6804      	ldr	r4, [r0, #0]
 8000fd6:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd8:	6883      	ldr	r3, [r0, #8]
 8000fda:	2b40      	cmp	r3, #64	; 0x40
 8000fdc:	d023      	beq.n	8001026 <HAL_DMA_Start_IT+0x82>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000fde:	6803      	ldr	r3, [r0, #0]
 8000fe0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000fe2:	6803      	ldr	r3, [r0, #0]
 8000fe4:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	6813      	ldr	r3, [r2, #0]
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8000ff0:	6802      	ldr	r2, [r0, #0]
 8000ff2:	6813      	ldr	r3, [r2, #0]
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8000ffa:	6802      	ldr	r2, [r0, #0]
 8000ffc:	6813      	ldr	r3, [r2, #0]
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);
 8001004:	6802      	ldr	r2, [r0, #0]
 8001006:	6953      	ldr	r3, [r2, #20]
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6153      	str	r3, [r2, #20]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME);
 800100e:	6802      	ldr	r2, [r0, #0]
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);
 8001018:	6802      	ldr	r2, [r0, #0]
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001022:	2000      	movs	r0, #0
 8001024:	e7c4      	b.n	8000fb0 <HAL_DMA_Start_IT+0xc>
    hdma->Instance->PAR = DstAddress;
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800102a:	6803      	ldr	r3, [r0, #0]
 800102c:	60d9      	str	r1, [r3, #12]
 800102e:	e7da      	b.n	8000fe6 <HAL_DMA_Start_IT+0x42>

08001030 <HAL_DMA_Abort>:
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8001034:	6802      	ldr	r2, [r0, #0]
 8001036:	6813      	ldr	r3, [r2, #0]
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800103e:	f7ff fb4f 	bl	80006e0 <HAL_GetTick>
 8001042:	4605      	mov	r5, r0
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f013 0f01 	tst.w	r3, #1
 800104c:	d010      	beq.n	8001070 <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104e:	f7ff fb47 	bl	80006e0 <HAL_GetTick>
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001058:	d9f4      	bls.n	8001044 <HAL_DMA_Abort+0x14>
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800105a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	64e3      	str	r3, [r4, #76]	; 0x4c
      __HAL_UNLOCK(hdma);
 8001062:	2300      	movs	r3, #0
 8001064:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001068:	2003      	movs	r0, #3
 800106a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800106e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_UNLOCK(hdma);
 8001070:	2000      	movs	r0, #0
 8001072:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8001076:	2301      	movs	r3, #1
 8001078:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800107c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001080 <HAL_DMA_IRQHandler>:
{
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4604      	mov	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8001084:	6801      	ldr	r1, [r0, #0]
 8001086:	460b      	mov	r3, r1
 8001088:	4ac2      	ldr	r2, [pc, #776]	; (8001394 <HAL_DMA_IRQHandler+0x314>)
 800108a:	4291      	cmp	r1, r2
 800108c:	d949      	bls.n	8001122 <HAL_DMA_IRQHandler+0xa2>
 800108e:	3a58      	subs	r2, #88	; 0x58
 8001090:	6850      	ldr	r0, [r2, #4]
 8001092:	f421 6280 	bic.w	r2, r1, #1024	; 0x400
 8001096:	4dc0      	ldr	r5, [pc, #768]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 8001098:	42aa      	cmp	r2, r5
 800109a:	d013      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x44>
 800109c:	3560      	adds	r5, #96	; 0x60
 800109e:	42aa      	cmp	r2, r5
 80010a0:	d034      	beq.n	800110c <HAL_DMA_IRQHandler+0x8c>
 80010a2:	3d48      	subs	r5, #72	; 0x48
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d033      	beq.n	8001110 <HAL_DMA_IRQHandler+0x90>
 80010a8:	3560      	adds	r5, #96	; 0x60
 80010aa:	42aa      	cmp	r2, r5
 80010ac:	d033      	beq.n	8001116 <HAL_DMA_IRQHandler+0x96>
 80010ae:	3d48      	subs	r5, #72	; 0x48
 80010b0:	42aa      	cmp	r2, r5
 80010b2:	d033      	beq.n	800111c <HAL_DMA_IRQHandler+0x9c>
 80010b4:	3560      	adds	r5, #96	; 0x60
 80010b6:	42aa      	cmp	r2, r5
 80010b8:	bf0c      	ite	eq
 80010ba:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010be:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010c2:	e000      	b.n	80010c6 <HAL_DMA_IRQHandler+0x46>
 80010c4:	2208      	movs	r2, #8
 80010c6:	4202      	tst	r2, r0
 80010c8:	f041 818d 	bne.w	80023e6 <HAL_DMA_IRQHandler+0x1366>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80010cc:	4ab3      	ldr	r2, [pc, #716]	; (800139c <HAL_DMA_IRQHandler+0x31c>)
 80010ce:	6852      	ldr	r2, [r2, #4]
 80010d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010d4:	48b0      	ldr	r0, [pc, #704]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 80010d6:	4283      	cmp	r3, r0
 80010d8:	f000 81e6 	beq.w	80014a8 <HAL_DMA_IRQHandler+0x428>
 80010dc:	3060      	adds	r0, #96	; 0x60
 80010de:	4283      	cmp	r3, r0
 80010e0:	f000 8207 	beq.w	80014f2 <HAL_DMA_IRQHandler+0x472>
 80010e4:	3848      	subs	r0, #72	; 0x48
 80010e6:	4283      	cmp	r3, r0
 80010e8:	f000 8205 	beq.w	80014f6 <HAL_DMA_IRQHandler+0x476>
 80010ec:	3060      	adds	r0, #96	; 0x60
 80010ee:	4283      	cmp	r3, r0
 80010f0:	f000 8203 	beq.w	80014fa <HAL_DMA_IRQHandler+0x47a>
 80010f4:	3848      	subs	r0, #72	; 0x48
 80010f6:	4283      	cmp	r3, r0
 80010f8:	f000 8201 	beq.w	80014fe <HAL_DMA_IRQHandler+0x47e>
 80010fc:	3060      	adds	r0, #96	; 0x60
 80010fe:	4283      	cmp	r3, r0
 8001100:	bf0c      	ite	eq
 8001102:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001106:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800110a:	e1ce      	b.n	80014aa <HAL_DMA_IRQHandler+0x42a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800110c:	2208      	movs	r2, #8
 800110e:	e7da      	b.n	80010c6 <HAL_DMA_IRQHandler+0x46>
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	e7d7      	b.n	80010c6 <HAL_DMA_IRQHandler+0x46>
 8001116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111a:	e7d4      	b.n	80010c6 <HAL_DMA_IRQHandler+0x46>
 800111c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001120:	e7d1      	b.n	80010c6 <HAL_DMA_IRQHandler+0x46>
 8001122:	4a9f      	ldr	r2, [pc, #636]	; (80013a0 <HAL_DMA_IRQHandler+0x320>)
 8001124:	4291      	cmp	r1, r2
 8001126:	d957      	bls.n	80011d8 <HAL_DMA_IRQHandler+0x158>
 8001128:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800112c:	6810      	ldr	r0, [r2, #0]
 800112e:	f421 6280 	bic.w	r2, r1, #1024	; 0x400
 8001132:	4d99      	ldr	r5, [pc, #612]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 8001134:	42aa      	cmp	r2, r5
 8001136:	d013      	beq.n	8001160 <HAL_DMA_IRQHandler+0xe0>
 8001138:	3560      	adds	r5, #96	; 0x60
 800113a:	42aa      	cmp	r2, r5
 800113c:	d041      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x142>
 800113e:	3d48      	subs	r5, #72	; 0x48
 8001140:	42aa      	cmp	r2, r5
 8001142:	d040      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x146>
 8001144:	3560      	adds	r5, #96	; 0x60
 8001146:	42aa      	cmp	r2, r5
 8001148:	d040      	beq.n	80011cc <HAL_DMA_IRQHandler+0x14c>
 800114a:	3d48      	subs	r5, #72	; 0x48
 800114c:	42aa      	cmp	r2, r5
 800114e:	d040      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x152>
 8001150:	3560      	adds	r5, #96	; 0x60
 8001152:	42aa      	cmp	r2, r5
 8001154:	bf0c      	ite	eq
 8001156:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 800115a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800115e:	e000      	b.n	8001162 <HAL_DMA_IRQHandler+0xe2>
 8001160:	2208      	movs	r2, #8
 8001162:	4202      	tst	r2, r0
 8001164:	f000 80ea 	beq.w	800133c <HAL_DMA_IRQHandler+0x2bc>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001168:	680b      	ldr	r3, [r1, #0]
 800116a:	f013 0f04 	tst.w	r3, #4
 800116e:	f001 8124 	beq.w	80023ba <HAL_DMA_IRQHandler+0x133a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8001172:	680b      	ldr	r3, [r1, #0]
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	4a85      	ldr	r2, [pc, #532]	; (8001394 <HAL_DMA_IRQHandler+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	f240 8114 	bls.w	80013ac <HAL_DMA_IRQHandler+0x32c>
 8001184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001188:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800118c:	4293      	cmp	r3, r2
 800118e:	f000 80ba 	beq.w	8001306 <HAL_DMA_IRQHandler+0x286>
 8001192:	3260      	adds	r2, #96	; 0x60
 8001194:	4293      	cmp	r3, r2
 8001196:	f000 80f1 	beq.w	800137c <HAL_DMA_IRQHandler+0x2fc>
 800119a:	3a48      	subs	r2, #72	; 0x48
 800119c:	4293      	cmp	r3, r2
 800119e:	f000 80ef 	beq.w	8001380 <HAL_DMA_IRQHandler+0x300>
 80011a2:	3260      	adds	r2, #96	; 0x60
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f000 80ee 	beq.w	8001386 <HAL_DMA_IRQHandler+0x306>
 80011aa:	3a48      	subs	r2, #72	; 0x48
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f000 80ed 	beq.w	800138c <HAL_DMA_IRQHandler+0x30c>
 80011b2:	3260      	adds	r2, #96	; 0x60
 80011b4:	4293      	cmp	r3, r2
 80011b6:	bf0c      	ite	eq
 80011b8:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 80011bc:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80011c0:	e0a2      	b.n	8001308 <HAL_DMA_IRQHandler+0x288>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80011c2:	2208      	movs	r2, #8
 80011c4:	e7cd      	b.n	8001162 <HAL_DMA_IRQHandler+0xe2>
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	e7ca      	b.n	8001162 <HAL_DMA_IRQHandler+0xe2>
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	e7c7      	b.n	8001162 <HAL_DMA_IRQHandler+0xe2>
 80011d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011d6:	e7c4      	b.n	8001162 <HAL_DMA_IRQHandler+0xe2>
 80011d8:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <HAL_DMA_IRQHandler+0x324>)
 80011da:	4291      	cmp	r1, r2
 80011dc:	d949      	bls.n	8001272 <HAL_DMA_IRQHandler+0x1f2>
 80011de:	3a58      	subs	r2, #88	; 0x58
 80011e0:	6850      	ldr	r0, [r2, #4]
 80011e2:	f421 6280 	bic.w	r2, r1, #1024	; 0x400
 80011e6:	4d6c      	ldr	r5, [pc, #432]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 80011e8:	42aa      	cmp	r2, r5
 80011ea:	d013      	beq.n	8001214 <HAL_DMA_IRQHandler+0x194>
 80011ec:	3560      	adds	r5, #96	; 0x60
 80011ee:	42aa      	cmp	r2, r5
 80011f0:	d034      	beq.n	800125c <HAL_DMA_IRQHandler+0x1dc>
 80011f2:	3d48      	subs	r5, #72	; 0x48
 80011f4:	42aa      	cmp	r2, r5
 80011f6:	d033      	beq.n	8001260 <HAL_DMA_IRQHandler+0x1e0>
 80011f8:	3560      	adds	r5, #96	; 0x60
 80011fa:	42aa      	cmp	r2, r5
 80011fc:	d033      	beq.n	8001266 <HAL_DMA_IRQHandler+0x1e6>
 80011fe:	3d48      	subs	r5, #72	; 0x48
 8001200:	42aa      	cmp	r2, r5
 8001202:	d033      	beq.n	800126c <HAL_DMA_IRQHandler+0x1ec>
 8001204:	3560      	adds	r5, #96	; 0x60
 8001206:	42aa      	cmp	r2, r5
 8001208:	bf0c      	ite	eq
 800120a:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 800120e:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001212:	e000      	b.n	8001216 <HAL_DMA_IRQHandler+0x196>
 8001214:	2208      	movs	r2, #8
 8001216:	4202      	tst	r2, r0
 8001218:	f041 80d3 	bne.w	80023c2 <HAL_DMA_IRQHandler+0x1342>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 800121c:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_DMA_IRQHandler+0x328>)
 800121e:	6852      	ldr	r2, [r2, #4]
 8001220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001224:	485c      	ldr	r0, [pc, #368]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 8001226:	4283      	cmp	r3, r0
 8001228:	f000 81aa 	beq.w	8001580 <HAL_DMA_IRQHandler+0x500>
 800122c:	3060      	adds	r0, #96	; 0x60
 800122e:	4283      	cmp	r3, r0
 8001230:	f000 81ac 	beq.w	800158c <HAL_DMA_IRQHandler+0x50c>
 8001234:	3848      	subs	r0, #72	; 0x48
 8001236:	4283      	cmp	r3, r0
 8001238:	f000 81aa 	beq.w	8001590 <HAL_DMA_IRQHandler+0x510>
 800123c:	3060      	adds	r0, #96	; 0x60
 800123e:	4283      	cmp	r3, r0
 8001240:	f000 81a8 	beq.w	8001594 <HAL_DMA_IRQHandler+0x514>
 8001244:	3848      	subs	r0, #72	; 0x48
 8001246:	4283      	cmp	r3, r0
 8001248:	f000 81a6 	beq.w	8001598 <HAL_DMA_IRQHandler+0x518>
 800124c:	3060      	adds	r0, #96	; 0x60
 800124e:	4283      	cmp	r3, r0
 8001250:	bf0c      	ite	eq
 8001252:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001256:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800125a:	e192      	b.n	8001582 <HAL_DMA_IRQHandler+0x502>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800125c:	2208      	movs	r2, #8
 800125e:	e7da      	b.n	8001216 <HAL_DMA_IRQHandler+0x196>
 8001260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001264:	e7d7      	b.n	8001216 <HAL_DMA_IRQHandler+0x196>
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	e7d4      	b.n	8001216 <HAL_DMA_IRQHandler+0x196>
 800126c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001270:	e7d1      	b.n	8001216 <HAL_DMA_IRQHandler+0x196>
 8001272:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_DMA_IRQHandler+0x328>)
 8001274:	6810      	ldr	r0, [r2, #0]
 8001276:	f421 6280 	bic.w	r2, r1, #1024	; 0x400
 800127a:	4d47      	ldr	r5, [pc, #284]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 800127c:	42aa      	cmp	r2, r5
 800127e:	d013      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x228>
 8001280:	3560      	adds	r5, #96	; 0x60
 8001282:	42aa      	cmp	r2, r5
 8001284:	d034      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x270>
 8001286:	3d48      	subs	r5, #72	; 0x48
 8001288:	42aa      	cmp	r2, r5
 800128a:	d033      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x274>
 800128c:	3560      	adds	r5, #96	; 0x60
 800128e:	42aa      	cmp	r2, r5
 8001290:	d033      	beq.n	80012fa <HAL_DMA_IRQHandler+0x27a>
 8001292:	3d48      	subs	r5, #72	; 0x48
 8001294:	42aa      	cmp	r2, r5
 8001296:	d033      	beq.n	8001300 <HAL_DMA_IRQHandler+0x280>
 8001298:	3560      	adds	r5, #96	; 0x60
 800129a:	42aa      	cmp	r2, r5
 800129c:	bf0c      	ite	eq
 800129e:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80012a2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80012a6:	e000      	b.n	80012aa <HAL_DMA_IRQHandler+0x22a>
 80012a8:	2208      	movs	r2, #8
 80012aa:	4202      	tst	r2, r0
 80012ac:	f041 8092 	bne.w	80023d4 <HAL_DMA_IRQHandler+0x1354>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <HAL_DMA_IRQHandler+0x328>)
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b8:	4837      	ldr	r0, [pc, #220]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 80012ba:	4283      	cmp	r3, r0
 80012bc:	f000 816f 	beq.w	800159e <HAL_DMA_IRQHandler+0x51e>
 80012c0:	3060      	adds	r0, #96	; 0x60
 80012c2:	4283      	cmp	r3, r0
 80012c4:	f000 8190 	beq.w	80015e8 <HAL_DMA_IRQHandler+0x568>
 80012c8:	3848      	subs	r0, #72	; 0x48
 80012ca:	4283      	cmp	r3, r0
 80012cc:	f000 818e 	beq.w	80015ec <HAL_DMA_IRQHandler+0x56c>
 80012d0:	3060      	adds	r0, #96	; 0x60
 80012d2:	4283      	cmp	r3, r0
 80012d4:	f000 818c 	beq.w	80015f0 <HAL_DMA_IRQHandler+0x570>
 80012d8:	3848      	subs	r0, #72	; 0x48
 80012da:	4283      	cmp	r3, r0
 80012dc:	f000 818a 	beq.w	80015f4 <HAL_DMA_IRQHandler+0x574>
 80012e0:	3060      	adds	r0, #96	; 0x60
 80012e2:	4283      	cmp	r3, r0
 80012e4:	bf0c      	ite	eq
 80012e6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80012ea:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80012ee:	e157      	b.n	80015a0 <HAL_DMA_IRQHandler+0x520>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80012f0:	2208      	movs	r2, #8
 80012f2:	e7da      	b.n	80012aa <HAL_DMA_IRQHandler+0x22a>
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	e7d7      	b.n	80012aa <HAL_DMA_IRQHandler+0x22a>
 80012fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fe:	e7d4      	b.n	80012aa <HAL_DMA_IRQHandler+0x22a>
 8001300:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001304:	e7d1      	b.n	80012aa <HAL_DMA_IRQHandler+0x22a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001306:	2308      	movs	r3, #8
 8001308:	4a24      	ldr	r2, [pc, #144]	; (800139c <HAL_DMA_IRQHandler+0x31c>)
 800130a:	60d3      	str	r3, [r2, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800130c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8001314:	2304      	movs	r3, #4
 8001316:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800131a:	2300      	movs	r3, #0
 800131c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001320:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001322:	b10b      	cbz	r3, 8001328 <HAL_DMA_IRQHandler+0x2a8>
        hdma->XferErrorCallback(hdma);
 8001324:	4620      	mov	r0, r4
 8001326:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 8001328:	6821      	ldr	r1, [r4, #0]
 800132a:	460b      	mov	r3, r1
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_DMA_IRQHandler+0x314>)
 800132e:	4291      	cmp	r1, r2
 8001330:	f63f aecc 	bhi.w	80010cc <HAL_DMA_IRQHandler+0x4c>
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_DMA_IRQHandler+0x320>)
 8001336:	4291      	cmp	r1, r2
 8001338:	f240 811d 	bls.w	8001576 <HAL_DMA_IRQHandler+0x4f6>
 800133c:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_DMA_IRQHandler+0x31c>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <HAL_DMA_IRQHandler+0x318>)
 8001346:	4283      	cmp	r3, r0
 8001348:	f000 80dc 	beq.w	8001504 <HAL_DMA_IRQHandler+0x484>
 800134c:	3060      	adds	r0, #96	; 0x60
 800134e:	4283      	cmp	r3, r0
 8001350:	f000 8108 	beq.w	8001564 <HAL_DMA_IRQHandler+0x4e4>
 8001354:	3848      	subs	r0, #72	; 0x48
 8001356:	4283      	cmp	r3, r0
 8001358:	f000 8106 	beq.w	8001568 <HAL_DMA_IRQHandler+0x4e8>
 800135c:	3060      	adds	r0, #96	; 0x60
 800135e:	4283      	cmp	r3, r0
 8001360:	f000 8104 	beq.w	800156c <HAL_DMA_IRQHandler+0x4ec>
 8001364:	3848      	subs	r0, #72	; 0x48
 8001366:	4283      	cmp	r3, r0
 8001368:	f000 8102 	beq.w	8001570 <HAL_DMA_IRQHandler+0x4f0>
 800136c:	3060      	adds	r0, #96	; 0x60
 800136e:	4283      	cmp	r3, r0
 8001370:	bf0c      	ite	eq
 8001372:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001376:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800137a:	e0c4      	b.n	8001506 <HAL_DMA_IRQHandler+0x486>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800137c:	2308      	movs	r3, #8
 800137e:	e7c3      	b.n	8001308 <HAL_DMA_IRQHandler+0x288>
 8001380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001384:	e7c0      	b.n	8001308 <HAL_DMA_IRQHandler+0x288>
 8001386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138a:	e7bd      	b.n	8001308 <HAL_DMA_IRQHandler+0x288>
 800138c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001390:	e7ba      	b.n	8001308 <HAL_DMA_IRQHandler+0x288>
 8001392:	bf00      	nop
 8001394:	40026458 	.word	0x40026458
 8001398:	40026010 	.word	0x40026010
 800139c:	40026400 	.word	0x40026400
 80013a0:	400260b8 	.word	0x400260b8
 80013a4:	40026058 	.word	0x40026058
 80013a8:	40026000 	.word	0x40026000
 80013ac:	4ab5      	ldr	r2, [pc, #724]	; (8001684 <HAL_DMA_IRQHandler+0x604>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d927      	bls.n	8001402 <HAL_DMA_IRQHandler+0x382>
 80013b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013b6:	3aa8      	subs	r2, #168	; 0xa8
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d013      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x364>
 80013bc:	3260      	adds	r2, #96	; 0x60
 80013be:	4293      	cmp	r3, r2
 80013c0:	d014      	beq.n	80013ec <HAL_DMA_IRQHandler+0x36c>
 80013c2:	3a48      	subs	r2, #72	; 0x48
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x370>
 80013c8:	3260      	adds	r2, #96	; 0x60
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x376>
 80013ce:	3a48      	subs	r2, #72	; 0x48
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x37c>
 80013d4:	3260      	adds	r2, #96	; 0x60
 80013d6:	4293      	cmp	r3, r2
 80013d8:	bf0c      	ite	eq
 80013da:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 80013de:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80013e2:	e000      	b.n	80013e6 <HAL_DMA_IRQHandler+0x366>
 80013e4:	2308      	movs	r3, #8
 80013e6:	4aa8      	ldr	r2, [pc, #672]	; (8001688 <HAL_DMA_IRQHandler+0x608>)
 80013e8:	6093      	str	r3, [r2, #8]
 80013ea:	e78f      	b.n	800130c <HAL_DMA_IRQHandler+0x28c>
 80013ec:	2308      	movs	r3, #8
 80013ee:	e7fa      	b.n	80013e6 <HAL_DMA_IRQHandler+0x366>
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	e7f7      	b.n	80013e6 <HAL_DMA_IRQHandler+0x366>
 80013f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fa:	e7f4      	b.n	80013e6 <HAL_DMA_IRQHandler+0x366>
 80013fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001400:	e7f1      	b.n	80013e6 <HAL_DMA_IRQHandler+0x366>
 8001402:	4aa2      	ldr	r2, [pc, #648]	; (800168c <HAL_DMA_IRQHandler+0x60c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d927      	bls.n	8001458 <HAL_DMA_IRQHandler+0x3d8>
 8001408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800140c:	3a48      	subs	r2, #72	; 0x48
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_DMA_IRQHandler+0x3ba>
 8001412:	3260      	adds	r2, #96	; 0x60
 8001414:	4293      	cmp	r3, r2
 8001416:	d014      	beq.n	8001442 <HAL_DMA_IRQHandler+0x3c2>
 8001418:	3a48      	subs	r2, #72	; 0x48
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_DMA_IRQHandler+0x3c6>
 800141e:	3260      	adds	r2, #96	; 0x60
 8001420:	4293      	cmp	r3, r2
 8001422:	d013      	beq.n	800144c <HAL_DMA_IRQHandler+0x3cc>
 8001424:	3a48      	subs	r2, #72	; 0x48
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_DMA_IRQHandler+0x3d2>
 800142a:	3260      	adds	r2, #96	; 0x60
 800142c:	4293      	cmp	r3, r2
 800142e:	bf0c      	ite	eq
 8001430:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8001434:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001438:	e000      	b.n	800143c <HAL_DMA_IRQHandler+0x3bc>
 800143a:	2308      	movs	r3, #8
 800143c:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_DMA_IRQHandler+0x610>)
 800143e:	60d3      	str	r3, [r2, #12]
 8001440:	e764      	b.n	800130c <HAL_DMA_IRQHandler+0x28c>
 8001442:	2308      	movs	r3, #8
 8001444:	e7fa      	b.n	800143c <HAL_DMA_IRQHandler+0x3bc>
 8001446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144a:	e7f7      	b.n	800143c <HAL_DMA_IRQHandler+0x3bc>
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	e7f4      	b.n	800143c <HAL_DMA_IRQHandler+0x3bc>
 8001452:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001456:	e7f1      	b.n	800143c <HAL_DMA_IRQHandler+0x3bc>
 8001458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800145c:	4a8d      	ldr	r2, [pc, #564]	; (8001694 <HAL_DMA_IRQHandler+0x614>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_DMA_IRQHandler+0x40a>
 8001462:	3260      	adds	r2, #96	; 0x60
 8001464:	4293      	cmp	r3, r2
 8001466:	d014      	beq.n	8001492 <HAL_DMA_IRQHandler+0x412>
 8001468:	3a48      	subs	r2, #72	; 0x48
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_DMA_IRQHandler+0x416>
 800146e:	3260      	adds	r2, #96	; 0x60
 8001470:	4293      	cmp	r3, r2
 8001472:	d013      	beq.n	800149c <HAL_DMA_IRQHandler+0x41c>
 8001474:	3a48      	subs	r2, #72	; 0x48
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x422>
 800147a:	3260      	adds	r2, #96	; 0x60
 800147c:	4293      	cmp	r3, r2
 800147e:	bf0c      	ite	eq
 8001480:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8001484:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001488:	e000      	b.n	800148c <HAL_DMA_IRQHandler+0x40c>
 800148a:	2308      	movs	r3, #8
 800148c:	4a80      	ldr	r2, [pc, #512]	; (8001690 <HAL_DMA_IRQHandler+0x610>)
 800148e:	6093      	str	r3, [r2, #8]
 8001490:	e73c      	b.n	800130c <HAL_DMA_IRQHandler+0x28c>
 8001492:	2308      	movs	r3, #8
 8001494:	e7fa      	b.n	800148c <HAL_DMA_IRQHandler+0x40c>
 8001496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149a:	e7f7      	b.n	800148c <HAL_DMA_IRQHandler+0x40c>
 800149c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a0:	e7f4      	b.n	800148c <HAL_DMA_IRQHandler+0x40c>
 80014a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014a6:	e7f1      	b.n	800148c <HAL_DMA_IRQHandler+0x40c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80014a8:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 80014aa:	4213      	tst	r3, r2
 80014ac:	d12e      	bne.n	800150c <HAL_DMA_IRQHandler+0x48c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	4975      	ldr	r1, [pc, #468]	; (8001688 <HAL_DMA_IRQHandler+0x608>)
 80014b4:	6849      	ldr	r1, [r1, #4]
 80014b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ba:	4876      	ldr	r0, [pc, #472]	; (8001694 <HAL_DMA_IRQHandler+0x614>)
 80014bc:	4283      	cmp	r3, r0
 80014be:	f000 8167 	beq.w	8001790 <HAL_DMA_IRQHandler+0x710>
 80014c2:	3060      	adds	r0, #96	; 0x60
 80014c4:	4283      	cmp	r3, r0
 80014c6:	f000 8188 	beq.w	80017da <HAL_DMA_IRQHandler+0x75a>
 80014ca:	3848      	subs	r0, #72	; 0x48
 80014cc:	4283      	cmp	r3, r0
 80014ce:	f000 8186 	beq.w	80017de <HAL_DMA_IRQHandler+0x75e>
 80014d2:	3060      	adds	r0, #96	; 0x60
 80014d4:	4283      	cmp	r3, r0
 80014d6:	f000 8185 	beq.w	80017e4 <HAL_DMA_IRQHandler+0x764>
 80014da:	3848      	subs	r0, #72	; 0x48
 80014dc:	4283      	cmp	r3, r0
 80014de:	f000 8184 	beq.w	80017ea <HAL_DMA_IRQHandler+0x76a>
 80014e2:	3060      	adds	r0, #96	; 0x60
 80014e4:	4283      	cmp	r3, r0
 80014e6:	bf0c      	ite	eq
 80014e8:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 80014ec:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80014f0:	e14f      	b.n	8001792 <HAL_DMA_IRQHandler+0x712>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80014f2:	4b69      	ldr	r3, [pc, #420]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 80014f4:	e7d9      	b.n	80014aa <HAL_DMA_IRQHandler+0x42a>
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	e7d7      	b.n	80014aa <HAL_DMA_IRQHandler+0x42a>
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	e7d5      	b.n	80014aa <HAL_DMA_IRQHandler+0x42a>
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	e7d2      	b.n	80014aa <HAL_DMA_IRQHandler+0x42a>
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 8001506:	4213      	tst	r3, r2
 8001508:	f000 874c 	beq.w	80023a4 <HAL_DMA_IRQHandler+0x1324>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800150c:	694b      	ldr	r3, [r1, #20]
 800150e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001512:	f000 8083 	beq.w	800161c <HAL_DMA_IRQHandler+0x59c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8001516:	694b      	ldr	r3, [r1, #20]
 8001518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800151c:	614b      	str	r3, [r1, #20]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	4a5e      	ldr	r2, [pc, #376]	; (800169c <HAL_DMA_IRQHandler+0x61c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	f240 80bc 	bls.w	80016a0 <HAL_DMA_IRQHandler+0x620>
 8001528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800152c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8001530:	4293      	cmp	r3, r2
 8001532:	d062      	beq.n	80015fa <HAL_DMA_IRQHandler+0x57a>
 8001534:	3260      	adds	r2, #96	; 0x60
 8001536:	4293      	cmp	r3, r2
 8001538:	f000 809a 	beq.w	8001670 <HAL_DMA_IRQHandler+0x5f0>
 800153c:	3a48      	subs	r2, #72	; 0x48
 800153e:	4293      	cmp	r3, r2
 8001540:	f000 8098 	beq.w	8001674 <HAL_DMA_IRQHandler+0x5f4>
 8001544:	3260      	adds	r2, #96	; 0x60
 8001546:	4293      	cmp	r3, r2
 8001548:	f000 8096 	beq.w	8001678 <HAL_DMA_IRQHandler+0x5f8>
 800154c:	3a48      	subs	r2, #72	; 0x48
 800154e:	4293      	cmp	r3, r2
 8001550:	f000 8094 	beq.w	800167c <HAL_DMA_IRQHandler+0x5fc>
 8001554:	3260      	adds	r2, #96	; 0x60
 8001556:	4293      	cmp	r3, r2
 8001558:	bf0c      	ite	eq
 800155a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800155e:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001562:	e04b      	b.n	80015fc <HAL_DMA_IRQHandler+0x57c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 8001566:	e7ce      	b.n	8001506 <HAL_DMA_IRQHandler+0x486>
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	e7cc      	b.n	8001506 <HAL_DMA_IRQHandler+0x486>
 800156c:	2340      	movs	r3, #64	; 0x40
 800156e:	e7ca      	b.n	8001506 <HAL_DMA_IRQHandler+0x486>
 8001570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001574:	e7c7      	b.n	8001506 <HAL_DMA_IRQHandler+0x486>
 8001576:	4a45      	ldr	r2, [pc, #276]	; (800168c <HAL_DMA_IRQHandler+0x60c>)
 8001578:	4291      	cmp	r1, r2
 800157a:	f63f ae4f 	bhi.w	800121c <HAL_DMA_IRQHandler+0x19c>
 800157e:	e697      	b.n	80012b0 <HAL_DMA_IRQHandler+0x230>
 8001580:	4b45      	ldr	r3, [pc, #276]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 8001582:	4213      	tst	r3, r2
 8001584:	d1c2      	bne.n	800150c <HAL_DMA_IRQHandler+0x48c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	e171      	b.n	8001870 <HAL_DMA_IRQHandler+0x7f0>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 800158e:	e7f8      	b.n	8001582 <HAL_DMA_IRQHandler+0x502>
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	e7f6      	b.n	8001582 <HAL_DMA_IRQHandler+0x502>
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	e7f4      	b.n	8001582 <HAL_DMA_IRQHandler+0x502>
 8001598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159c:	e7f1      	b.n	8001582 <HAL_DMA_IRQHandler+0x502>
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 80015a0:	4213      	tst	r3, r2
 80015a2:	d1b3      	bne.n	800150c <HAL_DMA_IRQHandler+0x48c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	4613      	mov	r3, r2
 80015a8:	4939      	ldr	r1, [pc, #228]	; (8001690 <HAL_DMA_IRQHandler+0x610>)
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015b0:	4838      	ldr	r0, [pc, #224]	; (8001694 <HAL_DMA_IRQHandler+0x614>)
 80015b2:	4283      	cmp	r3, r0
 80015b4:	f000 81a7 	beq.w	8001906 <HAL_DMA_IRQHandler+0x886>
 80015b8:	3060      	adds	r0, #96	; 0x60
 80015ba:	4283      	cmp	r3, r0
 80015bc:	f000 81aa 	beq.w	8001914 <HAL_DMA_IRQHandler+0x894>
 80015c0:	3848      	subs	r0, #72	; 0x48
 80015c2:	4283      	cmp	r3, r0
 80015c4:	f000 81a8 	beq.w	8001918 <HAL_DMA_IRQHandler+0x898>
 80015c8:	3060      	adds	r0, #96	; 0x60
 80015ca:	4283      	cmp	r3, r0
 80015cc:	f000 81a7 	beq.w	800191e <HAL_DMA_IRQHandler+0x89e>
 80015d0:	3848      	subs	r0, #72	; 0x48
 80015d2:	4283      	cmp	r3, r0
 80015d4:	f000 81a6 	beq.w	8001924 <HAL_DMA_IRQHandler+0x8a4>
 80015d8:	3060      	adds	r0, #96	; 0x60
 80015da:	4283      	cmp	r3, r0
 80015dc:	bf0c      	ite	eq
 80015de:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 80015e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80015e6:	e18f      	b.n	8001908 <HAL_DMA_IRQHandler+0x888>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 80015ea:	e7d9      	b.n	80015a0 <HAL_DMA_IRQHandler+0x520>
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	e7d7      	b.n	80015a0 <HAL_DMA_IRQHandler+0x520>
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	e7d5      	b.n	80015a0 <HAL_DMA_IRQHandler+0x520>
 80015f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f8:	e7d2      	b.n	80015a0 <HAL_DMA_IRQHandler+0x520>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_DMA_IRQHandler+0x608>)
 80015fe:	60d3      	str	r3, [r2, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001600:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8001608:	2304      	movs	r3, #4
 800160a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001616:	b10b      	cbz	r3, 800161c <HAL_DMA_IRQHandler+0x59c>
        hdma->XferErrorCallback(hdma);
 8001618:	4620      	mov	r0, r4
 800161a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	4613      	mov	r3, r2
 8001620:	491e      	ldr	r1, [pc, #120]	; (800169c <HAL_DMA_IRQHandler+0x61c>)
 8001622:	428a      	cmp	r2, r1
 8001624:	f63f af45 	bhi.w	80014b2 <HAL_DMA_IRQHandler+0x432>
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <HAL_DMA_IRQHandler+0x604>)
 800162a:	428a      	cmp	r2, r1
 800162c:	f240 811c 	bls.w	8001868 <HAL_DMA_IRQHandler+0x7e8>
 8001630:	4915      	ldr	r1, [pc, #84]	; (8001688 <HAL_DMA_IRQHandler+0x608>)
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <HAL_DMA_IRQHandler+0x614>)
 800163a:	4283      	cmp	r3, r0
 800163c:	f000 80d8 	beq.w	80017f0 <HAL_DMA_IRQHandler+0x770>
 8001640:	3060      	adds	r0, #96	; 0x60
 8001642:	4283      	cmp	r3, r0
 8001644:	f000 8105 	beq.w	8001852 <HAL_DMA_IRQHandler+0x7d2>
 8001648:	3848      	subs	r0, #72	; 0x48
 800164a:	4283      	cmp	r3, r0
 800164c:	f000 8103 	beq.w	8001856 <HAL_DMA_IRQHandler+0x7d6>
 8001650:	3060      	adds	r0, #96	; 0x60
 8001652:	4283      	cmp	r3, r0
 8001654:	f000 8102 	beq.w	800185c <HAL_DMA_IRQHandler+0x7dc>
 8001658:	3848      	subs	r0, #72	; 0x48
 800165a:	4283      	cmp	r3, r0
 800165c:	f000 8101 	beq.w	8001862 <HAL_DMA_IRQHandler+0x7e2>
 8001660:	3060      	adds	r0, #96	; 0x60
 8001662:	4283      	cmp	r3, r0
 8001664:	bf0c      	ite	eq
 8001666:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800166a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800166e:	e0c0      	b.n	80017f2 <HAL_DMA_IRQHandler+0x772>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_DMA_IRQHandler+0x618>)
 8001672:	e7c3      	b.n	80015fc <HAL_DMA_IRQHandler+0x57c>
 8001674:	2340      	movs	r3, #64	; 0x40
 8001676:	e7c1      	b.n	80015fc <HAL_DMA_IRQHandler+0x57c>
 8001678:	2340      	movs	r3, #64	; 0x40
 800167a:	e7bf      	b.n	80015fc <HAL_DMA_IRQHandler+0x57c>
 800167c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001680:	e7bc      	b.n	80015fc <HAL_DMA_IRQHandler+0x57c>
 8001682:	bf00      	nop
 8001684:	400260b8 	.word	0x400260b8
 8001688:	40026400 	.word	0x40026400
 800168c:	40026058 	.word	0x40026058
 8001690:	40026000 	.word	0x40026000
 8001694:	40026010 	.word	0x40026010
 8001698:	00800001 	.word	0x00800001
 800169c:	40026458 	.word	0x40026458
 80016a0:	4aa2      	ldr	r2, [pc, #648]	; (800192c <HAL_DMA_IRQHandler+0x8ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d925      	bls.n	80016f2 <HAL_DMA_IRQHandler+0x672>
 80016a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016aa:	3aa8      	subs	r2, #168	; 0xa8
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x658>
 80016b0:	3260      	adds	r2, #96	; 0x60
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d014      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x660>
 80016b6:	3a48      	subs	r2, #72	; 0x48
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_DMA_IRQHandler+0x664>
 80016bc:	3260      	adds	r2, #96	; 0x60
 80016be:	4293      	cmp	r3, r2
 80016c0:	d012      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x668>
 80016c2:	3a48      	subs	r2, #72	; 0x48
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d011      	beq.n	80016ec <HAL_DMA_IRQHandler+0x66c>
 80016c8:	3260      	adds	r2, #96	; 0x60
 80016ca:	4293      	cmp	r3, r2
 80016cc:	bf0c      	ite	eq
 80016ce:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80016d2:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80016d6:	e000      	b.n	80016da <HAL_DMA_IRQHandler+0x65a>
 80016d8:	4b95      	ldr	r3, [pc, #596]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 80016da:	4a96      	ldr	r2, [pc, #600]	; (8001934 <HAL_DMA_IRQHandler+0x8b4>)
 80016dc:	6093      	str	r3, [r2, #8]
 80016de:	e78f      	b.n	8001600 <HAL_DMA_IRQHandler+0x580>
 80016e0:	4b93      	ldr	r3, [pc, #588]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 80016e2:	e7fa      	b.n	80016da <HAL_DMA_IRQHandler+0x65a>
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	e7f8      	b.n	80016da <HAL_DMA_IRQHandler+0x65a>
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	e7f6      	b.n	80016da <HAL_DMA_IRQHandler+0x65a>
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	e7f3      	b.n	80016da <HAL_DMA_IRQHandler+0x65a>
 80016f2:	4a91      	ldr	r2, [pc, #580]	; (8001938 <HAL_DMA_IRQHandler+0x8b8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d925      	bls.n	8001744 <HAL_DMA_IRQHandler+0x6c4>
 80016f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016fc:	3a48      	subs	r2, #72	; 0x48
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_DMA_IRQHandler+0x6aa>
 8001702:	3260      	adds	r2, #96	; 0x60
 8001704:	4293      	cmp	r3, r2
 8001706:	d014      	beq.n	8001732 <HAL_DMA_IRQHandler+0x6b2>
 8001708:	3a48      	subs	r2, #72	; 0x48
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_DMA_IRQHandler+0x6b6>
 800170e:	3260      	adds	r2, #96	; 0x60
 8001710:	4293      	cmp	r3, r2
 8001712:	d012      	beq.n	800173a <HAL_DMA_IRQHandler+0x6ba>
 8001714:	3a48      	subs	r2, #72	; 0x48
 8001716:	4293      	cmp	r3, r2
 8001718:	d011      	beq.n	800173e <HAL_DMA_IRQHandler+0x6be>
 800171a:	3260      	adds	r2, #96	; 0x60
 800171c:	4293      	cmp	r3, r2
 800171e:	bf0c      	ite	eq
 8001720:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001724:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001728:	e000      	b.n	800172c <HAL_DMA_IRQHandler+0x6ac>
 800172a:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 800172c:	4a83      	ldr	r2, [pc, #524]	; (800193c <HAL_DMA_IRQHandler+0x8bc>)
 800172e:	60d3      	str	r3, [r2, #12]
 8001730:	e766      	b.n	8001600 <HAL_DMA_IRQHandler+0x580>
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 8001734:	e7fa      	b.n	800172c <HAL_DMA_IRQHandler+0x6ac>
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	e7f8      	b.n	800172c <HAL_DMA_IRQHandler+0x6ac>
 800173a:	2340      	movs	r3, #64	; 0x40
 800173c:	e7f6      	b.n	800172c <HAL_DMA_IRQHandler+0x6ac>
 800173e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001742:	e7f3      	b.n	800172c <HAL_DMA_IRQHandler+0x6ac>
 8001744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001748:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <HAL_DMA_IRQHandler+0x8c0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_DMA_IRQHandler+0x6f6>
 800174e:	3260      	adds	r2, #96	; 0x60
 8001750:	4293      	cmp	r3, r2
 8001752:	d014      	beq.n	800177e <HAL_DMA_IRQHandler+0x6fe>
 8001754:	3a48      	subs	r2, #72	; 0x48
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_DMA_IRQHandler+0x702>
 800175a:	3260      	adds	r2, #96	; 0x60
 800175c:	4293      	cmp	r3, r2
 800175e:	d012      	beq.n	8001786 <HAL_DMA_IRQHandler+0x706>
 8001760:	3a48      	subs	r2, #72	; 0x48
 8001762:	4293      	cmp	r3, r2
 8001764:	d011      	beq.n	800178a <HAL_DMA_IRQHandler+0x70a>
 8001766:	3260      	adds	r2, #96	; 0x60
 8001768:	4293      	cmp	r3, r2
 800176a:	bf0c      	ite	eq
 800176c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001770:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001774:	e000      	b.n	8001778 <HAL_DMA_IRQHandler+0x6f8>
 8001776:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 8001778:	4a70      	ldr	r2, [pc, #448]	; (800193c <HAL_DMA_IRQHandler+0x8bc>)
 800177a:	6093      	str	r3, [r2, #8]
 800177c:	e740      	b.n	8001600 <HAL_DMA_IRQHandler+0x580>
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_DMA_IRQHandler+0x8b0>)
 8001780:	e7fa      	b.n	8001778 <HAL_DMA_IRQHandler+0x6f8>
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	e7f8      	b.n	8001778 <HAL_DMA_IRQHandler+0x6f8>
 8001786:	2340      	movs	r3, #64	; 0x40
 8001788:	e7f6      	b.n	8001778 <HAL_DMA_IRQHandler+0x6f8>
 800178a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178e:	e7f3      	b.n	8001778 <HAL_DMA_IRQHandler+0x6f8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8001790:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 8001792:	420b      	tst	r3, r1
 8001794:	d130      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x778>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	4611      	mov	r1, r2
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <HAL_DMA_IRQHandler+0x8b4>)
 800179c:	6858      	ldr	r0, [r3, #4]
 800179e:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 80017a2:	4d67      	ldr	r5, [pc, #412]	; (8001940 <HAL_DMA_IRQHandler+0x8c0>)
 80017a4:	42ab      	cmp	r3, r5
 80017a6:	f000 8195 	beq.w	8001ad4 <HAL_DMA_IRQHandler+0xa54>
 80017aa:	3560      	adds	r5, #96	; 0x60
 80017ac:	42ab      	cmp	r3, r5
 80017ae:	f000 81b6 	beq.w	8001b1e <HAL_DMA_IRQHandler+0xa9e>
 80017b2:	3d48      	subs	r5, #72	; 0x48
 80017b4:	42ab      	cmp	r3, r5
 80017b6:	f000 81b4 	beq.w	8001b22 <HAL_DMA_IRQHandler+0xaa2>
 80017ba:	3560      	adds	r5, #96	; 0x60
 80017bc:	42ab      	cmp	r3, r5
 80017be:	f000 81b3 	beq.w	8001b28 <HAL_DMA_IRQHandler+0xaa8>
 80017c2:	3d48      	subs	r5, #72	; 0x48
 80017c4:	42ab      	cmp	r3, r5
 80017c6:	f000 81b2 	beq.w	8001b2e <HAL_DMA_IRQHandler+0xaae>
 80017ca:	3560      	adds	r5, #96	; 0x60
 80017cc:	42ab      	cmp	r3, r5
 80017ce:	bf0c      	ite	eq
 80017d0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80017d4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80017d8:	e17d      	b.n	8001ad6 <HAL_DMA_IRQHandler+0xa56>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 80017da:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 80017dc:	e7d9      	b.n	8001792 <HAL_DMA_IRQHandler+0x712>
 80017de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e2:	e7d6      	b.n	8001792 <HAL_DMA_IRQHandler+0x712>
 80017e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e8:	e7d3      	b.n	8001792 <HAL_DMA_IRQHandler+0x712>
 80017ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017ee:	e7d0      	b.n	8001792 <HAL_DMA_IRQHandler+0x712>
 80017f0:	4b54      	ldr	r3, [pc, #336]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 80017f2:	420b      	tst	r3, r1
 80017f4:	f000 85da 	beq.w	80023ac <HAL_DMA_IRQHandler+0x132c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	f013 0f02 	tst.w	r3, #2
 80017fe:	f000 80b6 	beq.w	800196e <HAL_DMA_IRQHandler+0x8ee>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f023 0302 	bic.w	r3, r3, #2
 8001808:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_DMA_IRQHandler+0x8c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f240 80e2 	bls.w	80019d8 <HAL_DMA_IRQHandler+0x958>
 8001814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001818:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800181c:	4293      	cmp	r3, r2
 800181e:	f000 8095 	beq.w	800194c <HAL_DMA_IRQHandler+0x8cc>
 8001822:	3260      	adds	r2, #96	; 0x60
 8001824:	4293      	cmp	r3, r2
 8001826:	f000 80cc 	beq.w	80019c2 <HAL_DMA_IRQHandler+0x942>
 800182a:	3a48      	subs	r2, #72	; 0x48
 800182c:	4293      	cmp	r3, r2
 800182e:	f000 80ca 	beq.w	80019c6 <HAL_DMA_IRQHandler+0x946>
 8001832:	3260      	adds	r2, #96	; 0x60
 8001834:	4293      	cmp	r3, r2
 8001836:	f000 80c9 	beq.w	80019cc <HAL_DMA_IRQHandler+0x94c>
 800183a:	3a48      	subs	r2, #72	; 0x48
 800183c:	4293      	cmp	r3, r2
 800183e:	f000 80c8 	beq.w	80019d2 <HAL_DMA_IRQHandler+0x952>
 8001842:	3260      	adds	r2, #96	; 0x60
 8001844:	4293      	cmp	r3, r2
 8001846:	bf0c      	ite	eq
 8001848:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800184c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001850:	e07d      	b.n	800194e <HAL_DMA_IRQHandler+0x8ce>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 8001854:	e7cd      	b.n	80017f2 <HAL_DMA_IRQHandler+0x772>
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	e7ca      	b.n	80017f2 <HAL_DMA_IRQHandler+0x772>
 800185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001860:	e7c7      	b.n	80017f2 <HAL_DMA_IRQHandler+0x772>
 8001862:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001866:	e7c4      	b.n	80017f2 <HAL_DMA_IRQHandler+0x772>
 8001868:	4933      	ldr	r1, [pc, #204]	; (8001938 <HAL_DMA_IRQHandler+0x8b8>)
 800186a:	428a      	cmp	r2, r1
 800186c:	f67f ae9c 	bls.w	80015a8 <HAL_DMA_IRQHandler+0x528>
 8001870:	4932      	ldr	r1, [pc, #200]	; (800193c <HAL_DMA_IRQHandler+0x8bc>)
 8001872:	6849      	ldr	r1, [r1, #4]
 8001874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001878:	4831      	ldr	r0, [pc, #196]	; (8001940 <HAL_DMA_IRQHandler+0x8c0>)
 800187a:	4283      	cmp	r3, r0
 800187c:	d013      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x826>
 800187e:	3060      	adds	r0, #96	; 0x60
 8001880:	4283      	cmp	r3, r0
 8001882:	d035      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x870>
 8001884:	3848      	subs	r0, #72	; 0x48
 8001886:	4283      	cmp	r3, r0
 8001888:	d034      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x874>
 800188a:	3060      	adds	r0, #96	; 0x60
 800188c:	4283      	cmp	r3, r0
 800188e:	d034      	beq.n	80018fa <HAL_DMA_IRQHandler+0x87a>
 8001890:	3848      	subs	r0, #72	; 0x48
 8001892:	4283      	cmp	r3, r0
 8001894:	d034      	beq.n	8001900 <HAL_DMA_IRQHandler+0x880>
 8001896:	3060      	adds	r0, #96	; 0x60
 8001898:	4283      	cmp	r3, r0
 800189a:	bf0c      	ite	eq
 800189c:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 80018a0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80018a4:	e000      	b.n	80018a8 <HAL_DMA_IRQHandler+0x828>
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 80018a8:	420b      	tst	r3, r1
 80018aa:	d1a5      	bne.n	80017f8 <HAL_DMA_IRQHandler+0x778>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_DMA_IRQHandler+0x8bc>)
 80018b2:	6858      	ldr	r0, [r3, #4]
 80018b4:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 80018b8:	4d21      	ldr	r5, [pc, #132]	; (8001940 <HAL_DMA_IRQHandler+0x8c0>)
 80018ba:	42ab      	cmp	r3, r5
 80018bc:	f000 8195 	beq.w	8001bea <HAL_DMA_IRQHandler+0xb6a>
 80018c0:	3560      	adds	r5, #96	; 0x60
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	f000 81b6 	beq.w	8001c34 <HAL_DMA_IRQHandler+0xbb4>
 80018c8:	3d48      	subs	r5, #72	; 0x48
 80018ca:	42ab      	cmp	r3, r5
 80018cc:	f000 81b4 	beq.w	8001c38 <HAL_DMA_IRQHandler+0xbb8>
 80018d0:	3560      	adds	r5, #96	; 0x60
 80018d2:	42ab      	cmp	r3, r5
 80018d4:	f000 81b3 	beq.w	8001c3e <HAL_DMA_IRQHandler+0xbbe>
 80018d8:	3d48      	subs	r5, #72	; 0x48
 80018da:	42ab      	cmp	r3, r5
 80018dc:	f000 81b2 	beq.w	8001c44 <HAL_DMA_IRQHandler+0xbc4>
 80018e0:	3560      	adds	r5, #96	; 0x60
 80018e2:	42ab      	cmp	r3, r5
 80018e4:	bf0c      	ite	eq
 80018e6:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80018ea:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80018ee:	e17d      	b.n	8001bec <HAL_DMA_IRQHandler+0xb6c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 80018f2:	e7d9      	b.n	80018a8 <HAL_DMA_IRQHandler+0x828>
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	e7d6      	b.n	80018a8 <HAL_DMA_IRQHandler+0x828>
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	e7d3      	b.n	80018a8 <HAL_DMA_IRQHandler+0x828>
 8001900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001904:	e7d0      	b.n	80018a8 <HAL_DMA_IRQHandler+0x828>
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 8001908:	420b      	tst	r3, r1
 800190a:	f47f af75 	bne.w	80017f8 <HAL_DMA_IRQHandler+0x778>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	e14f      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb34>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_DMA_IRQHandler+0x8c4>)
 8001916:	e7f7      	b.n	8001908 <HAL_DMA_IRQHandler+0x888>
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	e7f4      	b.n	8001908 <HAL_DMA_IRQHandler+0x888>
 800191e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001922:	e7f1      	b.n	8001908 <HAL_DMA_IRQHandler+0x888>
 8001924:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001928:	e7ee      	b.n	8001908 <HAL_DMA_IRQHandler+0x888>
 800192a:	bf00      	nop
 800192c:	400260b8 	.word	0x400260b8
 8001930:	00800001 	.word	0x00800001
 8001934:	40026400 	.word	0x40026400
 8001938:	40026058 	.word	0x40026058
 800193c:	40026000 	.word	0x40026000
 8001940:	40026010 	.word	0x40026010
 8001944:	00800004 	.word	0x00800004
 8001948:	40026458 	.word	0x40026458
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800194c:	4bbf      	ldr	r3, [pc, #764]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 800194e:	4ac0      	ldr	r2, [pc, #768]	; (8001c50 <HAL_DMA_IRQHandler+0xbd0>)
 8001950:	60d3      	str	r3, [r2, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001952:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 800195a:	2304      	movs	r3, #4
 800195c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001960:	2300      	movs	r3, #0
 8001962:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001966:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001968:	b10b      	cbz	r3, 800196e <HAL_DMA_IRQHandler+0x8ee>
        hdma->XferErrorCallback(hdma);
 800196a:	4620      	mov	r0, r4
 800196c:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	4611      	mov	r1, r2
 8001972:	4bb8      	ldr	r3, [pc, #736]	; (8001c54 <HAL_DMA_IRQHandler+0xbd4>)
 8001974:	429a      	cmp	r2, r3
 8001976:	f63f af10 	bhi.w	800179a <HAL_DMA_IRQHandler+0x71a>
 800197a:	4bb7      	ldr	r3, [pc, #732]	; (8001c58 <HAL_DMA_IRQHandler+0xbd8>)
 800197c:	429a      	cmp	r2, r3
 800197e:	f240 8115 	bls.w	8001bac <HAL_DMA_IRQHandler+0xb2c>
 8001982:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <HAL_DMA_IRQHandler+0xbd0>)
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 800198a:	4db4      	ldr	r5, [pc, #720]	; (8001c5c <HAL_DMA_IRQHandler+0xbdc>)
 800198c:	42ab      	cmp	r3, r5
 800198e:	f000 80d1 	beq.w	8001b34 <HAL_DMA_IRQHandler+0xab4>
 8001992:	3560      	adds	r5, #96	; 0x60
 8001994:	42ab      	cmp	r3, r5
 8001996:	f000 80fe 	beq.w	8001b96 <HAL_DMA_IRQHandler+0xb16>
 800199a:	3d48      	subs	r5, #72	; 0x48
 800199c:	42ab      	cmp	r3, r5
 800199e:	f000 80fc 	beq.w	8001b9a <HAL_DMA_IRQHandler+0xb1a>
 80019a2:	3560      	adds	r5, #96	; 0x60
 80019a4:	42ab      	cmp	r3, r5
 80019a6:	f000 80fb 	beq.w	8001ba0 <HAL_DMA_IRQHandler+0xb20>
 80019aa:	3d48      	subs	r5, #72	; 0x48
 80019ac:	42ab      	cmp	r3, r5
 80019ae:	f000 80fa 	beq.w	8001ba6 <HAL_DMA_IRQHandler+0xb26>
 80019b2:	3560      	adds	r5, #96	; 0x60
 80019b4:	42ab      	cmp	r3, r5
 80019b6:	bf0c      	ite	eq
 80019b8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80019bc:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80019c0:	e0b9      	b.n	8001b36 <HAL_DMA_IRQHandler+0xab6>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80019c2:	4ba2      	ldr	r3, [pc, #648]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 80019c4:	e7c3      	b.n	800194e <HAL_DMA_IRQHandler+0x8ce>
 80019c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ca:	e7c0      	b.n	800194e <HAL_DMA_IRQHandler+0x8ce>
 80019cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d0:	e7bd      	b.n	800194e <HAL_DMA_IRQHandler+0x8ce>
 80019d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019d6:	e7ba      	b.n	800194e <HAL_DMA_IRQHandler+0x8ce>
 80019d8:	4a9f      	ldr	r2, [pc, #636]	; (8001c58 <HAL_DMA_IRQHandler+0xbd8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d927      	bls.n	8001a2e <HAL_DMA_IRQHandler+0x9ae>
 80019de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019e2:	3aa8      	subs	r2, #168	; 0xa8
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x990>
 80019e8:	3260      	adds	r2, #96	; 0x60
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d014      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x998>
 80019ee:	3a48      	subs	r2, #72	; 0x48
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_DMA_IRQHandler+0x99c>
 80019f4:	3260      	adds	r2, #96	; 0x60
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x9a2>
 80019fa:	3a48      	subs	r2, #72	; 0x48
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x9a8>
 8001a00:	3260      	adds	r2, #96	; 0x60
 8001a02:	4293      	cmp	r3, r2
 8001a04:	bf0c      	ite	eq
 8001a06:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8001a0a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001a0e:	e000      	b.n	8001a12 <HAL_DMA_IRQHandler+0x992>
 8001a10:	4b8e      	ldr	r3, [pc, #568]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001a12:	4a8f      	ldr	r2, [pc, #572]	; (8001c50 <HAL_DMA_IRQHandler+0xbd0>)
 8001a14:	6093      	str	r3, [r2, #8]
 8001a16:	e79c      	b.n	8001952 <HAL_DMA_IRQHandler+0x8d2>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001a1a:	e7fa      	b.n	8001a12 <HAL_DMA_IRQHandler+0x992>
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	e7f7      	b.n	8001a12 <HAL_DMA_IRQHandler+0x992>
 8001a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a26:	e7f4      	b.n	8001a12 <HAL_DMA_IRQHandler+0x992>
 8001a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a2c:	e7f1      	b.n	8001a12 <HAL_DMA_IRQHandler+0x992>
 8001a2e:	4a8c      	ldr	r2, [pc, #560]	; (8001c60 <HAL_DMA_IRQHandler+0xbe0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d927      	bls.n	8001a84 <HAL_DMA_IRQHandler+0xa04>
 8001a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a38:	3a48      	subs	r2, #72	; 0x48
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x9e6>
 8001a3e:	3260      	adds	r2, #96	; 0x60
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d014      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x9ee>
 8001a44:	3a48      	subs	r2, #72	; 0x48
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x9f2>
 8001a4a:	3260      	adds	r2, #96	; 0x60
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x9f8>
 8001a50:	3a48      	subs	r2, #72	; 0x48
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x9fe>
 8001a56:	3260      	adds	r2, #96	; 0x60
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bf0c      	ite	eq
 8001a5c:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8001a60:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001a64:	e000      	b.n	8001a68 <HAL_DMA_IRQHandler+0x9e8>
 8001a66:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001a68:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_DMA_IRQHandler+0xbe4>)
 8001a6a:	60d3      	str	r3, [r2, #12]
 8001a6c:	e771      	b.n	8001952 <HAL_DMA_IRQHandler+0x8d2>
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001a70:	e7fa      	b.n	8001a68 <HAL_DMA_IRQHandler+0x9e8>
 8001a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a76:	e7f7      	b.n	8001a68 <HAL_DMA_IRQHandler+0x9e8>
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	e7f4      	b.n	8001a68 <HAL_DMA_IRQHandler+0x9e8>
 8001a7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a82:	e7f1      	b.n	8001a68 <HAL_DMA_IRQHandler+0x9e8>
 8001a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a88:	4a74      	ldr	r2, [pc, #464]	; (8001c5c <HAL_DMA_IRQHandler+0xbdc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0xa36>
 8001a8e:	3260      	adds	r2, #96	; 0x60
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d014      	beq.n	8001abe <HAL_DMA_IRQHandler+0xa3e>
 8001a94:	3a48      	subs	r2, #72	; 0x48
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0xa42>
 8001a9a:	3260      	adds	r2, #96	; 0x60
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0xa48>
 8001aa0:	3a48      	subs	r2, #72	; 0x48
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_DMA_IRQHandler+0xa4e>
 8001aa6:	3260      	adds	r2, #96	; 0x60
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf0c      	ite	eq
 8001aac:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8001ab0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001ab4:	e000      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xa38>
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	; (8001c64 <HAL_DMA_IRQHandler+0xbe4>)
 8001aba:	6093      	str	r3, [r2, #8]
 8001abc:	e749      	b.n	8001952 <HAL_DMA_IRQHandler+0x8d2>
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_DMA_IRQHandler+0xbcc>)
 8001ac0:	e7fa      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xa38>
 8001ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac6:	e7f7      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xa38>
 8001ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001acc:	e7f4      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xa38>
 8001ace:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad2:	e7f1      	b.n	8001ab8 <HAL_DMA_IRQHandler+0xa38>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	4203      	tst	r3, r0
 8001ad8:	d130      	bne.n	8001b3c <HAL_DMA_IRQHandler+0xabc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_DMA_IRQHandler+0xbd0>)
 8001ae0:	6858      	ldr	r0, [r3, #4]
 8001ae2:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 8001ae6:	4d5d      	ldr	r5, [pc, #372]	; (8001c5c <HAL_DMA_IRQHandler+0xbdc>)
 8001ae8:	42ab      	cmp	r3, r5
 8001aea:	f000 825c 	beq.w	8001fa6 <HAL_DMA_IRQHandler+0xf26>
 8001aee:	3560      	adds	r5, #96	; 0x60
 8001af0:	42ab      	cmp	r3, r5
 8001af2:	f000 8288 	beq.w	8002006 <HAL_DMA_IRQHandler+0xf86>
 8001af6:	3d48      	subs	r5, #72	; 0x48
 8001af8:	42ab      	cmp	r3, r5
 8001afa:	f000 8286 	beq.w	800200a <HAL_DMA_IRQHandler+0xf8a>
 8001afe:	3560      	adds	r5, #96	; 0x60
 8001b00:	42ab      	cmp	r3, r5
 8001b02:	f000 8285 	beq.w	8002010 <HAL_DMA_IRQHandler+0xf90>
 8001b06:	3d48      	subs	r5, #72	; 0x48
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	f000 8284 	beq.w	8002016 <HAL_DMA_IRQHandler+0xf96>
 8001b0e:	3560      	adds	r5, #96	; 0x60
 8001b10:	42ab      	cmp	r3, r5
 8001b12:	bf0c      	ite	eq
 8001b14:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001b18:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001b1c:	e244      	b.n	8001fa8 <HAL_DMA_IRQHandler+0xf28>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001b1e:	2310      	movs	r3, #16
 8001b20:	e7d9      	b.n	8001ad6 <HAL_DMA_IRQHandler+0xa56>
 8001b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b26:	e7d6      	b.n	8001ad6 <HAL_DMA_IRQHandler+0xa56>
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	e7d3      	b.n	8001ad6 <HAL_DMA_IRQHandler+0xa56>
 8001b2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b32:	e7d0      	b.n	8001ad6 <HAL_DMA_IRQHandler+0xa56>
 8001b34:	2310      	movs	r3, #16
 8001b36:	4203      	tst	r3, r0
 8001b38:	f000 843c 	beq.w	80023b4 <HAL_DMA_IRQHandler+0x1334>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b3c:	6813      	ldr	r3, [r2, #0]
 8001b3e:	f013 0f08 	tst.w	r3, #8
 8001b42:	f000 8171 	beq.w	8001e28 <HAL_DMA_IRQHandler+0xda8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b4c:	f000 813c 	beq.w	8001dc8 <HAL_DMA_IRQHandler+0xd48>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_DMA_IRQHandler+0xbd4>)
 8001b52:	4299      	cmp	r1, r3
 8001b54:	f240 80b2 	bls.w	8001cbc <HAL_DMA_IRQHandler+0xc3c>
 8001b58:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001b5c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001b60:	4299      	cmp	r1, r3
 8001b62:	f000 8093 	beq.w	8001c8c <HAL_DMA_IRQHandler+0xc0c>
 8001b66:	3360      	adds	r3, #96	; 0x60
 8001b68:	4299      	cmp	r1, r3
 8001b6a:	f000 809c 	beq.w	8001ca6 <HAL_DMA_IRQHandler+0xc26>
 8001b6e:	3b48      	subs	r3, #72	; 0x48
 8001b70:	4299      	cmp	r1, r3
 8001b72:	f000 809a 	beq.w	8001caa <HAL_DMA_IRQHandler+0xc2a>
 8001b76:	3360      	adds	r3, #96	; 0x60
 8001b78:	4299      	cmp	r1, r3
 8001b7a:	f000 8099 	beq.w	8001cb0 <HAL_DMA_IRQHandler+0xc30>
 8001b7e:	3b48      	subs	r3, #72	; 0x48
 8001b80:	4299      	cmp	r1, r3
 8001b82:	f000 8098 	beq.w	8001cb6 <HAL_DMA_IRQHandler+0xc36>
 8001b86:	3360      	adds	r3, #96	; 0x60
 8001b88:	4299      	cmp	r1, r3
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001b90:	f04f 6180 	movne.w	r1, #67108864	; 0x4000000
 8001b94:	e07b      	b.n	8001c8e <HAL_DMA_IRQHandler+0xc0e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001b96:	2310      	movs	r3, #16
 8001b98:	e7cd      	b.n	8001b36 <HAL_DMA_IRQHandler+0xab6>
 8001b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9e:	e7ca      	b.n	8001b36 <HAL_DMA_IRQHandler+0xab6>
 8001ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba4:	e7c7      	b.n	8001b36 <HAL_DMA_IRQHandler+0xab6>
 8001ba6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001baa:	e7c4      	b.n	8001b36 <HAL_DMA_IRQHandler+0xab6>
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_DMA_IRQHandler+0xbe0>)
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	f63f ae7e 	bhi.w	80018b0 <HAL_DMA_IRQHandler+0x830>
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_DMA_IRQHandler+0xbe4>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 8001bbc:	4d27      	ldr	r5, [pc, #156]	; (8001c5c <HAL_DMA_IRQHandler+0xbdc>)
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	d052      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xbe8>
 8001bc2:	3560      	adds	r5, #96	; 0x60
 8001bc4:	42ab      	cmp	r3, r5
 8001bc6:	d056      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xbf6>
 8001bc8:	3d48      	subs	r5, #72	; 0x48
 8001bca:	42ab      	cmp	r3, r5
 8001bcc:	d055      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xbfa>
 8001bce:	3560      	adds	r5, #96	; 0x60
 8001bd0:	42ab      	cmp	r3, r5
 8001bd2:	d055      	beq.n	8001c80 <HAL_DMA_IRQHandler+0xc00>
 8001bd4:	3d48      	subs	r5, #72	; 0x48
 8001bd6:	42ab      	cmp	r3, r5
 8001bd8:	d055      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xc06>
 8001bda:	3560      	adds	r5, #96	; 0x60
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	bf0c      	ite	eq
 8001be0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001be4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001be8:	e03f      	b.n	8001c6a <HAL_DMA_IRQHandler+0xbea>
 8001bea:	2310      	movs	r3, #16
 8001bec:	4203      	tst	r3, r0
 8001bee:	d1a5      	bne.n	8001b3c <HAL_DMA_IRQHandler+0xabc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001bf0:	6822      	ldr	r2, [r4, #0]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_DMA_IRQHandler+0xbe4>)
 8001bf6:	6858      	ldr	r0, [r3, #4]
 8001bf8:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 8001bfc:	4d17      	ldr	r5, [pc, #92]	; (8001c5c <HAL_DMA_IRQHandler+0xbdc>)
 8001bfe:	42ab      	cmp	r3, r5
 8001c00:	f000 823c 	beq.w	800207c <HAL_DMA_IRQHandler+0xffc>
 8001c04:	3560      	adds	r5, #96	; 0x60
 8001c06:	42ab      	cmp	r3, r5
 8001c08:	f000 823e 	beq.w	8002088 <HAL_DMA_IRQHandler+0x1008>
 8001c0c:	3d48      	subs	r5, #72	; 0x48
 8001c0e:	42ab      	cmp	r3, r5
 8001c10:	f000 823c 	beq.w	800208c <HAL_DMA_IRQHandler+0x100c>
 8001c14:	3560      	adds	r5, #96	; 0x60
 8001c16:	42ab      	cmp	r3, r5
 8001c18:	f000 823b 	beq.w	8002092 <HAL_DMA_IRQHandler+0x1012>
 8001c1c:	3d48      	subs	r5, #72	; 0x48
 8001c1e:	42ab      	cmp	r3, r5
 8001c20:	f000 823a 	beq.w	8002098 <HAL_DMA_IRQHandler+0x1018>
 8001c24:	3560      	adds	r5, #96	; 0x60
 8001c26:	42ab      	cmp	r3, r5
 8001c28:	bf0c      	ite	eq
 8001c2a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001c2e:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001c32:	e224      	b.n	800207e <HAL_DMA_IRQHandler+0xffe>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001c34:	2310      	movs	r3, #16
 8001c36:	e7d9      	b.n	8001bec <HAL_DMA_IRQHandler+0xb6c>
 8001c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3c:	e7d6      	b.n	8001bec <HAL_DMA_IRQHandler+0xb6c>
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	e7d3      	b.n	8001bec <HAL_DMA_IRQHandler+0xb6c>
 8001c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c48:	e7d0      	b.n	8001bec <HAL_DMA_IRQHandler+0xb6c>
 8001c4a:	bf00      	nop
 8001c4c:	00800004 	.word	0x00800004
 8001c50:	40026400 	.word	0x40026400
 8001c54:	40026458 	.word	0x40026458
 8001c58:	400260b8 	.word	0x400260b8
 8001c5c:	40026010 	.word	0x40026010
 8001c60:	40026058 	.word	0x40026058
 8001c64:	40026000 	.word	0x40026000
 8001c68:	2310      	movs	r3, #16
 8001c6a:	4203      	tst	r3, r0
 8001c6c:	f47f af66 	bne.w	8001b3c <HAL_DMA_IRQHandler+0xabc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	4611      	mov	r1, r2
 8001c74:	e1e7      	b.n	8002046 <HAL_DMA_IRQHandler+0xfc6>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8001c76:	2310      	movs	r3, #16
 8001c78:	e7f7      	b.n	8001c6a <HAL_DMA_IRQHandler+0xbea>
 8001c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7e:	e7f4      	b.n	8001c6a <HAL_DMA_IRQHandler+0xbea>
 8001c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c84:	e7f1      	b.n	8001c6a <HAL_DMA_IRQHandler+0xbea>
 8001c86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c8a:	e7ee      	b.n	8001c6a <HAL_DMA_IRQHandler+0xbea>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	4bba      	ldr	r3, [pc, #744]	; (8001f78 <HAL_DMA_IRQHandler+0xef8>)
 8001c90:	60d9      	str	r1, [r3, #12]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001c9a:	f040 808d 	bne.w	8001db8 <HAL_DMA_IRQHandler+0xd38>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8001c9e:	2331      	movs	r3, #49	; 0x31
 8001ca0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001ca4:	e0bc      	b.n	8001e20 <HAL_DMA_IRQHandler+0xda0>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	e7f1      	b.n	8001c8e <HAL_DMA_IRQHandler+0xc0e>
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	e7ee      	b.n	8001c8e <HAL_DMA_IRQHandler+0xc0e>
 8001cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb4:	e7eb      	b.n	8001c8e <HAL_DMA_IRQHandler+0xc0e>
 8001cb6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001cba:	e7e8      	b.n	8001c8e <HAL_DMA_IRQHandler+0xc0e>
 8001cbc:	4baf      	ldr	r3, [pc, #700]	; (8001f7c <HAL_DMA_IRQHandler+0xefc>)
 8001cbe:	4299      	cmp	r1, r3
 8001cc0:	d927      	bls.n	8001d12 <HAL_DMA_IRQHandler+0xc92>
 8001cc2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001cc6:	3ba8      	subs	r3, #168	; 0xa8
 8001cc8:	4299      	cmp	r1, r3
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xc74>
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d014      	beq.n	8001cfc <HAL_DMA_IRQHandler+0xc7c>
 8001cd2:	3b48      	subs	r3, #72	; 0x48
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d013      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xc80>
 8001cd8:	3360      	adds	r3, #96	; 0x60
 8001cda:	4299      	cmp	r1, r3
 8001cdc:	d013      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xc86>
 8001cde:	3b48      	subs	r3, #72	; 0x48
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xc8c>
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	4299      	cmp	r1, r3
 8001ce8:	bf0c      	ite	eq
 8001cea:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001cee:	f04f 6180 	movne.w	r1, #67108864	; 0x4000000
 8001cf2:	e000      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xc76>
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <HAL_DMA_IRQHandler+0xef8>)
 8001cf8:	6099      	str	r1, [r3, #8]
 8001cfa:	e7ca      	b.n	8001c92 <HAL_DMA_IRQHandler+0xc12>
 8001cfc:	2110      	movs	r1, #16
 8001cfe:	e7fa      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xc76>
 8001d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d04:	e7f7      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xc76>
 8001d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0a:	e7f4      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xc76>
 8001d0c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001d10:	e7f1      	b.n	8001cf6 <HAL_DMA_IRQHandler+0xc76>
 8001d12:	4b9b      	ldr	r3, [pc, #620]	; (8001f80 <HAL_DMA_IRQHandler+0xf00>)
 8001d14:	4299      	cmp	r1, r3
 8001d16:	d927      	bls.n	8001d68 <HAL_DMA_IRQHandler+0xce8>
 8001d18:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d1c:	3b48      	subs	r3, #72	; 0x48
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	d013      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xcca>
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	4299      	cmp	r1, r3
 8001d26:	d014      	beq.n	8001d52 <HAL_DMA_IRQHandler+0xcd2>
 8001d28:	3b48      	subs	r3, #72	; 0x48
 8001d2a:	4299      	cmp	r1, r3
 8001d2c:	d013      	beq.n	8001d56 <HAL_DMA_IRQHandler+0xcd6>
 8001d2e:	3360      	adds	r3, #96	; 0x60
 8001d30:	4299      	cmp	r1, r3
 8001d32:	d013      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xcdc>
 8001d34:	3b48      	subs	r3, #72	; 0x48
 8001d36:	4299      	cmp	r1, r3
 8001d38:	d013      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xce2>
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	4299      	cmp	r1, r3
 8001d3e:	bf0c      	ite	eq
 8001d40:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001d44:	f04f 6180 	movne.w	r1, #67108864	; 0x4000000
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_IRQHandler+0xccc>
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <HAL_DMA_IRQHandler+0xf04>)
 8001d4e:	60d9      	str	r1, [r3, #12]
 8001d50:	e79f      	b.n	8001c92 <HAL_DMA_IRQHandler+0xc12>
 8001d52:	2110      	movs	r1, #16
 8001d54:	e7fa      	b.n	8001d4c <HAL_DMA_IRQHandler+0xccc>
 8001d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5a:	e7f7      	b.n	8001d4c <HAL_DMA_IRQHandler+0xccc>
 8001d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d60:	e7f4      	b.n	8001d4c <HAL_DMA_IRQHandler+0xccc>
 8001d62:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001d66:	e7f1      	b.n	8001d4c <HAL_DMA_IRQHandler+0xccc>
 8001d68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d6c:	4b86      	ldr	r3, [pc, #536]	; (8001f88 <HAL_DMA_IRQHandler+0xf08>)
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_IRQHandler+0xd1a>
 8001d72:	3360      	adds	r3, #96	; 0x60
 8001d74:	4299      	cmp	r1, r3
 8001d76:	d014      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xd22>
 8001d78:	3b48      	subs	r3, #72	; 0x48
 8001d7a:	4299      	cmp	r1, r3
 8001d7c:	d013      	beq.n	8001da6 <HAL_DMA_IRQHandler+0xd26>
 8001d7e:	3360      	adds	r3, #96	; 0x60
 8001d80:	4299      	cmp	r1, r3
 8001d82:	d013      	beq.n	8001dac <HAL_DMA_IRQHandler+0xd2c>
 8001d84:	3b48      	subs	r3, #72	; 0x48
 8001d86:	4299      	cmp	r1, r3
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_IRQHandler+0xd32>
 8001d8a:	3360      	adds	r3, #96	; 0x60
 8001d8c:	4299      	cmp	r1, r3
 8001d8e:	bf0c      	ite	eq
 8001d90:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001d94:	f04f 6180 	movne.w	r1, #67108864	; 0x4000000
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd1c>
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <HAL_DMA_IRQHandler+0xf04>)
 8001d9e:	6099      	str	r1, [r3, #8]
 8001da0:	e777      	b.n	8001c92 <HAL_DMA_IRQHandler+0xc12>
 8001da2:	2110      	movs	r1, #16
 8001da4:	e7fa      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd1c>
 8001da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001daa:	e7f7      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd1c>
 8001dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db0:	e7f4      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd1c>
 8001db2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001db6:	e7f1      	b.n	8001d9c <HAL_DMA_IRQHandler+0xd1c>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001dbe:	d02f      	beq.n	8001e20 <HAL_DMA_IRQHandler+0xda0>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 8001dc0:	2341      	movs	r3, #65	; 0x41
 8001dc2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001dc6:	e02b      	b.n	8001e20 <HAL_DMA_IRQHandler+0xda0>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001dce:	d103      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0xd58>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd0:	6813      	ldr	r3, [r2, #0]
 8001dd2:	f023 0308 	bic.w	r3, r3, #8
 8001dd6:	6013      	str	r3, [r2, #0]
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	4a6c      	ldr	r2, [pc, #432]	; (8001f8c <HAL_DMA_IRQHandler+0xf0c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d958      	bls.n	8001e92 <HAL_DMA_IRQHandler+0xe12>
 8001de0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001de4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd94>
 8001dec:	3260      	adds	r2, #96	; 0x60
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d044      	beq.n	8001e7c <HAL_DMA_IRQHandler+0xdfc>
 8001df2:	3a48      	subs	r2, #72	; 0x48
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d043      	beq.n	8001e80 <HAL_DMA_IRQHandler+0xe00>
 8001df8:	3260      	adds	r2, #96	; 0x60
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d043      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xe06>
 8001dfe:	3a48      	subs	r2, #72	; 0x48
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d043      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xe0c>
 8001e04:	3260      	adds	r2, #96	; 0x60
 8001e06:	4293      	cmp	r3, r2
 8001e08:	bf0c      	ite	eq
 8001e0a:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001e0e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_IRQHandler+0xd96>
 8001e14:	2310      	movs	r3, #16
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_DMA_IRQHandler+0xef8>)
 8001e18:	60d3      	str	r3, [r2, #12]
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8001e1a:	2331      	movs	r3, #49	; 0x31
 8001e1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e22:	b10b      	cbz	r3, 8001e28 <HAL_DMA_IRQHandler+0xda8>
        hdma->XferHalfCpltCallback(hdma);
 8001e24:	4620      	mov	r0, r4
 8001e26:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_DMA_IRQHandler+0xf0c>)
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	f63f ae55 	bhi.w	8001ade <HAL_DMA_IRQHandler+0xa5e>
 8001e34:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <HAL_DMA_IRQHandler+0xefc>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f240 8101 	bls.w	800203e <HAL_DMA_IRQHandler+0xfbe>
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_DMA_IRQHandler+0xef8>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 8001e44:	4d50      	ldr	r5, [pc, #320]	; (8001f88 <HAL_DMA_IRQHandler+0xf08>)
 8001e46:	42ab      	cmp	r3, r5
 8001e48:	f000 80e8 	beq.w	800201c <HAL_DMA_IRQHandler+0xf9c>
 8001e4c:	3560      	adds	r5, #96	; 0x60
 8001e4e:	42ab      	cmp	r3, r5
 8001e50:	f000 80ea 	beq.w	8002028 <HAL_DMA_IRQHandler+0xfa8>
 8001e54:	3d48      	subs	r5, #72	; 0x48
 8001e56:	42ab      	cmp	r3, r5
 8001e58:	f000 80e8 	beq.w	800202c <HAL_DMA_IRQHandler+0xfac>
 8001e5c:	3560      	adds	r5, #96	; 0x60
 8001e5e:	42ab      	cmp	r3, r5
 8001e60:	f000 80e7 	beq.w	8002032 <HAL_DMA_IRQHandler+0xfb2>
 8001e64:	3d48      	subs	r5, #72	; 0x48
 8001e66:	42ab      	cmp	r3, r5
 8001e68:	f000 80e6 	beq.w	8002038 <HAL_DMA_IRQHandler+0xfb8>
 8001e6c:	3560      	adds	r5, #96	; 0x60
 8001e6e:	42ab      	cmp	r3, r5
 8001e70:	bf0c      	ite	eq
 8001e72:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001e76:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8001e7a:	e0d0      	b.n	800201e <HAL_DMA_IRQHandler+0xf9e>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	e7ca      	b.n	8001e16 <HAL_DMA_IRQHandler+0xd96>
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	e7c7      	b.n	8001e16 <HAL_DMA_IRQHandler+0xd96>
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	e7c4      	b.n	8001e16 <HAL_DMA_IRQHandler+0xd96>
 8001e8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e90:	e7c1      	b.n	8001e16 <HAL_DMA_IRQHandler+0xd96>
 8001e92:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_DMA_IRQHandler+0xefc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d927      	bls.n	8001ee8 <HAL_DMA_IRQHandler+0xe68>
 8001e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e9c:	3aa8      	subs	r2, #168	; 0xa8
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_DMA_IRQHandler+0xe4a>
 8001ea2:	3260      	adds	r2, #96	; 0x60
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d014      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xe52>
 8001ea8:	3a48      	subs	r2, #72	; 0x48
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0xe56>
 8001eae:	3260      	adds	r2, #96	; 0x60
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_DMA_IRQHandler+0xe5c>
 8001eb4:	3a48      	subs	r2, #72	; 0x48
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xe62>
 8001eba:	3260      	adds	r2, #96	; 0x60
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf0c      	ite	eq
 8001ec0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001ec4:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_IRQHandler+0xe4c>
 8001eca:	2310      	movs	r3, #16
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_DMA_IRQHandler+0xef8>)
 8001ece:	6093      	str	r3, [r2, #8]
 8001ed0:	e7a3      	b.n	8001e1a <HAL_DMA_IRQHandler+0xd9a>
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	e7fa      	b.n	8001ecc <HAL_DMA_IRQHandler+0xe4c>
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	e7f7      	b.n	8001ecc <HAL_DMA_IRQHandler+0xe4c>
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	e7f4      	b.n	8001ecc <HAL_DMA_IRQHandler+0xe4c>
 8001ee2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee6:	e7f1      	b.n	8001ecc <HAL_DMA_IRQHandler+0xe4c>
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <HAL_DMA_IRQHandler+0xf00>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d927      	bls.n	8001f3e <HAL_DMA_IRQHandler+0xebe>
 8001eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef2:	3a48      	subs	r2, #72	; 0x48
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_IRQHandler+0xea0>
 8001ef8:	3260      	adds	r2, #96	; 0x60
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d014      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xea8>
 8001efe:	3a48      	subs	r2, #72	; 0x48
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xeac>
 8001f04:	3260      	adds	r2, #96	; 0x60
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xeb2>
 8001f0a:	3a48      	subs	r2, #72	; 0x48
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xeb8>
 8001f10:	3260      	adds	r2, #96	; 0x60
 8001f12:	4293      	cmp	r3, r2
 8001f14:	bf0c      	ite	eq
 8001f16:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001f1a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001f1e:	e000      	b.n	8001f22 <HAL_DMA_IRQHandler+0xea2>
 8001f20:	2310      	movs	r3, #16
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_DMA_IRQHandler+0xf04>)
 8001f24:	60d3      	str	r3, [r2, #12]
 8001f26:	e778      	b.n	8001e1a <HAL_DMA_IRQHandler+0xd9a>
 8001f28:	2310      	movs	r3, #16
 8001f2a:	e7fa      	b.n	8001f22 <HAL_DMA_IRQHandler+0xea2>
 8001f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f30:	e7f7      	b.n	8001f22 <HAL_DMA_IRQHandler+0xea2>
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	e7f4      	b.n	8001f22 <HAL_DMA_IRQHandler+0xea2>
 8001f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f3c:	e7f1      	b.n	8001f22 <HAL_DMA_IRQHandler+0xea2>
 8001f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_DMA_IRQHandler+0xf08>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_DMA_IRQHandler+0xef0>
 8001f48:	3260      	adds	r2, #96	; 0x60
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d020      	beq.n	8001f90 <HAL_DMA_IRQHandler+0xf10>
 8001f4e:	3a48      	subs	r2, #72	; 0x48
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d01f      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xf14>
 8001f54:	3260      	adds	r2, #96	; 0x60
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01f      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xf1a>
 8001f5a:	3a48      	subs	r2, #72	; 0x48
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xf20>
 8001f60:	3260      	adds	r2, #96	; 0x60
 8001f62:	4293      	cmp	r3, r2
 8001f64:	bf0c      	ite	eq
 8001f66:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001f6a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_IRQHandler+0xef2>
 8001f70:	2310      	movs	r3, #16
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_DMA_IRQHandler+0xf04>)
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	e750      	b.n	8001e1a <HAL_DMA_IRQHandler+0xd9a>
 8001f78:	40026400 	.word	0x40026400
 8001f7c:	400260b8 	.word	0x400260b8
 8001f80:	40026058 	.word	0x40026058
 8001f84:	40026000 	.word	0x40026000
 8001f88:	40026010 	.word	0x40026010
 8001f8c:	40026458 	.word	0x40026458
 8001f90:	2310      	movs	r3, #16
 8001f92:	e7ee      	b.n	8001f72 <HAL_DMA_IRQHandler+0xef2>
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	e7eb      	b.n	8001f72 <HAL_DMA_IRQHandler+0xef2>
 8001f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9e:	e7e8      	b.n	8001f72 <HAL_DMA_IRQHandler+0xef2>
 8001fa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fa4:	e7e5      	b.n	8001f72 <HAL_DMA_IRQHandler+0xef2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	4203      	tst	r3, r0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8221 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f013 0f10 	tst.w	r3, #16
 8001fbc:	f000 821c 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001fc6:	f000 8120 	beq.w	800220a <HAL_DMA_IRQHandler+0x118a>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fca:	4bb1      	ldr	r3, [pc, #708]	; (8002290 <HAL_DMA_IRQHandler+0x1210>)
 8001fcc:	4299      	cmp	r1, r3
 8001fce:	f240 8092 	bls.w	80020f6 <HAL_DMA_IRQHandler+0x1076>
 8001fd2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001fd6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001fda:	4299      	cmp	r1, r3
 8001fdc:	d070      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x1040>
 8001fde:	3360      	adds	r3, #96	; 0x60
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d07d      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x1060>
 8001fe4:	3b48      	subs	r3, #72	; 0x48
 8001fe6:	4299      	cmp	r1, r3
 8001fe8:	d07c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x1064>
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	4299      	cmp	r1, r3
 8001fee:	d07c      	beq.n	80020ea <HAL_DMA_IRQHandler+0x106a>
 8001ff0:	3b48      	subs	r3, #72	; 0x48
 8001ff2:	4299      	cmp	r1, r3
 8001ff4:	d07c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x1070>
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	bf0c      	ite	eq
 8001ffc:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8002000:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8002004:	e05d      	b.n	80020c2 <HAL_DMA_IRQHandler+0x1042>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8002006:	2320      	movs	r3, #32
 8002008:	e7ce      	b.n	8001fa8 <HAL_DMA_IRQHandler+0xf28>
 800200a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200e:	e7cb      	b.n	8001fa8 <HAL_DMA_IRQHandler+0xf28>
 8002010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002014:	e7c8      	b.n	8001fa8 <HAL_DMA_IRQHandler+0xf28>
 8002016:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800201a:	e7c5      	b.n	8001fa8 <HAL_DMA_IRQHandler+0xf28>
 800201c:	2320      	movs	r3, #32
 800201e:	4203      	tst	r3, r0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	e7c3      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xf30>
 8002028:	2320      	movs	r3, #32
 800202a:	e7f8      	b.n	800201e <HAL_DMA_IRQHandler+0xf9e>
 800202c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002030:	e7f5      	b.n	800201e <HAL_DMA_IRQHandler+0xf9e>
 8002032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002036:	e7f2      	b.n	800201e <HAL_DMA_IRQHandler+0xf9e>
 8002038:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800203c:	e7ef      	b.n	800201e <HAL_DMA_IRQHandler+0xf9e>
 800203e:	4b95      	ldr	r3, [pc, #596]	; (8002294 <HAL_DMA_IRQHandler+0x1214>)
 8002040:	429a      	cmp	r2, r3
 8002042:	f63f add7 	bhi.w	8001bf4 <HAL_DMA_IRQHandler+0xb74>
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_DMA_IRQHandler+0x1218>)
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 800204e:	4d93      	ldr	r5, [pc, #588]	; (800229c <HAL_DMA_IRQHandler+0x121c>)
 8002050:	42ab      	cmp	r3, r5
 8002052:	d024      	beq.n	800209e <HAL_DMA_IRQHandler+0x101e>
 8002054:	3560      	adds	r5, #96	; 0x60
 8002056:	42ab      	cmp	r3, r5
 8002058:	d027      	beq.n	80020aa <HAL_DMA_IRQHandler+0x102a>
 800205a:	3d48      	subs	r5, #72	; 0x48
 800205c:	42ab      	cmp	r3, r5
 800205e:	d026      	beq.n	80020ae <HAL_DMA_IRQHandler+0x102e>
 8002060:	3560      	adds	r5, #96	; 0x60
 8002062:	42ab      	cmp	r3, r5
 8002064:	d026      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x1034>
 8002066:	3d48      	subs	r5, #72	; 0x48
 8002068:	42ab      	cmp	r3, r5
 800206a:	d026      	beq.n	80020ba <HAL_DMA_IRQHandler+0x103a>
 800206c:	3560      	adds	r5, #96	; 0x60
 800206e:	42ab      	cmp	r3, r5
 8002070:	bf0c      	ite	eq
 8002072:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002076:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 800207a:	e011      	b.n	80020a0 <HAL_DMA_IRQHandler+0x1020>
 800207c:	2320      	movs	r3, #32
 800207e:	4203      	tst	r3, r0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	e793      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xf30>
 8002088:	2320      	movs	r3, #32
 800208a:	e7f8      	b.n	800207e <HAL_DMA_IRQHandler+0xffe>
 800208c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002090:	e7f5      	b.n	800207e <HAL_DMA_IRQHandler+0xffe>
 8002092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002096:	e7f2      	b.n	800207e <HAL_DMA_IRQHandler+0xffe>
 8002098:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800209c:	e7ef      	b.n	800207e <HAL_DMA_IRQHandler+0xffe>
 800209e:	2320      	movs	r3, #32
 80020a0:	4203      	tst	r3, r0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	e782      	b.n	8001fb0 <HAL_DMA_IRQHandler+0xf30>
 80020aa:	2320      	movs	r3, #32
 80020ac:	e7f8      	b.n	80020a0 <HAL_DMA_IRQHandler+0x1020>
 80020ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b2:	e7f5      	b.n	80020a0 <HAL_DMA_IRQHandler+0x1020>
 80020b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020b8:	e7f2      	b.n	80020a0 <HAL_DMA_IRQHandler+0x1020>
 80020ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020be:	e7ef      	b.n	80020a0 <HAL_DMA_IRQHandler+0x1020>
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020c0:	2120      	movs	r1, #32
 80020c2:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <HAL_DMA_IRQHandler+0x1220>)
 80020c4:	60d9      	str	r1, [r3, #12]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 80020ce:	f040 8090 	bne.w	80021f2 <HAL_DMA_IRQHandler+0x1172>
          if(hdma->XferM1CpltCallback != NULL)
 80020d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 818f 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
            hdma->XferM1CpltCallback(hdma);
 80020da:	4620      	mov	r0, r4
 80020dc:	4798      	blx	r3
 80020de:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020e0:	2120      	movs	r1, #32
 80020e2:	e7ee      	b.n	80020c2 <HAL_DMA_IRQHandler+0x1042>
 80020e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e8:	e7eb      	b.n	80020c2 <HAL_DMA_IRQHandler+0x1042>
 80020ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ee:	e7e8      	b.n	80020c2 <HAL_DMA_IRQHandler+0x1042>
 80020f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020f4:	e7e5      	b.n	80020c2 <HAL_DMA_IRQHandler+0x1042>
 80020f6:	4b6b      	ldr	r3, [pc, #428]	; (80022a4 <HAL_DMA_IRQHandler+0x1224>)
 80020f8:	4299      	cmp	r1, r3
 80020fa:	d927      	bls.n	800214c <HAL_DMA_IRQHandler+0x10cc>
 80020fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002100:	3ba8      	subs	r3, #168	; 0xa8
 8002102:	4299      	cmp	r1, r3
 8002104:	d013      	beq.n	800212e <HAL_DMA_IRQHandler+0x10ae>
 8002106:	3360      	adds	r3, #96	; 0x60
 8002108:	4299      	cmp	r1, r3
 800210a:	d014      	beq.n	8002136 <HAL_DMA_IRQHandler+0x10b6>
 800210c:	3b48      	subs	r3, #72	; 0x48
 800210e:	4299      	cmp	r1, r3
 8002110:	d013      	beq.n	800213a <HAL_DMA_IRQHandler+0x10ba>
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	4299      	cmp	r1, r3
 8002116:	d013      	beq.n	8002140 <HAL_DMA_IRQHandler+0x10c0>
 8002118:	3b48      	subs	r3, #72	; 0x48
 800211a:	4299      	cmp	r1, r3
 800211c:	d013      	beq.n	8002146 <HAL_DMA_IRQHandler+0x10c6>
 800211e:	3360      	adds	r3, #96	; 0x60
 8002120:	4299      	cmp	r1, r3
 8002122:	bf0c      	ite	eq
 8002124:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 8002128:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 800212c:	e000      	b.n	8002130 <HAL_DMA_IRQHandler+0x10b0>
 800212e:	2120      	movs	r1, #32
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_DMA_IRQHandler+0x1220>)
 8002132:	6099      	str	r1, [r3, #8]
 8002134:	e7c7      	b.n	80020c6 <HAL_DMA_IRQHandler+0x1046>
 8002136:	2120      	movs	r1, #32
 8002138:	e7fa      	b.n	8002130 <HAL_DMA_IRQHandler+0x10b0>
 800213a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213e:	e7f7      	b.n	8002130 <HAL_DMA_IRQHandler+0x10b0>
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	e7f4      	b.n	8002130 <HAL_DMA_IRQHandler+0x10b0>
 8002146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800214a:	e7f1      	b.n	8002130 <HAL_DMA_IRQHandler+0x10b0>
 800214c:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_DMA_IRQHandler+0x1214>)
 800214e:	4299      	cmp	r1, r3
 8002150:	d927      	bls.n	80021a2 <HAL_DMA_IRQHandler+0x1122>
 8002152:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002156:	3b48      	subs	r3, #72	; 0x48
 8002158:	4299      	cmp	r1, r3
 800215a:	d013      	beq.n	8002184 <HAL_DMA_IRQHandler+0x1104>
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	4299      	cmp	r1, r3
 8002160:	d014      	beq.n	800218c <HAL_DMA_IRQHandler+0x110c>
 8002162:	3b48      	subs	r3, #72	; 0x48
 8002164:	4299      	cmp	r1, r3
 8002166:	d013      	beq.n	8002190 <HAL_DMA_IRQHandler+0x1110>
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	4299      	cmp	r1, r3
 800216c:	d013      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1116>
 800216e:	3b48      	subs	r3, #72	; 0x48
 8002170:	4299      	cmp	r1, r3
 8002172:	d013      	beq.n	800219c <HAL_DMA_IRQHandler+0x111c>
 8002174:	3360      	adds	r3, #96	; 0x60
 8002176:	4299      	cmp	r1, r3
 8002178:	bf0c      	ite	eq
 800217a:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 800217e:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 8002182:	e000      	b.n	8002186 <HAL_DMA_IRQHandler+0x1106>
 8002184:	2120      	movs	r1, #32
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_DMA_IRQHandler+0x1218>)
 8002188:	60d9      	str	r1, [r3, #12]
 800218a:	e79c      	b.n	80020c6 <HAL_DMA_IRQHandler+0x1046>
 800218c:	2120      	movs	r1, #32
 800218e:	e7fa      	b.n	8002186 <HAL_DMA_IRQHandler+0x1106>
 8002190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002194:	e7f7      	b.n	8002186 <HAL_DMA_IRQHandler+0x1106>
 8002196:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219a:	e7f4      	b.n	8002186 <HAL_DMA_IRQHandler+0x1106>
 800219c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021a0:	e7f1      	b.n	8002186 <HAL_DMA_IRQHandler+0x1106>
 80021a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_DMA_IRQHandler+0x121c>)
 80021a8:	4299      	cmp	r1, r3
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x1154>
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	4299      	cmp	r1, r3
 80021b0:	d014      	beq.n	80021dc <HAL_DMA_IRQHandler+0x115c>
 80021b2:	3b48      	subs	r3, #72	; 0x48
 80021b4:	4299      	cmp	r1, r3
 80021b6:	d013      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x1160>
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	4299      	cmp	r1, r3
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x1166>
 80021be:	3b48      	subs	r3, #72	; 0x48
 80021c0:	4299      	cmp	r1, r3
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_IRQHandler+0x116c>
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	4299      	cmp	r1, r3
 80021c8:	bf0c      	ite	eq
 80021ca:	f44f 1100 	moveq.w	r1, #2097152	; 0x200000
 80021ce:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 80021d2:	e000      	b.n	80021d6 <HAL_DMA_IRQHandler+0x1156>
 80021d4:	2120      	movs	r1, #32
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_DMA_IRQHandler+0x1218>)
 80021d8:	6099      	str	r1, [r3, #8]
 80021da:	e774      	b.n	80020c6 <HAL_DMA_IRQHandler+0x1046>
 80021dc:	2120      	movs	r1, #32
 80021de:	e7fa      	b.n	80021d6 <HAL_DMA_IRQHandler+0x1156>
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	e7f7      	b.n	80021d6 <HAL_DMA_IRQHandler+0x1156>
 80021e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ea:	e7f4      	b.n	80021d6 <HAL_DMA_IRQHandler+0x1156>
 80021ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021f0:	e7f1      	b.n	80021d6 <HAL_DMA_IRQHandler+0x1156>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80021f8:	f000 80fe 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
          if(hdma->XferCpltCallback != NULL)
 80021fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 80fa 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
            hdma->XferCpltCallback(hdma);
 8002204:	4620      	mov	r0, r4
 8002206:	4798      	blx	r3
 8002208:	bd38      	pop	{r3, r4, r5, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002210:	d103      	bne.n	800221a <HAL_DMA_IRQHandler+0x119a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	f023 0310 	bic.w	r3, r3, #16
 8002218:	6013      	str	r3, [r2, #0]
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_DMA_IRQHandler+0x1210>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d942      	bls.n	80022a8 <HAL_DMA_IRQHandler+0x1228>
 8002222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002226:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_DMA_IRQHandler+0x11d6>
 800222e:	3260      	adds	r2, #96	; 0x60
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x11fa>
 8002234:	3a48      	subs	r2, #72	; 0x48
 8002236:	4293      	cmp	r3, r2
 8002238:	d021      	beq.n	800227e <HAL_DMA_IRQHandler+0x11fe>
 800223a:	3260      	adds	r2, #96	; 0x60
 800223c:	4293      	cmp	r3, r2
 800223e:	d021      	beq.n	8002284 <HAL_DMA_IRQHandler+0x1204>
 8002240:	3a48      	subs	r2, #72	; 0x48
 8002242:	4293      	cmp	r3, r2
 8002244:	d021      	beq.n	800228a <HAL_DMA_IRQHandler+0x120a>
 8002246:	3260      	adds	r2, #96	; 0x60
 8002248:	4293      	cmp	r3, r2
 800224a:	bf0c      	ite	eq
 800224c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002250:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002254:	e000      	b.n	8002258 <HAL_DMA_IRQHandler+0x11d8>
 8002256:	2320      	movs	r3, #32
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_DMA_IRQHandler+0x1220>)
 800225a:	60d3      	str	r3, [r2, #12]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 800225c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800225e:	64e3      	str	r3, [r4, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 8002260:	2311      	movs	r3, #17
 8002262:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002266:	2300      	movs	r3, #0
 8002268:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800226c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80c2 	beq.w	80023f8 <HAL_DMA_IRQHandler+0x1378>
          hdma->XferCpltCallback(hdma);
 8002274:	4620      	mov	r0, r4
 8002276:	4798      	blx	r3
}
 8002278:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800227a:	2320      	movs	r3, #32
 800227c:	e7ec      	b.n	8002258 <HAL_DMA_IRQHandler+0x11d8>
 800227e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002282:	e7e9      	b.n	8002258 <HAL_DMA_IRQHandler+0x11d8>
 8002284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002288:	e7e6      	b.n	8002258 <HAL_DMA_IRQHandler+0x11d8>
 800228a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800228e:	e7e3      	b.n	8002258 <HAL_DMA_IRQHandler+0x11d8>
 8002290:	40026458 	.word	0x40026458
 8002294:	40026058 	.word	0x40026058
 8002298:	40026000 	.word	0x40026000
 800229c:	40026010 	.word	0x40026010
 80022a0:	40026400 	.word	0x40026400
 80022a4:	400260b8 	.word	0x400260b8
 80022a8:	4a54      	ldr	r2, [pc, #336]	; (80023fc <HAL_DMA_IRQHandler+0x137c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d927      	bls.n	80022fe <HAL_DMA_IRQHandler+0x127e>
 80022ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022b2:	3aa8      	subs	r2, #168	; 0xa8
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x1260>
 80022b8:	3260      	adds	r2, #96	; 0x60
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d014      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x1268>
 80022be:	3a48      	subs	r2, #72	; 0x48
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_DMA_IRQHandler+0x126c>
 80022c4:	3260      	adds	r2, #96	; 0x60
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x1272>
 80022ca:	3a48      	subs	r2, #72	; 0x48
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x1278>
 80022d0:	3260      	adds	r2, #96	; 0x60
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bf0c      	ite	eq
 80022d6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80022da:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 80022de:	e000      	b.n	80022e2 <HAL_DMA_IRQHandler+0x1262>
 80022e0:	2320      	movs	r3, #32
 80022e2:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_DMA_IRQHandler+0x1380>)
 80022e4:	6093      	str	r3, [r2, #8]
 80022e6:	e7b9      	b.n	800225c <HAL_DMA_IRQHandler+0x11dc>
 80022e8:	2320      	movs	r3, #32
 80022ea:	e7fa      	b.n	80022e2 <HAL_DMA_IRQHandler+0x1262>
 80022ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f0:	e7f7      	b.n	80022e2 <HAL_DMA_IRQHandler+0x1262>
 80022f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f6:	e7f4      	b.n	80022e2 <HAL_DMA_IRQHandler+0x1262>
 80022f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022fc:	e7f1      	b.n	80022e2 <HAL_DMA_IRQHandler+0x1262>
 80022fe:	4a41      	ldr	r2, [pc, #260]	; (8002404 <HAL_DMA_IRQHandler+0x1384>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d927      	bls.n	8002354 <HAL_DMA_IRQHandler+0x12d4>
 8002304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002308:	3a48      	subs	r2, #72	; 0x48
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_DMA_IRQHandler+0x12b6>
 800230e:	3260      	adds	r2, #96	; 0x60
 8002310:	4293      	cmp	r3, r2
 8002312:	d014      	beq.n	800233e <HAL_DMA_IRQHandler+0x12be>
 8002314:	3a48      	subs	r2, #72	; 0x48
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_DMA_IRQHandler+0x12c2>
 800231a:	3260      	adds	r2, #96	; 0x60
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_IRQHandler+0x12c8>
 8002320:	3a48      	subs	r2, #72	; 0x48
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_DMA_IRQHandler+0x12ce>
 8002326:	3260      	adds	r2, #96	; 0x60
 8002328:	4293      	cmp	r3, r2
 800232a:	bf0c      	ite	eq
 800232c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002330:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002334:	e000      	b.n	8002338 <HAL_DMA_IRQHandler+0x12b8>
 8002336:	2320      	movs	r3, #32
 8002338:	4a33      	ldr	r2, [pc, #204]	; (8002408 <HAL_DMA_IRQHandler+0x1388>)
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e78e      	b.n	800225c <HAL_DMA_IRQHandler+0x11dc>
 800233e:	2320      	movs	r3, #32
 8002340:	e7fa      	b.n	8002338 <HAL_DMA_IRQHandler+0x12b8>
 8002342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002346:	e7f7      	b.n	8002338 <HAL_DMA_IRQHandler+0x12b8>
 8002348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234c:	e7f4      	b.n	8002338 <HAL_DMA_IRQHandler+0x12b8>
 800234e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002352:	e7f1      	b.n	8002338 <HAL_DMA_IRQHandler+0x12b8>
 8002354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <HAL_DMA_IRQHandler+0x138c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_DMA_IRQHandler+0x1306>
 800235e:	3260      	adds	r2, #96	; 0x60
 8002360:	4293      	cmp	r3, r2
 8002362:	d014      	beq.n	800238e <HAL_DMA_IRQHandler+0x130e>
 8002364:	3a48      	subs	r2, #72	; 0x48
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_DMA_IRQHandler+0x1312>
 800236a:	3260      	adds	r2, #96	; 0x60
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_DMA_IRQHandler+0x1318>
 8002370:	3a48      	subs	r2, #72	; 0x48
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_IRQHandler+0x131e>
 8002376:	3260      	adds	r2, #96	; 0x60
 8002378:	4293      	cmp	r3, r2
 800237a:	bf0c      	ite	eq
 800237c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002380:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0x1308>
 8002386:	2320      	movs	r3, #32
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_DMA_IRQHandler+0x1388>)
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e766      	b.n	800225c <HAL_DMA_IRQHandler+0x11dc>
 800238e:	2320      	movs	r3, #32
 8002390:	e7fa      	b.n	8002388 <HAL_DMA_IRQHandler+0x1308>
 8002392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002396:	e7f7      	b.n	8002388 <HAL_DMA_IRQHandler+0x1308>
 8002398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239c:	e7f4      	b.n	8002388 <HAL_DMA_IRQHandler+0x1308>
 800239e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023a2:	e7f1      	b.n	8002388 <HAL_DMA_IRQHandler+0x1308>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma)) != RESET)
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	f7ff b942 	b.w	8001630 <HAL_DMA_IRQHandler+0x5b0>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80023ac:	6822      	ldr	r2, [r4, #0]
 80023ae:	4611      	mov	r1, r2
 80023b0:	f7ff bae7 	b.w	8001982 <HAL_DMA_IRQHandler+0x902>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	4611      	mov	r1, r2
 80023b8:	e540      	b.n	8001e3c <HAL_DMA_IRQHandler+0xdbc>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	460b      	mov	r3, r1
 80023be:	f7fe bfbd 	b.w	800133c <HAL_DMA_IRQHandler+0x2bc>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c2:	680b      	ldr	r3, [r1, #0]
 80023c4:	f013 0f04 	tst.w	r3, #4
 80023c8:	f47e aed3 	bne.w	8001172 <HAL_DMA_IRQHandler+0xf2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80023cc:	6821      	ldr	r1, [r4, #0]
 80023ce:	460b      	mov	r3, r1
 80023d0:	f7fe bf24 	b.w	800121c <HAL_DMA_IRQHandler+0x19c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023d4:	680b      	ldr	r3, [r1, #0]
 80023d6:	f013 0f04 	tst.w	r3, #4
 80023da:	f47e aeca 	bne.w	8001172 <HAL_DMA_IRQHandler+0xf2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80023de:	6821      	ldr	r1, [r4, #0]
 80023e0:	460b      	mov	r3, r1
 80023e2:	f7fe bf65 	b.w	80012b0 <HAL_DMA_IRQHandler+0x230>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	f013 0f04 	tst.w	r3, #4
 80023ec:	f47e aec1 	bne.w	8001172 <HAL_DMA_IRQHandler+0xf2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma)) != RESET)
 80023f0:	6821      	ldr	r1, [r4, #0]
 80023f2:	460b      	mov	r3, r1
 80023f4:	f7fe be6a 	b.w	80010cc <HAL_DMA_IRQHandler+0x4c>
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
 80023fa:	bf00      	nop
 80023fc:	400260b8 	.word	0x400260b8
 8002400:	40026400 	.word	0x40026400
 8002404:	40026058 	.word	0x40026058
 8002408:	40026000 	.word	0x40026000
 800240c:	40026010 	.word	0x40026010

08002410 <prvWriteMACCR>:

	heth->Instance->DMAOMR = ulValue;
}

static void prvWriteMACCR( ETH_HandleTypeDef *heth, uint32_t ulValue)
{
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4604      	mov	r4, r0
 8002414:	460d      	mov	r5, r1
	/* Enable the MAC transmission */
	heth->Instance->MACCR = ulValue;
 8002416:	6803      	ldr	r3, [r0, #0]
 8002418:	6019      	str	r1, [r3, #0]

	/* Wait until the write operation will be taken into account:
	at least four TX_CLK/RX_CLK clock cycles.
	Read it back, wait a ms and */
	( void ) heth->Instance->MACCR;
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	681b      	ldr	r3, [r3, #0]

	HAL_Delay( ETH_REG_WRITE_DELAY );
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe f964 	bl	80006ec <HAL_Delay>

	heth->Instance->MACCR = ulValue;
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	601d      	str	r5, [r3, #0]
 8002428:	bd38      	pop	{r3, r4, r5, pc}

0800242a <prvWriteDMAOMR>:
{
 800242a:	b570      	push	{r4, r5, r6, lr}
 800242c:	4605      	mov	r5, r0
 800242e:	460e      	mov	r6, r1
	heth->Instance->DMAOMR = ulValue;
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	f241 0418 	movw	r4, #4120	; 0x1018
 8002436:	5119      	str	r1, [r3, r4]
	( void ) heth->Instance->DMAOMR;
 8002438:	6803      	ldr	r3, [r0, #0]
 800243a:	591b      	ldr	r3, [r3, r4]
	HAL_Delay( ETH_REG_WRITE_DELAY );
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe f955 	bl	80006ec <HAL_Delay>
	heth->Instance->DMAOMR = ulValue;
 8002442:	682b      	ldr	r3, [r5, #0]
 8002444:	511e      	str	r6, [r3, r4]
 8002446:	bd70      	pop	{r4, r5, r6, pc}

08002448 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002448:	b500      	push	{lr}
 800244a:	b083      	sub	sp, #12
	/* Set the Flush Transmit FIFO bit */
	__IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 800244c:	6802      	ldr	r2, [r0, #0]
 800244e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002452:	58d3      	ldr	r3, [r2, r3]
 8002454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002458:	9301      	str	r3, [sp, #4]

	prvWriteDMAOMR( heth, tmpreg );
 800245a:	9901      	ldr	r1, [sp, #4]
 800245c:	f7ff ffe5 	bl	800242a <prvWriteDMAOMR>
}
 8002460:	b003      	add	sp, #12
 8002462:	f85d fb04 	ldr.w	pc, [sp], #4

08002466 <HAL_ETH_DMATxDescListInit>:
{
 8002466:	468c      	mov	ip, r1
	__HAL_LOCK( heth );
 8002468:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 800246c:	2901      	cmp	r1, #1
 800246e:	d03b      	beq.n	80024e8 <HAL_ETH_DMATxDescListInit+0x82>
{
 8002470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__HAL_LOCK( heth );
 8002474:	2101      	movs	r1, #1
 8002476:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
	heth->State = HAL_ETH_STATE_BUSY;
 800247a:	2102      	movs	r1, #2
 800247c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	heth->TxDesc = pxDMATable;
 8002480:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
	for( i=0; i < ulBufferCount; i++ )
 8002484:	b313      	cbz	r3, 80024cc <HAL_ETH_DMATxDescListInit+0x66>
 8002486:	46e1      	mov	r9, ip
 8002488:	4664      	mov	r4, ip
 800248a:	2500      	movs	r5, #0
		pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 800248c:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
		pxDMADescriptor->ControlBufferSize = 0;
 8002490:	4629      	mov	r1, r5
		if(i < ( ulBufferCount - 1 ) )
 8002492:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8002496:	e00c      	b.n	80024b2 <HAL_ETH_DMATxDescListInit+0x4c>
 8002498:	45ae      	cmp	lr, r5
			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMATable + i + 1 );
 800249a:	bf86      	itte	hi
 800249c:	f104 0720 	addhi.w	r7, r4, #32
 80024a0:	60f7      	strhi	r7, [r6, #12]
			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) pxDMATable;
 80024a2:	f8c6 900c 	strls.w	r9, [r6, #12]
	for( i=0; i < ulBufferCount; i++ )
 80024a6:	3501      	adds	r5, #1
 80024a8:	3420      	adds	r4, #32
 80024aa:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80024ae:	42ab      	cmp	r3, r5
 80024b0:	d00c      	beq.n	80024cc <HAL_ETH_DMATxDescListInit+0x66>
		pxDMADescriptor = pxDMATable + i;
 80024b2:	4626      	mov	r6, r4
		pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 80024b4:	f8c4 8000 	str.w	r8, [r4]
		pxDMADescriptor->ControlBufferSize = 0;
 80024b8:	6061      	str	r1, [r4, #4]
		pxDMADescriptor->Buffer1Addr = ( uint32_t )( &ucDataBuffer[ i * ETH_TX_BUF_SIZE ] );
 80024ba:	60a2      	str	r2, [r4, #8]
		if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80024bc:	69c7      	ldr	r7, [r0, #28]
 80024be:	2f00      	cmp	r7, #0
 80024c0:	d1ea      	bne.n	8002498 <HAL_ETH_DMATxDescListInit+0x32>
			pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80024c2:	6827      	ldr	r7, [r4, #0]
 80024c4:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 80024c8:	6027      	str	r7, [r4, #0]
 80024ca:	e7e5      	b.n	8002498 <HAL_ETH_DMATxDescListInit+0x32>
	heth->Instance->DMATDLAR = ( uint32_t ) pxDMATable;
 80024cc:	6802      	ldr	r2, [r0, #0]
 80024ce:	f241 0310 	movw	r3, #4112	; 0x1010
 80024d2:	f842 c003 	str.w	ip, [r2, r3]
	heth->State= HAL_ETH_STATE_READY;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	__HAL_UNLOCK( heth );
 80024dc:	2300      	movs	r3, #0
 80024de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	return HAL_OK;
 80024e2:	4618      	mov	r0, r3
 80024e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__HAL_LOCK( heth );
 80024e8:	2002      	movs	r0, #2
 80024ea:	4770      	bx	lr

080024ec <HAL_ETH_DMARxDescListInit>:
{
 80024ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f0:	4688      	mov	r8, r1
	__HAL_LOCK( heth );
 80024f2:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 80024f6:	2901      	cmp	r1, #1
 80024f8:	d02f      	beq.n	800255a <HAL_ETH_DMARxDescListInit+0x6e>
 80024fa:	4686      	mov	lr, r0
 80024fc:	2101      	movs	r1, #1
 80024fe:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
	heth->State = HAL_ETH_STATE_BUSY;
 8002502:	2102      	movs	r1, #2
 8002504:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	heth->RxDesc = pxDMATable;
 8002508:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
	for(i=0; i < ulBufferCount; i++)
 800250c:	b1bb      	cbz	r3, 800253e <HAL_ETH_DMARxDescListInit+0x52>
 800250e:	46c4      	mov	ip, r8
 8002510:	4644      	mov	r4, r8
 8002512:	2500      	movs	r5, #0
		pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 8002514:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002518:	f244 57f4 	movw	r7, #17908	; 0x45f4
		if(i < (ulBufferCount-1))
 800251c:	1e5e      	subs	r6, r3, #1
		pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 800251e:	6021      	str	r1, [r4, #0]
		pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002520:	6067      	str	r7, [r4, #4]
		pxDMADescriptor->Buffer1Addr = ( uint32_t )( &ucDataBuffer[ i * ETH_RX_BUF_SIZE ] );
 8002522:	60a2      	str	r2, [r4, #8]
		if(i < (ulBufferCount-1))
 8002524:	42ae      	cmp	r6, r5
			pxDMADescriptor->Buffer2NextDescAddr = (uint32_t)(pxDMATable+i+1);
 8002526:	bf86      	itte	hi
 8002528:	f104 0020 	addhi.w	r0, r4, #32
 800252c:	60e0      	strhi	r0, [r4, #12]
			pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) pxDMATable;
 800252e:	f8c4 c00c 	strls.w	ip, [r4, #12]
	for(i=0; i < ulBufferCount; i++)
 8002532:	3501      	adds	r5, #1
 8002534:	3420      	adds	r4, #32
 8002536:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 800253a:	42ab      	cmp	r3, r5
 800253c:	d1ef      	bne.n	800251e <HAL_ETH_DMARxDescListInit+0x32>
	heth->Instance->DMARDLAR = ( uint32_t ) pxDMATable;
 800253e:	f8de 2000 	ldr.w	r2, [lr]
 8002542:	f241 030c 	movw	r3, #4108	; 0x100c
 8002546:	f842 8003 	str.w	r8, [r2, r3]
	heth->State= HAL_ETH_STATE_READY;
 800254a:	2301      	movs	r3, #1
 800254c:	f88e 3044 	strb.w	r3, [lr, #68]	; 0x44
	__HAL_UNLOCK( heth );
 8002550:	2000      	movs	r0, #0
 8002552:	f88e 0045 	strb.w	r0, [lr, #69]	; 0x45
	return HAL_OK;
 8002556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_LOCK( heth );
 800255a:	2002      	movs	r0, #2
}
 800255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002560 <HAL_ETH_Init>:
	if( heth == NULL )
 8002560:	2800      	cmp	r0, #0
 8002562:	f000 80cd 	beq.w	8002700 <HAL_ETH_Init+0x1a0>
{
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	4605      	mov	r5, r0
	if( heth->State == HAL_ETH_STATE_RESET )
 800256a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a1 	beq.w	80026b6 <HAL_ETH_Init+0x156>
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002574:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_ETH_Init+0x1a4>)
 8002576:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;//选择RMII接口
 800257e:	4b62      	ldr	r3, [pc, #392]	; (8002708 <HAL_ETH_Init+0x1a8>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002586:	605a      	str	r2, [r3, #4]
	SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	6a29      	ldr	r1, [r5, #32]
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
	heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 800259c:	601a      	str	r2, [r3, #0]
	while ((heth->Instance->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800259e:	6829      	ldr	r1, [r5, #0]
 80025a0:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
 80025a4:	6814      	ldr	r4, [r2, #0]
 80025a6:	f014 0401 	ands.w	r4, r4, #1
 80025aa:	d1fb      	bne.n	80025a4 <HAL_ETH_Init+0x44>
	tmpreg = heth->Instance->MACMIIAR;
 80025ac:	690e      	ldr	r6, [r1, #16]
	tmpreg &= ETH_MACMIIAR_CR_MASK;
 80025ae:	f026 061c 	bic.w	r6, r6, #28
	hclk = HAL_RCC_GetHCLKFreq();
 80025b2:	f000 ffaf 	bl	8003514 <HAL_RCC_GetHCLKFreq>
	if( ( hclk >= 20000000 ) && ( hclk < 35000000 ) )
 80025b6:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_ETH_Init+0x1ac>)
 80025b8:	4403      	add	r3, r0
 80025ba:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_ETH_Init+0x1b0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d87d      	bhi.n	80026bc <HAL_ETH_Init+0x15c>
		tmpreg |= (uint32_t) ETH_MACMIIAR_CR_Div16;
 80025c0:	f046 0608 	orr.w	r6, r6, #8
	heth->Instance->MACMIIAR = (uint32_t)tmpreg;
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	611e      	str	r6, [r3, #16]
	vMACBProbePhy();
 80025c8:	f00e fab0 	bl	8010b2c <vMACBProbePhy>
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80025cc:	69eb      	ldr	r3, [r5, #28]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf08      	it	eq
 80025d2:	f44f 6480 	moveq.w	r4, #1024	; 0x400
  tmpreg = heth->Instance->MACCR;
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
                       macinit.LoopbackMode |
 80025da:	68ab      	ldr	r3, [r5, #8]
 80025dc:	68e9      	ldr	r1, [r5, #12]
 80025de:	4319      	orrs	r1, r3
 80025e0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_ETH_Init+0x1b4>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	4319      	orrs	r1, r3
  prvWriteMACCR( heth, tmpreg );
 80025ea:	4321      	orrs	r1, r4
 80025ec:	4628      	mov	r0, r5
 80025ee:	f7ff ff0f 	bl	8002410 <prvWriteMACCR>
  heth->Instance->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80025f2:	682b      	ldr	r3, [r5, #0]
 80025f4:	2240      	movs	r2, #64	; 0x40
 80025f6:	605a      	str	r2, [r3, #4]
   tmpreg = heth->Instance->MACFFR;
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	685c      	ldr	r4, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe f875 	bl	80006ec <HAL_Delay>
   heth->Instance->MACFFR = tmpreg;
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	605c      	str	r4, [r3, #4]
   heth->Instance->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	2600      	movs	r6, #0
 800260a:	609e      	str	r6, [r3, #8]
   heth->Instance->MACHTLR = (uint32_t)macinit.HashTableLow;
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	60de      	str	r6, [r3, #12]
   tmpreg = heth->Instance->MACFCR;
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	699c      	ldr	r4, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002614:	f024 04be 	bic.w	r4, r4, #190	; 0xbe
 8002618:	0424      	lsls	r4, r4, #16
 800261a:	0c24      	lsrs	r4, r4, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) |
 800261c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	heth->Instance->MACFCR = ulValue;
 8002620:	619c      	str	r4, [r3, #24]
	( void ) heth->Instance->MACFCR;
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
	HAL_Delay( ETH_REG_WRITE_DELAY );
 8002626:	2001      	movs	r0, #1
 8002628:	f7fe f860 	bl	80006ec <HAL_Delay>
	heth->Instance->MACFCR = ulValue;
 800262c:	682b      	ldr	r3, [r5, #0]
 800262e:	619c      	str	r4, [r3, #24]
   heth->Instance->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	61de      	str	r6, [r3, #28]
    tmpreg = heth->Instance->MACVLANTR;
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	69dc      	ldr	r4, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002638:	2001      	movs	r0, #1
 800263a:	f7fe f857 	bl	80006ec <HAL_Delay>
    heth->Instance->MACVLANTR = tmpreg;
 800263e:	682b      	ldr	r3, [r5, #0]
 8002640:	61dc      	str	r4, [r3, #28]
    tmpreg = heth->Instance->DMAOMR;
 8002642:	682a      	ldr	r2, [r5, #0]
 8002644:	f241 0318 	movw	r3, #4120	; 0x1018
 8002648:	58d3      	ldr	r3, [r2, r3]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800264a:	4933      	ldr	r1, [pc, #204]	; (8002718 <HAL_ETH_Init+0x1b8>)
 800264c:	4019      	ands	r1, r3
    prvWriteDMAOMR( heth, tmpreg );
 800264e:	f041 7108 	orr.w	r1, r1, #35651584	; 0x2200000
 8002652:	f041 0104 	orr.w	r1, r1, #4
 8002656:	4628      	mov	r0, r5
 8002658:	f7ff fee7 	bl	800242a <prvWriteDMAOMR>
    heth->Instance->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002662:	4a2e      	ldr	r2, [pc, #184]	; (800271c <HAL_ETH_Init+0x1bc>)
 8002664:	601a      	str	r2, [r3, #0]
     tmpreg = heth->Instance->DMABMR;
 8002666:	682b      	ldr	r3, [r5, #0]
 8002668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266c:	681c      	ldr	r4, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800266e:	2001      	movs	r0, #1
 8002670:	f7fe f83c 	bl	80006ec <HAL_Delay>
     heth->Instance->DMABMR = tmpreg;
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267a:	601c      	str	r4, [r3, #0]
     if(heth->Init.RxMode == ETH_RXINTERRUPT_MODE)
 800267c:	69ab      	ldr	r3, [r5, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d034      	beq.n	80026ec <HAL_ETH_Init+0x18c>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002682:	696a      	ldr	r2, [r5, #20]
	tmpreg = 0x80000000ul | ( ( uint32_t )Addr[ 5 ] << 8) | (uint32_t)Addr[ 4 ];
 8002684:	7951      	ldrb	r1, [r2, #5]
 8002686:	7913      	ldrb	r3, [r2, #4]
 8002688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800268c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	( * ( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 8002690:	4923      	ldr	r1, [pc, #140]	; (8002720 <HAL_ETH_Init+0x1c0>)
 8002692:	600b      	str	r3, [r1, #0]
	tmpreg = ( ( uint32_t )Addr[ 3 ] << 24 ) | ( ( uint32_t )Addr[ 2 ] << 16 ) | ( ( uint32_t )Addr[ 1 ] << 8 ) | Addr[ 0 ];
 8002694:	78d1      	ldrb	r1, [r2, #3]
 8002696:	7893      	ldrb	r3, [r2, #2]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800269e:	7811      	ldrb	r1, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	7852      	ldrb	r2, [r2, #1]
 80026a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	( * ( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_ETH_Init+0x1c4>)
 80026aa:	6013      	str	r3, [r2, #0]
	heth->State= HAL_ETH_STATE_READY;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	return HAL_OK;
 80026b2:	2000      	movs	r0, #0
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
		HAL_ETH_MspInit( heth );
 80026b6:	f014 ffa9 	bl	801760c <HAL_ETH_MspInit>
 80026ba:	e75b      	b.n	8002574 <HAL_ETH_Init+0x14>
	else if( ( hclk >= 35000000 ) && ( hclk < 60000000 ) )
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_ETH_Init+0x1c8>)
 80026be:	4403      	add	r3, r0
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_ETH_Init+0x1cc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_ETH_Init+0x16c>
	tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 80026c6:	f046 060c 	orr.w	r6, r6, #12
 80026ca:	e77b      	b.n	80025c4 <HAL_ETH_Init+0x64>
	else if((hclk >= 60000000 ) && ( hclk < 100000000 ) )
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_ETH_Init+0x1d0>)
 80026ce:	4403      	add	r3, r0
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_ETH_Init+0x1d4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f67f af76 	bls.w	80025c4 <HAL_ETH_Init+0x64>
	else if((hclk >= 100000000 ) && ( hclk < 150000000))
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_ETH_Init+0x1d8>)
 80026da:	4403      	add	r3, r0
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_ETH_Init+0x1dc>)
 80026de:	4293      	cmp	r3, r2
		tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026e0:	bf94      	ite	ls
 80026e2:	f046 0604 	orrls.w	r6, r6, #4
		tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80026e6:	f046 0610 	orrhi.w	r6, r6, #16
 80026ea:	e76b      	b.n	80025c4 <HAL_ETH_Init+0x64>
       __HAL_ETH_DMA_ENABLE_IT(( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026ec:	6829      	ldr	r1, [r5, #0]
 80026ee:	f241 021c 	movw	r2, #4124	; 0x101c
 80026f2:	588b      	ldr	r3, [r1, r2]
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026fc:	508b      	str	r3, [r1, r2]
 80026fe:	e7c0      	b.n	8002682 <HAL_ETH_Init+0x122>
		return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
 8002702:	4770      	bx	lr
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	feced300 	.word	0xfeced300
 8002710:	00e4e1bf 	.word	0x00e4e1bf
 8002714:	ff20810f 	.word	0xff20810f
 8002718:	f8de3f23 	.word	0xf8de3f23
 800271c:	02c12080 	.word	0x02c12080
 8002720:	40028040 	.word	0x40028040
 8002724:	40028044 	.word	0x40028044
 8002728:	fde9f140 	.word	0xfde9f140
 800272c:	017d783f 	.word	0x017d783f
 8002730:	fc6c7900 	.word	0xfc6c7900
 8002734:	026259ff 	.word	0x026259ff
 8002738:	fa0a1f00 	.word	0xfa0a1f00
 800273c:	02faf07f 	.word	0x02faf07f

08002740 <HAL_ETH_TransmitFrame>:
	__HAL_LOCK( heth );
 8002740:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002744:	2b01      	cmp	r3, #1
 8002746:	d07c      	beq.n	8002842 <HAL_ETH_TransmitFrame+0x102>
{
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
	__IO ETH_DMADescTypeDef *pxDmaTxDesc = heth->TxDesc;
 800274a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	__HAL_LOCK( heth );
 800274c:	2301      	movs	r3, #1
 800274e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	heth->State = HAL_ETH_STATE_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	if( FrameLength == 0 )
 8002758:	b1b9      	cbz	r1, 800278a <HAL_ETH_TransmitFrame+0x4a>
	if( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) != ( uint32_t ) RESET )
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db1c      	blt.n	800279a <HAL_ETH_TransmitFrame+0x5a>
	bufcount = ( FrameLength + ETH_TX_BUF_SIZE - 1 ) / ETH_TX_BUF_SIZE;
 8002760:	f201 54f3 	addw	r4, r1, #1523	; 0x5f3
 8002764:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_ETH_TransmitFrame+0x108>)
 8002766:	fba3 3404 	umull	r3, r4, r3, r4
 800276a:	0aa4      	lsrs	r4, r4, #10
	if (bufcount == 1)
 800276c:	2c01      	cmp	r4, #1
 800276e:	d01c      	beq.n	80027aa <HAL_ETH_TransmitFrame+0x6a>
		for( i = 0; i < bufcount; i++ )
 8002770:	b34c      	cbz	r4, 80027c6 <HAL_ETH_TransmitFrame+0x86>
				size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002772:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8002776:	4e35      	ldr	r6, [pc, #212]	; (800284c <HAL_ETH_TransmitFrame+0x10c>)
 8002778:	fb06 1104 	mla	r1, r6, r4, r1
				heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800277c:	f3c1 060c 	ubfx	r6, r1, #0, #13
 8002780:	2300      	movs	r3, #0
			if (i < (bufcount-1))
 8002782:	1e65      	subs	r5, r4, #1
				heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002784:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8002788:	e04f      	b.n	800282a <HAL_ETH_TransmitFrame+0xea>
		heth->State = HAL_ETH_STATE_READY;
 800278a:	2301      	movs	r3, #1
 800278c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		__HAL_UNLOCK( heth );
 8002790:	2200      	movs	r2, #0
 8002792:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
		return  HAL_ERROR;
 8002796:	4618      	mov	r0, r3
 8002798:	bdf0      	pop	{r4, r5, r6, r7, pc}
		heth->State = HAL_ETH_STATE_BUSY_TX;
 800279a:	2312      	movs	r3, #18
 800279c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		__HAL_UNLOCK( heth );
 80027a0:	2300      	movs	r3, #0
 80027a2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
		return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80027b0:	603b      	str	r3, [r7, #0]
		pxDmaTxDesc->ControlBufferSize = ( FrameLength & ETH_DMATXDESC_TBS1 );
 80027b2:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80027b6:	6079      	str	r1, [r7, #4]
		pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027be:	603b      	str	r3, [r7, #0]
		heth->TxDesc = ( ETH_DMADescTypeDef * ) ( heth->TxDesc->Buffer2NextDescAddr );
 80027c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	62c3      	str	r3, [r0, #44]	; 0x2c
	if( ( heth->Instance->DMASR & ETH_DMASR_TBUS ) != ( uint32_t )RESET )
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	f241 0214 	movw	r2, #4116	; 0x1014
 80027cc:	589a      	ldr	r2, [r3, r2]
 80027ce:	f012 0f04 	tst.w	r2, #4
 80027d2:	d00c      	beq.n	80027ee <HAL_ETH_TransmitFrame+0xae>
		heth->Instance->DMACHTDR = ( uint32_t )pxDmaTxDesc;
 80027d4:	f241 0248 	movw	r2, #4168	; 0x1048
 80027d8:	509f      	str	r7, [r3, r2]
		heth->Instance->DMASR = ETH_DMASR_TBUS;
 80027da:	6802      	ldr	r2, [r0, #0]
 80027dc:	2104      	movs	r1, #4
 80027de:	f241 0314 	movw	r3, #4116	; 0x1014
 80027e2:	50d1      	str	r1, [r2, r3]
		heth->Instance->DMATPDR = 0;
 80027e4:	6802      	ldr	r2, [r0, #0]
 80027e6:	2100      	movs	r1, #0
 80027e8:	f241 0304 	movw	r3, #4100	; 0x1004
 80027ec:	50d1      	str	r1, [r2, r3]
	heth->State = HAL_ETH_STATE_READY;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	__HAL_UNLOCK( heth );
 80027f4:	2300      	movs	r3, #0
 80027f6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	return HAL_OK;
 80027fa:	4618      	mov	r0, r3
 80027fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				heth->TxDesc->Status = ulStatus | ETH_DMATXDESC_FS;
 80027fe:	f042 5c80 	orr.w	ip, r2, #268435456	; 0x10000000
 8002802:	f8c1 c000 	str.w	ip, [r1]
 8002806:	e016      	b.n	8002836 <HAL_ETH_TransmitFrame+0xf6>
				heth->TxDesc->Status = ulStatus | ETH_DMATXDESC_LS;
 8002808:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800280a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800280e:	600a      	str	r2, [r1, #0]
				heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002810:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002812:	6056      	str	r6, [r2, #4]
			heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002814:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002816:	680a      	ldr	r2, [r1, #0]
 8002818:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800281c:	600a      	str	r2, [r1, #0]
			heth->TxDesc = (ETH_DMADescTypeDef *)( heth->TxDesc->Buffer2NextDescAddr );
 800281e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	62c2      	str	r2, [r0, #44]	; 0x2c
		for( i = 0; i < bufcount; i++ )
 8002824:	3301      	adds	r3, #1
 8002826:	429c      	cmp	r4, r3
 8002828:	d0cd      	beq.n	80027c6 <HAL_ETH_TransmitFrame+0x86>
		uint32_t ulStatus = heth->TxDesc->Status & ~( ETH_DMATXDESC_FS | ETH_DMATXDESC_LS );
 800282a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800282c:	680a      	ldr	r2, [r1, #0]
 800282e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
			if( i == 0 )
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0e3      	beq.n	80027fe <HAL_ETH_TransmitFrame+0xbe>
			if (i < (bufcount-1))
 8002836:	429d      	cmp	r5, r3
 8002838:	d9e6      	bls.n	8002808 <HAL_ETH_TransmitFrame+0xc8>
				heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800283a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800283c:	f8c2 e004 	str.w	lr, [r2, #4]
 8002840:	e7e8      	b.n	8002814 <HAL_ETH_TransmitFrame+0xd4>
	__HAL_LOCK( heth );
 8002842:	2002      	movs	r0, #2
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	ac02b00b 	.word	0xac02b00b
 800284c:	fffffa0c 	.word	0xfffffa0c

08002850 <HAL_ETH_GetReceivedFrame>:
	__HAL_LOCK( heth );
 8002850:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8002854:	2a01      	cmp	r2, #1
 8002856:	d040      	beq.n	80028da <HAL_ETH_GetReceivedFrame+0x8a>
{
 8002858:	b470      	push	{r4, r5, r6}
 800285a:	4603      	mov	r3, r0
ETH_DMADescTypeDef *pxDescriptor = heth->RxDesc;
 800285c:	6a82      	ldr	r2, [r0, #40]	; 0x28
	__HAL_LOCK( heth );
 800285e:	2101      	movs	r1, #1
 8002860:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
	heth->State = HAL_ETH_STATE_BUSY;
 8002864:	2102      	movs	r1, #2
 8002866:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	while( ( ( pxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0ul ) && ( ulCounter < ETH_RXBUFNB ) )
 800286a:	2105      	movs	r1, #5
			heth->RxFrameInfos.LSRxDesc = ( ETH_DMADescTypeDef *)NULL;
 800286c:	2600      	movs	r6, #0
			heth->RxFrameInfos.SegCount = 1;
 800286e:	2501      	movs	r5, #1
	while( ( ( pxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0ul ) && ( ulCounter < ETH_RXBUFNB ) )
 8002870:	e00a      	b.n	8002888 <HAL_ETH_GetReceivedFrame+0x38>
			heth->RxFrameInfos.FSRxDesc = pxDescriptor;
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
			heth->RxFrameInfos.LSRxDesc = ( ETH_DMADescTypeDef *)NULL;
 8002874:	635e      	str	r6, [r3, #52]	; 0x34
			heth->RxFrameInfos.SegCount = 1;
 8002876:	639d      	str	r5, [r3, #56]	; 0x38
			pxDescriptor = (ETH_DMADescTypeDef*) (pxDescriptor->Buffer2NextDescAddr);
 8002878:	68d2      	ldr	r2, [r2, #12]
			heth->RxDesc = pxDescriptor;
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
 800287c:	e004      	b.n	8002888 <HAL_ETH_GetReceivedFrame+0x38>
			heth->RxFrameInfos.SegCount++;
 800287e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002880:	3001      	adds	r0, #1
 8002882:	6398      	str	r0, [r3, #56]	; 0x38
			pxDescriptor = ( ETH_DMADescTypeDef * ) ( pxDescriptor->Buffer2NextDescAddr );
 8002884:	68d2      	ldr	r2, [r2, #12]
			heth->RxDesc = pxDescriptor;
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
	while( ( ( pxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0ul ) && ( ulCounter < ETH_RXBUFNB ) )
 8002888:	6810      	ldr	r0, [r2, #0]
 800288a:	2800      	cmp	r0, #0
 800288c:	db23      	blt.n	80028d6 <HAL_ETH_GetReceivedFrame+0x86>
 800288e:	3901      	subs	r1, #1
 8002890:	d018      	beq.n	80028c4 <HAL_ETH_GetReceivedFrame+0x74>
	uint32_t ulStatus = pxDescriptor->Status;
 8002892:	6814      	ldr	r4, [r2, #0]
		if( ( ulStatus & ( ETH_DMARXDESC_FS | ETH_DMARXDESC_LS ) ) == ( uint32_t )ETH_DMARXDESC_FS )
 8002894:	f404 7040 	and.w	r0, r4, #768	; 0x300
 8002898:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800289c:	d0e9      	beq.n	8002872 <HAL_ETH_GetReceivedFrame+0x22>
		else if( ( ulStatus & ( ETH_DMARXDESC_LS | ETH_DMARXDESC_FS ) ) == 0ul )
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0ed      	beq.n	800287e <HAL_ETH_GetReceivedFrame+0x2e>
			if( heth->RxFrameInfos.SegCount == 0 )
 80028a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028a4:	b901      	cbnz	r1, 80028a8 <HAL_ETH_GetReceivedFrame+0x58>
				heth->RxFrameInfos.FSRxDesc = pxDescriptor;
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
			heth->RxFrameInfos.SegCount++;
 80028a8:	3101      	adds	r1, #1
 80028aa:	6399      	str	r1, [r3, #56]	; 0x38
			heth->RxFrameInfos.LSRxDesc = pxDescriptor;
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34
				( ( ulStatus & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 80028ae:	f3c4 440d 	ubfx	r4, r4, #16, #14
 80028b2:	3c04      	subs	r4, #4
			heth->RxFrameInfos.length =
 80028b4:	63dc      	str	r4, [r3, #60]	; 0x3c
			heth->RxFrameInfos.buffer = heth->RxFrameInfos.FSRxDesc->Buffer1Addr;
 80028b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b8:	6889      	ldr	r1, [r1, #8]
 80028ba:	6419      	str	r1, [r3, #64]	; 0x40
			heth->RxDesc = ( ETH_DMADescTypeDef * ) pxDescriptor->Buffer2NextDescAddr;
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
			xResult = HAL_OK;
 80028c0:	2000      	movs	r0, #0
			break;
 80028c2:	e000      	b.n	80028c6 <HAL_ETH_GetReceivedFrame+0x76>
HAL_StatusTypeDef xResult = HAL_ERROR;
 80028c4:	2001      	movs	r0, #1
	heth->State = HAL_ETH_STATE_READY;
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	__HAL_UNLOCK( heth );
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80028d2:	bc70      	pop	{r4, r5, r6}
 80028d4:	4770      	bx	lr
HAL_StatusTypeDef xResult = HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	e7f5      	b.n	80028c6 <HAL_ETH_GetReceivedFrame+0x76>
	__HAL_LOCK( heth );
 80028da:	2002      	movs	r0, #2
 80028dc:	4770      	bx	lr

080028de <HAL_ETH_ErrorCallback>:
{
 80028de:	4770      	bx	lr

080028e0 <HAL_ETH_IRQHandler>:
{
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4605      	mov	r5, r0
	dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 80028e4:	6801      	ldr	r1, [r0, #0]
 80028e6:	f241 0214 	movw	r2, #4116	; 0x1014
 80028ea:	588c      	ldr	r4, [r1, r2]
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_ETH_IRQHandler+0x3c>)
 80028ee:	4023      	ands	r3, r4
	heth->Instance->DMASR = dmasr;
 80028f0:	508b      	str	r3, [r1, r2]
	if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 80028f2:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80028f6:	d106      	bne.n	8002906 <HAL_ETH_IRQHandler+0x26>
	if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 80028f8:	f014 0f01 	tst.w	r4, #1
 80028fc:	d106      	bne.n	800290c <HAL_ETH_IRQHandler+0x2c>
	if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 80028fe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002902:	d107      	bne.n	8002914 <HAL_ETH_IRQHandler+0x34>
 8002904:	bd38      	pop	{r3, r4, r5, pc}
		HAL_ETH_RxCpltCallback( heth );
 8002906:	f00e f849 	bl	801099c <HAL_ETH_RxCpltCallback>
 800290a:	e7f5      	b.n	80028f8 <HAL_ETH_IRQHandler+0x18>
		HAL_ETH_TxCpltCallback( heth );
 800290c:	4628      	mov	r0, r5
 800290e:	f00e f867 	bl	80109e0 <HAL_ETH_TxCpltCallback>
 8002912:	e7f4      	b.n	80028fe <HAL_ETH_IRQHandler+0x1e>
		HAL_ETH_ErrorCallback( heth );
 8002914:	4628      	mov	r0, r5
 8002916:	f7ff ffe2 	bl	80028de <HAL_ETH_ErrorCallback>
}
 800291a:	e7f3      	b.n	8002904 <HAL_ETH_IRQHandler+0x24>
 800291c:	3801e7fb 	.word	0x3801e7fb

08002920 <HAL_ETH_ReadPHYRegister>:
{
 8002920:	b570      	push	{r4, r5, r6, lr}
	if( heth->State == HAL_ETH_STATE_BUSY_RD )
 8002922:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b82      	cmp	r3, #130	; 0x82
 800292a:	d03d      	beq.n	80029a8 <HAL_ETH_ReadPHYRegister+0x88>
 800292c:	4604      	mov	r4, r0
 800292e:	4616      	mov	r6, r2
		__HAL_LOCK( heth );
 8002930:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_ETH_ReadPHYRegister+0x1e>
 8002938:	2402      	movs	r4, #2
}
 800293a:	4620      	mov	r0, r4
 800293c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_LOCK( heth );
 800293e:	2301      	movs	r3, #1
 8002940:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
		heth->State = HAL_ETH_STATE_BUSY_RD;
 8002944:	2382      	movs	r3, #130	; 0x82
 8002946:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		tmpreg = heth->Instance->MACMIIAR;
 800294a:	6802      	ldr	r2, [r0, #0]
 800294c:	6913      	ldr	r3, [r2, #16]
		tmpreg |= ( ( ( uint32_t )PHYReg << 6 ) & ETH_MACMIIAR_MR );                   /* Set the PHY register address */
 800294e:	0189      	lsls	r1, r1, #6
 8002950:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
		tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002954:	f003 031c 	and.w	r3, r3, #28
 8002958:	4319      	orrs	r1, r3
		tmpreg |= ( ( ( uint32_t )heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA );    /* Set the PHY device address   */
 800295a:	8a03      	ldrh	r3, [r0, #16]
 800295c:	02db      	lsls	r3, r3, #11
 800295e:	b29b      	uxth	r3, r3
		tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002960:	4319      	orrs	r1, r3
		tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002962:	f041 0101 	orr.w	r1, r1, #1
		heth->Instance->MACMIIAR = tmpreg;
 8002966:	6111      	str	r1, [r2, #16]
		tickstart = HAL_GetTick();
 8002968:	f7fd feba 	bl	80006e0 <HAL_GetTick>
 800296c:	4605      	mov	r5, r0
			tmpreg = heth->Instance->MACMIIAR;
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
			if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 8002972:	f012 0f01 	tst.w	r2, #1
 8002976:	d00d      	beq.n	8002994 <HAL_ETH_ReadPHYRegister+0x74>
			if( ( HAL_GetTick( ) - tickstart ) > PHY_READ_TO )
 8002978:	f7fd feb2 	bl	80006e0 <HAL_GetTick>
 800297c:	1b40      	subs	r0, r0, r5
 800297e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002982:	d3f4      	bcc.n	800296e <HAL_ETH_ReadPHYRegister+0x4e>
		heth->State = HAL_ETH_STATE_READY;
 8002984:	2301      	movs	r3, #1
 8002986:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		__HAL_UNLOCK( heth );
 800298a:	2300      	movs	r3, #0
 800298c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
				xResult = HAL_TIMEOUT;
 8002990:	2403      	movs	r4, #3
 8002992:	e00a      	b.n	80029aa <HAL_ETH_ReadPHYRegister+0x8a>
				*RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	6033      	str	r3, [r6, #0]
		heth->State = HAL_ETH_STATE_READY;
 8002998:	2301      	movs	r3, #1
 800299a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		__HAL_UNLOCK( heth );
 800299e:	2300      	movs	r3, #0
 80029a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	return xResult;
 80029a4:	461c      	mov	r4, r3
 80029a6:	e7c8      	b.n	800293a <HAL_ETH_ReadPHYRegister+0x1a>
		xResult = HAL_BUSY;
 80029a8:	2402      	movs	r4, #2
		lUDPLoggingPrintf( "ReadPHY: %d\n", xResult );
 80029aa:	4621      	mov	r1, r4
 80029ac:	4801      	ldr	r0, [pc, #4]	; (80029b4 <HAL_ETH_ReadPHYRegister+0x94>)
 80029ae:	f013 ffcf 	bl	8016950 <lUDPLoggingPrintf>
 80029b2:	e7c2      	b.n	800293a <HAL_ETH_ReadPHYRegister+0x1a>
 80029b4:	08018900 	.word	0x08018900

080029b8 <HAL_ETH_WritePHYRegister>:
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
	if( heth->State == HAL_ETH_STATE_BUSY_WR )
 80029ba:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b42      	cmp	r3, #66	; 0x42
 80029c2:	d035      	beq.n	8002a30 <HAL_ETH_WritePHYRegister+0x78>
 80029c4:	4604      	mov	r4, r0
		__HAL_LOCK( heth );
 80029c6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <HAL_ETH_WritePHYRegister+0x1c>
 80029ce:	2402      	movs	r4, #2
}
 80029d0:	4620      	mov	r0, r4
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_LOCK( heth );
 80029d4:	2301      	movs	r3, #1
 80029d6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
		heth->State = HAL_ETH_STATE_BUSY_WR;
 80029da:	2342      	movs	r3, #66	; 0x42
 80029dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		tmpreg = heth->Instance->MACMIIAR;
 80029e0:	6800      	ldr	r0, [r0, #0]
 80029e2:	6905      	ldr	r5, [r0, #16]
		tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 80029e4:	018b      	lsls	r3, r1, #6
 80029e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029ea:	f043 0303 	orr.w	r3, r3, #3
		tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80029ee:	f005 011c 	and.w	r1, r5, #28
 80029f2:	430b      	orrs	r3, r1
		tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 80029f4:	8a21      	ldrh	r1, [r4, #16]
 80029f6:	02c9      	lsls	r1, r1, #11
 80029f8:	b289      	uxth	r1, r1
		tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80029fa:	430b      	orrs	r3, r1
 80029fc:	b292      	uxth	r2, r2
		heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 80029fe:	6142      	str	r2, [r0, #20]
		heth->Instance->MACMIIAR = tmpreg;
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	6113      	str	r3, [r2, #16]
		tickstart = HAL_GetTick();
 8002a04:	f7fd fe6c 	bl	80006e0 <HAL_GetTick>
 8002a08:	4605      	mov	r5, r0
			tmpreg = heth->Instance->MACMIIAR;
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
			if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 8002a0e:	f013 0f01 	tst.w	r3, #1
 8002a12:	d013      	beq.n	8002a3c <HAL_ETH_WritePHYRegister+0x84>
			if( ( HAL_GetTick( ) - tickstart ) > PHY_WRITE_TO )
 8002a14:	f7fd fe64 	bl	80006e0 <HAL_GetTick>
 8002a18:	1b40      	subs	r0, r0, r5
 8002a1a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002a1e:	d3f4      	bcc.n	8002a0a <HAL_ETH_WritePHYRegister+0x52>
		heth->State = HAL_ETH_STATE_READY;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		__HAL_UNLOCK( heth );
 8002a26:	2300      	movs	r3, #0
 8002a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
				xResult = HAL_TIMEOUT;
 8002a2c:	2403      	movs	r4, #3
 8002a2e:	e000      	b.n	8002a32 <HAL_ETH_WritePHYRegister+0x7a>
		xResult = HAL_BUSY;
 8002a30:	2402      	movs	r4, #2
		lUDPLoggingPrintf( "WritePHY: %d\n", xResult );
 8002a32:	4621      	mov	r1, r4
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_ETH_WritePHYRegister+0x94>)
 8002a36:	f013 ff8b 	bl	8016950 <lUDPLoggingPrintf>
 8002a3a:	e7c9      	b.n	80029d0 <HAL_ETH_WritePHYRegister+0x18>
		heth->State = HAL_ETH_STATE_READY;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		__HAL_UNLOCK( heth );
 8002a42:	2300      	movs	r3, #0
 8002a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	return xResult;
 8002a48:	461c      	mov	r4, r3
 8002a4a:	e7c1      	b.n	80029d0 <HAL_ETH_WritePHYRegister+0x18>
 8002a4c:	08018910 	.word	0x08018910

08002a50 <HAL_ETH_Start>:
	__HAL_LOCK( heth );
 8002a50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_ETH_Start+0xc>
 8002a58:	2002      	movs	r0, #2
 8002a5a:	4770      	bx	lr
{
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	4604      	mov	r4, r0
	__HAL_LOCK( heth );
 8002a62:	2501      	movs	r5, #1
 8002a64:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
	heth->State = HAL_ETH_STATE_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 8002a6e:	6803      	ldr	r3, [r0, #0]
 8002a70:	6819      	ldr	r1, [r3, #0]
	prvWriteMACCR( heth, tmpreg );
 8002a72:	f041 0108 	orr.w	r1, r1, #8
 8002a76:	f7ff fccb 	bl	8002410 <prvWriteMACCR>
	__IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	9303      	str	r3, [sp, #12]
	prvWriteMACCR( heth, tmpreg );
 8002a84:	9903      	ldr	r1, [sp, #12]
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff fcc2 	bl	8002410 <prvWriteMACCR>
	ETH_FlushTransmitFIFO( heth );
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7ff fcdb 	bl	8002448 <ETH_FlushTransmitFIFO>
	__IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	f241 0618 	movw	r6, #4120	; 0x1018
 8002a98:	599b      	ldr	r3, [r3, r6]
 8002a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a9e:	9302      	str	r3, [sp, #8]
	prvWriteDMAOMR( heth, tmpreg );
 8002aa0:	9902      	ldr	r1, [sp, #8]
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff fcc1 	bl	800242a <prvWriteDMAOMR>
	__IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	599b      	ldr	r3, [r3, r6]
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	9301      	str	r3, [sp, #4]
	prvWriteDMAOMR( heth, tmpreg );
 8002ab2:	9901      	ldr	r1, [sp, #4]
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff fcb8 	bl	800242a <prvWriteDMAOMR>
	heth->State= HAL_ETH_STATE_READY;
 8002aba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
	__HAL_UNLOCK( heth );
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}

08002ac8 <HAL_ETH_Stop>:
  __HAL_LOCK( heth );
 8002ac8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ETH_Stop+0xc>
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	4770      	bx	lr
{
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	4604      	mov	r4, r0
  __HAL_LOCK( heth );
 8002ada:	2501      	movs	r5, #1
 8002adc:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	__IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	f241 0618 	movw	r6, #4120	; 0x1018
 8002aec:	599b      	ldr	r3, [r3, r6]
 8002aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af2:	9303      	str	r3, [sp, #12]
	prvWriteDMAOMR( heth, tmpreg );
 8002af4:	9903      	ldr	r1, [sp, #12]
 8002af6:	f7ff fc98 	bl	800242a <prvWriteDMAOMR>
	__IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	599b      	ldr	r3, [r3, r6]
 8002afe:	f023 0302 	bic.w	r3, r3, #2
 8002b02:	9302      	str	r3, [sp, #8]
	prvWriteDMAOMR( heth, tmpreg );
 8002b04:	9902      	ldr	r1, [sp, #8]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff fc8f 	bl	800242a <prvWriteDMAOMR>
	__IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	9301      	str	r3, [sp, #4]
	prvWriteMACCR( heth, tmpreg );
 8002b16:	9901      	ldr	r1, [sp, #4]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fc79 	bl	8002410 <prvWriteMACCR>
  ETH_FlushTransmitFIFO( heth );
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fc92 	bl	8002448 <ETH_FlushTransmitFIFO>
	uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	6819      	ldr	r1, [r3, #0]
	prvWriteMACCR( heth, tmpreg );
 8002b28:	f021 0108 	bic.w	r1, r1, #8
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fc6f 	bl	8002410 <prvWriteMACCR>
  heth->State = HAL_ETH_STATE_READY;
 8002b32:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK( heth );
 8002b36:	2000      	movs	r0, #0
 8002b38:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}

08002b40 <HAL_ETH_ConfigMAC>:
	__HAL_LOCK( heth );
 8002b40:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	f000 8082 	beq.w	8002c4e <HAL_ETH_ConfigMAC+0x10e>
{
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	4605      	mov	r5, r0
	__HAL_LOCK( heth );
 8002b50:	2301      	movs	r3, #1
 8002b52:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	heth->State= HAL_ETH_STATE_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	if (macconf != NULL)
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	d06b      	beq.n	8002c38 <HAL_ETH_ConfigMAC+0xf8>
		tmpreg = heth->Instance->MACCR;
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
		tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b64:	493b      	ldr	r1, [pc, #236]	; (8002c54 <HAL_ETH_ConfigMAC+0x114>)
 8002b66:	4019      	ands	r1, r3
			macconf->BackOffLimit |
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	6862      	ldr	r2, [r4, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	68a2      	ldr	r2, [r4, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	68e2      	ldr	r2, [r4, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	6922      	ldr	r2, [r4, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	6962      	ldr	r2, [r4, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	69a2      	ldr	r2, [r4, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	69e2      	ldr	r2, [r4, #28]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	6a22      	ldr	r2, [r4, #32]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b90:	4313      	orrs	r3, r2
 8002b92:	6882      	ldr	r2, [r0, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	68c2      	ldr	r2, [r0, #12]
 8002b98:	4313      	orrs	r3, r2
		prvWriteMACCR( heth, tmpreg );
 8002b9a:	4319      	orrs	r1, r3
 8002b9c:	f7ff fc38 	bl	8002410 <prvWriteMACCR>
		heth->Instance->MACFFR = (uint32_t)(
 8002ba0:	682a      	ldr	r2, [r5, #0]
			macconf->ReceiveAll |
 8002ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ba4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002ba6:	430b      	orrs	r3, r1
			macconf->SourceAddrFilter |
 8002ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002baa:	430b      	orrs	r3, r1
			macconf->PassControlFrames |
 8002bac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002bae:	430b      	orrs	r3, r1
			macconf->BroadcastFramesReception |
 8002bb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bb2:	430b      	orrs	r3, r1
			macconf->DestinationAddrFilter |
 8002bb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bb6:	430b      	orrs	r3, r1
			macconf->PromiscuousMode |
 8002bb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002bba:	430b      	orrs	r3, r1
			macconf->MulticastFramesFilter |
 8002bbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002bbe:	430b      	orrs	r3, r1
		heth->Instance->MACFFR = (uint32_t)(
 8002bc0:	6053      	str	r3, [r2, #4]
		tmpreg = heth->Instance->MACFFR;
 8002bc2:	682b      	ldr	r3, [r5, #0]
 8002bc4:	685e      	ldr	r6, [r3, #4]
		HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f7fd fd90 	bl	80006ec <HAL_Delay>
		heth->Instance->MACFFR = tmpreg;
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	605e      	str	r6, [r3, #4]
		heth->Instance->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002bd4:	609a      	str	r2, [r3, #8]
		heth->Instance->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002bda:	60da      	str	r2, [r3, #12]
		tmpreg = heth->Instance->MACFCR;
 8002bdc:	6829      	ldr	r1, [r5, #0]
 8002bde:	698a      	ldr	r2, [r1, #24]
		tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002be0:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002be4:	0412      	lsls	r2, r2, #16
 8002be6:	0c12      	lsrs	r2, r2, #16
			macconf->ReceiveFlowControl |
 8002be8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bea:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8002bec:	431e      	orrs	r6, r3
 8002bee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bf0:	431e      	orrs	r6, r3
 8002bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bf4:	431e      	orrs	r6, r3
 8002bf6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002bf8:	431e      	orrs	r6, r3
			macconf->PauseTime << 16) |
 8002bfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
			macconf->ReceiveFlowControl |
 8002bfc:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
		tmpreg |= (uint32_t)((
 8002c00:	4316      	orrs	r6, r2
	heth->Instance->MACFCR = ulValue;
 8002c02:	618e      	str	r6, [r1, #24]
	( void ) heth->Instance->MACFCR;
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
	HAL_Delay( ETH_REG_WRITE_DELAY );
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7fd fd6f 	bl	80006ec <HAL_Delay>
	heth->Instance->MACFCR = ulValue;
 8002c0e:	682b      	ldr	r3, [r5, #0]
 8002c10:	619e      	str	r6, [r3, #24]
		heth->Instance->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002c12:	682a      	ldr	r2, [r5, #0]
 8002c14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002c16:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	61d3      	str	r3, [r2, #28]
		tmpreg = heth->Instance->MACVLANTR;
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	69dc      	ldr	r4, [r3, #28]
		HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fd fd63 	bl	80006ec <HAL_Delay>
		heth->Instance->MACVLANTR = tmpreg;
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	61dc      	str	r4, [r3, #28]
	heth->State= HAL_ETH_STATE_READY;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	__HAL_UNLOCK( heth );
 8002c30:	2000      	movs	r0, #0
 8002c32:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
	return HAL_OK;
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
		tmpreg = heth->Instance->MACCR;
 8002c38:	6803      	ldr	r3, [r0, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
		tmpreg &= ~((uint32_t)0x00004800);
 8002c3c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
		tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002c40:	6881      	ldr	r1, [r0, #8]
 8002c42:	68c2      	ldr	r2, [r0, #12]
 8002c44:	4311      	orrs	r1, r2
		prvWriteMACCR( heth, tmpreg );
 8002c46:	4319      	orrs	r1, r3
 8002c48:	f7ff fbe2 	bl	8002410 <prvWriteMACCR>
 8002c4c:	e7ed      	b.n	8002c2a <HAL_ETH_ConfigMAC+0xea>
	__HAL_LOCK( heth );
 8002c4e:	2002      	movs	r0, #2
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	ff20810f 	.word	0xff20810f

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c5c:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4f69      	ldr	r7, [pc, #420]	; (8002e04 <HAL_GPIO_Init+0x1ac>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c60:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8002e10 <HAL_GPIO_Init+0x1b8>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4e68      	ldr	r6, [pc, #416]	; (8002e08 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c66:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8002e14 <HAL_GPIO_Init+0x1bc>
 8002c6a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8002e18 <HAL_GPIO_Init+0x1c0>
 8002c6e:	e057      	b.n	8002d20 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->AFR[position >> 3];
 8002c70:	08ec      	lsrs	r4, r5, #3
 8002c72:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002c76:	f8d4 c020 	ldr.w	ip, [r4, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c7a:	f005 0207 	and.w	r2, r5, #7
 8002c7e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f20b 	lsl.w	r2, r2, fp
 8002c88:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c8c:	690a      	ldr	r2, [r1, #16]
 8002c8e:	fa02 f20b 	lsl.w	r2, r2, fp
 8002c92:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->AFR[position >> 3] = temp;
 8002c96:	6222      	str	r2, [r4, #32]
 8002c98:	e04e      	b.n	8002d38 <HAL_GPIO_Init+0xe0>
        temp = GPIOx->OSPEEDR;
 8002c9a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c9c:	ea02 0b04 	and.w	fp, r2, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ca0:	68cc      	ldr	r4, [r1, #12]
 8002ca2:	fa04 f40c 	lsl.w	r4, r4, ip
 8002ca6:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8002caa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002cac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cae:	ea24 0b03 	bic.w	fp, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002cb2:	684c      	ldr	r4, [r1, #4]
 8002cb4:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8002cb8:	40ab      	lsls	r3, r5
 8002cba:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OTYPER = temp;
 8002cbe:	6043      	str	r3, [r0, #4]
 8002cc0:	e051      	b.n	8002d66 <HAL_GPIO_Init+0x10e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	fa02 f20b 	lsl.w	r2, r2, fp
 8002cc8:	ea42 020c 	orr.w	r2, r2, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ccc:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR;
 8002cce:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd4:	684a      	ldr	r2, [r1, #4]
 8002cd6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002cda:	bf0c      	ite	eq
 8002cdc:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8002cde:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 8002ce2:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8002ce4:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce6:	684a      	ldr	r2, [r1, #4]
 8002ce8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002cec:	bf0c      	ite	eq
 8002cee:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8002cf0:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR = temp;
 8002cf4:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf8:	684b      	ldr	r3, [r1, #4]
 8002cfa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	bf0c      	ite	eq
 8002d00:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8002d02:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8002d06:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8002d08:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d0a:	684a      	ldr	r2, [r1, #4]
 8002d0c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002d10:	bf0c      	ite	eq
 8002d12:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8002d14:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8002d18:	60f3      	str	r3, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d1a:	3501      	adds	r5, #1
 8002d1c:	2d10      	cmp	r5, #16
 8002d1e:	d06f      	beq.n	8002e00 <HAL_GPIO_Init+0x1a8>
    ioposition = ((uint32_t)0x01) << position;
 8002d20:	2301      	movs	r3, #1
 8002d22:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d24:	680a      	ldr	r2, [r1, #0]
 8002d26:	ea03 0802 	and.w	r8, r3, r2
    if(iocurrent == ioposition)
 8002d2a:	4543      	cmp	r3, r8
 8002d2c:	d1f5      	bne.n	8002d1a <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d2e:	684a      	ldr	r2, [r1, #4]
 8002d30:	f022 0210 	bic.w	r2, r2, #16
 8002d34:	2a02      	cmp	r2, #2
 8002d36:	d09b      	beq.n	8002c70 <HAL_GPIO_Init+0x18>
      temp = GPIOx->MODER;
 8002d38:	6804      	ldr	r4, [r0, #0]
 8002d3a:	ea4f 0c45 	mov.w	ip, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f20c 	lsl.w	r2, r2, ip
 8002d44:	43d2      	mvns	r2, r2
 8002d46:	ea04 0b02 	and.w	fp, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d4a:	684c      	ldr	r4, [r1, #4]
 8002d4c:	f004 0403 	and.w	r4, r4, #3
 8002d50:	fa04 f40c 	lsl.w	r4, r4, ip
 8002d54:	ea44 040b 	orr.w	r4, r4, fp
      GPIOx->MODER = temp;
 8002d58:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d5a:	684c      	ldr	r4, [r1, #4]
 8002d5c:	f024 0410 	bic.w	r4, r4, #16
 8002d60:	3c01      	subs	r4, #1
 8002d62:	2c01      	cmp	r4, #1
 8002d64:	d999      	bls.n	8002c9a <HAL_GPIO_Init+0x42>
      temp = GPIOx->PUPDR;
 8002d66:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d68:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d6a:	688b      	ldr	r3, [r1, #8]
 8002d6c:	fa03 f30c 	lsl.w	r3, r3, ip
 8002d70:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8002d72:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d74:	684b      	ldr	r3, [r1, #4]
 8002d76:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d7a:	d0ce      	beq.n	8002d1a <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
 8002d84:	f025 0303 	bic.w	r3, r5, #3
 8002d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d8c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2];
 8002d90:	689c      	ldr	r4, [r3, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d92:	f005 0203 	and.w	r2, r5, #3
 8002d96:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f20b 	lsl.w	r2, r2, fp
 8002da0:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002da4:	4570      	cmp	r0, lr
 8002da6:	d08c      	beq.n	8002cc2 <HAL_GPIO_Init+0x6a>
 8002da8:	4548      	cmp	r0, r9
 8002daa:	d01b      	beq.n	8002de4 <HAL_GPIO_Init+0x18c>
 8002dac:	4550      	cmp	r0, sl
 8002dae:	d01b      	beq.n	8002de8 <HAL_GPIO_Init+0x190>
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_GPIO_Init+0x1b4>)
 8002db2:	4290      	cmp	r0, r2
 8002db4:	d01a      	beq.n	8002dec <HAL_GPIO_Init+0x194>
 8002db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dba:	4290      	cmp	r0, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_GPIO_Init+0x198>
 8002dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dc2:	4290      	cmp	r0, r2
 8002dc4:	d016      	beq.n	8002df4 <HAL_GPIO_Init+0x19c>
 8002dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d014      	beq.n	8002df8 <HAL_GPIO_Init+0x1a0>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dd2:	4290      	cmp	r0, r2
 8002dd4:	d012      	beq.n	8002dfc <HAL_GPIO_Init+0x1a4>
 8002dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	bf0c      	ite	eq
 8002dde:	2208      	moveq	r2, #8
 8002de0:	2209      	movne	r2, #9
 8002de2:	e76f      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002de4:	2201      	movs	r2, #1
 8002de6:	e76d      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002de8:	2202      	movs	r2, #2
 8002dea:	e76b      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002dec:	2203      	movs	r2, #3
 8002dee:	e769      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002df0:	2204      	movs	r2, #4
 8002df2:	e767      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002df4:	2205      	movs	r2, #5
 8002df6:	e765      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002df8:	2206      	movs	r2, #6
 8002dfa:	e763      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	e761      	b.n	8002cc4 <HAL_GPIO_Init+0x6c>
      }
    }
  }
}
 8002e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013c00 	.word	0x40013c00
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800

08002e1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e1c:	6903      	ldr	r3, [r0, #16]
 8002e1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e20:	bf14      	ite	ne
 8002e22:	2001      	movne	r0, #1
 8002e24:	2000      	moveq	r0, #0
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002e28:	6943      	ldr	r3, [r0, #20]
 8002e2a:	4059      	eors	r1, r3
 8002e2c:	6141      	str	r1, [r0, #20]
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e30:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4203      	tst	r3, r0
 8002e38:	d100      	bne.n	8002e3c <HAL_GPIO_EXTI_IRQHandler+0xc>
 8002e3a:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e40:	f007 fc90 	bl	800a764 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e44:	e7f9      	b.n	8002e3a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002e46:	bf00      	nop
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	f013 0f01 	tst.w	r3, #1
 8002e56:	d02d      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e58:	4bae      	ldr	r3, [pc, #696]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d01e      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x56>
 8002e64:	4bab      	ldr	r3, [pc, #684]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002e70:	2200      	movs	r2, #0
 8002e72:	4ba9      	ldr	r3, [pc, #676]	; (8003118 <HAL_RCC_OscConfig+0x2cc>)
 8002e74:	701a      	strb	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fd fc33 	bl	80006e0 <HAL_GetTick>
 8002e7a:	4607      	mov	r7, r0

      /* Wait till HSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7c:	4da5      	ldr	r5, [pc, #660]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7e:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e88:	d038      	beq.n	8002efc <HAL_RCC_OscConfig+0xb0>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8a:	f7fd fc29 	bl	80006e0 <HAL_GetTick>
 8002e8e:	1bc0      	subs	r0, r0, r7
 8002e90:	42b0      	cmp	r0, r6
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x36>
        {
          return HAL_TIMEOUT;
 8002e94:	2003      	movs	r0, #3
 8002e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e98:	4b9e      	ldr	r3, [pc, #632]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ea0:	d0e6      	beq.n	8002e70 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea2:	4b9c      	ldr	r3, [pc, #624]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x68>
 8002eac:	6863      	ldr	r3, [r4, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 818e 	beq.w	80031d0 <HAL_RCC_OscConfig+0x384>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	f013 0f02 	tst.w	r3, #2
 8002eba:	d064      	beq.n	8002f86 <HAL_RCC_OscConfig+0x13a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebc:	4b95      	ldr	r3, [pc, #596]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f013 0f0c 	tst.w	r3, #12
 8002ec4:	d046      	beq.n	8002f54 <HAL_RCC_OscConfig+0x108>
 8002ec6:	4b93      	ldr	r3, [pc, #588]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d03b      	beq.n	8002f4a <HAL_RCC_OscConfig+0xfe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed2:	68e3      	ldr	r3, [r4, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d07f      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x18c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4b90      	ldr	r3, [pc, #576]	; (800311c <HAL_RCC_OscConfig+0x2d0>)
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fd fbff 	bl	80006e0 <HAL_GetTick>
 8002ee2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	4d8b      	ldr	r5, [pc, #556]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	f013 0f02 	tst.w	r3, #2
 8002eec:	d164      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x16c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fd fbf7 	bl	80006e0 <HAL_GetTick>
 8002ef2:	1b80      	subs	r0, r0, r6
 8002ef4:	2864      	cmp	r0, #100	; 0x64
 8002ef6:	d9f6      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8002ef8:	2003      	movs	r0, #3
 8002efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efc:	7922      	ldrb	r2, [r4, #4]
 8002efe:	4b86      	ldr	r3, [pc, #536]	; (8003118 <HAL_RCC_OscConfig+0x2cc>)
 8002f00:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f02:	6863      	ldr	r3, [r4, #4]
 8002f04:	b183      	cbz	r3, 8002f28 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8002f06:	f7fd fbeb 	bl	80006e0 <HAL_GetTick>
 8002f0a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0c:	4d81      	ldr	r5, [pc, #516]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0e:	f241 3688 	movw	r6, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f18:	d1cc      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1a:	f7fd fbe1 	bl	80006e0 <HAL_GetTick>
 8002f1e:	1bc0      	subs	r0, r0, r7
 8002f20:	42b0      	cmp	r0, r6
 8002f22:	d9f6      	bls.n	8002f12 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002f28:	f7fd fbda 	bl	80006e0 <HAL_GetTick>
 8002f2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4d79      	ldr	r5, [pc, #484]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f241 3688 	movw	r6, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f3a:	d0bb      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fd fbd0 	bl	80006e0 <HAL_GetTick>
 8002f40:	1bc0      	subs	r0, r0, r7
 8002f42:	42b0      	cmp	r0, r6
 8002f44:	d9f6      	bls.n	8002f34 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
 8002f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f52:	d1be      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f013 0f02 	tst.w	r3, #2
 8002f5c:	d004      	beq.n	8002f68 <HAL_RCC_OscConfig+0x11c>
 8002f5e:	68e3      	ldr	r3, [r4, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x11c>
        return HAL_ERROR;
 8002f64:	2001      	movs	r0, #1
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	486a      	ldr	r0, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002f6a:	6802      	ldr	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	23f8      	movs	r3, #248	; 0xf8
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	6921      	ldr	r1, [r4, #16]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002f82:	4313      	orrs	r3, r2
 8002f84:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	f013 0f08 	tst.w	r3, #8
 8002f8c:	d048      	beq.n	8003020 <HAL_RCC_OscConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8e:	6963      	ldr	r3, [r4, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d033      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f94:	2201      	movs	r2, #1
 8002f96:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x2d4>)
 8002f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fba1 	bl	80006e0 <HAL_GetTick>
 8002f9e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa0:	4d5c      	ldr	r5, [pc, #368]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002fa2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002fa4:	f013 0f02 	tst.w	r3, #2
 8002fa8:	d13a      	bne.n	8003020 <HAL_RCC_OscConfig+0x1d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fd fb99 	bl	80006e0 <HAL_GetTick>
 8002fae:	1b80      	subs	r0, r0, r6
 8002fb0:	2864      	cmp	r0, #100	; 0x64
 8002fb2:	d9f6      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002fb4:	2003      	movs	r0, #3
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4856      	ldr	r0, [pc, #344]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002fba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	23f8      	movs	r3, #248	; 0xf8
 8002fbe:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	6921      	ldr	r1, [r4, #16]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	6003      	str	r3, [r0, #0]
 8002fd6:	e7d6      	b.n	8002f86 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4b50      	ldr	r3, [pc, #320]	; (800311c <HAL_RCC_OscConfig+0x2d0>)
 8002fdc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fde:	f7fd fb7f 	bl	80006e0 <HAL_GetTick>
 8002fe2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe4:	4d4b      	ldr	r5, [pc, #300]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	f013 0f02 	tst.w	r3, #2
 8002fec:	d0cb      	beq.n	8002f86 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fd fb77 	bl	80006e0 <HAL_GetTick>
 8002ff2:	1b80      	subs	r0, r0, r6
 8002ff4:	2864      	cmp	r0, #100	; 0x64
 8002ff6:	d9f6      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4b48      	ldr	r3, [pc, #288]	; (8003120 <HAL_RCC_OscConfig+0x2d4>)
 8003000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fd fb6d 	bl	80006e0 <HAL_GetTick>
 8003006:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	4d42      	ldr	r5, [pc, #264]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 800300a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800300c:	f013 0f02 	tst.w	r3, #2
 8003010:	d006      	beq.n	8003020 <HAL_RCC_OscConfig+0x1d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003012:	f7fd fb65 	bl	80006e0 <HAL_GetTick>
 8003016:	1b80      	subs	r0, r0, r6
 8003018:	2864      	cmp	r0, #100	; 0x64
 800301a:	d9f6      	bls.n	800300a <HAL_RCC_OscConfig+0x1be>
        {
          return HAL_TIMEOUT;
 800301c:	2003      	movs	r0, #3
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f013 0f04 	tst.w	r3, #4
 8003026:	d11f      	bne.n	8003068 <HAL_RCC_OscConfig+0x21c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003028:	69a3      	ldr	r3, [r4, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80d2 	beq.w	80031d4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003030:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	f002 020c 	and.w	r2, r2, #12
 8003038:	2a08      	cmp	r2, #8
 800303a:	f000 80cd 	beq.w	80031d8 <HAL_RCC_OscConfig+0x38c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303e:	2b02      	cmp	r3, #2
 8003040:	d076      	beq.n	8003130 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003042:	2200      	movs	r2, #0
 8003044:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x2d8>)
 8003046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd fb4a 	bl	80006e0 <HAL_GetTick>
 800304c:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304e:	4c31      	ldr	r4, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003056:	f000 80b9 	beq.w	80031cc <HAL_RCC_OscConfig+0x380>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd fb41 	bl	80006e0 <HAL_GetTick>
 800305e:	1b40      	subs	r0, r0, r5
 8003060:	2864      	cmp	r0, #100	; 0x64
 8003062:	d9f5      	bls.n	8003050 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003064:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
 800306a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_DBP;
 8003072:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800307e:	f7fd fb2f 	bl	80006e0 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003084:	4d28      	ldr	r5, [pc, #160]	; (8003128 <HAL_RCC_OscConfig+0x2dc>)
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	f413 7f80 	tst.w	r3, #256	; 0x100
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x250>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fd fb27 	bl	80006e0 <HAL_GetTick>
 8003092:	1b80      	subs	r0, r0, r6
 8003094:	2864      	cmp	r0, #100	; 0x64
 8003096:	d9f6      	bls.n	8003086 <HAL_RCC_OscConfig+0x23a>
        return HAL_TIMEOUT;
 8003098:	2003      	movs	r0, #3
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800309c:	2200      	movs	r2, #0
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <HAL_RCC_OscConfig+0x2e0>)
 80030a0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80030a2:	f7fd fb1d 	bl	80006e0 <HAL_GetTick>
 80030a6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	4d1a      	ldr	r5, [pc, #104]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f241 3688 	movw	r6, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030b0:	f013 0f02 	tst.w	r3, #2
 80030b4:	d006      	beq.n	80030c4 <HAL_RCC_OscConfig+0x278>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fd fb13 	bl	80006e0 <HAL_GetTick>
 80030ba:	1bc0      	subs	r0, r0, r7
 80030bc:	42b0      	cmp	r0, r6
 80030be:	d9f6      	bls.n	80030ae <HAL_RCC_OscConfig+0x262>
        return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
 80030c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	7a22      	ldrb	r2, [r4, #8]
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_RCC_OscConfig+0x2e0>)
 80030c8:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_OscConfig+0x2a6>
      tickstart = HAL_GetTick();
 80030d0:	f7fd fb06 	bl	80006e0 <HAL_GetTick>
 80030d4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4d0f      	ldr	r5, [pc, #60]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030de:	f013 0f02 	tst.w	r3, #2
 80030e2:	d0a1      	beq.n	8003028 <HAL_RCC_OscConfig+0x1dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fd fafc 	bl	80006e0 <HAL_GetTick>
 80030e8:	1bc0      	subs	r0, r0, r7
 80030ea:	42b0      	cmp	r0, r6
 80030ec:	d9f6      	bls.n	80030dc <HAL_RCC_OscConfig+0x290>
          return HAL_TIMEOUT;
 80030ee:	2003      	movs	r0, #3
 80030f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 80030f2:	f7fd faf5 	bl	80006e0 <HAL_GetTick>
 80030f6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4d06      	ldr	r5, [pc, #24]	; (8003114 <HAL_RCC_OscConfig+0x2c8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003100:	f013 0f02 	tst.w	r3, #2
 8003104:	d190      	bne.n	8003028 <HAL_RCC_OscConfig+0x1dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd faeb 	bl	80006e0 <HAL_GetTick>
 800310a:	1bc0      	subs	r0, r0, r7
 800310c:	42b0      	cmp	r0, r6
 800310e:	d9f6      	bls.n	80030fe <HAL_RCC_OscConfig+0x2b2>
          return HAL_TIMEOUT;
 8003110:	2003      	movs	r0, #3
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	40023802 	.word	0x40023802
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
 8003124:	42470060 	.word	0x42470060
 8003128:	40007000 	.word	0x40007000
 800312c:	40023870 	.word	0x40023870
        __HAL_RCC_PLL_DISABLE();
 8003130:	2200      	movs	r2, #0
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x390>)
 8003134:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003136:	f7fd fad3 	bl	80006e0 <HAL_GetTick>
 800313a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	4d28      	ldr	r5, [pc, #160]	; (80031e0 <HAL_RCC_OscConfig+0x394>)
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003144:	d006      	beq.n	8003154 <HAL_RCC_OscConfig+0x308>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fd facb 	bl	80006e0 <HAL_GetTick>
 800314a:	1b80      	subs	r0, r0, r6
 800314c:	2864      	cmp	r0, #100	; 0x64
 800314e:	d9f6      	bls.n	800313e <HAL_RCC_OscConfig+0x2f2>
            return HAL_TIMEOUT;
 8003150:	2003      	movs	r0, #3
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003158:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800315c:	fab2 f282 	clz	r2, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003164:	fa90 f0a0 	rbit	r0, r0
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003168:	fab0 f080 	clz	r0, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003170:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003174:	fab1 f181 	clz	r1, r1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	6a23      	ldr	r3, [r4, #32]
 800317a:	69e5      	ldr	r5, [r4, #28]
 800317c:	432b      	orrs	r3, r5
 800317e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003186:	fa05 f202 	lsl.w	r2, r5, r2
 800318a:	4313      	orrs	r3, r2
 800318c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800318e:	0852      	lsrs	r2, r2, #1
 8003190:	3a01      	subs	r2, #1
 8003192:	b2c0      	uxtb	r0, r0
 8003194:	4082      	lsls	r2, r0
 8003196:	4313      	orrs	r3, r2
 8003198:	b2c9      	uxtb	r1, r1
 800319a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800319c:	408a      	lsls	r2, r1
 800319e:	4313      	orrs	r3, r2
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_RCC_OscConfig+0x394>)
 80031a2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80031a4:	2201      	movs	r2, #1
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x390>)
 80031a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031aa:	f7fd fa99 	bl	80006e0 <HAL_GetTick>
 80031ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	4c0b      	ldr	r4, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x394>)
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fa91 	bl	80006e0 <HAL_GetTick>
 80031be:	1b40      	subs	r0, r0, r5
 80031c0:	2864      	cmp	r0, #100	; 0x64
 80031c2:	d9f6      	bls.n	80031b2 <HAL_RCC_OscConfig+0x366>
            return HAL_TIMEOUT;
 80031c4:	2003      	movs	r0, #3
 80031c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80031c8:	2000      	movs	r0, #0
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031cc:	2000      	movs	r0, #0
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80031d0:	2001      	movs	r0, #1
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80031d4:	2000      	movs	r0, #0
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031dc:	42470060 	.word	0x42470060
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e8:	4604      	mov	r4, r0
 80031ea:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80031ec:	4b87      	ldr	r3, [pc, #540]	; (800340c <HAL_RCC_ClockConfig+0x228>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	428b      	cmp	r3, r1
 80031f6:	d274      	bcs.n	80032e2 <HAL_RCC_ClockConfig+0xfe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f8:	b2ca      	uxtb	r2, r1
 80031fa:	4b84      	ldr	r3, [pc, #528]	; (800340c <HAL_RCC_ClockConfig+0x228>)
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	4299      	cmp	r1, r3
 8003206:	d002      	beq.n	800320e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
 800320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320e:	6803      	ldr	r3, [r0, #0]
 8003210:	f013 0f02 	tst.w	r3, #2
 8003214:	d006      	beq.n	8003224 <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003216:	4a7e      	ldr	r2, [pc, #504]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003218:	6893      	ldr	r3, [r2, #8]
 800321a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321e:	6881      	ldr	r1, [r0, #8]
 8003220:	430b      	orrs	r3, r1
 8003222:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	f013 0f01 	tst.w	r3, #1
 800322a:	f000 80cb 	beq.w	80033c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	6862      	ldr	r2, [r4, #4]
 8003230:	2a01      	cmp	r2, #1
 8003232:	d025      	beq.n	8003280 <HAL_RCC_ClockConfig+0x9c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	2a02      	cmp	r2, #2
 8003236:	d02b      	beq.n	8003290 <HAL_RCC_ClockConfig+0xac>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	4b75      	ldr	r3, [pc, #468]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f013 0f02 	tst.w	r3, #2
 8003240:	f000 80dd 	beq.w	80033fe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003244:	4972      	ldr	r1, [pc, #456]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003246:	688b      	ldr	r3, [r1, #8]
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fd fa46 	bl	80006e0 <HAL_GetTick>
 8003254:	4605      	mov	r5, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d021      	beq.n	80032a0 <HAL_RCC_ClockConfig+0xbc>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325c:	2b02      	cmp	r3, #2
 800325e:	d030      	beq.n	80032c2 <HAL_RCC_ClockConfig+0xde>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003260:	4e6b      	ldr	r6, [pc, #428]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003262:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003266:	68b3      	ldr	r3, [r6, #8]
 8003268:	f013 0f0c 	tst.w	r3, #12
 800326c:	f000 80aa 	beq.w	80033c4 <HAL_RCC_ClockConfig+0x1e0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fd fa36 	bl	80006e0 <HAL_GetTick>
 8003274:	1b40      	subs	r0, r0, r5
 8003276:	42b8      	cmp	r0, r7
 8003278:	d9f5      	bls.n	8003266 <HAL_RCC_ClockConfig+0x82>
          {
            return HAL_TIMEOUT;
 800327a:	2003      	movs	r0, #3
 800327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003280:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003288:	d1dc      	bne.n	8003244 <HAL_RCC_ClockConfig+0x60>
          return HAL_ERROR;
 800328a:	2001      	movs	r0, #1
 800328c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	4b5f      	ldr	r3, [pc, #380]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003298:	d1d4      	bne.n	8003244 <HAL_RCC_ClockConfig+0x60>
          return HAL_ERROR;
 800329a:	2001      	movs	r0, #1
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80032a0:	4e5b      	ldr	r6, [pc, #364]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80032a6:	68b3      	ldr	r3, [r6, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	f000 8089 	beq.w	80033c4 <HAL_RCC_ClockConfig+0x1e0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b2:	f7fd fa15 	bl	80006e0 <HAL_GetTick>
 80032b6:	1b40      	subs	r0, r0, r5
 80032b8:	42b8      	cmp	r0, r7
 80032ba:	d9f4      	bls.n	80032a6 <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 80032bc:	2003      	movs	r0, #3
 80032be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c2:	4e53      	ldr	r6, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c8:	68b3      	ldr	r3, [r6, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d078      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1e0>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fd fa05 	bl	80006e0 <HAL_GetTick>
 80032d6:	1b40      	subs	r0, r0, r5
 80032d8:	42b8      	cmp	r0, r7
 80032da:	d9f5      	bls.n	80032c8 <HAL_RCC_ClockConfig+0xe4>
            return HAL_TIMEOUT;
 80032dc:	2003      	movs	r0, #3
 80032de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e2:	6803      	ldr	r3, [r0, #0]
 80032e4:	f013 0f02 	tst.w	r3, #2
 80032e8:	d006      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x114>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ea:	4a49      	ldr	r2, [pc, #292]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 80032ec:	6893      	ldr	r3, [r2, #8]
 80032ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f2:	6881      	ldr	r1, [r0, #8]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	f013 0f01 	tst.w	r3, #1
 80032fe:	d056      	beq.n	80033ae <HAL_RCC_ClockConfig+0x1ca>
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003300:	6862      	ldr	r2, [r4, #4]
 8003302:	2a01      	cmp	r2, #1
 8003304:	d023      	beq.n	800334e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003306:	2a02      	cmp	r2, #2
 8003308:	d029      	beq.n	800335e <HAL_RCC_ClockConfig+0x17a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f013 0f02 	tst.w	r3, #2
 8003312:	d077      	beq.n	8003404 <HAL_RCC_ClockConfig+0x220>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003314:	493e      	ldr	r1, [pc, #248]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003316:	688b      	ldr	r3, [r1, #8]
 8003318:	f023 0303 	bic.w	r3, r3, #3
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fd f9de 	bl	80006e0 <HAL_GetTick>
 8003324:	4606      	mov	r6, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	6863      	ldr	r3, [r4, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x18a>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332c:	2b02      	cmp	r3, #2
 800332e:	d02e      	beq.n	800338e <HAL_RCC_ClockConfig+0x1aa>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003330:	4f37      	ldr	r7, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f013 0f0c 	tst.w	r3, #12
 800333c:	d037      	beq.n	80033ae <HAL_RCC_ClockConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fd f9cf 	bl	80006e0 <HAL_GetTick>
 8003342:	1b80      	subs	r0, r0, r6
 8003344:	4540      	cmp	r0, r8
 8003346:	d9f6      	bls.n	8003336 <HAL_RCC_ClockConfig+0x152>
          {
            return HAL_TIMEOUT;
 8003348:	2003      	movs	r0, #3
 800334a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b30      	ldr	r3, [pc, #192]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003356:	d1dd      	bne.n	8003314 <HAL_RCC_ClockConfig+0x130>
          return HAL_ERROR;
 8003358:	2001      	movs	r0, #1
 800335a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003366:	d1d5      	bne.n	8003314 <HAL_RCC_ClockConfig+0x130>
          return HAL_ERROR;
 8003368:	2001      	movs	r0, #1
 800336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800336e:	4f28      	ldr	r7, [pc, #160]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d017      	beq.n	80033ae <HAL_RCC_ClockConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337e:	f7fd f9af 	bl	80006e0 <HAL_GetTick>
 8003382:	1b80      	subs	r0, r0, r6
 8003384:	4540      	cmp	r0, r8
 8003386:	d9f5      	bls.n	8003374 <HAL_RCC_ClockConfig+0x190>
            return HAL_TIMEOUT;
 8003388:	2003      	movs	r0, #3
 800338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4f20      	ldr	r7, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d007      	beq.n	80033ae <HAL_RCC_ClockConfig+0x1ca>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339e:	f7fd f99f 	bl	80006e0 <HAL_GetTick>
 80033a2:	1b80      	subs	r0, r0, r6
 80033a4:	4540      	cmp	r0, r8
 80033a6:	d9f5      	bls.n	8003394 <HAL_RCC_ClockConfig+0x1b0>
            return HAL_TIMEOUT;
 80033a8:	2003      	movs	r0, #3
 80033aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	b2ea      	uxtb	r2, r5
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <HAL_RCC_ClockConfig+0x228>)
 80033b2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	429d      	cmp	r5, r3
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80033be:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80033c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	f013 0f04 	tst.w	r3, #4
 80033ca:	d006      	beq.n	80033da <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4a10      	ldr	r2, [pc, #64]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 80033ce:	6893      	ldr	r3, [r2, #8]
 80033d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80033d4:	68e1      	ldr	r1, [r4, #12]
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	f013 0f08 	tst.w	r3, #8
 80033e0:	d007      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x20e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033e2:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x22c>)
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	6921      	ldr	r1, [r4, #16]
 80033e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80033ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033f0:	6093      	str	r3, [r2, #8]
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd f93e 	bl	8000674 <HAL_InitTick>
  return HAL_OK;
 80033f8:	2000      	movs	r0, #0
 80033fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
 8003400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return HAL_ERROR;
 8003404:	2001      	movs	r0, #1
 8003406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	460c      	mov	r4, r1
 800341a:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800341c:	b1d8      	cbz	r0, 8003456 <HAL_RCC_MCOConfig+0x42>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 800341e:	4d1b      	ldr	r5, [pc, #108]	; (800348c <HAL_RCC_MCOConfig+0x78>)
 8003420:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	632b      	str	r3, [r5, #48]	; 0x30

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800342c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800343a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800343c:	a901      	add	r1, sp, #4
 800343e:	4814      	ldr	r0, [pc, #80]	; (8003490 <HAL_RCC_MCOConfig+0x7c>)
 8003440:	f7ff fc0a 	bl	8002c58 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8003444:	68ab      	ldr	r3, [r5, #8]
 8003446:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
 800344a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800344e:	431c      	orrs	r4, r3
 8003450:	60ac      	str	r4, [r5, #8]
  }
}
 8003452:	b006      	add	sp, #24
 8003454:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8003456:	4d0d      	ldr	r5, [pc, #52]	; (800348c <HAL_RCC_MCOConfig+0x78>)
 8003458:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	632b      	str	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003464:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003472:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003474:	a901      	add	r1, sp, #4
 8003476:	4807      	ldr	r0, [pc, #28]	; (8003494 <HAL_RCC_MCOConfig+0x80>)
 8003478:	f7ff fbee 	bl	8002c58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800347c:	68aa      	ldr	r2, [r5, #8]
 800347e:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8003482:	4332      	orrs	r2, r6
 8003484:	4314      	orrs	r4, r2
 8003486:	60ac      	str	r4, [r5, #8]
 8003488:	e7e3      	b.n	8003452 <HAL_RCC_MCOConfig+0x3e>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40020800 	.word	0x40020800
 8003494:	40020000 	.word	0x40020000

08003498 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_GetSysClockFreq+0x70>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x14>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d003      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4818      	ldr	r0, [pc, #96]	; (800350c <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034aa:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80034ac:	4818      	ldr	r0, [pc, #96]	; (8003510 <HAL_RCC_GetSysClockFreq+0x78>)
 80034ae:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_RCC_GetSysClockFreq+0x70>)
 80034b2:	6853      	ldr	r3, [r2, #4]
 80034b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b8:	6852      	ldr	r2, [r2, #4]
 80034ba:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <HAL_RCC_GetSysClockFreq+0x70>)
 80034c0:	6850      	ldr	r0, [r2, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80034c6:	fa91 f2a1 	rbit	r2, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	ea00 0001 	and.w	r0, r0, r1
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	fa20 f202 	lsr.w	r2, r0, r2
 80034d8:	bf14      	ite	ne
 80034da:	480d      	ldrne	r0, [pc, #52]	; (8003510 <HAL_RCC_GetSysClockFreq+0x78>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80034dc:	480b      	ldreq	r0, [pc, #44]	; (800350c <HAL_RCC_GetSysClockFreq+0x74>)
 80034de:	fbb0 f0f3 	udiv	r0, r0, r3
 80034e2:	fb00 f002 	mul.w	r0, r0, r2
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCC_GetSysClockFreq+0x70>)
 80034e8:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034ee:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	40d3      	lsrs	r3, r2
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003502:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003506:	4770      	bx	lr
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	017d7840 	.word	0x017d7840

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003516:	f7ff ffbf 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_GetHCLKFreq+0x2c>)
 800351c:	689a      	ldr	r2, [r3, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	23f0      	movs	r3, #240	; 0xf0
 8003520:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_RCC_GetHCLKFreq+0x30>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	40d8      	lsrs	r0, r3
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_GetHCLKFreq+0x34>)
 800353a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800353c:	bd08      	pop	{r3, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	08018920 	.word	0x08018920
 8003548:	20000000 	.word	0x20000000

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003550:	6803      	ldr	r3, [r0, #0]
 8003552:	f013 0f01 	tst.w	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	f013 0f02 	tst.w	r3, #2
 800355e:	d13d      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x90>
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  return HAL_OK;
 8003560:	2000      	movs	r0, #0
 8003562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003564:	2200      	movs	r2, #0
 8003566:	4b4d      	ldr	r3, [pc, #308]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003568:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800356a:	f7fd f8b9 	bl	80006e0 <HAL_GetTick>
 800356e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003570:	4c4b      	ldr	r4, [pc, #300]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003578:	d006      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800357a:	f7fd f8b1 	bl	80006e0 <HAL_GetTick>
 800357e:	1b80      	subs	r0, r0, r6
 8003580:	2864      	cmp	r0, #100	; 0x64
 8003582:	d9f6      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8003584:	2003      	movs	r0, #3
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800358c:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003590:	fab2 f282 	clz	r2, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003598:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800359c:	fab3 f383 	clz	r3, r3
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	6869      	ldr	r1, [r5, #4]
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	68a9      	ldr	r1, [r5, #8]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80035b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80035b8:	2201      	movs	r2, #1
 80035ba:	4b38      	ldr	r3, [pc, #224]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80035be:	f7fd f88f 	bl	80006e0 <HAL_GetTick>
 80035c2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c4:	4c36      	ldr	r4, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80035cc:	d1c4      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035ce:	f7fd f887 	bl	80006e0 <HAL_GetTick>
 80035d2:	1b80      	subs	r0, r0, r6
 80035d4:	2864      	cmp	r0, #100	; 0x64
 80035d6:	d9f6      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        return HAL_TIMEOUT;
 80035d8:	2003      	movs	r0, #3
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4a30      	ldr	r2, [pc, #192]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80035de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_DBP;
 80035e6:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80035f2:	f7fd f875 	bl	80006e0 <HAL_GetTick>
 80035f6:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035f8:	4c2a      	ldr	r4, [pc, #168]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003600:	d106      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd f86d 	bl	80006e0 <HAL_GetTick>
 8003606:	1b80      	subs	r0, r0, r6
 8003608:	2864      	cmp	r0, #100	; 0x64
 800360a:	d9f6      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xae>
        return HAL_TIMEOUT;
 800360c:	2003      	movs	r0, #3
 800360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003610:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	68ea      	ldr	r2, [r5, #12]
 8003616:	4053      	eors	r3, r2
 8003618:	f413 7f40 	tst.w	r3, #768	; 0x300
 800361c:	d009      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361e:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003620:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4920      	ldr	r1, [pc, #128]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003628:	2001      	movs	r0, #1
 800362a:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362c:	2000      	movs	r0, #0
 800362e:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg;
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
    if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003632:	68eb      	ldr	r3, [r5, #12]
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d013      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363a:	68eb      	ldr	r3, [r5, #12]
 800363c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003640:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003644:	d01e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8003646:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003648:	6893      	ldr	r3, [r2, #8]
 800364a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003652:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003654:	68eb      	ldr	r3, [r5, #12]
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	430b      	orrs	r3, r1
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800365e:	2000      	movs	r0, #0
 8003660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8003662:	f7fd f83d 	bl	80006e0 <HAL_GetTick>
 8003666:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4c0d      	ldr	r4, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003670:	f013 0f02 	tst.w	r3, #2
 8003674:	d1e1      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd f833 	bl	80006e0 <HAL_GetTick>
 800367a:	1bc0      	subs	r0, r0, r7
 800367c:	42b0      	cmp	r0, r6
 800367e:	d9f6      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x122>
          return HAL_TIMEOUT;
 8003680:	2003      	movs	r0, #3
}
 8003682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	4906      	ldr	r1, [pc, #24]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003686:	688a      	ldr	r2, [r1, #8]
 8003688:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800368c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
 8003698:	e7da      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800369a:	bf00      	nop
 800369c:	42470068 	.word	0x42470068
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	42470e40 	.word	0x42470e40

080036ac <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80036ac:	4770      	bx	lr

080036ae <HAL_RNG_Init>:
  if(hrng == NULL)
 80036ae:	b1b8      	cbz	r0, 80036e0 <HAL_RNG_Init+0x32>
{
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 80036b4:	7903      	ldrb	r3, [r0, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d014      	beq.n	80036e4 <HAL_RNG_Init+0x36>
 80036ba:	2301      	movs	r3, #1
 80036bc:	7103      	strb	r3, [r0, #4]
  if(hrng->State == HAL_RNG_STATE_RESET)
 80036be:	7943      	ldrb	r3, [r0, #5]
 80036c0:	b15b      	cbz	r3, 80036da <HAL_RNG_Init+0x2c>
  hrng->State = HAL_RNG_STATE_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	6813      	ldr	r3, [r2, #0]
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 80036d0:	2301      	movs	r3, #1
 80036d2:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 80036d4:	2000      	movs	r0, #0
 80036d6:	7120      	strb	r0, [r4, #4]
  return HAL_OK;
 80036d8:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 80036da:	f7ff ffe7 	bl	80036ac <HAL_RNG_MspInit>
 80036de:	e7f0      	b.n	80036c2 <HAL_RNG_Init+0x14>
    return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	4770      	bx	lr
  __HAL_LOCK(hrng);
 80036e4:	2002      	movs	r0, #2
}
 80036e6:	bd10      	pop	{r4, pc}

080036e8 <HAL_RNG_GenerateRandomNumber>:
{
  uint32_t tickstart = 0;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80036e8:	7903      	ldrb	r3, [r0, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d028      	beq.n	8003740 <HAL_RNG_GenerateRandomNumber+0x58>
{
 80036ee:	b570      	push	{r4, r5, r6, lr}
 80036f0:	460d      	mov	r5, r1
 80036f2:	4604      	mov	r4, r0
  __HAL_LOCK(hrng);
 80036f4:	2301      	movs	r3, #1
 80036f6:	7103      	strb	r3, [r0, #4]

  /* Check RNG peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 80036f8:	7943      	ldrb	r3, [r0, #5]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d003      	beq.n	8003708 <HAL_RNG_GenerateRandomNumber+0x20>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    status = HAL_ERROR;
 8003700:	2001      	movs	r0, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003702:	2300      	movs	r3, #0
 8003704:	7123      	strb	r3, [r4, #4]

  return status;
 8003706:	bd70      	pop	{r4, r5, r6, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 800370c:	f7fc ffe8 	bl	80006e0 <HAL_GetTick>
 8003710:	4606      	mov	r6, r0
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	f012 0f01 	tst.w	r2, #1
 800371a:	d10a      	bne.n	8003732 <HAL_RNG_GenerateRandomNumber+0x4a>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800371c:	f7fc ffe0 	bl	80006e0 <HAL_GetTick>
 8003720:	1b80      	subs	r0, r0, r6
 8003722:	2802      	cmp	r0, #2
 8003724:	d9f5      	bls.n	8003712 <HAL_RNG_GenerateRandomNumber+0x2a>
        hrng->State = HAL_RNG_STATE_ERROR;
 8003726:	2304      	movs	r3, #4
 8003728:	7163      	strb	r3, [r4, #5]
        __HAL_UNLOCK(hrng);
 800372a:	2300      	movs	r3, #0
 800372c:	7123      	strb	r3, [r4, #4]
        return HAL_TIMEOUT;
 800372e:	2003      	movs	r0, #3
 8003730:	bd70      	pop	{r4, r5, r6, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60a3      	str	r3, [r4, #8]
    *random32bit = hrng->RandomNumber;
 8003736:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8003738:	2301      	movs	r3, #1
 800373a:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2000      	movs	r0, #0
 800373e:	e7e0      	b.n	8003702 <HAL_RNG_GenerateRandomNumber+0x1a>
  __HAL_LOCK(hrng);
 8003740:	2002      	movs	r0, #2
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003746:	6802      	ldr	r2, [r0, #0]
 8003748:	68d3      	ldr	r3, [r2, #12]
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003750:	6802      	ldr	r2, [r0, #0]
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800375a:	2000      	movs	r0, #0
 800375c:	4770      	bx	lr
	...

08003760 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8003760:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <TIM_Base_SetConfig+0xc8>)
 8003764:	4290      	cmp	r0, r2
 8003766:	d02f      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
 8003768:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800376c:	d02c      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
 800376e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003772:	4290      	cmp	r0, r2
 8003774:	d028      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
 8003776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800377a:	4290      	cmp	r0, r2
 800377c:	d024      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
 800377e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003782:	4290      	cmp	r0, r2
 8003784:	d020      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
 8003786:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800378a:	4290      	cmp	r0, r2
 800378c:	d01c      	beq.n	80037c8 <TIM_Base_SetConfig+0x68>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 800378e:	4a27      	ldr	r2, [pc, #156]	; (800382c <TIM_Base_SetConfig+0xcc>)
 8003790:	4290      	cmp	r0, r2
 8003792:	d02f      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 8003794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003798:	4290      	cmp	r0, r2
 800379a:	d02b      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 800379c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037a0:	4290      	cmp	r0, r2
 80037a2:	d027      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80037a8:	4290      	cmp	r0, r2
 80037aa:	d023      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037b0:	4290      	cmp	r0, r2
 80037b2:	d01f      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037b8:	4290      	cmp	r0, r2
 80037ba:	d01b      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80037bc:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037be:	688b      	ldr	r3, [r1, #8]
 80037c0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037c2:	680b      	ldr	r3, [r1, #0]
 80037c4:	6283      	str	r3, [r0, #40]	; 0x28
 80037c6:	e021      	b.n	800380c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037cc:	684a      	ldr	r2, [r1, #4]
 80037ce:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 80037d0:	4a15      	ldr	r2, [pc, #84]	; (8003828 <TIM_Base_SetConfig+0xc8>)
 80037d2:	4290      	cmp	r0, r2
 80037d4:	d00e      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80037e0:	4290      	cmp	r0, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037e8:	4290      	cmp	r0, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 80037ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037f0:	4290      	cmp	r0, r2
 80037f2:	d113      	bne.n	800381c <TIM_Base_SetConfig+0xbc>
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f8:	68ca      	ldr	r2, [r1, #12]
 80037fa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fe:	688b      	ldr	r3, [r1, #8]
 8003800:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003802:	680b      	ldr	r3, [r1, #0]
 8003804:	6283      	str	r3, [r0, #40]	; 0x28

  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <TIM_Base_SetConfig+0xc8>)
 8003808:	4298      	cmp	r0, r3
 800380a:	d002      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <TIM_Base_SetConfig+0xd0>)
 800380e:	4298      	cmp	r0, r3
 8003810:	d101      	bne.n	8003816 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003812:	690b      	ldr	r3, [r1, #16]
 8003814:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003816:	2301      	movs	r3, #1
 8003818:	6143      	str	r3, [r0, #20]
}
 800381a:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 800381c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003820:	4290      	cmp	r0, r2
 8003822:	d0e7      	beq.n	80037f4 <TIM_Base_SetConfig+0x94>
 8003824:	e7b3      	b.n	800378e <TIM_Base_SetConfig+0x2e>
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40014000 	.word	0x40014000
 8003830:	40010400 	.word	0x40010400

08003834 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003834:	b198      	cbz	r0, 800385e <HAL_TIM_Base_Init+0x2a>
{
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800383a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800383e:	b15b      	cbz	r3, 8003858 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003840:	2302      	movs	r3, #2
 8003842:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	1d21      	adds	r1, r4, #4
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	f7ff ff89 	bl	8003760 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800384e:	2301      	movs	r3, #1
 8003850:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003854:	2000      	movs	r0, #0
 8003856:	bd10      	pop	{r4, pc}
    HAL_TIM_Base_MspInit(htim);
 8003858:	f7ff ff74 	bl	8003744 <HAL_TIM_Base_MspInit>
 800385c:	e7f0      	b.n	8003840 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
 8003860:	4770      	bx	lr

08003862 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDIO register base
  * @param  Init: SDIO initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003862:	b084      	sub	sp, #16
 8003864:	b410      	push	{r4}
 8003866:	ac02      	add	r4, sp, #8
 8003868:	e884 000e 	stmia.w	r4, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDIO CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800386c:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800386e:	9903      	ldr	r1, [sp, #12]
 8003870:	9b02      	ldr	r3, [sp, #8]
 8003872:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003874:	9904      	ldr	r1, [sp, #16]
 8003876:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003878:	9905      	ldr	r1, [sp, #20]
 800387a:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800387c:	9906      	ldr	r1, [sp, #24]
 800387e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003880:	9907      	ldr	r1, [sp, #28]
 8003882:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8003884:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8003888:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800388c:	4313      	orrs	r3, r2
 800388e:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8003890:	2000      	movs	r0, #0
 8003892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003896:	b004      	add	sp, #16
 8003898:	4770      	bx	lr

0800389a <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */
  return (SDIOx->FIFO);
 800389a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800389e:	4770      	bx	lr

080038a0 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{
  /* Set power state to ON */
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80038a0:	2303      	movs	r3, #3
 80038a2:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr

080038a8 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80038a8:	6800      	ldr	r0, [r0, #0]
}
 80038aa:	f000 0003 	and.w	r0, r0, #3
 80038ae:	4770      	bx	lr

080038b0 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct: pointer to a SDIO_CmdInitTypeDef structure that contains
  *         the configuration information for the SDIO command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 80038b0:	b410      	push	{r4}
  assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));

  /* Set the SDIO Argument value */
  SDIOx->ARG = SDIO_CmdInitStruct->Argument;
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	6083      	str	r3, [r0, #8]
                       SDIO_CmdInitStruct->Response         |\
                       SDIO_CmdInitStruct->WaitForInterrupt |\
                       SDIO_CmdInitStruct->CPSM);

  /* Write to SDIO CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg);
 80038b6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
 80038b8:	684b      	ldr	r3, [r1, #4]
 80038ba:	688c      	ldr	r4, [r1, #8]
 80038bc:	4323      	orrs	r3, r4
                       SDIO_CmdInitStruct->Response         |\
 80038be:	68cc      	ldr	r4, [r1, #12]
 80038c0:	4323      	orrs	r3, r4
                       SDIO_CmdInitStruct->WaitForInterrupt |\
 80038c2:	6909      	ldr	r1, [r1, #16]
 80038c4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg);
 80038c6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80038ca:	f022 020f 	bic.w	r2, r2, #15
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 80038d2:	2000      	movs	r0, #0
 80038d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d8:	4770      	bx	lr

080038da <SDIO_GetCommandResponse>:
  * @param  SDIOx: Pointer to SDIO register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 80038da:	6900      	ldr	r0, [r0, #16]
}
 80038dc:	b2c0      	uxtb	r0, r0
 80038de:	4770      	bx	lr

080038e0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80038e0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  /* Get the response */
  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 80038e6:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <SDIO_GetResponse+0x14>)
 80038e8:	4403      	add	r3, r0
 80038ea:	9301      	str	r3, [sp, #4]

  return (*(__IO uint32_t *) tmp);
 80038ec:	9b01      	ldr	r3, [sp, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
}
 80038f0:	b002      	add	sp, #8
 80038f2:	4770      	bx	lr
 80038f4:	40012c14 	.word	0x40012c14

080038f8 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure
  *         that contains the configuration information for the SDIO command.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 80038f8:	b410      	push	{r4}
  assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));

  /* Set the SDIO Data Timeout value */
  SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
 80038fa:	680b      	ldr	r3, [r1, #0]
 80038fc:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDIO DataLength value */
  SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
 80038fe:	684b      	ldr	r3, [r1, #4]
 8003900:	6283      	str	r3, [r0, #40]	; 0x28
                       SDIO_DataInitStruct->DPSM);

  /* Write to SDIO DCTRL */
  /* CLEAR_MASK = SDIO_DCTRL_DTEN | SDIO_DCTRL_DTDIR | SDIO_DCTRL_DTMODE | SDIO_DCTRL_DBLOCKSIZE */

  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003902:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
 8003904:	688b      	ldr	r3, [r1, #8]
 8003906:	68cc      	ldr	r4, [r1, #12]
 8003908:	4323      	orrs	r3, r4
                       SDIO_DataInitStruct->TransferDir   |\
 800390a:	690c      	ldr	r4, [r1, #16]
 800390c:	4323      	orrs	r3, r4
                       SDIO_DataInitStruct->TransferMode  |\
 800390e:	6949      	ldr	r1, [r1, #20]
 8003910:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003912:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003916:	4313      	orrs	r3, r2
 8003918:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800391a:	2000      	movs	r0, #0
 800391c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	460a      	mov	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvHelpCommand+0x2c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b15b      	cbz	r3, 8003946 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800392e:	4c08      	ldr	r4, [pc, #32]	; (8003950 <prvHelpCommand+0x2c>)
 8003930:	6825      	ldr	r5, [r4, #0]
 8003932:	682b      	ldr	r3, [r5, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	f014 f9d0 	bl	8017cda <strncpy>
	pxCommand = pxCommand->pxNext;
 800393a:	6868      	ldr	r0, [r5, #4]
 800393c:	6020      	str	r0, [r4, #0]
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
 800393e:	3000      	adds	r0, #0
 8003940:	bf18      	it	ne
 8003942:	2001      	movne	r0, #1
 8003944:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 8003946:	4903      	ldr	r1, [pc, #12]	; (8003954 <prvHelpCommand+0x30>)
 8003948:	4b01      	ldr	r3, [pc, #4]	; (8003950 <prvHelpCommand+0x2c>)
 800394a:	6019      	str	r1, [r3, #0]
 800394c:	e7ef      	b.n	800392e <prvHelpCommand+0xa>
 800394e:	bf00      	nop
 8003950:	20000374 	.word	0x20000374
 8003954:	20000008 	.word	0x20000008

08003958 <FreeRTOS_CLIRegisterCommand>:
{
 8003958:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800395a:	4605      	mov	r5, r0
 800395c:	b188      	cbz	r0, 8003982 <FreeRTOS_CLIRegisterCommand+0x2a>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800395e:	2008      	movs	r0, #8
 8003960:	f00f fdd2 	bl	8013508 <pvPortMalloc>
	configASSERT( pxNewListItem );
 8003964:	4604      	mov	r4, r0
 8003966:	b188      	cbz	r0, 800398c <FreeRTOS_CLIRegisterCommand+0x34>
		taskENTER_CRITICAL();
 8003968:	f00f fc44 	bl	80131f4 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800396c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <FreeRTOS_CLIRegisterCommand+0x40>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 8003978:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800397a:	f00f fc5d 	bl	8013238 <vPortExitCritical>
		xReturn = pdPASS;
 800397e:	2001      	movs	r0, #1
}
 8003980:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxCommandToRegister );
 8003982:	216c      	movs	r1, #108	; 0x6c
 8003984:	4805      	ldr	r0, [pc, #20]	; (800399c <FreeRTOS_CLIRegisterCommand+0x44>)
 8003986:	f013 fc8b 	bl	80172a0 <vAssertCalled>
 800398a:	e7e8      	b.n	800395e <FreeRTOS_CLIRegisterCommand+0x6>
	configASSERT( pxNewListItem );
 800398c:	2170      	movs	r1, #112	; 0x70
 800398e:	4803      	ldr	r0, [pc, #12]	; (800399c <FreeRTOS_CLIRegisterCommand+0x44>)
 8003990:	f013 fc86 	bl	80172a0 <vAssertCalled>
BaseType_t xReturn = pdFAIL;
 8003994:	2000      	movs	r0, #0
	return xReturn;
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000004 	.word	0x20000004
 800399c:	080189d8 	.word	0x080189d8

080039a0 <FreeRTOS_CLIProcessCommand>:
{
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	4606      	mov	r6, r0
 80039a6:	4688      	mov	r8, r1
 80039a8:	4691      	mov	r9, r2
	if( pxCommand == NULL )
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	b16b      	cbz	r3, 80039cc <FreeRTOS_CLIProcessCommand+0x2c>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4632      	mov	r2, r6
 80039b6:	4649      	mov	r1, r9
 80039b8:	4640      	mov	r0, r8
 80039ba:	4798      	blx	r3
		if( xReturn == pdFALSE )
 80039bc:	4603      	mov	r3, r0
 80039be:	b910      	cbnz	r0, 80039c6 <FreeRTOS_CLIProcessCommand+0x26>
			pxCommand = NULL;
 80039c0:	2100      	movs	r1, #0
 80039c2:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 80039c4:	6011      	str	r1, [r2, #0]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80039cc:	4c29      	ldr	r4, [pc, #164]	; (8003a74 <FreeRTOS_CLIProcessCommand+0xd4>)
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 80039d0:	6014      	str	r4, [r2, #0]
 80039d2:	4617      	mov	r7, r2
 80039d4:	e009      	b.n	80039ea <FreeRTOS_CLIProcessCommand+0x4a>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 80039d6:	4602      	mov	r2, r0
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f014 f96b 	bl	8017cb6 <strncmp>
 80039e0:	b178      	cbz	r0, 8003a02 <FreeRTOS_CLIProcessCommand+0x62>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80039e2:	6864      	ldr	r4, [r4, #4]
 80039e4:	603c      	str	r4, [r7, #0]
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	d03b      	beq.n	8003a62 <FreeRTOS_CLIProcessCommand+0xc2>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80039ea:	f8d4 a000 	ldr.w	sl, [r4]
 80039ee:	f8da 5000 	ldr.w	r5, [sl]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80039f2:	4628      	mov	r0, r5
 80039f4:	f7fc fbf6 	bl	80001e4 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80039f8:	5c33      	ldrb	r3, [r6, r0]
 80039fa:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80039fe:	d1f0      	bne.n	80039e2 <FreeRTOS_CLIProcessCommand+0x42>
 8003a00:	e7e9      	b.n	80039d6 <FreeRTOS_CLIProcessCommand+0x36>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8003a02:	f99a 500c 	ldrsb.w	r5, [sl, #12]
 8003a06:	2d00      	cmp	r5, #0
 8003a08:	db27      	blt.n	8003a5a <FreeRTOS_CLIProcessCommand+0xba>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8003a0a:	7833      	ldrb	r3, [r6, #0]
 8003a0c:	b31b      	cbz	r3, 8003a56 <FreeRTOS_CLIProcessCommand+0xb6>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4601      	mov	r1, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8003a12:	4604      	mov	r4, r0
			if( xLastCharacterWasSpace != pdTRUE )
 8003a14:	2701      	movs	r7, #1
 8003a16:	e006      	b.n	8003a26 <FreeRTOS_CLIProcessCommand+0x86>
 8003a18:	b949      	cbnz	r1, 8003a2e <FreeRTOS_CLIProcessCommand+0x8e>
				cParameters++;
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 8003a1e:	4639      	mov	r1, r7
	while( *pcCommandString != 0x00 )
 8003a20:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003a24:	b12b      	cbz	r3, 8003a32 <FreeRTOS_CLIProcessCommand+0x92>
		if( ( *pcCommandString ) == ' ' )
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d0f6      	beq.n	8003a18 <FreeRTOS_CLIProcessCommand+0x78>
			xLastCharacterWasSpace = pdFALSE;
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	e7f8      	b.n	8003a20 <FreeRTOS_CLIProcessCommand+0x80>
			if( xLastCharacterWasSpace != pdTRUE )
 8003a2e:	4639      	mov	r1, r7
 8003a30:	e7f6      	b.n	8003a20 <FreeRTOS_CLIProcessCommand+0x80>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8003a32:	b969      	cbnz	r1, 8003a50 <FreeRTOS_CLIProcessCommand+0xb0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b19b      	cbz	r3, 8003a62 <FreeRTOS_CLIProcessCommand+0xc2>
 8003a3a:	4285      	cmp	r5, r0
 8003a3c:	d0b8      	beq.n	80039b0 <FreeRTOS_CLIProcessCommand+0x10>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8003a3e:	464a      	mov	r2, r9
 8003a40:	490d      	ldr	r1, [pc, #52]	; (8003a78 <FreeRTOS_CLIProcessCommand+0xd8>)
 8003a42:	4640      	mov	r0, r8
 8003a44:	f014 f949 	bl	8017cda <strncpy>
		pxCommand = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e7ba      	b.n	80039c6 <FreeRTOS_CLIProcessCommand+0x26>
	{
		cParameters--;
 8003a50:	3801      	subs	r0, #1
 8003a52:	b240      	sxtb	r0, r0
 8003a54:	e7ee      	b.n	8003a34 <FreeRTOS_CLIProcessCommand+0x94>
	while( *pcCommandString != 0x00 )
 8003a56:	2000      	movs	r0, #0
 8003a58:	e7ec      	b.n	8003a34 <FreeRTOS_CLIProcessCommand+0x94>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <FreeRTOS_CLIProcessCommand+0xd0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1a6      	bne.n	80039b0 <FreeRTOS_CLIProcessCommand+0x10>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8003a62:	464a      	mov	r2, r9
 8003a64:	4905      	ldr	r1, [pc, #20]	; (8003a7c <FreeRTOS_CLIProcessCommand+0xdc>)
 8003a66:	4640      	mov	r0, r8
 8003a68:	f014 f937 	bl	8017cda <strncpy>
		xReturn = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
	return xReturn;
 8003a6e:	e7aa      	b.n	80039c6 <FreeRTOS_CLIProcessCommand+0x26>
 8003a70:	20000370 	.word	0x20000370
 8003a74:	20000008 	.word	0x20000008
 8003a78:	08018930 	.word	0x08018930
 8003a7c:	08018988 	.word	0x08018988

08003a80 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
 8003a84:	b119      	cbz	r1, 8003a8e <FreeRTOS_CLIGetParameter+0xe>
{
 8003a86:	b410      	push	{r4}
 8003a88:	460c      	mov	r4, r1
	while( uxParametersFound < uxWantedParameter )
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	e009      	b.n	8003aa2 <FreeRTOS_CLIGetParameter+0x22>
const char *pcReturn = NULL;
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4770      	bx	lr
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8003a92:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d0fb      	beq.n	8003a92 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 8003a9a:	b1eb      	cbz	r3, 8003ad8 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 8003a9c:	3101      	adds	r1, #1
			if( uxParametersFound == uxWantedParameter )
 8003a9e:	428c      	cmp	r4, r1
 8003aa0:	d009      	beq.n	8003ab6 <FreeRTOS_CLIGetParameter+0x36>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8003aa2:	7803      	ldrb	r3, [r0, #0]
 8003aa4:	b1f3      	cbz	r3, 8003ae4 <FreeRTOS_CLIGetParameter+0x64>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d0f3      	beq.n	8003a92 <FreeRTOS_CLIGetParameter+0x12>
 8003aaa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003aae:	b1cb      	cbz	r3, 8003ae4 <FreeRTOS_CLIGetParameter+0x64>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d1fa      	bne.n	8003aaa <FreeRTOS_CLIGetParameter+0x2a>
 8003ab4:	e7ed      	b.n	8003a92 <FreeRTOS_CLIGetParameter+0x12>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8003ab6:	7803      	ldrb	r3, [r0, #0]
 8003ab8:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8003abc:	d010      	beq.n	8003ae0 <FreeRTOS_CLIGetParameter+0x60>
 8003abe:	4601      	mov	r1, r0
					( *pxParameterStringLength )++;
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8003ac6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003aca:	f014 0fdf 	tst.w	r4, #223	; 0xdf
 8003ace:	d1f7      	bne.n	8003ac0 <FreeRTOS_CLIGetParameter+0x40>
					pcReturn = NULL;
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf08      	it	eq
 8003ad4:	2000      	moveq	r0, #0
 8003ad6:	e000      	b.n	8003ada <FreeRTOS_CLIGetParameter+0x5a>
const char *pcReturn = NULL;
 8003ad8:	2000      	movs	r0, #0
}
 8003ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ade:	4770      	bx	lr
					pcReturn = NULL;
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e7fa      	b.n	8003ada <FreeRTOS_CLIGetParameter+0x5a>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8003ae4:	7803      	ldrb	r3, [r0, #0]
 8003ae6:	e7d8      	b.n	8003a9a <FreeRTOS_CLIGetParameter+0x1a>

08003ae8 <FF_GetCRC32>:
uint32_t FF_GetCRC32( uint8_t *pbyData, uint32_t stLength )
{
	
	register uint32_t crc = 0xFFFFFFFF;
	
	while( stLength-- != 0 )
 8003ae8:	b191      	cbz	r1, 8003b10 <FF_GetCRC32+0x28>
{
 8003aea:	b410      	push	{r4}
 8003aec:	1841      	adds	r1, r0, r1
	while( stLength-- != 0 )
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	{
		crc = ( ( crc >> 8 ) & 0x00FFFFFF ) ^ crc32_table[ ( crc ^ *( pbyData++ ) ) & 0x000000FF ];
 8003af2:	4c09      	ldr	r4, [pc, #36]	; (8003b18 <FF_GetCRC32+0x30>)
 8003af4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003af8:	4053      	eors	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003b00:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
	while( stLength-- != 0 )
 8003b04:	4281      	cmp	r1, r0
 8003b06:	d1f5      	bne.n	8003af4 <FF_GetCRC32+0xc>
	}

	return crc ^ 0xFFFFFFFF;
}
 8003b08:	43d0      	mvns	r0, r2
 8003b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b0e:	4770      	bx	lr
	register uint32_t crc = 0xFFFFFFFF;
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8003b14:	43d0      	mvns	r0, r2
 8003b16:	4770      	bx	lr
 8003b18:	08018c54 	.word	0x08018c54

08003b1c <FF_GetCRC16>:
uint16_t FF_GetCRC16( uint8_t *pbyData, uint32_t stLength )
{
    uint8_t	bTableValue;
    uint16_t wCRC = 0;

    while( stLength-- != 0 )
 8003b1c:	b1a1      	cbz	r1, 8003b48 <FF_GetCRC16+0x2c>
{
 8003b1e:	b470      	push	{r4, r5, r6}
 8003b20:	4604      	mov	r4, r0
 8003b22:	1841      	adds	r1, r0, r1
    while( stLength-- != 0 )
 8003b24:	2000      	movs	r0, #0
	{
        bTableValue = ( uint8_t ) ( (wCRC & 0x00FF ) ^ *pbyData++ );
        wCRC = ( uint16_t ) ( ( ( crc16_table_high[ bTableValue ] ) << 8 ) +
             ( crc16_table_low[ bTableValue ] ^ ( ( wCRC >> 8 ) & 0x00FF ) ) );
 8003b26:	4e09      	ldr	r6, [pc, #36]	; (8003b4c <FF_GetCRC16+0x30>)
        wCRC = ( uint16_t ) ( ( ( crc16_table_high[ bTableValue ] ) << 8 ) +
 8003b28:	4d09      	ldr	r5, [pc, #36]	; (8003b50 <FF_GetCRC16+0x34>)
        bTableValue = ( uint8_t ) ( (wCRC & 0x00FF ) ^ *pbyData++ );
 8003b2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b2e:	4043      	eors	r3, r0
        wCRC = ( uint16_t ) ( ( ( crc16_table_high[ bTableValue ] ) << 8 ) +
 8003b30:	b2db      	uxtb	r3, r3
             ( crc16_table_low[ bTableValue ] ^ ( ( wCRC >> 8 ) & 0x00FF ) ) );
 8003b32:	5cf2      	ldrb	r2, [r6, r3]
 8003b34:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
        wCRC = ( uint16_t ) ( ( ( crc16_table_high[ bTableValue ] ) << 8 ) +
 8003b38:	5ceb      	ldrb	r3, [r5, r3]
 8003b3a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8003b3e:	b298      	uxth	r0, r3
    while( stLength-- != 0 )
 8003b40:	42a1      	cmp	r1, r4
 8003b42:	d1f2      	bne.n	8003b2a <FF_GetCRC16+0xe>
    }

    return wCRC;
}
 8003b44:	bc70      	pop	{r4, r5, r6}
 8003b46:	4770      	bx	lr
    uint16_t wCRC = 0;
 8003b48:	2000      	movs	r0, #0
 8003b4a:	4770      	bx	lr
 8003b4c:	08018b54 	.word	0x08018b54
 8003b50:	08018a54 	.word	0x08018a54

08003b54 <FF_CreateChkSum>:
	}	/* strcasecmp() */
#endif
/*-----------------------------------------------------------*/

static uint8_t FF_CreateChkSum( const uint8_t *pa_pShortName )
{
 8003b54:	b410      	push	{r4}
 8003b56:	4602      	mov	r2, r0
 8003b58:	f100 040b 	add.w	r4, r0, #11
uint8_t	cNameLen;
uint8_t	ChkSum = 0;
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f000 0101 	and.w	r1, r0, #1
 8003b62:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003b66:	eb03 0350 	add.w	r3, r3, r0, lsr #1

	for( cNameLen = 11; cNameLen != 0; cNameLen-- )
	{
		ChkSum = ( uint8_t )
 8003b6a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 8003b6e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
	for( cNameLen = 11; cNameLen != 0; cNameLen-- )
 8003b72:	4294      	cmp	r4, r2
 8003b74:	d1f3      	bne.n	8003b5e <FF_CreateChkSum+0xa>
			( ( ( ChkSum & 1 ) ? 0x80 : 0 ) + ( ChkSum >> 1 ) + *( pa_pShortName++ ) );
	}

	return ChkSum;
}	/* FF_CreateChkSum() */
 8003b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <FF_PlaceTime>:
/*-----------------------------------------------------------*/


#if( ffconfigTIME_SUPPORT != 0 )
	static void FF_PlaceTime( uint8_t *pucEntryBuffer, uint32_t Offset, FF_SystemTime_t *pxTime )
	{
 8003b7c:	b410      	push	{r4}
		the result of FF_GetSystemTime */

		myShort = 0;
		myShort |= ( ( pxTime->Hour    << 11 ) & 0xF800 );
		myShort |= ( ( pxTime->Minute  <<  5 ) & 0x07E0 );
		myShort |= ( ( pxTime->Second   /  2 ) & 0x001F );
 8003b7e:	8953      	ldrh	r3, [r2, #10]
 8003b80:	f3c3 0344 	ubfx	r3, r3, #1, #5
		myShort |= ( ( pxTime->Hour    << 11 ) & 0xF800 );
 8003b84:	88d4      	ldrh	r4, [r2, #6]
		myShort |= ( ( pxTime->Second   /  2 ) & 0x001F );
 8003b86:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
		myShort |= ( ( pxTime->Minute  <<  5 ) & 0x07E0 );
 8003b8a:	8912      	ldrh	r2, [r2, #8]
 8003b8c:	0152      	lsls	r2, r2, #5
 8003b8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
		myShort |= ( ( pxTime->Second   /  2 ) & 0x001F );
 8003b92:	4313      	orrs	r3, r2
	static portINLINE void FF_putShort( uint8_t *pBuffer, uint32_t aOffset, uint32_t Value )
	{
	FF_T_UN16 u16;

		u16.u16 = ( uint16_t ) Value;
		pBuffer += aOffset;
 8003b94:	b289      	uxth	r1, r1
 8003b96:	1842      	adds	r2, r0, r1
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8003b98:	5443      	strb	r3, [r0, r1]
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8003b9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003b9e:	7053      	strb	r3, [r2, #1]
		FF_putShort( pucEntryBuffer, ( uint16_t ) Offset, myShort );
	}
 8003ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <FF_PlaceDate>:
/*-----------------------------------------------------------*/


#if( ffconfigTIME_SUPPORT != 0 )
	static void FF_PlaceDate( uint8_t *pucEntryBuffer, uint32_t Offset, FF_SystemTime_t *pxTime )
	{
 8003ba6:	b410      	push	{r4}

		/* HT time changes:
		Unzip needs to use original date rather than
		the current date, so make it a parameter. */
		myShort = 0;
		myShort |= ( ( ( pxTime->Year- 1980 )  <<  9 ) & 0xFE00 ) ;
 8003ba8:	8813      	ldrh	r3, [r2, #0]
 8003baa:	f2a3 74bc 	subw	r4, r3, #1980	; 0x7bc
		myShort |= ( ( pxTime->Month <<  5 ) & 0x01E0 );
 8003bae:	8853      	ldrh	r3, [r2, #2]
 8003bb0:	015b      	lsls	r3, r3, #5
 8003bb2:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003bb6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
		myShort |= ( pxTime->Day & 0x001F );
 8003bba:	8892      	ldrh	r2, [r2, #4]
 8003bbc:	f002 021f 	and.w	r2, r2, #31
 8003bc0:	4313      	orrs	r3, r2
		pBuffer += aOffset;
 8003bc2:	b289      	uxth	r1, r1
 8003bc4:	1842      	adds	r2, r0, r1
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8003bc6:	5443      	strb	r3, [r0, r1]
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8003bc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003bcc:	7053      	strb	r3, [r2, #1]
		FF_putShort( pucEntryBuffer, ( uint16_t ) Offset, myShort );
	}
 8003bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <FF_GetTime>:
/*-----------------------------------------------------------*/


#if( ffconfigTIME_SUPPORT != 0 )
	static void FF_GetTime( FF_SystemTime_t *pxTime, const uint8_t *pucEntryBuffer, uint32_t Offset )
	{
 8003bd4:	b410      	push	{r4}
		pBuffer += aOffset;
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	188b      	adds	r3, r1, r2
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8003bda:	785c      	ldrb	r4, [r3, #1]
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f364 230f 	bfi	r3, r4, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8003be4:	5c8a      	ldrb	r2, [r1, r2]
 8003be6:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 8003bea:	b29b      	uxth	r3, r3
		uint16_t myShort;
		myShort = FF_getShort( pucEntryBuffer, ( uint16_t ) Offset );
		pxTime->Hour		= ( ( ( myShort & 0xF800 ) >> 11 ) & 0x001F );
 8003bec:	0ada      	lsrs	r2, r3, #11
 8003bee:	80c2      	strh	r2, [r0, #6]
		pxTime->Minute	= ( ( ( myShort & 0x07E0 ) >>  5 ) & 0x003F );
 8003bf0:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8003bf4:	8102      	strh	r2, [r0, #8]
		pxTime->Second	= 2 * ( myShort & 0x01F );
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	8143      	strh	r3, [r0, #10]
	}
 8003bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <FF_GetDate>:
/*-----------------------------------------------------------*/


#if( ffconfigTIME_SUPPORT != 0 )
	static void FF_GetDate( FF_SystemTime_t *pxTime, const uint8_t *pucEntryBuffer, uint32_t Offset )
	{
 8003c04:	b410      	push	{r4}
		pBuffer += aOffset;
 8003c06:	b292      	uxth	r2, r2
 8003c08:	188b      	adds	r3, r1, r2
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8003c0a:	785c      	ldrb	r4, [r3, #1]
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f364 230f 	bfi	r3, r4, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8003c14:	5c8a      	ldrb	r2, [r1, r2]
 8003c16:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 8003c1a:	b29b      	uxth	r3, r3
		uint16_t myShort;
		myShort = FF_getShort( pucEntryBuffer, ( uint16_t ) Offset );
		pxTime->Year		= 1980 + ( ( ( myShort & 0xFE00 ) >> 9 ) & 0x07F );
 8003c1c:	0a5a      	lsrs	r2, r3, #9
 8003c1e:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
 8003c22:	8002      	strh	r2, [r0, #0]
		pxTime->Month	= ( ( ( myShort & 0x01E0 ) >> 5 ) & 0x000F );
 8003c24:	f3c3 1243 	ubfx	r2, r3, #5, #4
 8003c28:	8042      	strh	r2, [r0, #2]
		pxTime->Day		= myShort & 0x01F;
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	8083      	strh	r3, [r0, #4]
	}
 8003c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <FF_ProcessShortName>:
{
 8003c36:	b410      	push	{r4}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	4604      	mov	r4, r0
	memcpy( pcShortName, pcName, 11 );
 8003c3c:	466b      	mov	r3, sp
 8003c3e:	6800      	ldr	r0, [r0, #0]
 8003c40:	6861      	ldr	r1, [r4, #4]
 8003c42:	c303      	stmia	r3!, {r0, r1}
 8003c44:	8921      	ldrh	r1, [r4, #8]
 8003c46:	7aa2      	ldrb	r2, [r4, #10]
 8003c48:	8019      	strh	r1, [r3, #0]
 8003c4a:	709a      	strb	r2, [r3, #2]
	for( iSource = 0; iSource < 11; iSource++ )
 8003c4c:	2300      	movs	r3, #0
				*( pcTarget++ ) = '.';
 8003c4e:	202e      	movs	r0, #46	; 0x2e
 8003c50:	e000      	b.n	8003c54 <FF_ProcessShortName+0x1e>
			*( pcTarget++ ) = pcShortName[ iSource ];
 8003c52:	460c      	mov	r4, r1
		if( pcShortName[ iSource ] == 0x20 )
 8003c54:	aa04      	add	r2, sp, #16
 8003c56:	441a      	add	r2, r3
 8003c58:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003c5c:	2a20      	cmp	r2, #32
 8003c5e:	d00c      	beq.n	8003c7a <FF_ProcessShortName+0x44>
			if( iSource == 8 )
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d00e      	beq.n	8003c82 <FF_ProcessShortName+0x4c>
			*( pcTarget++ ) = pcShortName[ iSource ];
 8003c64:	1c61      	adds	r1, r4, #1
 8003c66:	7022      	strb	r2, [r4, #0]
	for( iSource = 0; iSource < 11; iSource++ )
 8003c68:	3301      	adds	r3, #1
 8003c6a:	2b0a      	cmp	r3, #10
 8003c6c:	ddf1      	ble.n	8003c52 <FF_ProcessShortName+0x1c>
	*pcTarget = '\0';
 8003c6e:	2300      	movs	r3, #0
 8003c70:	700b      	strb	r3, [r1, #0]
}
 8003c72:	b005      	add	sp, #20
 8003c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c78:	4770      	bx	lr
			if( iSource >= 8 )
 8003c7a:	2b07      	cmp	r3, #7
 8003c7c:	dc08      	bgt.n	8003c90 <FF_ProcessShortName+0x5a>
	for( iSource = 0; iSource < 11; iSource++ )
 8003c7e:	2308      	movs	r3, #8
 8003c80:	e7e8      	b.n	8003c54 <FF_ProcessShortName+0x1e>
				*( pcTarget++ ) = '.';
 8003c82:	4621      	mov	r1, r4
 8003c84:	f801 0b02 	strb.w	r0, [r1], #2
			*( pcTarget++ ) = pcShortName[ iSource ];
 8003c88:	7062      	strb	r2, [r4, #1]
	for( iSource = 0; iSource < 11; iSource++ )
 8003c8a:	3301      	adds	r3, #1
			*( pcTarget++ ) = pcShortName[ iSource ];
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	e7e1      	b.n	8003c54 <FF_ProcessShortName+0x1e>
 8003c90:	4621      	mov	r1, r4
 8003c92:	e7ec      	b.n	8003c6e <FF_ProcessShortName+0x38>

08003c94 <FF_CreateLFNEntry>:
/*-----------------------------------------------------------*/


#if( ffconfigLFN_SUPPORT != 0 )
	static int8_t FF_CreateLFNEntry( uint8_t *pucEntryBuffer, uint8_t *pcName, UBaseType_t uxNameLength, UBaseType_t uxLFN, uint8_t ucCheckSum )
	{
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	4606      	mov	r6, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	4614      	mov	r4, r2
 8003c9c:	461f      	mov	r7, r3
		 *  Also did quite a bit of optimisation here
		 *  and tested well
		 */
		UBaseType_t uxIndex, x;

		memset( pucEntryBuffer, 0, FF_SIZEOF_DIRECTORY_ENTRY );
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f013 fd93 	bl	80177cc <memset>

		FF_putChar( pucEntryBuffer, FF_FAT_LFN_ORD, ( uint8_t )( ( uxLFN & ~0x40 ) ) );
 8003ca6:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
		pBuffer[ aOffset ] = ( uint8_t ) Value;
 8003caa:	7037      	strb	r7, [r6, #0]
 8003cac:	230f      	movs	r3, #15
 8003cae:	72f3      	strb	r3, [r6, #11]
 8003cb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003cb4:	7373      	strb	r3, [r6, #13]
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	4631      	mov	r1, r6
		FF_putChar( pucEntryBuffer, FF_FAT_DIRENT_ATTRIB, ( uint8_t ) FF_FAT_ATTR_LFN );
		FF_putChar( pucEntryBuffer, FF_FAT_LFN_CHECKSUM, ( uint8_t ) ucCheckSum );

		/* Name_1. */
		uxIndex = 0;
 8003cba:	2300      	movs	r3, #0
				}
				#endif
			}
			else if ( uxIndex > uxNameLength )
			{
				pucEntryBuffer[ x] = 0xFF;
 8003cbc:	27ff      	movs	r7, #255	; 0xff
 8003cbe:	e007      	b.n	8003cd0 <FF_CreateLFNEntry+0x3c>
			else if ( uxIndex > uxNameLength )
 8003cc0:	429c      	cmp	r4, r3
				pucEntryBuffer[ x] = 0xFF;
 8003cc2:	bf3c      	itt	cc
 8003cc4:	704f      	strbcc	r7, [r1, #1]
				pucEntryBuffer[ x + 1 ] = 0xFF;
 8003cc6:	708f      	strbcc	r7, [r1, #2]
		for( x = FF_FAT_LFN_NAME_1; uxIndex < 5u; uxIndex++, x += 2 )
 8003cc8:	3301      	adds	r3, #1
 8003cca:	3102      	adds	r1, #2
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d005      	beq.n	8003cdc <FF_CreateLFNEntry+0x48>
			if( uxIndex < uxNameLength )
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	d9f5      	bls.n	8003cc0 <FF_CreateLFNEntry+0x2c>
				pucEntryBuffer[ x ] = *( pcName++ );
 8003cd4:	7828      	ldrb	r0, [r5, #0]
 8003cd6:	7048      	strb	r0, [r1, #1]
 8003cd8:	3501      	adds	r5, #1
 8003cda:	e7f5      	b.n	8003cc8 <FF_CreateLFNEntry+0x34>
				}
				#endif
			}
			else if( uxIndex > uxNameLength )
			{
				pucEntryBuffer[ x ] = 0xFF;
 8003cdc:	20ff      	movs	r0, #255	; 0xff
 8003cde:	e007      	b.n	8003cf0 <FF_CreateLFNEntry+0x5c>
			else if( uxIndex > uxNameLength )
 8003ce0:	429c      	cmp	r4, r3
				pucEntryBuffer[ x ] = 0xFF;
 8003ce2:	bf3c      	itt	cc
 8003ce4:	7390      	strbcc	r0, [r2, #14]
				pucEntryBuffer[ x + 1 ] = 0xFF;
 8003ce6:	73d0      	strbcc	r0, [r2, #15]
		for( x = FF_FAT_LFN_NAME_2; uxIndex < 11u; uxIndex++, x += 2 )
 8003ce8:	3301      	adds	r3, #1
 8003cea:	3202      	adds	r2, #2
 8003cec:	2b0b      	cmp	r3, #11
 8003cee:	d005      	beq.n	8003cfc <FF_CreateLFNEntry+0x68>
			if( uxIndex < uxNameLength )
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d9f5      	bls.n	8003ce0 <FF_CreateLFNEntry+0x4c>
				pucEntryBuffer[ x ] = *( pcName++ );
 8003cf4:	7829      	ldrb	r1, [r5, #0]
 8003cf6:	7391      	strb	r1, [r2, #14]
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7f5      	b.n	8003ce8 <FF_CreateLFNEntry+0x54>
		}

		/* Name_3. */
		for( x = FF_FAT_LFN_NAME_3; uxIndex < 13u; uxIndex++, x += 2 )
		{
			if( uxIndex < uxNameLength )
 8003cfc:	2c0b      	cmp	r4, #11
 8003cfe:	d805      	bhi.n	8003d0c <FF_CreateLFNEntry+0x78>
				{
					pucEntryBuffer[ x + 1 ] = *( pcName++ );
				}
				#endif
			}
			else if( uxIndex > uxNameLength )
 8003d00:	2c0a      	cmp	r4, #10
 8003d02:	d806      	bhi.n	8003d12 <FF_CreateLFNEntry+0x7e>
			{
				pucEntryBuffer[ x ] = 0xFF;
 8003d04:	23ff      	movs	r3, #255	; 0xff
 8003d06:	7733      	strb	r3, [r6, #28]
				pucEntryBuffer[ x + 1 ] = 0xFF;
 8003d08:	7773      	strb	r3, [r6, #29]
 8003d0a:	e002      	b.n	8003d12 <FF_CreateLFNEntry+0x7e>
				pucEntryBuffer[ x ] = *( pcName++ );
 8003d0c:	782b      	ldrb	r3, [r5, #0]
 8003d0e:	7733      	strb	r3, [r6, #28]
 8003d10:	3501      	adds	r5, #1
			if( uxIndex < uxNameLength )
 8003d12:	2c0c      	cmp	r4, #12
 8003d14:	d903      	bls.n	8003d1e <FF_CreateLFNEntry+0x8a>
				pucEntryBuffer[ x ] = *( pcName++ );
 8003d16:	782b      	ldrb	r3, [r5, #0]
 8003d18:	77b3      	strb	r3, [r6, #30]
			}
		}

		return FF_ERR_NONE;
	}	/* FF_CreateLFNEntry() */
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if( uxIndex > uxNameLength )
 8003d1e:	2c0b      	cmp	r4, #11
 8003d20:	d8fb      	bhi.n	8003d1a <FF_CreateLFNEntry+0x86>
				pucEntryBuffer[ x ] = 0xFF;
 8003d22:	23ff      	movs	r3, #255	; 0xff
 8003d24:	77b3      	strb	r3, [r6, #30]
				pucEntryBuffer[ x + 1 ] = 0xFF;
 8003d26:	77f3      	strb	r3, [r6, #31]
 8003d28:	e7f7      	b.n	8003d1a <FF_CreateLFNEntry+0x86>
	...

08003d2c <FF_Traverse>:
{
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	4606      	mov	r6, r0
 8003d32:	460f      	mov	r7, r1
 8003d34:	4614      	mov	r4, r2
uint32_t ulClusterNum = FF_getClusterChainNumber( pxIOManager, ulEntry, ( uint16_t ) FF_SIZEOF_DIRECTORY_ENTRY );
 8003d36:	2220      	movs	r2, #32
 8003d38:	f001 fcbf 	bl	80056ba <FF_getClusterChainNumber>
FF_Error_t xError = FF_ERR_NONE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9301      	str	r3, [sp, #4]
	if( ( ulClusterNum + 1 ) > pxContext->ulChainLength )
 8003d40:	1c42      	adds	r2, r0, #1
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d903      	bls.n	8003d50 <FF_Traverse+0x24>
		xError = FF_ERR_DIR_END_OF_DIR | FF_TRAVERSE;	/* End of Dir was reached! */
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <FF_Traverse+0x78>)
 8003d4a:	9301      	str	r3, [sp, #4]
	if( FF_isERR( xError ) == pdFALSE )
 8003d4c:	9801      	ldr	r0, [sp, #4]
 8003d4e:	e019      	b.n	8003d84 <FF_Traverse+0x58>
 8003d50:	4605      	mov	r5, r0
	else if( ( pxIOManager->xPartition.ucType != FF_T_FAT32 ) &&
 8003d52:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d003      	beq.n	8003d62 <FF_Traverse+0x36>
		( pxContext->ulDirCluster == pxIOManager->xPartition.ulRootDirCluster ) )
 8003d5a:	6863      	ldr	r3, [r4, #4]
	else if( ( pxIOManager->xPartition.ucType != FF_T_FAT32 ) &&
 8003d5c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d012      	beq.n	8003d88 <FF_Traverse+0x5c>
	else if( ulClusterNum != pxContext->ulCurrentClusterNum )
 8003d62:	68e2      	ldr	r2, [r4, #12]
 8003d64:	4295      	cmp	r5, r2
 8003d66:	d01b      	beq.n	8003da0 <FF_Traverse+0x74>
			pxContext->ulCurrentClusterLCN = FF_TraverseFAT( pxIOManager, pxContext->ulCurrentClusterLCN, ( ulClusterNum - pxContext->ulCurrentClusterNum ), &xError );
 8003d68:	ab01      	add	r3, sp, #4
 8003d6a:	bf87      	ittee	hi
 8003d6c:	1aaa      	subhi	r2, r5, r2
 8003d6e:	68a1      	ldrhi	r1, [r4, #8]
			pxContext->ulCurrentClusterLCN = FF_TraverseFAT( pxIOManager, pxContext->ulDirCluster, ulClusterNum, &xError );
 8003d70:	462a      	movls	r2, r5
 8003d72:	6861      	ldrls	r1, [r4, #4]
 8003d74:	4630      	mov	r0, r6
 8003d76:	f001 fe49 	bl	8005a0c <FF_TraverseFAT>
 8003d7a:	60a0      	str	r0, [r4, #8]
	if( FF_isERR( xError ) == pdFALSE )
 8003d7c:	9801      	ldr	r0, [sp, #4]
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	db00      	blt.n	8003d84 <FF_Traverse+0x58>
		pxContext->ulCurrentClusterNum = ulClusterNum;
 8003d82:	60e5      	str	r5, [r4, #12]
}	/* FF_Traverse() */
 8003d84:	b003      	add	sp, #12
 8003d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( ulEntry > ( ( pxIOManager->xPartition.ulRootDirSectors * pxIOManager->xPartition.usBlkSize ) / FF_SIZEOF_DIRECTORY_ENTRY ) )
 8003d88:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8003d8c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003d8e:	fb02 f201 	mul.w	r2, r2, r1
 8003d92:	ebb7 1f52 	cmp.w	r7, r2, lsr #5
 8003d96:	d902      	bls.n	8003d9e <FF_Traverse+0x72>
			xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FETCHENTRYWITHCONTEXT );
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <FF_Traverse+0x7c>)
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	e7d6      	b.n	8003d4c <FF_Traverse+0x20>
			pxContext->ulCurrentClusterLCN = pxContext->ulDirCluster;
 8003d9e:	60a3      	str	r3, [r4, #8]
	if( FF_isERR( xError ) == pdFALSE )
 8003da0:	2000      	movs	r0, #0
 8003da2:	e7ee      	b.n	8003d82 <FF_Traverse+0x56>
 8003da4:	820d0034 	.word	0x820d0034
 8003da8:	82010034 	.word	0x82010034

08003dac <strcasecmp>:
	{
 8003dac:	b410      	push	{r4}
			c1 = *pcString1++;
 8003dae:	f810 3b01 	ldrb.w	r3, [r0], #1
			c2 = *pcString2++;
 8003db2:	f811 2b01 	ldrb.w	r2, [r1], #1
		if( c >= 'A' && c <= 'Z' )
 8003db6:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8003dba:	b2e4      	uxtb	r4, r4
 8003dbc:	2c19      	cmp	r4, #25
			cReturnChar = c + 0x20;
 8003dbe:	bf9c      	itt	ls
 8003dc0:	3320      	addls	r3, #32
 8003dc2:	b2db      	uxtbls	r3, r3
		if( c >= 'A' && c <= 'Z' )
 8003dc4:	f1a2 0441 	sub.w	r4, r2, #65	; 0x41
 8003dc8:	b2e4      	uxtb	r4, r4
 8003dca:	2c19      	cmp	r4, #25
			cReturnChar = c + 0x20;
 8003dcc:	bf9c      	itt	ls
 8003dce:	3220      	addls	r2, #32
 8003dd0:	b2d2      	uxtbls	r2, r2
		while( ( c1 == c2 ) && ( c1 != '\0' ) );
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d102      	bne.n	8003ddc <strcasecmp+0x30>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e9      	bne.n	8003dae <strcasecmp+0x2>
 8003dda:	461a      	mov	r2, r3
	}	/* strcasecmp() */
 8003ddc:	1a98      	subs	r0, r3, r2
 8003dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <FF_PopulateShortDirent>:
{
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	460d      	mov	r5, r1
 8003de8:	4614      	mov	r4, r2
	memcpy( pxDirEntry->pcFileName, pucEntryBuffer, 11 );	/* Copy the filename into the Dirent object. */
 8003dea:	f101 063a 	add.w	r6, r1, #58	; 0x3a
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	f8c1 203a 	str.w	r2, [r1, #58]	; 0x3a
 8003df6:	f8c1 303e 	str.w	r3, [r1, #62]	; 0x3e
 8003dfa:	8922      	ldrh	r2, [r4, #8]
 8003dfc:	7aa3      	ldrb	r3, [r4, #10]
 8003dfe:	f8a1 2042 	strh.w	r2, [r1, #66]	; 0x42
 8003e02:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
	FF_ProcessShortName( ( char * ) pxDirEntry->pcFileName );		/* Format the shortname, for pleasant viewing. */
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7ff ff15 	bl	8003c36 <FF_ProcessShortName>
	FF_tolower( pxDirEntry->pcFileName, ( uint32_t )strlen( pxDirEntry->pcFileName ) );
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f7fc f9e9 	bl	80001e4 <strlen>
 8003e12:	4601      	mov	r1, r0
 8003e14:	4630      	mov	r0, r6
 8003e16:	f005 fd37 	bl	8009888 <FF_tolower>
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8003e1a:	7d63      	ldrb	r3, [r4, #21]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f363 220f 	bfi	r2, r3, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8003e24:	7d23      	ldrb	r3, [r4, #20]
 8003e26:	f363 0207 	bfi	r2, r3, #0, #8
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8003e2a:	7ee1      	ldrb	r1, [r4, #27]
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	f361 230f 	bfi	r3, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8003e34:	7ea1      	ldrb	r1, [r4, #26]
 8003e36:	f361 0307 	bfi	r3, r1, #0, #8
		return u16.u16;
 8003e3a:	b29b      	uxth	r3, r3
		( ( uint32_t )FF_getShort( pucEntryBuffer, FF_FAT_DIRENT_CLUS_HIGH ) << 16 ) |
 8003e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	pxDirEntry->ulObjectCluster =
 8003e40:	606b      	str	r3, [r5, #4]
	FF_GetTime( &pxDirEntry->xCreateTime, pucEntryBuffer, FF_FAT_DIRENT_CREATE_TIME );
 8003e42:	f105 0616 	add.w	r6, r5, #22
 8003e46:	220e      	movs	r2, #14
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7ff fec2 	bl	8003bd4 <FF_GetTime>
	FF_GetDate( &pxDirEntry->xCreateTime, pucEntryBuffer, FF_FAT_DIRENT_CREATE_DATE );
 8003e50:	2210      	movs	r2, #16
 8003e52:	4621      	mov	r1, r4
 8003e54:	4630      	mov	r0, r6
 8003e56:	f7ff fed5 	bl	8003c04 <FF_GetDate>
	FF_GetTime( &pxDirEntry->xModifiedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_TIME );
 8003e5a:	f105 0622 	add.w	r6, r5, #34	; 0x22
 8003e5e:	2216      	movs	r2, #22
 8003e60:	4621      	mov	r1, r4
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff feb6 	bl	8003bd4 <FF_GetTime>
	FF_GetDate( &pxDirEntry->xModifiedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_DATE );
 8003e68:	2218      	movs	r2, #24
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff fec9 	bl	8003c04 <FF_GetDate>
	FF_GetDate( &pxDirEntry->xAccessedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTACC_DATE );
 8003e72:	2212      	movs	r2, #18
 8003e74:	4621      	mov	r1, r4
 8003e76:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8003e7a:	f7ff fec3 	bl	8003c04 <FF_GetDate>
	pxDirEntry->xAccessedTime.Hour		= 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	86ab      	strh	r3, [r5, #52]	; 0x34
	pxDirEntry->xAccessedTime.Minute	= 0;
 8003e82:	86eb      	strh	r3, [r5, #54]	; 0x36
	pxDirEntry->xAccessedTime.Second	= 0;
 8003e84:	872b      	strh	r3, [r5, #56]	; 0x38
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8003e86:	7fe2      	ldrb	r2, [r4, #31]
 8003e88:	f362 631f 	bfi	r3, r2, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8003e8c:	7fa2      	ldrb	r2, [r4, #30]
 8003e8e:	f362 4317 	bfi	r3, r2, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8003e92:	7f62      	ldrb	r2, [r4, #29]
 8003e94:	f362 230f 	bfi	r3, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8003e98:	7f22      	ldrb	r2, [r4, #28]
 8003e9a:	f362 0307 	bfi	r3, r2, #0, #8
	pxDirEntry->ulFileSize = FF_getLong( pucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_FILESIZE ) );
 8003e9e:	602b      	str	r3, [r5, #0]
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 8003ea0:	7ae3      	ldrb	r3, [r4, #11]
	pxDirEntry->ucAttrib = FF_getChar( pucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_ATTRIB ) );
 8003ea2:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}

08003ea8 <FF_InitEntryFetch>:
{
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	4606      	mov	r6, r0
 8003eae:	460d      	mov	r5, r1
 8003eb0:	4614      	mov	r4, r2
	memset( pxContext, 0, sizeof( FF_FetchContext_t ) );
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	6062      	str	r2, [r4, #4]
 8003eb8:	60a2      	str	r2, [r4, #8]
 8003eba:	60e2      	str	r2, [r4, #12]
 8003ebc:	6122      	str	r2, [r4, #16]
	pxContext->ulChainLength = FF_GetChainLength( pxIOManager, ulDirCluster, NULL, &xError );
 8003ebe:	ab01      	add	r3, sp, #4
 8003ec0:	f002 f811 	bl	8005ee6 <FF_GetChainLength>
 8003ec4:	6020      	str	r0, [r4, #0]
	if( FF_isERR( xError ) == pdFALSE )
 8003ec6:	9801      	ldr	r0, [sp, #4]
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	db08      	blt.n	8003ede <FF_InitEntryFetch+0x36>
		pxContext->ulDirCluster = ulDirCluster;
 8003ecc:	6065      	str	r5, [r4, #4]
		pxContext->ulCurrentClusterLCN = ulDirCluster;
 8003ece:	60a5      	str	r5, [r4, #8]
		if( pxIOManager->xPartition.ucType != FF_T_FAT32 )
 8003ed0:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d002      	beq.n	8003ede <FF_InitEntryFetch+0x36>
			if( pxContext->ulDirCluster == pxIOManager->xPartition.ulRootDirCluster )
 8003ed8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003eda:	429d      	cmp	r5, r3
 8003edc:	d001      	beq.n	8003ee2 <FF_InitEntryFetch+0x3a>
}	/* FF_InitEntryFetch() */
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
				pxContext->ulChainLength = pxIOManager->xPartition.ulRootDirSectors / pxIOManager->xPartition.ulSectorsPerCluster;
 8003ee2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ee4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003ee6:	fbb3 f3f2 	udiv	r3, r3, r2
				if( pxContext->ulChainLength == 0 )		/* Some media has ulRootDirSectors < ulSectorsPerCluster. This is wrong, as it should be atleast 1 cluster! */
 8003eea:	b913      	cbnz	r3, 8003ef2 <FF_InitEntryFetch+0x4a>
					pxContext->ulChainLength = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	6023      	str	r3, [r4, #0]
	return xError;
 8003ef0:	e7f5      	b.n	8003ede <FF_InitEntryFetch+0x36>
				pxContext->ulChainLength = pxIOManager->xPartition.ulRootDirSectors / pxIOManager->xPartition.ulSectorsPerCluster;
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e7f3      	b.n	8003ede <FF_InitEntryFetch+0x36>

08003ef6 <FF_CleanupEntryFetch>:
	if( pxContext->pxBuffer )
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	b13b      	cbz	r3, 8003f0a <FF_CleanupEntryFetch+0x14>
{
 8003efa:	b510      	push	{r4, lr}
 8003efc:	460c      	mov	r4, r1
		xError = FF_ReleaseBuffer( pxIOManager, pxContext->pxBuffer );
 8003efe:	4619      	mov	r1, r3
 8003f00:	f003 ff20 	bl	8007d44 <FF_ReleaseBuffer>
		pxContext->pxBuffer = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	bd10      	pop	{r4, pc}
	FF_Error_t xError = FF_ERR_NONE;
 8003f0a:	2000      	movs	r0, #0
	return xError;
 8003f0c:	4770      	bx	lr
	...

08003f10 <FF_FetchEntryWithContext>:
{
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	4691      	mov	r9, r2
 8003f1a:	461e      	mov	r6, r3
	xError = FF_Traverse( pxIOManager, ulEntry, pxContext );
 8003f1c:	f7ff ff06 	bl	8003d2c <FF_Traverse>
	if( FF_isERR( xError ) == pdFALSE )
 8003f20:	1e07      	subs	r7, r0, #0
 8003f22:	db65      	blt.n	8003ff0 <FF_FetchEntryWithContext+0xe0>
		ulRelItem     = FF_getMinorBlockEntry ( pxIOManager, ulEntry, ( uint32_t )FF_SIZEOF_DIRECTORY_ENTRY );
 8003f24:	2220      	movs	r2, #32
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f001 fc0e 	bl	800574a <FF_getMinorBlockEntry>
 8003f2e:	4680      	mov	r8, r0
		ulItemLBA = FF_Cluster2LBA ( pxIOManager, pxContext->ulCurrentClusterLCN ) +
 8003f30:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8003f34:	4620      	mov	r0, r4
 8003f36:	f001 fbb3 	bl	80056a0 <FF_Cluster2LBA>
 8003f3a:	4682      	mov	sl, r0
			FF_getMajorBlockNumber( pxIOManager, ulEntry, ( uint32_t ) FF_SIZEOF_DIRECTORY_ENTRY );
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4620      	mov	r0, r4
 8003f42:	f001 fbd5 	bl	80056f0 <FF_getMajorBlockNumber>
		ulItemLBA = FF_Cluster2LBA ( pxIOManager, pxContext->ulCurrentClusterLCN ) +
 8003f46:	4450      	add	r0, sl
		if( ( pxIOManager->xPartition.ucType != FF_T_FAT32 ) &&
 8003f48:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	d004      	beq.n	8003f5a <FF_FetchEntryWithContext+0x4a>
 8003f50:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d01c      	beq.n	8003f94 <FF_FetchEntryWithContext+0x84>
This function translates a block address to an address based on 'pxIOManager->usBlkSize',
which is usually 512 bytes.
*/
static portINLINE uint32_t FF_getRealLBA( FF_IOManager_t *pxIOManager, uint32_t LBA )
{
	return LBA * pxIOManager->xPartition.ucBlkFactor;
 8003f5a:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
 8003f5e:	fb00 f505 	mul.w	r5, r0, r5
		ulItemLBA = FF_getRealLBA ( pxIOManager, ulItemLBA ) + FF_getMinorBlockNumber( pxIOManager, ulRelItem, ( uint32_t )FF_SIZEOF_DIRECTORY_ENTRY );
 8003f62:	2220      	movs	r2, #32
 8003f64:	4641      	mov	r1, r8
 8003f66:	4620      	mov	r0, r4
 8003f68:	f001 fbd5 	bl	8005716 <FF_getMinorBlockNumber>
 8003f6c:	4405      	add	r5, r0
		if( ( pxContext->pxBuffer == NULL ) ||
 8003f6e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8003f72:	b1f9      	cbz	r1, 8003fb4 <FF_FetchEntryWithContext+0xa4>
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	429d      	cmp	r5, r3
 8003f78:	d017      	beq.n	8003faa <FF_FetchEntryWithContext+0x9a>
				xError = FF_ReleaseBuffer( pxIOManager, pxContext->pxBuffer );
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f003 fee2 	bl	8007d44 <FF_ReleaseBuffer>
				pxContext->pxBuffer = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c9 3010 	str.w	r3, [r9, #16]
			if( FF_isERR( xError ) == pdFALSE )
 8003f86:	1e07      	subs	r7, r0, #0
 8003f88:	da14      	bge.n	8003fb4 <FF_FetchEntryWithContext+0xa4>
		if ( ( pEntryBuffer != NULL ) && ( pxContext->pxBuffer != NULL ) )
 8003f8a:	b38e      	cbz	r6, 8003ff0 <FF_FetchEntryWithContext+0xe0>
 8003f8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003f90:	b9db      	cbnz	r3, 8003fca <FF_FetchEntryWithContext+0xba>
 8003f92:	e02d      	b.n	8003ff0 <FF_FetchEntryWithContext+0xe0>
			ulItemLBA += ( ulEntry / ( ( pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster ) /
 8003f94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f96:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	fbb5 f5f3 	udiv	r5, r5, r3
 8003fa4:	fb02 0005 	mla	r0, r2, r5, r0
 8003fa8:	e7d7      	b.n	8003f5a <FF_FetchEntryWithContext+0x4a>
			( pxContext->pxBuffer->ulSector != ulItemLBA ) ||
 8003faa:	7b0b      	ldrb	r3, [r1, #12]
 8003fac:	f013 0f02 	tst.w	r3, #2
 8003fb0:	d008      	beq.n	8003fc4 <FF_FetchEntryWithContext+0xb4>
 8003fb2:	e7e2      	b.n	8003f7a <FF_FetchEntryWithContext+0x6a>
				pxContext->pxBuffer = FF_GetBuffer( pxIOManager, ulItemLBA, FF_MODE_READ );
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f003 fdf9 	bl	8007bb0 <FF_GetBuffer>
 8003fbe:	f8c9 0010 	str.w	r0, [r9, #16]
				if( pxContext->pxBuffer == NULL )
 8003fc2:	b1c0      	cbz	r0, 8003ff6 <FF_FetchEntryWithContext+0xe6>
		if ( ( pEntryBuffer != NULL ) && ( pxContext->pxBuffer != NULL ) )
 8003fc4:	b1a6      	cbz	r6, 8003ff0 <FF_FetchEntryWithContext+0xe0>
 8003fc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
			memcpy( pEntryBuffer, pxContext->pxBuffer->pucBuffer + ( ulRelItem * FF_SIZEOF_DIRECTORY_ENTRY ), FF_SIZEOF_DIRECTORY_ENTRY );
 8003fca:	6898      	ldr	r0, [r3, #8]
 8003fcc:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003fd0:	6804      	ldr	r4, [r0, #0]
 8003fd2:	6841      	ldr	r1, [r0, #4]
 8003fd4:	6882      	ldr	r2, [r0, #8]
 8003fd6:	68c3      	ldr	r3, [r0, #12]
 8003fd8:	6034      	str	r4, [r6, #0]
 8003fda:	6071      	str	r1, [r6, #4]
 8003fdc:	60b2      	str	r2, [r6, #8]
 8003fde:	60f3      	str	r3, [r6, #12]
 8003fe0:	6904      	ldr	r4, [r0, #16]
 8003fe2:	6941      	ldr	r1, [r0, #20]
 8003fe4:	6982      	ldr	r2, [r0, #24]
 8003fe6:	69c3      	ldr	r3, [r0, #28]
 8003fe8:	6134      	str	r4, [r6, #16]
 8003fea:	6171      	str	r1, [r6, #20]
 8003fec:	61b2      	str	r2, [r6, #24]
 8003fee:	61f3      	str	r3, [r6, #28]
}	/* FF_FetchEntryWithContext() */
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FETCHENTRYWITHCONTEXT );
 8003ff6:	4f01      	ldr	r7, [pc, #4]	; (8003ffc <FF_FetchEntryWithContext+0xec>)
    return xError;
 8003ff8:	e7fa      	b.n	8003ff0 <FF_FetchEntryWithContext+0xe0>
 8003ffa:	bf00      	nop
 8003ffc:	82010004 	.word	0x82010004

08004000 <FF_PushEntryWithContext>:
{
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	4690      	mov	r8, r2
 800400a:	461e      	mov	r6, r3
	xError = FF_Traverse( pxIOManager, ulEntry, pxContext );
 800400c:	f7ff fe8e 	bl	8003d2c <FF_Traverse>
	if( FF_isERR( xError ) == pdFALSE )
 8004010:	1e07      	subs	r7, r0, #0
 8004012:	db53      	blt.n	80040bc <FF_PushEntryWithContext+0xbc>
		ulRelItem     = FF_getMinorBlockEntry ( pxIOManager, ulEntry, ( uint32_t ) FF_SIZEOF_DIRECTORY_ENTRY );
 8004014:	2220      	movs	r2, #32
 8004016:	4629      	mov	r1, r5
 8004018:	4620      	mov	r0, r4
 800401a:	f001 fb96 	bl	800574a <FF_getMinorBlockEntry>
 800401e:	4681      	mov	r9, r0
		ulItemLBA = FF_Cluster2LBA ( pxIOManager, pxContext->ulCurrentClusterLCN ) + FF_getMajorBlockNumber( pxIOManager, ulEntry, ( uint32_t ) FF_SIZEOF_DIRECTORY_ENTRY );
 8004020:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004024:	4620      	mov	r0, r4
 8004026:	f001 fb3b 	bl	80056a0 <FF_Cluster2LBA>
 800402a:	4682      	mov	sl, r0
 800402c:	2220      	movs	r2, #32
 800402e:	4629      	mov	r1, r5
 8004030:	4620      	mov	r0, r4
 8004032:	f001 fb5d 	bl	80056f0 <FF_getMajorBlockNumber>
 8004036:	4450      	add	r0, sl
		if( ( pxIOManager->xPartition.ucType != FF_T_FAT32 ) &&
 8004038:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d004      	beq.n	800404a <FF_PushEntryWithContext+0x4a>
 8004040:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004046:	429a      	cmp	r2, r3
 8004048:	d03b      	beq.n	80040c2 <FF_PushEntryWithContext+0xc2>
 800404a:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
 800404e:	fb00 f505 	mul.w	r5, r0, r5
		ulItemLBA = FF_getRealLBA ( pxIOManager, ulItemLBA ) + FF_getMinorBlockNumber( pxIOManager, ulRelItem, ( uint32_t )FF_SIZEOF_DIRECTORY_ENTRY );
 8004052:	2220      	movs	r2, #32
 8004054:	4649      	mov	r1, r9
 8004056:	4620      	mov	r0, r4
 8004058:	f001 fb5d 	bl	8005716 <FF_getMinorBlockNumber>
 800405c:	4405      	add	r5, r0
		if( ( pxContext->pxBuffer == NULL ) ||
 800405e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004062:	b151      	cbz	r1, 800407a <FF_PushEntryWithContext+0x7a>
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	429d      	cmp	r5, r3
 8004068:	d036      	beq.n	80040d8 <FF_PushEntryWithContext+0xd8>
				xError = FF_ReleaseBuffer( pxIOManager, pxContext->pxBuffer );
 800406a:	4620      	mov	r0, r4
 800406c:	f003 fe6a 	bl	8007d44 <FF_ReleaseBuffer>
				pxContext->pxBuffer = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c8 3010 	str.w	r3, [r8, #16]
			if( FF_isERR( xError ) == pdFALSE )
 8004076:	1e07      	subs	r7, r0, #0
 8004078:	db20      	blt.n	80040bc <FF_PushEntryWithContext+0xbc>
				pxContext->pxBuffer = FF_GetBuffer( pxIOManager, ulItemLBA, FF_MODE_WRITE );
 800407a:	2202      	movs	r2, #2
 800407c:	4629      	mov	r1, r5
 800407e:	4620      	mov	r0, r4
 8004080:	f003 fd96 	bl	8007bb0 <FF_GetBuffer>
 8004084:	f8c8 0010 	str.w	r0, [r8, #16]
				if( pxContext->pxBuffer == NULL )
 8004088:	b358      	cbz	r0, 80040e2 <FF_PushEntryWithContext+0xe2>
			memcpy( pxContext->pxBuffer->pucBuffer + ( ulRelItem * FF_SIZEOF_DIRECTORY_ENTRY ), pEntryBuffer, FF_SIZEOF_DIRECTORY_ENTRY );
 800408a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800408e:	ea4f 1049 	mov.w	r0, r9, lsl #5
 8004092:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004096:	eb0e 0300 	add.w	r3, lr, r0
 800409a:	6835      	ldr	r5, [r6, #0]
 800409c:	6874      	ldr	r4, [r6, #4]
 800409e:	68b1      	ldr	r1, [r6, #8]
 80040a0:	68f2      	ldr	r2, [r6, #12]
 80040a2:	f84e 5000 	str.w	r5, [lr, r0]
 80040a6:	605c      	str	r4, [r3, #4]
 80040a8:	6099      	str	r1, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	6935      	ldr	r5, [r6, #16]
 80040ae:	6974      	ldr	r4, [r6, #20]
 80040b0:	69b1      	ldr	r1, [r6, #24]
 80040b2:	69f2      	ldr	r2, [r6, #28]
 80040b4:	611d      	str	r5, [r3, #16]
 80040b6:	615c      	str	r4, [r3, #20]
 80040b8:	6199      	str	r1, [r3, #24]
 80040ba:	61da      	str	r2, [r3, #28]
}	/* FF_PushEntryWithContext() */
 80040bc:	4638      	mov	r0, r7
 80040be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				( ( pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster ) / FF_SIZEOF_DIRECTORY_ENTRY ) * pxIOManager->xPartition.ulSectorsPerCluster );
 80040c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040c4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
			ulItemLBA += ( ulEntry /
 80040ce:	fbb5 f5f3 	udiv	r5, r5, r3
 80040d2:	fb02 0005 	mla	r0, r2, r5, r0
 80040d6:	e7b8      	b.n	800404a <FF_PushEntryWithContext+0x4a>
			( pxContext->pxBuffer->ulSector != ulItemLBA ) ||
 80040d8:	7b0b      	ldrb	r3, [r1, #12]
 80040da:	f013 0f02 	tst.w	r3, #2
 80040de:	d1d4      	bne.n	800408a <FF_PushEntryWithContext+0x8a>
 80040e0:	e7c3      	b.n	800406a <FF_PushEntryWithContext+0x6a>
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FETCHENTRYWITHCONTEXT );
 80040e2:	4f01      	ldr	r7, [pc, #4]	; (80040e8 <FF_PushEntryWithContext+0xe8>)
    return xError;
 80040e4:	e7ea      	b.n	80040bc <FF_PushEntryWithContext+0xbc>
 80040e6:	bf00      	nop
 80040e8:	82010004 	.word	0x82010004

080040ec <FF_PopulateLongDirent>:
{
 80040ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f0:	b091      	sub	sp, #68	; 0x44
 80040f2:	4607      	mov	r7, r0
 80040f4:	460d      	mov	r5, r1
 80040f6:	9102      	str	r1, [sp, #8]
 80040f8:	4690      	mov	r8, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	9301      	str	r3, [sp, #4]
	char	*pcLastPtr = pxDirEntry->pcFileName + sizeof( pxDirEntry->pcFileName );
 80040fe:	f101 04fb 	add.w	r4, r1, #251	; 0xfb
		xError = FF_FetchEntryWithContext( pxIOManager, usEntry++, pxFetchContext, pucEntryBuffer );
 8004102:	ab08      	add	r3, sp, #32
 8004104:	4641      	mov	r1, r8
 8004106:	f7ff ff03 	bl	8003f10 <FF_FetchEntryWithContext>
		if( FF_isERR( xError ) )
 800410a:	f1b0 0a00 	subs.w	sl, r0, #0
 800410e:	f2c0 80d7 	blt.w	80042c0 <FF_PopulateLongDirent+0x1d4>
		xNumLFNs = ( BaseType_t )( pucEntryBuffer[0] & ~0x40 );
 8004112:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800411e:	9203      	str	r2, [sp, #12]
			pcLastPtr[ -1 ] = '\0';
 8004120:	2200      	movs	r2, #0
 8004122:	4629      	mov	r1, r5
 8004124:	f885 20fa 	strb.w	r2, [r5, #250]	; 0xfa
 8004128:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800412c:	eb09 0549 	add.w	r5, r9, r9, lsl #1
 8004130:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004134:	353a      	adds	r5, #58	; 0x3a
 8004136:	460a      	mov	r2, r1
 8004138:	440d      	add	r5, r1
 800413a:	f101 0b2d 	add.w	fp, r1, #45	; 0x2d
		xNumLFNs = ( BaseType_t )( pucEntryBuffer[0] & ~0x40 );
 800413e:	461e      	mov	r6, r3
 8004140:	3301      	adds	r3, #1
 8004142:	4498      	add	r8, r3
 8004144:	4650      	mov	r0, sl
 8004146:	46ba      	mov	sl, r7
			while( xNumLFNs-- )
 8004148:	e027      	b.n	800419a <FF_PopulateLongDirent+0xae>
				for( xIndex = 0; ( xIndex < 12 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 800414a:	4284      	cmp	r4, r0
 800414c:	d943      	bls.n	80041d6 <FF_PopulateLongDirent+0xea>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_2 + xIndex ];
 800414e:	1c93      	adds	r3, r2, #2
 8004150:	f89d 702e 	ldrb.w	r7, [sp, #46]	; 0x2e
 8004154:	7007      	strb	r7, [r0, #0]
 8004156:	a808      	add	r0, sp, #32
 8004158:	3207      	adds	r2, #7
				for( xIndex = 0; ( xIndex < 12 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 800415a:	429c      	cmp	r4, r3
 800415c:	d03c      	beq.n	80041d8 <FF_PopulateLongDirent+0xec>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_2 + xIndex ];
 800415e:	7c07      	ldrb	r7, [r0, #16]
 8004160:	f803 7b01 	strb.w	r7, [r3], #1
 8004164:	3002      	adds	r0, #2
				for( xIndex = 0; ( xIndex < 12 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 8004166:	4293      	cmp	r3, r2
 8004168:	d1f7      	bne.n	800415a <FF_PopulateLongDirent+0x6e>
				for( xIndex = 0; ( xIndex < 4 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 800416a:	429c      	cmp	r4, r3
 800416c:	d90c      	bls.n	8004188 <FF_PopulateLongDirent+0x9c>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_3 + xIndex ];
 800416e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004172:	461a      	mov	r2, r3
 8004174:	f802 0b01 	strb.w	r0, [r2], #1
				for( xIndex = 0; ( xIndex < 4 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 8004178:	4294      	cmp	r4, r2
 800417a:	d905      	bls.n	8004188 <FF_PopulateLongDirent+0x9c>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_3 + xIndex ];
 800417c:	1c98      	adds	r0, r3, #2
 800417e:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8004182:	705a      	strb	r2, [r3, #1]
				if( ( xNumLFNs == ( y - 1 ) ) && ( pcCurPtr < pcLastPtr ) )
 8004184:	454e      	cmp	r6, r9
 8004186:	d029      	beq.n	80041dc <FF_PopulateLongDirent+0xf0>
				xError = FF_FetchEntryWithContext( pxIOManager, usEntry++, pxFetchContext, pucEntryBuffer );
 8004188:	ab08      	add	r3, sp, #32
 800418a:	9a01      	ldr	r2, [sp, #4]
 800418c:	4650      	mov	r0, sl
 800418e:	f7ff febf 	bl	8003f10 <FF_FetchEntryWithContext>
 8004192:	3d0d      	subs	r5, #13
				if( FF_isERR( xError ) )
 8004194:	2800      	cmp	r0, #0
 8004196:	f2c0 8099 	blt.w	80042cc <FF_PopulateLongDirent+0x1e0>
 800419a:	eba8 0106 	sub.w	r1, r8, r6
 800419e:	b289      	uxth	r1, r1
			while( xNumLFNs-- )
 80041a0:	3e01      	subs	r6, #1
 80041a2:	455d      	cmp	r5, fp
 80041a4:	d01f      	beq.n	80041e6 <FF_PopulateLongDirent+0xfa>
				for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80041a6:	42ac      	cmp	r4, r5
				pcCurPtr = pxDirEntry->pcFileName + ( xNumLFNs * 13 );
 80041a8:	bf98      	it	ls
 80041aa:	462a      	movls	r2, r5
				for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80041ac:	f240 808c 	bls.w	80042c8 <FF_PopulateLongDirent+0x1dc>
 80041b0:	1c6a      	adds	r2, r5, #1
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_1 + xIndex ];
 80041b2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80041b6:	46ae      	mov	lr, r5
 80041b8:	f80e 3b05 	strb.w	r3, [lr], #5
 80041bc:	ab08      	add	r3, sp, #32
				for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80041be:	4294      	cmp	r4, r2
 80041c0:	f000 8082 	beq.w	80042c8 <FF_PopulateLongDirent+0x1dc>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_1 + xIndex ];
 80041c4:	4610      	mov	r0, r2
 80041c6:	78df      	ldrb	r7, [r3, #3]
 80041c8:	f800 7b01 	strb.w	r7, [r0], #1
 80041cc:	3302      	adds	r3, #2
				for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80041ce:	4570      	cmp	r0, lr
 80041d0:	d0bb      	beq.n	800414a <FF_PopulateLongDirent+0x5e>
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_1 + xIndex ];
 80041d2:	4602      	mov	r2, r0
 80041d4:	e7f3      	b.n	80041be <FF_PopulateLongDirent+0xd2>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4618      	mov	r0, r3
 80041da:	e7d3      	b.n	8004184 <FF_PopulateLongDirent+0x98>
				if( ( xNumLFNs == ( y - 1 ) ) && ( pcCurPtr < pcLastPtr ) )
 80041dc:	4284      	cmp	r4, r0
					*pcCurPtr = '\0';
 80041de:	bf84      	itt	hi
 80041e0:	2300      	movhi	r3, #0
 80041e2:	7003      	strbhi	r3, [r0, #0]
 80041e4:	e7d0      	b.n	8004188 <FF_PopulateLongDirent+0x9c>
 80041e6:	460f      	mov	r7, r1
 80041e8:	4682      	mov	sl, r0
			if( FF_isERR( xError ) )
 80041ea:	2800      	cmp	r0, #0
 80041ec:	db68      	blt.n	80042c0 <FF_PopulateLongDirent+0x1d4>
		memcpy( pcShortName, pucEntryBuffer, 11 );
 80041ee:	ac08      	add	r4, sp, #32
 80041f0:	ab04      	add	r3, sp, #16
 80041f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80041f6:	c303      	stmia	r3!, {r0, r1}
 80041f8:	f823 2b02 	strh.w	r2, [r3], #2
 80041fc:	0c12      	lsrs	r2, r2, #16
 80041fe:	701a      	strb	r2, [r3, #0]
		FF_ProcessShortName( pcShortName );
 8004200:	a804      	add	r0, sp, #16
 8004202:	f7ff fd18 	bl	8003c36 <FF_ProcessShortName>
		if( ucCheckSum != FF_CreateChkSum( pucEntryBuffer ) )
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff fca4 	bl	8003b54 <FF_CreateChkSum>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	4298      	cmp	r0, r3
 8004210:	d005      	beq.n	800421e <FF_PopulateLongDirent+0x132>
			strcpy( pxDirEntry->pcFileName, pcShortName );
 8004212:	a904      	add	r1, sp, #16
 8004214:	9b02      	ldr	r3, [sp, #8]
 8004216:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 800421a:	f013 fb19 	bl	8017850 <strcpy>
		u16.bytes.u8_1 = pBuffer[ 1 ];
 800421e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f363 220f 	bfi	r2, r3, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 800422a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800422e:	f363 0207 	bfi	r2, r3, #0, #8
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8004232:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f361 230f 	bfi	r3, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 800423e:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8004242:	f361 0307 	bfi	r3, r1, #0, #8
		return u16.u16;
 8004246:	b29b      	uxth	r3, r3
			( ( uint32_t )FF_getShort( pucEntryBuffer, FF_FAT_DIRENT_CLUS_HIGH ) << 16 ) |
 8004248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		pxDirEntry->ulObjectCluster =
 800424c:	9d02      	ldr	r5, [sp, #8]
 800424e:	606b      	str	r3, [r5, #4]
			FF_GetTime( &pxDirEntry->xCreateTime, pucEntryBuffer, FF_FAT_DIRENT_CREATE_TIME );
 8004250:	f105 0416 	add.w	r4, r5, #22
 8004254:	220e      	movs	r2, #14
 8004256:	a908      	add	r1, sp, #32
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff fcbb 	bl	8003bd4 <FF_GetTime>
			FF_GetDate( &pxDirEntry->xCreateTime, pucEntryBuffer, FF_FAT_DIRENT_CREATE_DATE );
 800425e:	2210      	movs	r2, #16
 8004260:	a908      	add	r1, sp, #32
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff fcce 	bl	8003c04 <FF_GetDate>
			FF_GetTime( &pxDirEntry->xModifiedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_TIME );
 8004268:	f105 0422 	add.w	r4, r5, #34	; 0x22
 800426c:	2216      	movs	r2, #22
 800426e:	a908      	add	r1, sp, #32
 8004270:	4620      	mov	r0, r4
 8004272:	f7ff fcaf 	bl	8003bd4 <FF_GetTime>
			FF_GetDate( &pxDirEntry->xModifiedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_DATE );
 8004276:	2218      	movs	r2, #24
 8004278:	a908      	add	r1, sp, #32
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff fcc2 	bl	8003c04 <FF_GetDate>
			FF_GetDate( &pxDirEntry->xAccessedTime, pucEntryBuffer, FF_FAT_DIRENT_LASTACC_DATE );
 8004280:	2212      	movs	r2, #18
 8004282:	a908      	add	r1, sp, #32
 8004284:	4628      	mov	r0, r5
 8004286:	302e      	adds	r0, #46	; 0x2e
 8004288:	f7ff fcbc 	bl	8003c04 <FF_GetDate>
			pxDirEntry->xAccessedTime.Hour		= 0;
 800428c:	2300      	movs	r3, #0
 800428e:	86ab      	strh	r3, [r5, #52]	; 0x34
			pxDirEntry->xAccessedTime.Minute	= 0;
 8004290:	86eb      	strh	r3, [r5, #54]	; 0x36
			pxDirEntry->xAccessedTime.Second	= 0;
 8004292:	872b      	strh	r3, [r5, #56]	; 0x38
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8004294:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8004298:	f362 631f 	bfi	r3, r2, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 800429c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 80042a0:	f362 4317 	bfi	r3, r2, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80042a4:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 80042a8:	f362 230f 	bfi	r3, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80042ac:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80042b0:	f362 0307 	bfi	r3, r2, #0, #8
		pxDirEntry->ulFileSize = FF_getLong( pucEntryBuffer, ( uint16_t ) ( FF_FAT_DIRENT_FILESIZE ) );
 80042b4:	602b      	str	r3, [r5, #0]
		pxDirEntry->ucAttrib = FF_getChar( pucEntryBuffer, ( uint16_t ) ( FF_FAT_DIRENT_ATTRIB ) );
 80042b6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80042ba:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
		pxDirEntry->usCurrentItem = usEntry;
 80042be:	82af      	strh	r7, [r5, #20]
}	/* FF_PopulateLongDirent() */
 80042c0:	4650      	mov	r0, sl
 80042c2:	b011      	add	sp, #68	; 0x44
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*( pcCurPtr++ ) = pucEntryBuffer[ FF_FAT_LFN_NAME_1 + xIndex ];
 80042c8:	4613      	mov	r3, r2
 80042ca:	e74e      	b.n	800416a <FF_PopulateLongDirent+0x7e>
 80042cc:	4682      	mov	sl, r0
 80042ce:	e7f7      	b.n	80042c0 <FF_PopulateLongDirent+0x1d4>

080042d0 <FF_FindEntryInDir>:
{
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	b08f      	sub	sp, #60	; 0x3c
 80042d6:	9001      	str	r0, [sp, #4]
 80042d8:	4689      	mov	r9, r1
 80042da:	9207      	str	r2, [sp, #28]
 80042dc:	9303      	str	r3, [sp, #12]
 80042de:	9d18      	ldr	r5, [sp, #96]	; 0x60
			BaseType_t	NameLen = ( BaseType_t ) strlen( ( const char * )pcName );
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fb ff7f 	bl	80001e4 <strlen>
 80042e6:	4604      	mov	r4, r0
	if( ( pxFindParams->ulFlags & FIND_FLAG_FITS_SHORT_OK ) == FIND_FLAG_FITS_SHORT_OK )
 80042e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80042ec:	f003 0318 	and.w	r3, r3, #24
 80042f0:	9305      	str	r3, [sp, #20]
	pxDirEntry->ucAttrib = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
	if( ( pxFindParams->ulFlags & FIND_FLAG_CREATE_FLAG ) != 0 )
 80042f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80042fc:	f013 0f20 	tst.w	r3, #32
		pxFindParams->lFreeEntry = -1;
 8004300:	bf14      	ite	ne
 8004302:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
		pxFindParams->lFreeEntry = 0;
 8004306:	2300      	moveq	r3, #0
 8004308:	f8c9 3004 	str.w	r3, [r9, #4]
	xError = FF_InitEntryFetch( pxIOManager, pxFindParams->ulDirCluster, &xFetchContext );
 800430c:	aa09      	add	r2, sp, #36	; 0x24
 800430e:	f8d9 1000 	ldr.w	r1, [r9]
 8004312:	9801      	ldr	r0, [sp, #4]
 8004314:	f7ff fdc8 	bl	8003ea8 <FF_InitEntryFetch>
	if( FF_isERR( xError ) == pdFALSE )
 8004318:	f1b0 0b00 	subs.w	fp, r0, #0
 800431c:	f2c0 8133 	blt.w	8004586 <FF_FindEntryInDir+0x2b6>
		char	*pcLastPtr = pxDirEntry->pcFileName + sizeof( pxDirEntry->pcFileName );
 8004320:	f105 08fb 	add.w	r8, r5, #251	; 0xfb
		entriesNeeded = ( uint8_t )( ( NameLen + 12 ) / 13 ) + 1;
 8004324:	340c      	adds	r4, #12
 8004326:	4ba0      	ldr	r3, [pc, #640]	; (80045a8 <FF_FindEntryInDir+0x2d8>)
 8004328:	fb83 2304 	smull	r2, r3, r3, r4
 800432c:	17e4      	asrs	r4, r4, #31
 800432e:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 8004332:	b2e3      	uxtb	r3, r4
 8004334:	9306      	str	r3, [sp, #24]
		for( pxDirEntry->usCurrentItem = 0; pxDirEntry->usCurrentItem < FF_MAX_ENTRIES_PER_DIRECTORY; pxDirEntry->usCurrentItem++ )
 8004336:	2400      	movs	r4, #0
 8004338:	82ac      	strh	r4, [r5, #20]
 800433a:	4621      	mov	r1, r4
 800433c:	9400      	str	r4, [sp, #0]
 800433e:	46a2      	mov	sl, r4
 8004340:	9402      	str	r4, [sp, #8]
 8004342:	9404      	str	r4, [sp, #16]
 8004344:	4626      	mov	r6, r4
				if( FF_stricmp( ( const char * )pcName, ( const char * )pxDirEntry->pcFileName ) == 0 )
 8004346:	f105 073a 	add.w	r7, r5, #58	; 0x3a
 800434a:	e0b9      	b.n	80044c0 <FF_FindEntryInDir+0x1f0>
				src += FF_SIZEOF_DIRECTORY_ENTRY;
 800434c:	3420      	adds	r4, #32
 800434e:	e0c9      	b.n	80044e4 <FF_FindEntryInDir+0x214>
				pxDirEntry->ucAttrib = 0;
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
				if( ( pxFindParams->lFreeEntry < 0 ) && ( ++freeCount == entriesNeeded ) )
 8004358:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f280 80a7 	bge.w	80044b0 <FF_FindEntryInDir+0x1e0>
 8004362:	3601      	adds	r6, #1
		entriesNeeded = ( uint8_t )( ( NameLen + 12 ) / 13 ) + 1;
 8004364:	9b06      	ldr	r3, [sp, #24]
 8004366:	3301      	adds	r3, #1
				if( ( pxFindParams->lFreeEntry < 0 ) && ( ++freeCount == entriesNeeded ) )
 8004368:	42b3      	cmp	r3, r6
 800436a:	f040 80a1 	bne.w	80044b0 <FF_FindEntryInDir+0x1e0>
					pxFindParams->lFreeEntry = ( pxDirEntry->usCurrentItem - ( entriesNeeded - 1 ) );
 800436e:	8aab      	ldrh	r3, [r5, #20]
 8004370:	9a06      	ldr	r2, [sp, #24]
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	f8c9 3004 	str.w	r3, [r9, #4]
 8004378:	e09a      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
					if( ( xLFNCount == 0 ) || ( lastAttrib & FF_FAT_ATTR_LFN ) != FF_FAT_ATTR_LFN )
 800437a:	f1ba 0f00 	cmp.w	sl, #0
 800437e:	d003      	beq.n	8004388 <FF_FindEntryInDir+0xb8>
 8004380:	f001 010f 	and.w	r1, r1, #15
 8004384:	290f      	cmp	r1, #15
 8004386:	d02c      	beq.n	80043e2 <FF_FindEntryInDir+0x112>
						xLFNTotal = xLFNCount = ( BaseType_t )( src[ 0 ] & ~0x40 );
 8004388:	7826      	ldrb	r6, [r4, #0]
						lfnItem = pxDirEntry->usCurrentItem;
 800438a:	8aab      	ldrh	r3, [r5, #20]
 800438c:	9304      	str	r3, [sp, #16]
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 800438e:	7b63      	ldrb	r3, [r4, #13]
 8004390:	9302      	str	r3, [sp, #8]
						pcLastPtr[ -1 ] = '\0';
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	f885 30fa 	strb.w	r3, [r5, #250]	; 0xfa
					if( xLFNCount != 0 )
 800439a:	f036 0640 	bics.w	r6, r6, #64	; 0x40
 800439e:	d102      	bne.n	80043a6 <FF_FindEntryInDir+0xd6>
						xLFNTotal = xLFNCount = ( BaseType_t )( src[ 0 ] & ~0x40 );
 80043a0:	9600      	str	r6, [sp, #0]
 80043a2:	46b2      	mov	sl, r6
 80043a4:	e084      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
 80043a6:	9600      	str	r6, [sp, #0]
						xLFNCount--;
 80043a8:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
						pcCurPtr = pxDirEntry->pcFileName + ( xLFNCount * 13 );
 80043ac:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80043b0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80043b4:	18f9      	adds	r1, r7, r3
							for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043b6:	4588      	cmp	r8, r1
						pcCurPtr = pxDirEntry->pcFileName + ( xLFNCount * 13 );
 80043b8:	bf98      	it	ls
 80043ba:	460a      	movls	r2, r1
							for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043bc:	f240 80ec 	bls.w	8004598 <FF_FindEntryInDir+0x2c8>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_1 + xIndex ];
 80043c0:	1c4a      	adds	r2, r1, #1
 80043c2:	7860      	ldrb	r0, [r4, #1]
 80043c4:	54f8      	strb	r0, [r7, r3]
 80043c6:	4623      	mov	r3, r4
 80043c8:	1d48      	adds	r0, r1, #5
							for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043ca:	4590      	cmp	r8, r2
 80043cc:	f000 80e4 	beq.w	8004598 <FF_FindEntryInDir+0x2c8>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_1 + xIndex ];
 80043d0:	4611      	mov	r1, r2
 80043d2:	78de      	ldrb	r6, [r3, #3]
 80043d4:	f801 6b01 	strb.w	r6, [r1], #1
 80043d8:	3302      	adds	r3, #2
							for( xIndex = 0; ( xIndex < 10 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043da:	4281      	cmp	r1, r0
 80043dc:	d003      	beq.n	80043e6 <FF_FindEntryInDir+0x116>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_1 + xIndex ];
 80043de:	460a      	mov	r2, r1
 80043e0:	e7f3      	b.n	80043ca <FF_FindEntryInDir+0xfa>
 80043e2:	4656      	mov	r6, sl
 80043e4:	e7e0      	b.n	80043a8 <FF_FindEntryInDir+0xd8>
							for( xIndex = 0; ( xIndex < 12 )  && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043e6:	4588      	cmp	r8, r1
 80043e8:	f240 80cb 	bls.w	8004582 <FF_FindEntryInDir+0x2b2>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_2 + xIndex ];
 80043ec:	1c93      	adds	r3, r2, #2
 80043ee:	7ba0      	ldrb	r0, [r4, #14]
 80043f0:	7008      	strb	r0, [r1, #0]
 80043f2:	4621      	mov	r1, r4
 80043f4:	3207      	adds	r2, #7
							for( xIndex = 0; ( xIndex < 12 )  && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 80043f6:	4598      	cmp	r8, r3
 80043f8:	f000 80c3 	beq.w	8004582 <FF_FindEntryInDir+0x2b2>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_2 + xIndex ];
 80043fc:	7c08      	ldrb	r0, [r1, #16]
 80043fe:	f803 0b01 	strb.w	r0, [r3], #1
 8004402:	3102      	adds	r1, #2
							for( xIndex = 0; ( xIndex < 12 )  && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 8004404:	4293      	cmp	r3, r2
 8004406:	d1f6      	bne.n	80043f6 <FF_FindEntryInDir+0x126>
							for( xIndex = 0; ( xIndex < 4 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 8004408:	4543      	cmp	r3, r8
 800440a:	f080 80ba 	bcs.w	8004582 <FF_FindEntryInDir+0x2b2>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_3 + xIndex ];
 800440e:	7f21      	ldrb	r1, [r4, #28]
 8004410:	461a      	mov	r2, r3
 8004412:	f802 1b01 	strb.w	r1, [r2], #1
							for( xIndex = 0; ( xIndex < 4 ) && ( pcCurPtr < pcLastPtr ); xIndex += 2 )
 8004416:	4590      	cmp	r8, r2
 8004418:	f240 80b3 	bls.w	8004582 <FF_FindEntryInDir+0x2b2>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_3 + xIndex ];
 800441c:	7fa2      	ldrb	r2, [r4, #30]
 800441e:	705a      	strb	r2, [r3, #1]
						if( ( xLFNCount == xLFNTotal - 1 ) && ( pcCurPtr < pcLastPtr ) )
 8004420:	9a00      	ldr	r2, [sp, #0]
 8004422:	3a01      	subs	r2, #1
 8004424:	4592      	cmp	sl, r2
 8004426:	d001      	beq.n	800442c <FF_FindEntryInDir+0x15c>
			freeCount = 0;
 8004428:	2600      	movs	r6, #0
 800442a:	e041      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_3 + xIndex ];
 800442c:	1c9a      	adds	r2, r3, #2
						if( ( xLFNCount == xLFNTotal - 1 ) && ( pcCurPtr < pcLastPtr ) )
 800442e:	4590      	cmp	r8, r2
 8004430:	d939      	bls.n	80044a6 <FF_FindEntryInDir+0x1d6>
							*pcCurPtr = '\0';	/* Important when name len is multiple of 13. */
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	709a      	strb	r2, [r3, #2]
			freeCount = 0;
 8004438:	2600      	movs	r6, #0
 800443a:	e039      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
				if( testShortname )
 800443c:	9b05      	ldr	r3, [sp, #20]
 800443e:	2b18      	cmp	r3, #24
 8004440:	d10c      	bne.n	800445c <FF_FindEntryInDir+0x18c>
					if( memcmp( src, pxFindParams->pcEntryBuffer, 11 ) == 0 )
 8004442:	220b      	movs	r2, #11
 8004444:	f109 010c 	add.w	r1, r9, #12
 8004448:	4620      	mov	r0, r4
 800444a:	f013 f98b 	bl	8017764 <memcmp>
 800444e:	b928      	cbnz	r0, 800445c <FF_FindEntryInDir+0x18c>
						pxFindParams->ulFlags |= FIND_FLAG_SHORTNAME_CHECKED | FIND_FLAG_SHORTNAME_FOUND;
 8004450:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004454:	f043 0306 	orr.w	r3, r3, #6
 8004458:	f8c9 3008 	str.w	r3, [r9, #8]
				if( FF_stricmp( ( const char * )pcName, ( const char * )pxDirEntry->pcFileName ) == 0 )
 800445c:	4639      	mov	r1, r7
 800445e:	9807      	ldr	r0, [sp, #28]
 8004460:	f7ff fca4 	bl	8003dac <strcasecmp>
 8004464:	b118      	cbz	r0, 800446e <FF_FindEntryInDir+0x19e>
				xLFNTotal = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
			freeCount = 0;
 800446a:	461e      	mov	r6, r3
 800446c:	e020      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
					if( xLFNTotal )
 800446e:	9b00      	ldr	r3, [sp, #0]
 8004470:	b17b      	cbz	r3, 8004492 <FF_FindEntryInDir+0x1c2>
						xError = FF_PopulateLongDirent( pxIOManager, pxDirEntry, ( uint16_t ) lfnItem, &xFetchContext );
 8004472:	ab09      	add	r3, sp, #36	; 0x24
 8004474:	9a04      	ldr	r2, [sp, #16]
 8004476:	4629      	mov	r1, r5
 8004478:	9801      	ldr	r0, [sp, #4]
 800447a:	f7ff fe37 	bl	80040ec <FF_PopulateLongDirent>
						if( FF_isERR( xError ) )
 800447e:	f1b0 0b00 	subs.w	fp, r0, #0
 8004482:	da0e      	bge.n	80044a2 <FF_FindEntryInDir+0x1d2>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8004484:	a909      	add	r1, sp, #36	; 0x24
 8004486:	9801      	ldr	r0, [sp, #4]
 8004488:	f7ff fd35 	bl	8003ef6 <FF_CleanupEntryFetch>
						xError = FF_PopulateLongDirent( pxIOManager, pxDirEntry, ( uint16_t ) lfnItem, &xFetchContext );
 800448c:	4658      	mov	r0, fp
uint32_t xResult = 0ul;
 800448e:	2400      	movs	r4, #0
 8004490:	e07b      	b.n	800458a <FF_FindEntryInDir+0x2ba>
						FF_PopulateShortDirent( pxIOManager, pxDirEntry, src );
 8004492:	4622      	mov	r2, r4
 8004494:	4629      	mov	r1, r5
 8004496:	9801      	ldr	r0, [sp, #4]
 8004498:	f7ff fca4 	bl	8003de4 <FF_PopulateShortDirent>
						pxDirEntry->usCurrentItem++;
 800449c:	8aab      	ldrh	r3, [r5, #20]
 800449e:	3301      	adds	r3, #1
 80044a0:	82ab      	strh	r3, [r5, #20]
					xResult = pxDirEntry->ulObjectCluster;
 80044a2:	686c      	ldr	r4, [r5, #4]
					break;
 80044a4:	e053      	b.n	800454e <FF_FindEntryInDir+0x27e>
			freeCount = 0;
 80044a6:	2600      	movs	r6, #0
 80044a8:	e002      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
					xLFNTotal = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	9300      	str	r3, [sp, #0]
			freeCount = 0;
 80044ae:	461e      	mov	r6, r3
		for( pxDirEntry->usCurrentItem = 0; pxDirEntry->usCurrentItem < FF_MAX_ENTRIES_PER_DIRECTORY; pxDirEntry->usCurrentItem++ )
 80044b0:	8aa9      	ldrh	r1, [r5, #20]
 80044b2:	3101      	adds	r1, #1
 80044b4:	b289      	uxth	r1, r1
 80044b6:	82a9      	strh	r1, [r5, #20]
 80044b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044bc:	4299      	cmp	r1, r3
 80044be:	d043      	beq.n	8004548 <FF_FindEntryInDir+0x278>
			if( ( src == NULL ) ||
 80044c0:	b134      	cbz	r4, 80044d0 <FF_FindEntryInDir+0x200>
				( src >= xFetchContext.pxBuffer->pucBuffer + ( FF_SIZEOF_SECTOR - FF_SIZEOF_DIRECTORY_ENTRY ) ) )
 80044c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
			if( ( src == NULL ) ||
 80044ca:	429c      	cmp	r4, r3
 80044cc:	f4ff af3e 	bcc.w	800434c <FF_FindEntryInDir+0x7c>
				xError = FF_FetchEntryWithContext( pxIOManager, pxDirEntry->usCurrentItem, &xFetchContext, NULL );
 80044d0:	2300      	movs	r3, #0
 80044d2:	aa09      	add	r2, sp, #36	; 0x24
 80044d4:	9801      	ldr	r0, [sp, #4]
 80044d6:	f7ff fd1b 	bl	8003f10 <FF_FetchEntryWithContext>
				if( FF_isERR( xError ) != pdFALSE )
 80044da:	f1b0 0b00 	subs.w	fp, r0, #0
 80044de:	db5d      	blt.n	800459c <FF_FindEntryInDir+0x2cc>
				src = xFetchContext.pxBuffer->pucBuffer;
 80044e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044e2:	689c      	ldr	r4, [r3, #8]

int8_t FF_PushEntry( FF_IOManager_t *pxIOManager, uint32_t ulDirCluster, uint16_t usEntry, uint8_t *buffer, void *pParam );

static portINLINE BaseType_t FF_isEndOfDir( const uint8_t *pucEntryBuffer )
{
	return pucEntryBuffer[ 0 ] == ( uint8_t ) 0;
 80044e4:	7823      	ldrb	r3, [r4, #0]
			if( FF_isEndOfDir( src ) )
 80044e6:	b38b      	cbz	r3, 800454c <FF_FindEntryInDir+0x27c>
			if( FF_isDeleted( src ) )
 80044e8:	2be5      	cmp	r3, #229	; 0xe5
 80044ea:	f43f af31 	beq.w	8004350 <FF_FindEntryInDir+0x80>
				lastAttrib = pxDirEntry->ucAttrib;
 80044ee:	f895 10fb 	ldrb.w	r1, [r5, #251]	; 0xfb
 80044f2:	7ae3      	ldrb	r3, [r4, #11]
			pxDirEntry->ucAttrib = FF_getChar( src, FF_FAT_DIRENT_ATTRIB );
 80044f4:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
			if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_LFN ) == FF_FAT_ATTR_LFN )
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	2a0f      	cmp	r2, #15
 80044fe:	f43f af3c 	beq.w	800437a <FF_FindEntryInDir+0xaa>
			if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_VOLID ) == FF_FAT_ATTR_VOLID )
 8004502:	f013 0f08 	tst.w	r3, #8
 8004506:	d1d0      	bne.n	80044aa <FF_FindEntryInDir+0x1da>
			if( ( xLFNTotal == 0 ) || ( ucCheckSum != FF_CreateChkSum( src ) ) )
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	b12b      	cbz	r3, 8004518 <FF_FindEntryInDir+0x248>
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fb21 	bl	8003b54 <FF_CreateChkSum>
 8004512:	9b02      	ldr	r3, [sp, #8]
 8004514:	4298      	cmp	r0, r3
 8004516:	d00c      	beq.n	8004532 <FF_FindEntryInDir+0x262>
				memcpy( pxDirEntry->pcFileName, src, 11 );
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	603a      	str	r2, [r7, #0]
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	8922      	ldrh	r2, [r4, #8]
 8004522:	7aa3      	ldrb	r3, [r4, #10]
 8004524:	813a      	strh	r2, [r7, #8]
 8004526:	72bb      	strb	r3, [r7, #10]
				FF_ProcessShortName( ( char * ) pxDirEntry->pcFileName );
 8004528:	4638      	mov	r0, r7
 800452a:	f7ff fb84 	bl	8003c36 <FF_ProcessShortName>
					xLFNTotal = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
			if( ( pxDirEntry->ucAttrib & pa_Attrib ) == pa_Attrib )
 8004532:	f895 30fb 	ldrb.w	r3, [r5, #251]	; 0xfb
 8004536:	9a03      	ldr	r2, [sp, #12]
 8004538:	ea32 0303 	bics.w	r3, r2, r3
 800453c:	f43f af7e 	beq.w	800443c <FF_FindEntryInDir+0x16c>
				xLFNTotal = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	9300      	str	r3, [sp, #0]
			freeCount = 0;
 8004544:	461e      	mov	r6, r3
 8004546:	e7b3      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
uint32_t xResult = 0ul;
 8004548:	2400      	movs	r4, #0
 800454a:	e000      	b.n	800454e <FF_FindEntryInDir+0x27e>
 800454c:	2400      	movs	r4, #0
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800454e:	a909      	add	r1, sp, #36	; 0x24
 8004550:	9801      	ldr	r0, [sp, #4]
 8004552:	f7ff fcd0 	bl	8003ef6 <FF_CleanupEntryFetch>
			if( FF_isERR( xError ) == pdFALSE )
 8004556:	f1bb 0f00 	cmp.w	fp, #0
 800455a:	db15      	blt.n	8004588 <FF_FindEntryInDir+0x2b8>
	if( FF_isERR( xError ) == pdFALSE )
 800455c:	2800      	cmp	r0, #0
 800455e:	db14      	blt.n	800458a <FF_FindEntryInDir+0x2ba>
		if( pxFindParams->lFreeEntry < 0 )
 8004560:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004564:	2b00      	cmp	r3, #0
			pxFindParams->lFreeEntry = pxDirEntry->usCurrentItem;
 8004566:	bfbc      	itt	lt
 8004568:	8aab      	ldrhlt	r3, [r5, #20]
 800456a:	f8c9 3004 	strlt.w	r3, [r9, #4]
		if( testShortname )
 800456e:	9b05      	ldr	r3, [sp, #20]
 8004570:	2b18      	cmp	r3, #24
 8004572:	d10a      	bne.n	800458a <FF_FindEntryInDir+0x2ba>
			pxFindParams->ulFlags |= FIND_FLAG_SHORTNAME_CHECKED;
 8004574:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	f8c9 3008 	str.w	r3, [r9, #8]
 8004580:	e003      	b.n	800458a <FF_FindEntryInDir+0x2ba>
			freeCount = 0;
 8004582:	2600      	movs	r6, #0
 8004584:	e794      	b.n	80044b0 <FF_FindEntryInDir+0x1e0>
uint32_t xResult = 0ul;
 8004586:	2400      	movs	r4, #0
 8004588:	4658      	mov	r0, fp
	if( pxError != NULL )
 800458a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800458c:	b103      	cbz	r3, 8004590 <FF_FindEntryInDir+0x2c0>
		*pxError = xError;
 800458e:	6018      	str	r0, [r3, #0]
}	/* FF_FindEntryInDir() */
 8004590:	4620      	mov	r0, r4
 8004592:	b00f      	add	sp, #60	; 0x3c
 8004594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								*( pcCurPtr++ ) = src[ FF_FAT_LFN_NAME_1 + xIndex ];
 8004598:	4613      	mov	r3, r2
 800459a:	e735      	b.n	8004408 <FF_FindEntryInDir+0x138>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800459c:	a909      	add	r1, sp, #36	; 0x24
 800459e:	9801      	ldr	r0, [sp, #4]
 80045a0:	f7ff fca9 	bl	8003ef6 <FF_CleanupEntryFetch>
uint32_t xResult = 0ul;
 80045a4:	2400      	movs	r4, #0
 80045a6:	e7ef      	b.n	8004588 <FF_FindEntryInDir+0x2b8>
 80045a8:	4ec4ec4f 	.word	0x4ec4ec4f

080045ac <FF_FindDir>:
{
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80045b4:	4605      	mov	r5, r0
 80045b6:	4688      	mov	r8, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	469b      	mov	fp, r3
uint16_t it = 0;         /* Re-entrancy Variables for FF_strtok( ). */
 80045bc:	2600      	movs	r6, #0
 80045be:	f8ad 621e 	strh.w	r6, [sp, #542]	; 0x21e
BaseType_t last = pdFALSE;
 80045c2:	9686      	str	r6, [sp, #536]	; 0x218
	memset( &xFindParams, '\0', sizeof( xFindParams ) );
 80045c4:	2230      	movs	r2, #48	; 0x30
 80045c6:	4631      	mov	r1, r6
 80045c8:	a836      	add	r0, sp, #216	; 0xd8
 80045ca:	f013 f8ff 	bl	80177cc <memset>
	xFindParams.ulDirCluster = pxIOManager->xPartition.ulRootDirCluster;
 80045ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045d0:	9336      	str	r3, [sp, #216]	; 0xd8
	xError = FF_ERR_NONE;
 80045d2:	9635      	str	r6, [sp, #212]	; 0xd4
    if( pathLen <= 1 )
 80045d4:	2c01      	cmp	r4, #1
 80045d6:	d934      	bls.n	8004642 <FF_FindDir+0x96>
		if( ( pcPath[ pathLen - 1 ] == '\\' ) || ( pcPath[ pathLen - 1 ] == '/' ) )
 80045d8:	eb08 0304 	add.w	r3, r8, r4
 80045dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80045e0:	2b5c      	cmp	r3, #92	; 0x5c
 80045e2:	d00a      	beq.n	80045fa <FF_FindDir+0x4e>
 80045e4:	2b2f      	cmp	r3, #47	; 0x2f
 80045e6:	d008      	beq.n	80045fa <FF_FindDir+0x4e>
			FF_PendSemaphore( pxIOManager->pvSemaphore );	/* Thread safety on shared object! */
 80045e8:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 80045ec:	f004 fa54 	bl	8008a98 <FF_PendSemaphore>
 80045f0:	f105 0658 	add.w	r6, r5, #88	; 0x58
				for( xIndex = 0; xIndex < ffconfigPATH_CACHE_DEPTH; xIndex++ )
 80045f4:	2700      	movs	r7, #0
					if( strlen( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath ) == ( size_t )pathLen )
 80045f6:	9403      	str	r4, [sp, #12]
 80045f8:	e006      	b.n	8004608 <FF_FindDir+0x5c>
			pathLen--;
 80045fa:	3c01      	subs	r4, #1
 80045fc:	b2a4      	uxth	r4, r4
 80045fe:	e7f3      	b.n	80045e8 <FF_FindDir+0x3c>
				for( xIndex = 0; xIndex < ffconfigPATH_CACHE_DEPTH; xIndex++ )
 8004600:	3701      	adds	r7, #1
 8004602:	36c8      	adds	r6, #200	; 0xc8
 8004604:	2f08      	cmp	r7, #8
 8004606:	d048      	beq.n	800469a <FF_FindDir+0xee>
					if( strlen( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath ) == ( size_t )pathLen )
 8004608:	4630      	mov	r0, r6
 800460a:	f7fb fdeb 	bl	80001e4 <strlen>
 800460e:	42a0      	cmp	r0, r4
 8004610:	d1f6      	bne.n	8004600 <FF_FindDir+0x54>
						if( FF_strmatch( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath, pcPath, pathLen ) )
 8004612:	9a03      	ldr	r2, [sp, #12]
 8004614:	4641      	mov	r1, r8
 8004616:	4630      	mov	r0, r6
 8004618:	f005 f949 	bl	80098ae <FF_strmatch>
 800461c:	2800      	cmp	r0, #0
 800461e:	d0ef      	beq.n	8004600 <FF_FindDir+0x54>
							xFindParams.ulDirCluster = pxIOManager->xPartition.pxPathCache[ xIndex ].ulDirCluster;
 8004620:	23c8      	movs	r3, #200	; 0xc8
 8004622:	fb03 5707 	mla	r7, r3, r7, r5
 8004626:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800462a:	9336      	str	r3, [sp, #216]	; 0xd8
			FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 800462c:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8004630:	f004 fa42 	bl	8008ab8 <FF_ReleaseSemaphore>
 8004634:	e005      	b.n	8004642 <FF_FindDir+0x96>
		if( ( pcToken != NULL ) &&
 8004636:	b127      	cbz	r7, 8004642 <FF_FindDir+0x96>
			( ( FF_isERR( xError ) == pdFALSE ) || ( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR ) ) )
 8004638:	9b35      	ldr	r3, [sp, #212]	; 0xd4
		if( ( pcToken != NULL ) &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	db0c      	blt.n	8004658 <FF_FindDir+0xac>
			xError = ( FF_Error_t ) ( FF_FINDDIR | FF_ERR_FILE_INVALID_PATH );
 800463e:	4b36      	ldr	r3, [pc, #216]	; (8004718 <FF_FindDir+0x16c>)
 8004640:	9335      	str	r3, [sp, #212]	; 0xd4
	if( pxError != NULL )
 8004642:	f1bb 0f00 	cmp.w	fp, #0
 8004646:	d002      	beq.n	800464e <FF_FindDir+0xa2>
		*pxError = xError;
 8004648:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800464a:	f8cb 3000 	str.w	r3, [fp]
    return xFindParams.ulDirCluster;
 800464e:	9836      	ldr	r0, [sp, #216]	; 0xd8
}	/* FF_FindDir() */
 8004650:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8004654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			( ( FF_isERR( xError ) == pdFALSE ) || ( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR ) ) )
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b34      	cmp	r3, #52	; 0x34
 800465c:	d1f1      	bne.n	8004642 <FF_FindDir+0x96>
 800465e:	e7ee      	b.n	800463e <FF_FindDir+0x92>
							memcpy( pxIOManager->xPartition.pxPathCache[ pxIOManager->xPartition.ulPCIndex ].pcPath, pcPath, pathLen );
 8004660:	f8d5 3698 	ldr.w	r3, [r5, #1688]	; 0x698
 8004664:	24c8      	movs	r4, #200	; 0xc8
 8004666:	fb04 5303 	mla	r3, r4, r3, r5
 800466a:	9a03      	ldr	r2, [sp, #12]
 800466c:	4641      	mov	r1, r8
 800466e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8004672:	f013 f886 	bl	8017782 <memcpy>
						pxIOManager->xPartition.pxPathCache[ pxIOManager->xPartition.ulPCIndex ].pcPath[ pathLen ] = '\0';
 8004676:	f8d5 3698 	ldr.w	r3, [r5, #1688]	; 0x698
 800467a:	fb04 5403 	mla	r4, r4, r3, r5
 800467e:	44a2      	add	sl, r4
 8004680:	2200      	movs	r2, #0
 8004682:	f88a 2058 	strb.w	r2, [sl, #88]	; 0x58
						pxIOManager->xPartition.pxPathCache[ pxIOManager->xPartition.ulPCIndex ].ulDirCluster = xFindParams.ulDirCluster;
 8004686:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8004688:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
						pxIOManager->xPartition.ulPCIndex += 1;
 800468c:	3301      	adds	r3, #1
						if( pxIOManager->xPartition.ulPCIndex >= ffconfigPATH_CACHE_DEPTH )
 800468e:	2b07      	cmp	r3, #7
							pxIOManager->xPartition.ulPCIndex = 0;
 8004690:	bf88      	it	hi
 8004692:	2300      	movhi	r3, #0
 8004694:	f8c5 3698 	str.w	r3, [r5, #1688]	; 0x698
 8004698:	e038      	b.n	800470c <FF_FindDir+0x160>
			FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 800469a:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 800469e:	f004 fa0b 	bl	8008ab8 <FF_ReleaseSemaphore>
		pcToken = FF_strtok( pcPath, mytoken, &it, &last, pathLen );
 80046a2:	46a2      	mov	sl, r4
 80046a4:	9400      	str	r4, [sp, #0]
 80046a6:	ab86      	add	r3, sp, #536	; 0x218
 80046a8:	f20d 221e 	addw	r2, sp, #542	; 0x21e
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	4640      	mov	r0, r8
 80046b0:	f005 f92e 	bl	8009910 <FF_strtok>
 80046b4:	4607      	mov	r7, r0
			xMyDirectory.usCurrentItem = 0;
 80046b6:	ae42      	add	r6, sp, #264	; 0x108
 80046b8:	f04f 0900 	mov.w	r9, #0
 80046bc:	f8a6 9014 	strh.w	r9, [r6, #20]
			xFindParams.ulDirCluster = FF_FindEntryInDir( pxIOManager, &xFindParams, pcToken, ( uint8_t ) FF_FAT_ATTR_DIR, &xMyDirectory, &xError );
 80046c0:	ab35      	add	r3, sp, #212	; 0xd4
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	9600      	str	r6, [sp, #0]
 80046c6:	2310      	movs	r3, #16
 80046c8:	463a      	mov	r2, r7
 80046ca:	a936      	add	r1, sp, #216	; 0xd8
 80046cc:	4628      	mov	r0, r5
 80046ce:	f7ff fdff 	bl	80042d0 <FF_FindEntryInDir>
 80046d2:	9036      	str	r0, [sp, #216]	; 0xd8
			if( xFindParams.ulDirCluster == 0ul )
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0ae      	beq.n	8004636 <FF_FindDir+0x8a>
			pcToken = FF_strtok( pcPath, mytoken, &it, &last, pathLen );
 80046d8:	9400      	str	r4, [sp, #0]
 80046da:	ab86      	add	r3, sp, #536	; 0x218
 80046dc:	f20d 221e 	addw	r2, sp, #542	; 0x21e
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	4640      	mov	r0, r8
 80046e4:	f005 f914 	bl	8009910 <FF_strtok>
		} while( pcToken != NULL );
 80046e8:	4607      	mov	r7, r0
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d1e6      	bne.n	80046bc <FF_FindDir+0x110>
 80046ee:	4653      	mov	r3, sl
 80046f0:	46a2      	mov	sl, r4
 80046f2:	461c      	mov	r4, r3
			if( ( FF_isERR( xError ) == pdFALSE ) && ( xFindParams.ulDirCluster != 0ul ) )
 80046f4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dba3      	blt.n	8004642 <FF_FindDir+0x96>
 80046fa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0a0      	beq.n	8004642 <FF_FindDir+0x96>
				FF_PendSemaphore( pxIOManager->pvSemaphore );
 8004700:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8004704:	f004 f9c8 	bl	8008a98 <FF_PendSemaphore>
					if( pathLen < ffconfigMAX_FILENAME )	/* Ensure the PATH won't cause a buffer overrun. */
 8004708:	2cc0      	cmp	r4, #192	; 0xc0
 800470a:	d9a9      	bls.n	8004660 <FF_FindDir+0xb4>
				FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 800470c:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8004710:	f004 f9d2 	bl	8008ab8 <FF_ReleaseSemaphore>
 8004714:	e795      	b.n	8004642 <FF_FindDir+0x96>
 8004716:	bf00      	nop
 8004718:	820e0022 	.word	0x820e0022

0800471c <FF_GetEntry>:
{
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	b08f      	sub	sp, #60	; 0x3c
 8004720:	4605      	mov	r5, r0
 8004722:	460e      	mov	r6, r1
 8004724:	4611      	mov	r1, r2
 8004726:	461f      	mov	r7, r3
	xError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 8004728:	aa01      	add	r2, sp, #4
 800472a:	f7ff fbbd 	bl	8003ea8 <FF_InitEntryFetch>
	if( FF_isERR( xError ) == pdFALSE )
 800472e:	1e04      	subs	r4, r0, #0
 8004730:	db3b      	blt.n	80047aa <FF_GetEntry+0x8e>
		xError = FF_FetchEntryWithContext( pxIOManager, usEntry, &xFetchContext, ucEntryBuffer );
 8004732:	ab06      	add	r3, sp, #24
 8004734:	aa01      	add	r2, sp, #4
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	f7ff fbe9 	bl	8003f10 <FF_FetchEntryWithContext>
		if( ( FF_isERR( xError ) == pdFALSE ) &&
 800473e:	1e04      	subs	r4, r0, #0
 8004740:	db2f      	blt.n	80047a2 <FF_GetEntry+0x86>
}

static portINLINE BaseType_t FF_isDeleted( const uint8_t *pucEntryBuffer )
{
	return pucEntryBuffer[ 0 ] == ( uint8_t ) FF_FAT_DELETED;
 8004742:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004746:	2be5      	cmp	r3, #229	; 0xe5
 8004748:	d00b      	beq.n	8004762 <FF_GetEntry+0x46>
			if( FF_isEndOfDir( ucEntryBuffer ) != pdFALSE )
 800474a:	b34b      	cbz	r3, 80047a0 <FF_GetEntry+0x84>
 800474c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				pxDirEntry->ucAttrib = FF_getChar( ucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_ATTRIB ) );
 8004750:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
				if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_LFN ) == FF_FAT_ATTR_LFN )
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	2a0f      	cmp	r2, #15
 800475a:	d008      	beq.n	800476e <FF_GetEntry+0x52>
				else if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_VOLID ) != FF_FAT_ATTR_VOLID )
 800475c:	f013 0f08 	tst.w	r3, #8
 8004760:	d015      	beq.n	800478e <FF_GetEntry+0x72>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8004762:	a901      	add	r1, sp, #4
 8004764:	4628      	mov	r0, r5
 8004766:	f7ff fbc6 	bl	8003ef6 <FF_CleanupEntryFetch>
 800476a:	4604      	mov	r4, r0
 800476c:	e01d      	b.n	80047aa <FF_GetEntry+0x8e>
					xError = FF_PopulateLongDirent( pxIOManager, pxDirEntry, usEntry, &xFetchContext );
 800476e:	ab01      	add	r3, sp, #4
 8004770:	4632      	mov	r2, r6
 8004772:	4639      	mov	r1, r7
 8004774:	4628      	mov	r0, r5
 8004776:	f7ff fcb9 	bl	80040ec <FF_PopulateLongDirent>
 800477a:	4604      	mov	r4, r0
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800477c:	a901      	add	r1, sp, #4
 800477e:	4628      	mov	r0, r5
 8004780:	f7ff fbb9 	bl	8003ef6 <FF_CleanupEntryFetch>
					xError = FF_PopulateLongDirent( pxIOManager, pxDirEntry, usEntry, &xFetchContext );
 8004784:	ea14 0424 	ands.w	r4, r4, r4, asr #32
 8004788:	bf38      	it	cc
 800478a:	4604      	movcc	r4, r0
 800478c:	e00d      	b.n	80047aa <FF_GetEntry+0x8e>
					FF_PopulateShortDirent( pxIOManager, pxDirEntry, ucEntryBuffer );
 800478e:	aa06      	add	r2, sp, #24
 8004790:	4639      	mov	r1, r7
 8004792:	4628      	mov	r0, r5
 8004794:	f7ff fb26 	bl	8003de4 <FF_PopulateShortDirent>
					pxDirEntry->usCurrentItem += 1;
 8004798:	8abb      	ldrh	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	82bb      	strh	r3, [r7, #20]
 800479e:	e7e0      	b.n	8004762 <FF_GetEntry+0x46>
				xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_GETENTRY );
 80047a0:	4c03      	ldr	r4, [pc, #12]	; (80047b0 <FF_GetEntry+0x94>)
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 80047a2:	a901      	add	r1, sp, #4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff fba6 	bl	8003ef6 <FF_CleanupEntryFetch>
}	/* FF_GetEntry() */
 80047aa:	4620      	mov	r0, r4
 80047ac:	b00f      	add	sp, #60	; 0x3c
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b0:	82030034 	.word	0x82030034

080047b4 <FF_FindNext>:
	if( pxIOManager == NULL )
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d068      	beq.n	800488a <FF_FindNext+0xd6>
{
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	4606      	mov	r6, r0
	else if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 80047c0:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 80047c4:	f013 0f20 	tst.w	r3, #32
 80047c8:	d161      	bne.n	800488e <FF_FindNext+0xda>
 80047ca:	460d      	mov	r5, r1
		for( ; pxDirEntry->usCurrentItem < FF_MAX_ENTRIES_PER_DIRECTORY; pxDirEntry->usCurrentItem++ )
 80047cc:	8a89      	ldrh	r1, [r1, #20]
 80047ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d2:	4299      	cmp	r1, r3
 80047d4:	f000 8098 	beq.w	8004908 <FF_FindNext+0x154>
 80047d8:	2400      	movs	r4, #0
 80047da:	4627      	mov	r7, r4
				xError = FF_FetchEntryWithContext( pxIOManager, pxDirEntry->usCurrentItem, &( pxDirEntry->xFetchContext ), NULL );
 80047dc:	f105 08fc 	add.w	r8, r5, #252	; 0xfc
 80047e0:	46a1      	mov	r9, r4
 80047e2:	e086      	b.n	80048f2 <FF_FindNext+0x13e>
				xLFNCount = ( BaseType_t )( pucEntryBuffer[0] & ~0x40 );
 80047e4:	7821      	ldrb	r1, [r4, #0]
 80047e6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
					xError = FF_FetchEntryWithContext( pxIOManager, ( uint32_t ) ( pxDirEntry->usCurrentItem + xLFNCount ), &pxDirEntry->xFetchContext, Buffer );
 80047ea:	8aa8      	ldrh	r0, [r5, #20]
 80047ec:	466b      	mov	r3, sp
 80047ee:	4642      	mov	r2, r8
 80047f0:	4401      	add	r1, r0
 80047f2:	4630      	mov	r0, r6
 80047f4:	f7ff fb8c 	bl	8003f10 <FF_FetchEntryWithContext>
					if( FF_isERR( xError ) )
 80047f8:	1e07      	subs	r7, r0, #0
 80047fa:	db35      	blt.n	8004868 <FF_FindNext+0xb4>
					if( FF_isDeleted( Buffer ) == pdFALSE )
 80047fc:	f89d 3000 	ldrb.w	r3, [sp]
 8004800:	2be5      	cmp	r3, #229	; 0xe5
 8004802:	d06e      	beq.n	80048e2 <FF_FindNext+0x12e>
						xError = FF_PopulateLongDirent( pxIOManager, pxDirEntry, pxDirEntry->usCurrentItem, &pxDirEntry->xFetchContext );
 8004804:	4643      	mov	r3, r8
 8004806:	8aaa      	ldrh	r2, [r5, #20]
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff fc6e 	bl	80040ec <FF_PopulateLongDirent>
 8004810:	4607      	mov	r7, r0
 8004812:	e029      	b.n	8004868 <FF_FindNext+0xb4>
				FF_PopulateShortDirent( pxIOManager, pxDirEntry, pucEntryBuffer );
 8004814:	4622      	mov	r2, r4
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff fae3 	bl	8003de4 <FF_PopulateShortDirent>
					FF_CaseShortName( pxDirEntry->pcFileName, FF_getChar( pucEntryBuffer, FF_FAT_CASE_OFFS ) );
 800481e:	f105 023a 	add.w	r2, r5, #58	; 0x3a
 8004822:	7b24      	ldrb	r4, [r4, #12]
		for ( ; *pcName != '\0'; pcName++ )
 8004824:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 8004828:	b1db      	cbz	r3, 8004862 <FF_FindNext+0xae>
 800482a:	2008      	movs	r0, #8
				testAttrib = FF_FAT_CASE_ATTR_EXT;
 800482c:	f04f 0e10 	mov.w	lr, #16
 8004830:	e00b      	b.n	800484a <FF_FindNext+0x96>
			else if( ( *pcName >= 'a' ) && ( *pcName <= 'z' ) )
 8004832:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8004836:	b2c9      	uxtb	r1, r1
 8004838:	2919      	cmp	r1, #25
 800483a:	d803      	bhi.n	8004844 <FF_FindNext+0x90>
				*pcName -= 0x20;
 800483c:	3b20      	subs	r3, #32
 800483e:	7013      	strb	r3, [r2, #0]
 8004840:	e000      	b.n	8004844 <FF_FindNext+0x90>
				testAttrib = FF_FAT_CASE_ATTR_EXT;
 8004842:	4670      	mov	r0, lr
		for ( ; *pcName != '\0'; pcName++ )
 8004844:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004848:	b15b      	cbz	r3, 8004862 <FF_FindNext+0xae>
			if( *pcName == '.' )
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d0f9      	beq.n	8004842 <FF_FindNext+0x8e>
			else if ( ( attrib & testAttrib ) != 0 )
 800484e:	4204      	tst	r4, r0
 8004850:	d0ef      	beq.n	8004832 <FF_FindNext+0x7e>
				if( ( *pcName >= 'A' ) && ( *pcName <= 'Z' ) )
 8004852:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8004856:	b2c9      	uxtb	r1, r1
 8004858:	2919      	cmp	r1, #25
 800485a:	d8f3      	bhi.n	8004844 <FF_FindNext+0x90>
					*pcName += 0x20;
 800485c:	3320      	adds	r3, #32
 800485e:	7013      	strb	r3, [r2, #0]
 8004860:	e7f0      	b.n	8004844 <FF_FindNext+0x90>
					pxDirEntry->usCurrentItem += 1;
 8004862:	8aab      	ldrh	r3, [r5, #20]
 8004864:	3301      	adds	r3, #1
 8004866:	82ab      	strh	r3, [r5, #20]
		if( pxDirEntry->usCurrentItem == FF_MAX_ENTRIES_PER_DIRECTORY )
 8004868:	8aaa      	ldrh	r2, [r5, #20]
 800486a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800486e:	429a      	cmp	r2, r3
 8004870:	d05e      	beq.n	8004930 <FF_FindNext+0x17c>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &pxDirEntry->xFetchContext );
 8004872:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 8004876:	4630      	mov	r0, r6
 8004878:	f7ff fb3d 	bl	8003ef6 <FF_CleanupEntryFetch>
 800487c:	ea30 0027 	bics.w	r0, r0, r7, asr #32
 8004880:	bf28      	it	cs
 8004882:	4638      	movcs	r0, r7
}	/* FF_FindNext() */
 8004884:	b008      	add	sp, #32
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_FINDNEXT );
 800488a:	482d      	ldr	r0, [pc, #180]	; (8004940 <FF_FindNext+0x18c>)
 800488c:	4770      	bx	lr
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_FINDNEXT );
 800488e:	482d      	ldr	r0, [pc, #180]	; (8004944 <FF_FindNext+0x190>)
 8004890:	e7f8      	b.n	8004884 <FF_FindNext+0xd0>
				xError = FF_FetchEntryWithContext( pxIOManager, pxDirEntry->usCurrentItem, &( pxDirEntry->xFetchContext ), NULL );
 8004892:	464b      	mov	r3, r9
 8004894:	4642      	mov	r2, r8
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff fb3a 	bl	8003f10 <FF_FetchEntryWithContext>
				if( FF_isERR( xError ) )
 800489c:	1e07      	subs	r7, r0, #0
 800489e:	db42      	blt.n	8004926 <FF_FindNext+0x172>
					pucEntryBuffer = pxDirEntry->xFetchContext.pxBuffer->pucBuffer +
 80048a0:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
						( FF_SIZEOF_DIRECTORY_ENTRY * ( pxDirEntry->usCurrentItem % ( FF_SIZEOF_SECTOR/FF_SIZEOF_DIRECTORY_ENTRY ) ) );
 80048a4:	8aac      	ldrh	r4, [r5, #20]
 80048a6:	f004 030f 	and.w	r3, r4, #15
					pucEntryBuffer = pxDirEntry->xFetchContext.pxBuffer->pucBuffer +
 80048aa:	6894      	ldr	r4, [r2, #8]
 80048ac:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 80048b0:	e009      	b.n	80048c6 <FF_FindNext+0x112>
				xError = FF_FetchEntryWithContext( pxIOManager, pxDirEntry->usCurrentItem, &( pxDirEntry->xFetchContext ), NULL );
 80048b2:	464b      	mov	r3, r9
 80048b4:	4642      	mov	r2, r8
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff fb2a 	bl	8003f10 <FF_FetchEntryWithContext>
				if( FF_isERR( xError ) )
 80048bc:	1e07      	subs	r7, r0, #0
 80048be:	db32      	blt.n	8004926 <FF_FindNext+0x172>
					pucEntryBuffer = pxDirEntry->xFetchContext.pxBuffer->pucBuffer;
 80048c0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80048c4:	689c      	ldr	r4, [r3, #8]
 80048c6:	7823      	ldrb	r3, [r4, #0]
			if( FF_isDeleted( pucEntryBuffer ) != pdFALSE )
 80048c8:	2be5      	cmp	r3, #229	; 0xe5
 80048ca:	d00a      	beq.n	80048e2 <FF_FindNext+0x12e>
			if( FF_isEndOfDir( pucEntryBuffer ) )
 80048cc:	b353      	cbz	r3, 8004924 <FF_FindNext+0x170>
 80048ce:	7ae3      	ldrb	r3, [r4, #11]
			pxDirEntry->ucAttrib = FF_getChar( pucEntryBuffer, ( uint16_t ) ( FF_FAT_DIRENT_ATTRIB ) );
 80048d0:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
			if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_LFN ) == FF_FAT_ATTR_LFN )
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	2a0f      	cmp	r2, #15
 80048da:	d083      	beq.n	80047e4 <FF_FindNext+0x30>
			else if( ( pxDirEntry->ucAttrib & FF_FAT_ATTR_VOLID ) != FF_FAT_ATTR_VOLID )
 80048dc:	f013 0f08 	tst.w	r3, #8
 80048e0:	d098      	beq.n	8004814 <FF_FindNext+0x60>
		for( ; pxDirEntry->usCurrentItem < FF_MAX_ENTRIES_PER_DIRECTORY; pxDirEntry->usCurrentItem++ )
 80048e2:	8aa9      	ldrh	r1, [r5, #20]
 80048e4:	3101      	adds	r1, #1
 80048e6:	b289      	uxth	r1, r1
 80048e8:	82a9      	strh	r1, [r5, #20]
 80048ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d00a      	beq.n	8004908 <FF_FindNext+0x154>
			if( ( pucEntryBuffer == NULL ) ||
 80048f2:	2c00      	cmp	r4, #0
 80048f4:	d0cd      	beq.n	8004892 <FF_FindNext+0xde>
				( pucEntryBuffer >= ( pxDirEntry->xFetchContext.pxBuffer->pucBuffer + ( FF_SIZEOF_SECTOR - FF_SIZEOF_DIRECTORY_ENTRY ) ) ) )
 80048f6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
			if( ( pucEntryBuffer == NULL ) ||
 8004900:	429c      	cmp	r4, r3
 8004902:	d2d6      	bcs.n	80048b2 <FF_FindNext+0xfe>
				pucEntryBuffer += FF_SIZEOF_DIRECTORY_ENTRY;
 8004904:	3420      	adds	r4, #32
 8004906:	e7de      	b.n	80048c6 <FF_FindNext+0x112>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &pxDirEntry->xFetchContext );
 8004908:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff faf2 	bl	8003ef6 <FF_CleanupEntryFetch>
			xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FINDNEXT );
 8004912:	480d      	ldr	r0, [pc, #52]	; (8004948 <FF_FindNext+0x194>)
 8004914:	e7b6      	b.n	8004884 <FF_FindNext+0xd0>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &pxDirEntry->xFetchContext );
 8004916:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff faeb 	bl	8003ef6 <FF_CleanupEntryFetch>
 8004920:	4638      	mov	r0, r7
 8004922:	e7af      	b.n	8004884 <FF_FindNext+0xd0>
				xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FINDNEXT );
 8004924:	4f08      	ldr	r7, [pc, #32]	; (8004948 <FF_FindNext+0x194>)
		if( pxDirEntry->usCurrentItem == FF_MAX_ENTRIES_PER_DIRECTORY )
 8004926:	8aaa      	ldrh	r2, [r5, #20]
 8004928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800492c:	429a      	cmp	r2, r3
 800492e:	d1f2      	bne.n	8004916 <FF_FindNext+0x162>
			xTempError = FF_CleanupEntryFetch( pxIOManager, &pxDirEntry->xFetchContext );
 8004930:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff fade 	bl	8003ef6 <FF_CleanupEntryFetch>
			xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FINDNEXT );
 800493a:	4803      	ldr	r0, [pc, #12]	; (8004948 <FF_FindNext+0x194>)
 800493c:	e7a2      	b.n	8004884 <FF_FindNext+0xd0>
 800493e:	bf00      	nop
 8004940:	82050002 	.word	0x82050002
 8004944:	82050008 	.word	0x82050008
 8004948:	82050034 	.word	0x82050034

0800494c <FF_FindFirst>:
{
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	b083      	sub	sp, #12
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	4616      	mov	r6, r2
	uint16_t	PathLen = ( uint16_t ) strlen( pcPath );
 8004956:	4610      	mov	r0, r2
 8004958:	f7fb fc44 	bl	80001e4 <strlen>
 800495c:	4607      	mov	r7, r0
	memset( pxDirEntry, 0, sizeof( FF_DirEnt_t ) );
 800495e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004962:	2100      	movs	r1, #0
 8004964:	4628      	mov	r0, r5
 8004966:	f012 ff31 	bl	80177cc <memset>
	if( pxIOManager == NULL )
 800496a:	b14c      	cbz	r4, 8004980 <FF_FindFirst+0x34>
	else if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 800496c:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 8004970:	f013 0f20 	tst.w	r3, #32
 8004974:	d007      	beq.n	8004986 <FF_FindFirst+0x3a>
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_FINDFIRST );
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <FF_FindFirst+0x78>)
 8004978:	9301      	str	r3, [sp, #4]
}	/* FF_FindFirst() */
 800497a:	9801      	ldr	r0, [sp, #4]
 800497c:	b003      	add	sp, #12
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_FINDFIRST );
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <FF_FindFirst+0x7c>)
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	e7f9      	b.n	800497a <FF_FindFirst+0x2e>
			pxDirEntry->ulDirCluster = FF_FindDir( pxIOManager, pcPath, PathLen, &xError );
 8004986:	ab01      	add	r3, sp, #4
 8004988:	b2ba      	uxth	r2, r7
 800498a:	4631      	mov	r1, r6
 800498c:	4620      	mov	r0, r4
 800498e:	f7ff fe0d 	bl	80045ac <FF_FindDir>
 8004992:	6128      	str	r0, [r5, #16]
		if( FF_isERR( xError ) == pdFALSE )
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	dbef      	blt.n	800497a <FF_FindFirst+0x2e>
			if( pxDirEntry->ulDirCluster == 0 )
 800499a:	b910      	cbnz	r0, 80049a2 <FF_FindFirst+0x56>
				xError = ( FF_Error_t ) ( FF_ERR_DIR_INVALID_PATH | FF_FINDFIRST );
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <FF_FindFirst+0x80>)
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	e7eb      	b.n	800497a <FF_FindFirst+0x2e>
				xError = FF_InitEntryFetch( pxIOManager, pxDirEntry->ulDirCluster, &( pxDirEntry->xFetchContext ) );
 80049a2:	f105 02fc 	add.w	r2, r5, #252	; 0xfc
 80049a6:	4601      	mov	r1, r0
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7ff fa7d 	bl	8003ea8 <FF_InitEntryFetch>
 80049ae:	9001      	str	r0, [sp, #4]
				if( FF_isERR( xError ) == pdFALSE )
 80049b0:	2800      	cmp	r0, #0
 80049b2:	dbe2      	blt.n	800497a <FF_FindFirst+0x2e>
					pxDirEntry->usCurrentItem = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	82ab      	strh	r3, [r5, #20]
					xError = FF_FindNext( pxIOManager, pxDirEntry );
 80049b8:	4629      	mov	r1, r5
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fefa 	bl	80047b4 <FF_FindNext>
 80049c0:	9001      	str	r0, [sp, #4]
 80049c2:	e7da      	b.n	800497a <FF_FindFirst+0x2e>
 80049c4:	82040008 	.word	0x82040008
 80049c8:	82040002 	.word	0x82040002
 80049cc:	82040036 	.word	0x82040036

080049d0 <FF_PutEntry>:
{
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d4:	b08e      	sub	sp, #56	; 0x38
 80049d6:	4607      	mov	r7, r0
 80049d8:	4688      	mov	r8, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461c      	mov	r4, r3
 80049de:	9e14      	ldr	r6, [sp, #80]	; 0x50
	xError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 80049e0:	aa01      	add	r2, sp, #4
 80049e2:	f7ff fa61 	bl	8003ea8 <FF_InitEntryFetch>
	if( FF_isERR( xError ) == pdFALSE )
 80049e6:	1e05      	subs	r5, r0, #0
 80049e8:	db68      	blt.n	8004abc <FF_PutEntry+0xec>
		xError = FF_FetchEntryWithContext( pxIOManager, usEntry, &xFetchContext, pucEntryBuffer );
 80049ea:	ab06      	add	r3, sp, #24
 80049ec:	aa01      	add	r2, sp, #4
 80049ee:	4641      	mov	r1, r8
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff fa8d 	bl	8003f10 <FF_FetchEntryWithContext>
		if( FF_isERR( xError ) == pdFALSE )
 80049f6:	1e05      	subs	r5, r0, #0
 80049f8:	db60      	blt.n	8004abc <FF_PutEntry+0xec>
			xError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 80049fa:	a901      	add	r1, sp, #4
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff fa7a 	bl	8003ef6 <FF_CleanupEntryFetch>
			if( FF_isERR( xError ) == pdFALSE )
 8004a02:	1e05      	subs	r5, r0, #0
 8004a04:	db5a      	blt.n	8004abc <FF_PutEntry+0xec>
				if ( pucContents != NULL )
 8004a06:	b156      	cbz	r6, 8004a1e <FF_PutEntry+0x4e>
					memcpy ( pucEntryBuffer, pucContents, sizeof( pucEntryBuffer ) );
 8004a08:	ad06      	add	r5, sp, #24
 8004a0a:	6830      	ldr	r0, [r6, #0]
 8004a0c:	6871      	ldr	r1, [r6, #4]
 8004a0e:	68b2      	ldr	r2, [r6, #8]
 8004a10:	68f3      	ldr	r3, [r6, #12]
 8004a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a14:	6930      	ldr	r0, [r6, #16]
 8004a16:	6971      	ldr	r1, [r6, #20]
 8004a18:	69b2      	ldr	r2, [r6, #24]
 8004a1a:	69f3      	ldr	r3, [r6, #28]
 8004a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		pBuffer[ aOffset ] = ( uint8_t ) Value;
 8004a1e:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 8004a22:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				FF_putShort( pucEntryBuffer, FF_FAT_DIRENT_CLUS_HIGH, ( uint32_t ) ( pxDirEntry->ulObjectCluster >> 16 ) );
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	0c1a      	lsrs	r2, r3, #16
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8004a2a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8004a2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004a32:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8004a36:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8004a3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004a3e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33

	static portINLINE void FF_putLong( uint8_t *pBuffer, uint32_t aOffset, uint32_t Value )
	{
	FF_T_UN32 u32;

		u32.u32 = Value;
 8004a42:	4625      	mov	r5, r4
 8004a44:	f855 3b2e 	ldr.w	r3, [r5], #46
		pBuffer += aOffset;
		pBuffer[ 0 ] = u32.bytes.u8_0;
 8004a48:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8004a4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004a50:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8004a54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004a58:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
		pBuffer[ 3 ] = u32.bytes.u8_3;
 8004a5c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8004a60:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
					FF_GetSystemTime( &pxDirEntry->xAccessedTime );	/*/< Date of Last Access. */
 8004a64:	4628      	mov	r0, r5
 8004a66:	f005 f93f 	bl	8009ce8 <FF_GetSystemTime>
					FF_PlaceTime( pucEntryBuffer, FF_FAT_DIRENT_LASTACC_DATE, &pxDirEntry->xAccessedTime );
 8004a6a:	462a      	mov	r2, r5
 8004a6c:	2112      	movs	r1, #18
 8004a6e:	a806      	add	r0, sp, #24
 8004a70:	f7ff f884 	bl	8003b7c <FF_PlaceTime>
					FF_PlaceDate( pucEntryBuffer, FF_FAT_DIRENT_LASTACC_DATE, &pxDirEntry->xAccessedTime );	/* Last accessed date. */
 8004a74:	462a      	mov	r2, r5
 8004a76:	2112      	movs	r1, #18
 8004a78:	a806      	add	r0, sp, #24
 8004a7a:	f7ff f894 	bl	8003ba6 <FF_PlaceDate>
					FF_PlaceTime( pucEntryBuffer, FF_FAT_DIRENT_CREATE_TIME,  &pxDirEntry->xCreateTime );
 8004a7e:	f104 0516 	add.w	r5, r4, #22
 8004a82:	462a      	mov	r2, r5
 8004a84:	210e      	movs	r1, #14
 8004a86:	a806      	add	r0, sp, #24
 8004a88:	f7ff f878 	bl	8003b7c <FF_PlaceTime>
					FF_PlaceDate( pucEntryBuffer, FF_FAT_DIRENT_CREATE_DATE,  &pxDirEntry->xCreateTime );
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	2110      	movs	r1, #16
 8004a90:	a806      	add	r0, sp, #24
 8004a92:	f7ff f888 	bl	8003ba6 <FF_PlaceDate>
					FF_PlaceTime( pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_TIME, &pxDirEntry->xModifiedTime );
 8004a96:	3422      	adds	r4, #34	; 0x22
 8004a98:	4622      	mov	r2, r4
 8004a9a:	2116      	movs	r1, #22
 8004a9c:	a806      	add	r0, sp, #24
 8004a9e:	f7ff f86d 	bl	8003b7c <FF_PlaceTime>
					FF_PlaceDate( pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_DATE, &pxDirEntry->xModifiedTime );
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	2118      	movs	r1, #24
 8004aa6:	eb0d 0001 	add.w	r0, sp, r1
 8004aaa:	f7ff f87c 	bl	8003ba6 <FF_PlaceDate>
				xError = FF_PushEntryWithContext( pxIOManager, usEntry, &xFetchContext, pucEntryBuffer );
 8004aae:	ab06      	add	r3, sp, #24
 8004ab0:	aa01      	add	r2, sp, #4
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff faa3 	bl	8004000 <FF_PushEntryWithContext>
 8004aba:	4605      	mov	r5, r0
	FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8004abc:	a901      	add	r1, sp, #4
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f7ff fa19 	bl	8003ef6 <FF_CleanupEntryFetch>
}	/* FF_PutEntry() */
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	b00e      	add	sp, #56	; 0x38
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004acc <FF_CreateShortName>:
{
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	4681      	mov	r9, r0
 8004ad4:	468b      	mov	fp, r1
	pxFindParams->ucCaseAttrib = 0;		/* May get the value FF_FAT_CASE_ATTR_BASE or FF_FAT_CASE_ATTR_EXT */
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	pxFindParams->ucFirstTilde = 6;		/* The numerical position of the ~ */
 8004adc:	2306      	movs	r3, #6
 8004ade:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pxFindParams->ulFlags |= FIND_FLAG_SHORTNAME_SET | FIND_FLAG_FITS_SHORT | FIND_FLAG_SIZE_OK;
 8004ae2:	6884      	ldr	r4, [r0, #8]
 8004ae4:	f044 0319 	orr.w	r3, r4, #25
 8004ae8:	6083      	str	r3, [r0, #8]
		NameLen = ( uint16_t ) strlen( pcLongName );
 8004aea:	4608      	mov	r0, r1
 8004aec:	f7fb fb7a 	bl	80001e4 <strlen>
 8004af0:	9003      	str	r0, [sp, #12]
 8004af2:	b283      	uxth	r3, r0
 8004af4:	9302      	str	r3, [sp, #8]
	for( xIndex = 0, xPosition = 0, xLastDot = NameLen; xIndex < NameLen; xIndex++ )
 8004af6:	b343      	cbz	r3, 8004b4a <FF_CreateShortName+0x7e>
 8004af8:	461d      	mov	r5, r3
 8004afa:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8004afe:	469a      	mov	sl, r3
 8004b00:	2000      	movs	r0, #0
 8004b02:	4603      	mov	r3, r0
		if( pcLongName[ xIndex ] != '.' )
 8004b04:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004b08:	292e      	cmp	r1, #46	; 0x2e
			xPosition++;
 8004b0a:	bf14      	ite	ne
 8004b0c:	3001      	addne	r0, #1
 8004b0e:	469a      	moveq	sl, r3
	for( xIndex = 0, xPosition = 0, xLastDot = NameLen; xIndex < NameLen; xIndex++ )
 8004b10:	3301      	adds	r3, #1
 8004b12:	429d      	cmp	r5, r3
 8004b14:	d1f6      	bne.n	8004b04 <FF_CreateShortName+0x38>
	if( ( NameLen > 12 ) ||				/* If name is longer than 12 characters (8.3). */
 8004b16:	9b02      	ldr	r3, [sp, #8]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d802      	bhi.n	8004b22 <FF_CreateShortName+0x56>
		( NameLen - xPosition > 1 ) ||	/* If it contains more than 1 dot. */
 8004b1c:	1a18      	subs	r0, r3, r0
	if( ( NameLen > 12 ) ||				/* If name is longer than 12 characters (8.3). */
 8004b1e:	2801      	cmp	r0, #1
 8004b20:	dd17      	ble.n	8004b52 <FF_CreateShortName+0x86>
		pxFindParams->ulFlags &= ~FIND_FLAG_SIZE_OK;
 8004b22:	f024 0310 	bic.w	r3, r4, #16
 8004b26:	f043 0309 	orr.w	r3, r3, #9
 8004b2a:	f8c9 3008 	str.w	r3, [r9, #8]
		char ch = pcLongName[ xPosition ];
 8004b2e:	f89b 7000 	ldrb.w	r7, [fp]
		if( !ch )
 8004b32:	2f00      	cmp	r7, #0
 8004b34:	f000 80c9 	beq.w	8004cca <FF_CreateShortName+0x1fe>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	f04f 0800 	mov.w	r8, #0
 8004b40:	4644      	mov	r4, r8
 8004b42:	f109 0613 	add.w	r6, r9, #19
				pxFindParams->pcEntryBuffer[ xIndex++ ] = 0x20;
 8004b46:	2520      	movs	r5, #32
 8004b48:	e048      	b.n	8004bdc <FF_CreateShortName+0x110>
	for( xIndex = 0, xPosition = 0, xLastDot = NameLen; xIndex < NameLen; xIndex++ )
 8004b4a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e7e1      	b.n	8004b16 <FF_CreateShortName+0x4a>
		( NameLen - xLastDot > 4 ) ||	/* If the file name extension is longer than 3 characters. */
 8004b52:	eba3 030a 	sub.w	r3, r3, sl
		( NameLen - xPosition > 1 ) ||	/* If it contains more than 1 dot. */
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	dce3      	bgt.n	8004b22 <FF_CreateShortName+0x56>
		( NameLen - xLastDot > 4 ) ||	/* If the file name extension is longer than 3 characters. */
 8004b5a:	f1ba 0f08 	cmp.w	sl, #8
 8004b5e:	dde6      	ble.n	8004b2e <FF_CreateShortName+0x62>
 8004b60:	e7df      	b.n	8004b22 <FF_CreateShortName+0x56>
			pxFindParams->ulFlags &= ~FIND_FLAG_FITS_SHORT;
 8004b62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004b66:	f023 0308 	bic.w	r3, r3, #8
 8004b6a:	f8c9 3008 	str.w	r3, [r9, #8]
	for( xIndex = 0, xPosition = 0; xIndex < 11; xPosition++ )
 8004b6e:	f108 0801 	add.w	r8, r8, #1
 8004b72:	e02f      	b.n	8004bd4 <FF_CreateShortName+0x108>
		if( xPosition == xLastDot )
 8004b74:	45d0      	cmp	r8, sl
 8004b76:	d00f      	beq.n	8004b98 <FF_CreateShortName+0xcc>
			if( xIndex == 8 )
 8004b78:	2c08      	cmp	r4, #8
 8004b7a:	d135      	bne.n	8004be8 <FF_CreateShortName+0x11c>
				if( xPosition <= xLastDot )
 8004b7c:	45d0      	cmp	r8, sl
 8004b7e:	dc33      	bgt.n	8004be8 <FF_CreateShortName+0x11c>
					if( ch == '\0' )
 8004b80:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8082 	beq.w	8004c8e <FF_CreateShortName+0x1c2>
					ch = ( int8_t ) pcLongName[ ++xPosition ];
 8004b8a:	f10a 0801 	add.w	r8, sl, #1
 8004b8e:	f81b 7008 	ldrb.w	r7, [fp, r8]
						testAttrib = FF_FAT_CASE_ATTR_EXT;
 8004b92:	2310      	movs	r3, #16
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	e027      	b.n	8004be8 <FF_CreateShortName+0x11c>
			if ( pxFindParams->ucFirstTilde > xIndex )
 8004b98:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 8004b9c:	42a3      	cmp	r3, r4
				pxFindParams->ucFirstTilde = xIndex;
 8004b9e:	bfc8      	it	gt
 8004ba0:	f889 402d 	strbgt.w	r4, [r9, #45]	; 0x2d
			while ( xIndex < 8 )
 8004ba4:	2c07      	cmp	r4, #7
 8004ba6:	dc46      	bgt.n	8004c36 <FF_CreateShortName+0x16a>
 8004ba8:	340b      	adds	r4, #11
 8004baa:	444c      	add	r4, r9
				pxFindParams->pcEntryBuffer[ xIndex++ ] = 0x20;
 8004bac:	f804 5f01 	strb.w	r5, [r4, #1]!
			while ( xIndex < 8 )
 8004bb0:	42b4      	cmp	r4, r6
 8004bb2:	d1fb      	bne.n	8004bac <FF_CreateShortName+0xe0>
	for( xIndex = 0, xPosition = 0; xIndex < 11; xPosition++ )
 8004bb4:	f108 0801 	add.w	r8, r8, #1
				testAttrib = FF_FAT_CASE_ATTR_EXT;
 8004bb8:	2310      	movs	r3, #16
 8004bba:	9301      	str	r3, [sp, #4]
				pxFindParams->pcEntryBuffer[ xIndex++ ] = 0x20;
 8004bbc:	2408      	movs	r4, #8
 8004bbe:	e009      	b.n	8004bd4 <FF_CreateShortName+0x108>
				pxFindParams->ulFlags &= ~FIND_FLAG_FITS_SHORT;
 8004bc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bc4:	f023 0308 	bic.w	r3, r3, #8
 8004bc8:	f8c9 3008 	str.w	r3, [r9, #8]
	for( xIndex = 0, xPosition = 0; xIndex < 11; xPosition++ )
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	2c0a      	cmp	r4, #10
 8004bd2:	dc53      	bgt.n	8004c7c <FF_CreateShortName+0x1b0>
		char ch = pcLongName[ xPosition ];
 8004bd4:	f81b 7008 	ldrb.w	r7, [fp, r8]
		if( !ch )
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	d049      	beq.n	8004c70 <FF_CreateShortName+0x1a4>
		if( ( xIndex == 0 ) && ( ch == '.' ) )
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d1c9      	bne.n	8004b74 <FF_CreateShortName+0xa8>
 8004be0:	2f2e      	cmp	r7, #46	; 0x2e
 8004be2:	d0be      	beq.n	8004b62 <FF_CreateShortName+0x96>
		if( xPosition == xLastDot )
 8004be4:	45d0      	cmp	r8, sl
 8004be6:	d0d7      	beq.n	8004b98 <FF_CreateShortName+0xcc>
		( cChar >= '0' && cChar <= '9' ) ||
 8004be8:	f027 0320 	bic.w	r3, r7, #32
 8004bec:	3b41      	subs	r3, #65	; 0x41
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b19      	cmp	r3, #25
 8004bf2:	d925      	bls.n	8004c40 <FF_CreateShortName+0x174>
 8004bf4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
		( cChar >= 'a' && cChar <= 'z' ) ||	/* lower-case can be stored using NT/XP attribute. */
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b09      	cmp	r3, #9
 8004bfc:	d920      	bls.n	8004c40 <FF_CreateShortName+0x174>
		strchr ( "$%-_@~`!(){}^#&", cChar ) != NULL;
 8004bfe:	4639      	mov	r1, r7
 8004c00:	4834      	ldr	r0, [pc, #208]	; (8004cd4 <FF_CreateShortName+0x208>)
 8004c02:	f012 fe17 	bl	8017834 <strchr>
			if( !FF_ValidShortChar ( ch ) )
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d0da      	beq.n	8004bc0 <FF_CreateShortName+0xf4>
 8004c0a:	e008      	b.n	8004c1e <FF_CreateShortName+0x152>
					ch -= 0x20;
 8004c0c:	3f20      	subs	r7, #32
 8004c0e:	b2ff      	uxtb	r7, r7
					if ( testAttrib )
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	b14a      	cbz	r2, 8004c28 <FF_CreateShortName+0x15c>
						pxFindParams->ucCaseAttrib |= testAttrib;
 8004c14:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f889 302c 	strb.w	r3, [r9, #44]	; 0x2c
			pxFindParams->pcEntryBuffer[ xIndex++ ] = ch;
 8004c1e:	eb09 0304 	add.w	r3, r9, r4
 8004c22:	731f      	strb	r7, [r3, #12]
 8004c24:	3401      	adds	r4, #1
 8004c26:	e7d1      	b.n	8004bcc <FF_CreateShortName+0x100>
						pxFindParams->ulFlags &= ~FIND_FLAG_FITS_SHORT;	/* We had capital: does not fit. */
 8004c28:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004c2c:	f023 0308 	bic.w	r3, r3, #8
 8004c30:	f8c9 3008 	str.w	r3, [r9, #8]
 8004c34:	e7f3      	b.n	8004c1e <FF_CreateShortName+0x152>
				testAttrib = FF_FAT_CASE_ATTR_EXT;
 8004c36:	2310      	movs	r3, #16
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	e7c7      	b.n	8004bcc <FF_CreateShortName+0x100>
	if( ( xLastDot == 0 ) && ( xIndex < 6 ) )
 8004c3c:	4654      	mov	r4, sl
 8004c3e:	e022      	b.n	8004c86 <FF_CreateShortName+0x1ba>
				if( ( ch >= 'a' ) && ( ch <= 'z' ) )
 8004c40:	f1a7 0361 	sub.w	r3, r7, #97	; 0x61
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b19      	cmp	r3, #25
 8004c48:	d9e0      	bls.n	8004c0c <FF_CreateShortName+0x140>
	return ( cChar >= 'A' && cChar <= 'Z' ) ||
 8004c4a:	f1a7 0341 	sub.w	r3, r7, #65	; 0x41
				else if( ( ch >= 'A' ) && ( ch <= 'Z' ) )
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b19      	cmp	r3, #25
 8004c52:	d8e4      	bhi.n	8004c1e <FF_CreateShortName+0x152>
					if( ( pxFindParams->ucCaseAttrib & testAttrib ) != 0 )
 8004c54:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8004c58:	9a01      	ldr	r2, [sp, #4]
 8004c5a:	421a      	tst	r2, r3
						pxFindParams->ulFlags &= ~FIND_FLAG_FITS_SHORT;	/* We had lower-case: does not fit. */
 8004c5c:	bf1e      	ittt	ne
 8004c5e:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8004c62:	f023 0308 	bicne.w	r3, r3, #8
 8004c66:	f8c9 3008 	strne.w	r3, [r9, #8]
					testAttrib = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	e7d6      	b.n	8004c1e <FF_CreateShortName+0x152>
	if( ( xLastDot == 0 ) && ( xIndex < 6 ) )
 8004c70:	f1ba 0f00 	cmp.w	sl, #0
 8004c74:	d10b      	bne.n	8004c8e <FF_CreateShortName+0x1c2>
 8004c76:	2c05      	cmp	r4, #5
 8004c78:	dc07      	bgt.n	8004c8a <FF_CreateShortName+0x1be>
 8004c7a:	e004      	b.n	8004c86 <FF_CreateShortName+0x1ba>
 8004c7c:	f1ba 0f00 	cmp.w	sl, #0
 8004c80:	d10e      	bne.n	8004ca0 <FF_CreateShortName+0x1d4>
 8004c82:	2c05      	cmp	r4, #5
 8004c84:	dc0c      	bgt.n	8004ca0 <FF_CreateShortName+0x1d4>
		pxFindParams->ucFirstTilde = xIndex;
 8004c86:	f889 402d 	strb.w	r4, [r9, #45]	; 0x2d
	while ( xIndex < 11 )
 8004c8a:	2c0a      	cmp	r4, #10
 8004c8c:	dc08      	bgt.n	8004ca0 <FF_CreateShortName+0x1d4>
 8004c8e:	f104 030b 	add.w	r3, r4, #11
 8004c92:	444b      	add	r3, r9
		pxFindParams->pcEntryBuffer[ xIndex++ ] = 0x20;
 8004c94:	2220      	movs	r2, #32
 8004c96:	3401      	adds	r4, #1
 8004c98:	f803 2f01 	strb.w	r2, [r3, #1]!
	while ( xIndex < 11 )
 8004c9c:	2c0a      	cmp	r4, #10
 8004c9e:	ddfa      	ble.n	8004c96 <FF_CreateShortName+0x1ca>
	if( ( xLastDot < pxFindParams->ucFirstTilde ) && ( xLastDot > 0 ) )
 8004ca0:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 8004ca4:	4553      	cmp	r3, sl
 8004ca6:	dd04      	ble.n	8004cb2 <FF_CreateShortName+0x1e6>
 8004ca8:	f1ba 0f00 	cmp.w	sl, #0
		pxFindParams->ucFirstTilde = xLastDot;
 8004cac:	bfc8      	it	gt
 8004cae:	f889 a02d 	strbgt.w	sl, [r9, #45]	; 0x2d
	if( NameLen < pxFindParams->ucFirstTilde )	/* Names like "Abc" will become "~Abc". */
 8004cb2:	f899 302d 	ldrb.w	r3, [r9, #45]	; 0x2d
 8004cb6:	9a02      	ldr	r2, [sp, #8]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d903      	bls.n	8004cc4 <FF_CreateShortName+0x1f8>
		pxFindParams->ucFirstTilde = ( uint8_t ) NameLen;
 8004cbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004cc0:	f889 302d 	strb.w	r3, [r9, #45]	; 0x2d
}	/* FF_CreateShortName() */
 8004cc4:	b005      	add	sp, #20
 8004cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( ( xLastDot == 0 ) && ( xIndex < 6 ) )
 8004cca:	f1ba 0f00 	cmp.w	sl, #0
 8004cce:	d0b5      	beq.n	8004c3c <FF_CreateShortName+0x170>
 8004cd0:	2400      	movs	r4, #0
 8004cd2:	e7dc      	b.n	8004c8e <FF_CreateShortName+0x1c2>
 8004cd4:	08019054 	.word	0x08019054

08004cd8 <FF_FindShortName>:
{
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	b0dd      	sub	sp, #372	; 0x174
 8004cde:	4606      	mov	r6, r0
 8004ce0:	468a      	mov	sl, r1
FF_Error_t xResult = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9313      	str	r3, [sp, #76]	; 0x4c
	uint32_t ulRand = 0ul;
 8004ce6:	930f      	str	r3, [sp, #60]	; 0x3c
	memcpy( pcMyShortName, pxFindParams->pcEntryBuffer, 11 );
 8004ce8:	4689      	mov	r9, r1
 8004cea:	ab58      	add	r3, sp, #352	; 0x160
 8004cec:	f859 0f0c 	ldr.w	r0, [r9, #12]!
 8004cf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004cf4:	c303      	stmia	r3!, {r0, r1}
 8004cf6:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8004cfa:	f899 200a 	ldrb.w	r2, [r9, #10]
 8004cfe:	8019      	strh	r1, [r3, #0]
 8004d00:	709a      	strb	r2, [r3, #2]
	FF_ProcessShortName( pcMyShortName );
 8004d02:	a858      	add	r0, sp, #352	; 0x160
 8004d04:	f7fe ff97 	bl	8003c36 <FF_ProcessShortName>
	if( ( pxFindParams->ulFlags & FIND_FLAG_FITS_SHORT_OK ) == FIND_FLAG_FITS_SHORT_OK )
 8004d08:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d0c:	f003 0218 	and.w	r2, r3, #24
 8004d10:	2a18      	cmp	r2, #24
 8004d12:	d006      	beq.n	8004d22 <FF_FindShortName+0x4a>
		for( xIndex = ( ( pxFindParams->ulFlags & FIND_FLAG_SIZE_OK ) ? 0 : 1 ); ; xIndex++ )
 8004d14:	f083 0310 	eor.w	r3, r3, #16
 8004d18:	f3c3 1800 	ubfx	r8, r3, #4, #1
						sprintf( pcNumberBuf, "%d", ( int ) xIndex );
 8004d1c:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8004edc <FF_FindShortName+0x204>
 8004d20:	e089      	b.n	8004e36 <FF_FindShortName+0x15e>
		if( ( pxFindParams->ulFlags & FIND_FLAG_SHORTNAME_CHECKED ) != 0 )
 8004d22:	f013 0f02 	tst.w	r3, #2
 8004d26:	d009      	beq.n	8004d3c <FF_FindShortName+0x64>
			if( ( pxFindParams->ulFlags & FIND_FLAG_SHORTNAME_FOUND ) != 0 )
 8004d28:	f013 0f04 	tst.w	r3, #4
				xResult = ( FF_Error_t ) ( FF_ERR_DIR_OBJECT_EXISTS | FF_CREATESHORTNAME );
 8004d2c:	bf12      	itee	ne
 8004d2e:	4b68      	ldrne	r3, [pc, #416]	; (8004ed0 <FF_FindShortName+0x1f8>)
				xResult = pxFindParams->ucCaseAttrib | 0x01;
 8004d30:	f89a 302c 	ldrbeq.w	r3, [sl, #44]	; 0x2c
 8004d34:	f043 0301 	orreq.w	r3, r3, #1
 8004d38:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d3a:	e0c4      	b.n	8004ec6 <FF_FindShortName+0x1ee>
			ulCluster = FF_FindEntryInDir( pxIOManager, pxFindParams, pcFileName, 0x00, &xMyDirectory, &xResult );
 8004d3c:	ac13      	add	r4, sp, #76	; 0x4c
 8004d3e:	9401      	str	r4, [sp, #4]
 8004d40:	ab14      	add	r3, sp, #80	; 0x50
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2300      	movs	r3, #0
 8004d46:	aa58      	add	r2, sp, #352	; 0x160
 8004d48:	4651      	mov	r1, sl
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f7ff fac0 	bl	80042d0 <FF_FindEntryInDir>
			if( ( FF_isERR( xResult ) == pdFALSE ) || ( FF_GETERROR( xResult ) == FF_ERR_DIR_END_OF_DIR ) )
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db06      	blt.n	8004d64 <FF_FindShortName+0x8c>
				if( ulCluster == 0UL )
 8004d56:	b950      	cbnz	r0, 8004d6e <FF_FindShortName+0x96>
					xResult = pxFindParams->ucCaseAttrib | 0x01;
 8004d58:	f89a 302c 	ldrb.w	r3, [sl, #44]	; 0x2c
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d62:	e0b0      	b.n	8004ec6 <FF_FindShortName+0x1ee>
			if( ( FF_isERR( xResult ) == pdFALSE ) || ( FF_GETERROR( xResult ) == FF_ERR_DIR_END_OF_DIR ) )
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b34      	cmp	r3, #52	; 0x34
 8004d68:	f040 80ad 	bne.w	8004ec6 <FF_FindShortName+0x1ee>
 8004d6c:	e7f3      	b.n	8004d56 <FF_FindShortName+0x7e>
					xResult = ( FF_Error_t ) ( FF_ERR_DIR_OBJECT_EXISTS | FF_CREATESHORTNAME );
 8004d6e:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <FF_FindShortName+0x1f8>)
 8004d70:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d72:	e0a8      	b.n	8004ec6 <FF_FindShortName+0x1ee>
						if( ulRand == 0ul )
 8004d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d76:	b973      	cbnz	r3, 8004d96 <FF_FindShortName+0xbe>
							ulRand = pxIOManager->xPartition.ulLastFreeCluster;
 8004d78:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004d7a:	930f      	str	r3, [sp, #60]	; 0x3c
							usShortHash = FF_GetCRC16( ( uint8_t *)&ulRand, sizeof( ulRand ) );
 8004d7c:	2104      	movs	r1, #4
 8004d7e:	a80f      	add	r0, sp, #60	; 0x3c
 8004d80:	f7fe fecc 	bl	8003b1c <FF_GetCRC16>
 8004d84:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
						sprintf( pcNumberBuf, "%04X", ( int ) usShortHash );
 8004d88:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8004d8c:	4951      	ldr	r1, [pc, #324]	; (8004ed4 <FF_FindShortName+0x1fc>)
 8004d8e:	a811      	add	r0, sp, #68	; 0x44
 8004d90:	f011 ffc9 	bl	8016d26 <sprintf>
 8004d94:	e05a      	b.n	8004e4c <FF_FindShortName+0x174>
							usShortHash = FF_GetCRC16( ( uint8_t *)&usShortHash, sizeof( usShortHash ) );
 8004d96:	2102      	movs	r1, #2
 8004d98:	f10d 0042 	add.w	r0, sp, #66	; 0x42
 8004d9c:	f7fe febe 	bl	8003b1c <FF_GetCRC16>
 8004da0:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8004da4:	e7f0      	b.n	8004d88 <FF_FindShortName+0xb0>
					pucEntryBuffer += FF_SIZEOF_DIRECTORY_ENTRY;
 8004da6:	3420      	adds	r4, #32
	return pucEntryBuffer[ 0 ] == ( uint8_t ) 0;
 8004da8:	7823      	ldrb	r3, [r4, #0]
				if( FF_isEndOfDir( pucEntryBuffer ) )
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8086 	beq.w	8004ebc <FF_FindShortName+0x1e4>
				if( FF_isDeleted( pucEntryBuffer ) == pdFALSE )
 8004db0:	2be5      	cmp	r3, #229	; 0xe5
 8004db2:	d01a      	beq.n	8004dea <FF_FindShortName+0x112>
					if( ( ucAttrib & FF_FAT_ATTR_LFN ) != FF_FAT_ATTR_LFN )
 8004db4:	7ae3      	ldrb	r3, [r4, #11]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d015      	beq.n	8004dea <FF_FindShortName+0x112>
						memcpy( pcMyShortName, pucEntryBuffer, sizeof( pcMyShortName ) );
 8004dbe:	f10d 0e1c 	add.w	lr, sp, #28
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	6861      	ldr	r1, [r4, #4]
 8004dc6:	68a2      	ldr	r2, [r4, #8]
 8004dc8:	68e3      	ldr	r3, [r4, #12]
 8004dca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004dce:	6920      	ldr	r0, [r4, #16]
 8004dd0:	6961      	ldr	r1, [r4, #20]
 8004dd2:	69a2      	ldr	r2, [r4, #24]
 8004dd4:	69e3      	ldr	r3, [r4, #28]
 8004dd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
						FF_ProcessShortName( pcMyShortName );
 8004dda:	a807      	add	r0, sp, #28
 8004ddc:	f7fe ff2b 	bl	8003c36 <FF_ProcessShortName>
						if( strcmp( ( const char * )pcShortName, ( const char * )pcMyShortName ) == 0 )
 8004de0:	a907      	add	r1, sp, #28
 8004de2:	a858      	add	r0, sp, #352	; 0x160
 8004de4:	f7fb f9f4 	bl	80001d0 <strcmp>
 8004de8:	b1d0      	cbz	r0, 8004e20 <FF_FindShortName+0x148>
			for( xIndex = 0; xIndex < FF_MAX_ENTRIES_PER_DIRECTORY; xIndex++ )
 8004dea:	3501      	adds	r5, #1
 8004dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004df0:	429d      	cmp	r5, r3
 8004df2:	d063      	beq.n	8004ebc <FF_FindShortName+0x1e4>
				if( ( xIndex == 0 ) ||
 8004df4:	b12d      	cbz	r5, 8004e02 <FF_FindShortName+0x12a>
					( pucEntryBuffer >= xFetchContext.pxBuffer->pucBuffer + ( FF_SIZEOF_SECTOR - FF_SIZEOF_DIRECTORY_ENTRY ) ) )
 8004df6:	9b06      	ldr	r3, [sp, #24]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
				if( ( xIndex == 0 ) ||
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	d3d1      	bcc.n	8004da6 <FF_FindShortName+0xce>
					*pxError = FF_FetchEntryWithContext( pxIOManager, ( uint32_t ) xIndex, &xFetchContext, NULL );
 8004e02:	463b      	mov	r3, r7
 8004e04:	aa02      	add	r2, sp, #8
 8004e06:	4629      	mov	r1, r5
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff f881 	bl	8003f10 <FF_FetchEntryWithContext>
 8004e0e:	9013      	str	r0, [sp, #76]	; 0x4c
					if( FF_isERR( *pxError ) )
 8004e10:	2800      	cmp	r0, #0
 8004e12:	db53      	blt.n	8004ebc <FF_FindShortName+0x1e4>
					pucEntryBuffer = xFetchContext.pxBuffer->pucBuffer;
 8004e14:	9b06      	ldr	r3, [sp, #24]
 8004e16:	689c      	ldr	r4, [r3, #8]
 8004e18:	e7c6      	b.n	8004da8 <FF_FindShortName+0xd0>
				xResult = ( FF_Error_t ) ( FF_ERR_DIR_DIRECTORY_FULL | FF_CREATESHORTNAME );
 8004e1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ed8 <FF_FindShortName+0x200>)
 8004e1c:	9313      	str	r3, [sp, #76]	; 0x4c
				break;
 8004e1e:	e052      	b.n	8004ec6 <FF_FindShortName+0x1ee>
		*pxError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8004e20:	a902      	add	r1, sp, #8
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff f867 	bl	8003ef6 <FF_CleanupEntryFetch>
 8004e28:	9013      	str	r0, [sp, #76]	; 0x4c
			if( xIndex >= FF_MAX_ENTRIES_PER_DIRECTORY )
 8004e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e2e:	4598      	cmp	r8, r3
 8004e30:	d0f3      	beq.n	8004e1a <FF_FindShortName+0x142>
		for( xIndex = ( ( pxFindParams->ulFlags & FIND_FLAG_SIZE_OK ) ? 0 : 1 ); ; xIndex++ )
 8004e32:	f108 0801 	add.w	r8, r8, #1
			if( xIndex != 0 )
 8004e36:	f1b8 0f00 	cmp.w	r8, #0
 8004e3a:	d021      	beq.n	8004e80 <FF_FindShortName+0x1a8>
					if( xIndex <= 4 )
 8004e3c:	f1b8 0f04 	cmp.w	r8, #4
 8004e40:	dc98      	bgt.n	8004d74 <FF_FindShortName+0x9c>
						sprintf( pcNumberBuf, "%d", ( int ) xIndex );
 8004e42:	4642      	mov	r2, r8
 8004e44:	4659      	mov	r1, fp
 8004e46:	a811      	add	r0, sp, #68	; 0x44
 8004e48:	f011 ff6d 	bl	8016d26 <sprintf>
				NameLen = ( uint16_t ) strlen( pcNumberBuf );
 8004e4c:	a811      	add	r0, sp, #68	; 0x44
 8004e4e:	f7fb f9c9 	bl	80001e4 <strlen>
 8004e52:	b280      	uxth	r0, r0
				x = 7 - NameLen;
 8004e54:	f1c0 0307 	rsb	r3, r0, #7
				if ( x > pxFindParams->ucFirstTilde )
 8004e58:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bfa8      	it	ge
 8004e60:	461a      	movge	r2, r3
				pxFindParams->pcEntryBuffer[ x++ ] = '~';
 8004e62:	eb0a 0302 	add.w	r3, sl, r2
 8004e66:	217e      	movs	r1, #126	; 0x7e
 8004e68:	7319      	strb	r1, [r3, #12]
				for( y = 0; y < NameLen; y++ )
 8004e6a:	b148      	cbz	r0, 8004e80 <FF_FindShortName+0x1a8>
 8004e6c:	ab11      	add	r3, sp, #68	; 0x44
 8004e6e:	320d      	adds	r2, #13
 8004e70:	4452      	add	r2, sl
 8004e72:	4418      	add	r0, r3
					pxFindParams->pcEntryBuffer[ x + y ] = pcNumberBuf[ y ];
 8004e74:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004e78:	f802 1b01 	strb.w	r1, [r2], #1
				for( y = 0; y < NameLen; y++ )
 8004e7c:	4283      	cmp	r3, r0
 8004e7e:	d1f9      	bne.n	8004e74 <FF_FindShortName+0x19c>
			memcpy( pcMyShortName, pxFindParams->pcEntryBuffer, 11 );
 8004e80:	ab58      	add	r3, sp, #352	; 0x160
 8004e82:	f8d9 0000 	ldr.w	r0, [r9]
 8004e86:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e8a:	c303      	stmia	r3!, {r0, r1}
 8004e8c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8004e90:	f899 200a 	ldrb.w	r2, [r9, #10]
 8004e94:	8019      	strh	r1, [r3, #0]
 8004e96:	709a      	strb	r2, [r3, #2]
			FF_ProcessShortName( pcMyShortName );
 8004e98:	a858      	add	r0, sp, #352	; 0x160
 8004e9a:	f7fe fecc 	bl	8003c36 <FF_ProcessShortName>
	*pxError = FF_ERR_NONE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9313      	str	r3, [sp, #76]	; 0x4c
		*pxError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 8004ea2:	aa02      	add	r2, sp, #8
 8004ea4:	f8da 1000 	ldr.w	r1, [sl]
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7fe fffd 	bl	8003ea8 <FF_InitEntryFetch>
 8004eae:	9013      	str	r0, [sp, #76]	; 0x4c
		if( FF_isERR( *pxError ) == pdFALSE )
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	db03      	blt.n	8004ebc <FF_FindShortName+0x1e4>
 8004eb4:	2400      	movs	r4, #0
 8004eb6:	4625      	mov	r5, r4
					*pxError = FF_FetchEntryWithContext( pxIOManager, ( uint32_t ) xIndex, &xFetchContext, NULL );
 8004eb8:	4627      	mov	r7, r4
 8004eba:	e79b      	b.n	8004df4 <FF_FindShortName+0x11c>
		*pxError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8004ebc:	a902      	add	r1, sp, #8
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff f819 	bl	8003ef6 <FF_CleanupEntryFetch>
 8004ec4:	9013      	str	r0, [sp, #76]	; 0x4c
	return xResult;
 8004ec6:	9813      	ldr	r0, [sp, #76]	; 0x4c
}	/* FF_FindShortName () */
 8004ec8:	b05d      	add	sp, #372	; 0x174
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	bf00      	nop
 8004ed0:	82090032 	.word	0x82090032
 8004ed4:	08019064 	.word	0x08019064
 8004ed8:	82090033 	.word	0x82090033
 8004edc:	0801a2c4 	.word	0x0801a2c4

08004ee0 <FF_ExtendDirectory>:
	}	/* FF_CreateLFNs() */
#endif /* ffconfigLFN_SUPPORT */
/*-----------------------------------------------------------*/

FF_Error_t FF_ExtendDirectory( FF_IOManager_t *pxIOManager, uint32_t ulDirCluster )
{
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	b084      	sub	sp, #16
uint32_t xCurrentCluster;
uint32_t xNextCluster = 0UL;
FF_Error_t xError = FF_ERR_NONE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9303      	str	r3, [sp, #12]
FF_FATBuffers_t xFATBuffers;

	if( ( ulDirCluster == pxIOManager->xPartition.ulRootDirCluster ) &&
 8004ee8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eea:	428b      	cmp	r3, r1
 8004eec:	d037      	beq.n	8004f5e <FF_ExtendDirectory+0x7e>
 8004eee:	460d      	mov	r5, r1
 8004ef0:	4604      	mov	r4, r0
		( pxIOManager->xPartition.ucType != FF_T_FAT32 ) )
	{
		/* root directories on FAT12 and FAT16 can not be extended. */
		xError = ( FF_Error_t ) ( FF_ERR_DIR_CANT_EXTEND_ROOT_DIR | FF_EXTENDDIRECTORY );
	}
	else if( pxIOManager->xPartition.ulFreeClusterCount == 0UL )
 8004ef2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d039      	beq.n	8004f6c <FF_ExtendDirectory+0x8c>
		{
			xError = ( FF_Error_t ) ( FF_ERR_FAT_NO_FREE_CLUSTERS | FF_EXTENDDIRECTORY );
		}
		else
		{
			FF_LockFAT( pxIOManager );
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f003 fe53 	bl	8008ba4 <FF_LockFAT>
			{
				xCurrentCluster = FF_FindEndOfChain( pxIOManager, ulDirCluster, &xError );
 8004efe:	aa03      	add	r2, sp, #12
 8004f00:	4629      	mov	r1, r5
 8004f02:	4620      	mov	r0, r4
 8004f04:	f000 fdce 	bl	8005aa4 <FF_FindEndOfChain>
 8004f08:	4606      	mov	r6, r0
				if( FF_isERR( xError ) == pdFALSE )
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	db3b      	blt.n	8004f88 <FF_ExtendDirectory+0xa8>
				{
					xNextCluster = FF_FindFreeCluster( pxIOManager, &xError, pdTRUE );
 8004f10:	2201      	movs	r2, #1
 8004f12:	a903      	add	r1, sp, #12
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 fe8f 	bl	8005c38 <FF_FindFreeCluster>
 8004f1a:	4605      	mov	r5, r0
					if( FF_isERR( xError ) == pdFALSE )
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db33      	blt.n	8004f8a <FF_ExtendDirectory+0xaa>

FF_Error_t FF_ReleaseFATBuffers( FF_IOManager_t *pxIOManager, FF_FATBuffers_t *pxFATBuffers );

static portINLINE void FF_InitFATBuffers( FF_FATBuffers_t *pxFATBuffers, uint8_t ucMode )
{
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	9300      	str	r3, [sp, #0]
#if ffconfigBUF_STORE_COUNT > 1
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 8004f26:	9301      	str	r3, [sp, #4]
#endif
#if ffconfigBUF_STORE_COUNT > 2
	#error Please check this code, maybe it is time to use memset
#endif
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f88d 3008 	strb.w	r3, [sp, #8]
					{
						FF_InitFATBuffers ( &xFATBuffers, FF_MODE_WRITE );
						/* xNextCluster already has been set to 0xFFFFFFFF,
						now let xCurrentCluster point to xNextCluster. */

						xError = FF_putFATEntry( pxIOManager, xCurrentCluster, xNextCluster, &xFATBuffers );
 8004f2e:	466b      	mov	r3, sp
 8004f30:	4602      	mov	r2, r0
 8004f32:	4631      	mov	r1, r6
 8004f34:	4620      	mov	r0, r4
 8004f36:	f000 fdcd 	bl	8005ad4 <FF_putFATEntry>
 8004f3a:	9003      	str	r0, [sp, #12]
						{
						FF_Error_t xTempError;

							xTempError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 8004f3c:	4669      	mov	r1, sp
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fc1f 	bl	8005782 <FF_ReleaseFATBuffers>
							if( FF_isERR( xError ) == pdFALSE )
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
							{
								xError = xTempError;
 8004f48:	bfa8      	it	ge
 8004f4a:	9003      	strge	r0, [sp, #12]
							}

							xTempError = FF_DecreaseFreeClusters( pxIOManager, 1 );
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f003 fd18 	bl	8008984 <FF_DecreaseFreeClusters>
							if( FF_isERR( xError ) == pdFALSE )
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db17      	blt.n	8004f8a <FF_ExtendDirectory+0xaa>
							{
								xError = xTempError;
 8004f5a:	9003      	str	r0, [sp, #12]
 8004f5c:	e015      	b.n	8004f8a <FF_ExtendDirectory+0xaa>
	if( ( ulDirCluster == pxIOManager->xPartition.ulRootDirCluster ) &&
 8004f5e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d0c3      	beq.n	8004eee <FF_ExtendDirectory+0xe>
		xError = ( FF_Error_t ) ( FF_ERR_DIR_CANT_EXTEND_ROOT_DIR | FF_EXTENDDIRECTORY );
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <FF_ExtendDirectory+0xc4>)
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	e00a      	b.n	8004f82 <FF_ExtendDirectory+0xa2>
		pxIOManager->xPartition.ulFreeClusterCount = FF_CountFreeClusters( pxIOManager, &xError );
 8004f6c:	a903      	add	r1, sp, #12
 8004f6e:	f001 f857 	bl	8006020 <FF_CountFreeClusters>
 8004f72:	63e0      	str	r0, [r4, #60]	; 0x3c
	if( FF_isERR( xError ) == pdFALSE )
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	db03      	blt.n	8004f82 <FF_ExtendDirectory+0xa2>
		if( pxIOManager->xPartition.ulFreeClusterCount == 0UL )
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1bc      	bne.n	8004ef8 <FF_ExtendDirectory+0x18>
			xError = ( FF_Error_t ) ( FF_ERR_FAT_NO_FREE_CLUSTERS | FF_EXTENDDIRECTORY );
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <FF_ExtendDirectory+0xc8>)
 8004f80:	9303      	str	r3, [sp, #12]
			}
		}
	}

	return xError;
}	/* FF_ExtendDirectory() */
 8004f82:	9803      	ldr	r0, [sp, #12]
 8004f84:	b004      	add	sp, #16
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
uint32_t xNextCluster = 0UL;
 8004f88:	2500      	movs	r5, #0
			FF_UnlockFAT( pxIOManager );
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f003 fe32 	bl	8008bf4 <FF_UnlockFAT>
			if( FF_isERR( xError ) == pdFALSE )
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dbf5      	blt.n	8004f82 <FF_ExtendDirectory+0xa2>
				xError = FF_ClearCluster( pxIOManager, xNextCluster );
 8004f96:	4629      	mov	r1, r5
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fccf 	bl	800593c <FF_ClearCluster>
 8004f9e:	9003      	str	r0, [sp, #12]
 8004fa0:	e7ef      	b.n	8004f82 <FF_ExtendDirectory+0xa2>
 8004fa2:	bf00      	nop
 8004fa4:	820b0038 	.word	0x820b0038
 8004fa8:	820b0046 	.word	0x820b0046

08004fac <FF_CreateDirent>:
	}
}	/* FF_MakeNameCompliant() */
/*-----------------------------------------------------------*/

FF_Error_t FF_CreateDirent( FF_IOManager_t *pxIOManager, FF_FindParams_t *pxFindParams, FF_DirEnt_t *pxDirEntry )
{
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	b0a3      	sub	sp, #140	; 0x8c
 8004fb2:	9002      	str	r0, [sp, #8]
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	4690      	mov	r8, r2
BaseType_t xLFNCount;
int32_t	lFreeEntry = 0L;
FF_Error_t xReturn = FF_ERR_NONE;
BaseType_t xEntryCount;
FF_FetchContext_t xFetchContext;
uint32_t	ulDirCluster = pxFindParams->ulDirCluster;
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	9305      	str	r3, [sp, #20]
	char pcShortName[ 13 ];
#endif
#if( ffconfigUNICODE_UTF16_SUPPORT != 0 )
	uint16_t NameLen = ( uint16_t ) wcslen( pxDirEntry->pcFileName );
#else
	uint16_t NameLen = ( uint16_t ) strlen( pxDirEntry->pcFileName );
 8004fbc:	f102 033a 	add.w	r3, r2, #58	; 0x3a
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb f90e 	bl	80001e4 <strlen>
 8004fc8:	4605      	mov	r5, r0
	if( ( uint8_t ) pcName[ 0 ] == FF_FAT_DELETED )	/* Support Japanese KANJI symbol0xE5. */
 8004fca:	f898 303a 	ldrb.w	r3, [r8, #58]	; 0x3a
 8004fce:	2be5      	cmp	r3, #229	; 0xe5
 8004fd0:	d006      	beq.n	8004fe0 <FF_CreateDirent+0x34>
	for( ; *pcName; pcName++ )
 8004fd2:	f898 103a 	ldrb.w	r1, [r8, #58]	; 0x3a
 8004fd6:	b1c1      	cbz	r1, 800500a <FF_CreateDirent+0x5e>
{
 8004fd8:	9f03      	ldr	r7, [sp, #12]
				*pcName = '_';
 8004fda:	f04f 0e5f 	mov.w	lr, #95	; 0x5f
 8004fde:	e008      	b.n	8004ff2 <FF_CreateDirent+0x46>
		pcName[ 0 ] = 0x05;
 8004fe0:	2105      	movs	r1, #5
 8004fe2:	f888 103a 	strb.w	r1, [r8, #58]	; 0x3a
 8004fe6:	e7f7      	b.n	8004fd8 <FF_CreateDirent+0x2c>
				*pcName = '_';
 8004fe8:	f887 e000 	strb.w	lr, [r7]
	for( ; *pcName; pcName++ )
 8004fec:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004ff0:	b159      	cbz	r1, 800500a <FF_CreateDirent+0x5e>
			if( *pcName == forbiddenChrs[index] )
 8004ff2:	2922      	cmp	r1, #34	; 0x22
 8004ff4:	d0f8      	beq.n	8004fe8 <FF_CreateDirent+0x3c>
 8004ff6:	4b99      	ldr	r3, [pc, #612]	; (800525c <FF_CreateDirent+0x2b0>)
 8004ff8:	f103 0009 	add.w	r0, r3, #9
 8004ffc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005000:	428a      	cmp	r2, r1
 8005002:	d0f1      	beq.n	8004fe8 <FF_CreateDirent+0x3c>
		for( index = 0; index < ( BaseType_t ) sizeof( forbiddenChrs ); index++ )
 8005004:	4283      	cmp	r3, r0
 8005006:	d1f9      	bne.n	8004ffc <FF_CreateDirent+0x50>
 8005008:	e7f0      	b.n	8004fec <FF_CreateDirent+0x40>
	#else
	{
		FF_MakeNameCompliant( pxDirEntry->pcFileName );	/* Ensure we don't break the Dir tables. */
	}
	#endif
	memset( pucEntryBuffer, 0, sizeof( pucEntryBuffer ) );
 800500a:	2220      	movs	r2, #32
 800500c:	2100      	movs	r1, #0
 800500e:	a81a      	add	r0, sp, #104	; 0x68
 8005010:	f012 fbdc 	bl	80177cc <memset>
		xEntryCount = 1;
	}
	#endif

	/* Create the ShortName. */
	FF_LockDirectory( pxIOManager );
 8005014:	9802      	ldr	r0, [sp, #8]
 8005016:	f003 fd6b 	bl	8008af0 <FF_LockDirectory>
	do
	{
		/* Open a do {} while( pdFALSE ) loop to allow the use of break statements. */
		/* As FF_FindShortName( ) can fail, it should be called before finding a free directory entry. */
		if( ( pxFindParams->ulFlags & FIND_FLAG_SHORTNAME_SET ) == 0 )
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	f013 0f01 	tst.w	r3, #1
 8005020:	d041      	beq.n	80050a6 <FF_CreateDirent+0xfa>
		{
			FF_CreateShortName( pxFindParams, pxDirEntry->pcFileName );
		}
		lFitShort = FF_FindShortName ( pxIOManager, pxFindParams );
 8005022:	4621      	mov	r1, r4
 8005024:	9802      	ldr	r0, [sp, #8]
 8005026:	f7ff fe57 	bl	8004cd8 <FF_FindShortName>
 800502a:	4606      	mov	r6, r0

		memcpy( pucEntryBuffer, pxFindParams->pcEntryBuffer, sizeof( pucEntryBuffer ) );
 800502c:	af1a      	add	r7, sp, #104	; 0x68
 800502e:	46a6      	mov	lr, r4
 8005030:	f85e 0f0c 	ldr.w	r0, [lr, #12]!
 8005034:	f8de 1004 	ldr.w	r1, [lr, #4]
 8005038:	f8de 2008 	ldr.w	r2, [lr, #8]
 800503c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005040:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005042:	f8de 0010 	ldr.w	r0, [lr, #16]
 8005046:	f8de 1014 	ldr.w	r1, [lr, #20]
 800504a:	f8de 2018 	ldr.w	r2, [lr, #24]
 800504e:	f8de 301c 	ldr.w	r3, [lr, #28]
 8005052:	c70f      	stmia	r7!, {r0, r1, r2, r3}

		if( FF_isERR( lFitShort ) )
 8005054:	2e00      	cmp	r6, #0
 8005056:	f2c0 81ab 	blt.w	80053b0 <FF_CreateDirent+0x404>
		{
			xReturn = lFitShort;
			break;
		}
		if( lFitShort != 0 )
 800505a:	bb4e      	cbnz	r6, 80050b0 <FF_CreateDirent+0x104>
	xLFNCount = ( BaseType_t ) ( ( NameLen + 12 ) / 13 );
 800505c:	b2ab      	uxth	r3, r5
 800505e:	330c      	adds	r3, #12
 8005060:	4a7f      	ldr	r2, [pc, #508]	; (8005260 <FF_CreateDirent+0x2b4>)
 8005062:	fb82 1203 	smull	r1, r2, r2, r3
 8005066:	17db      	asrs	r3, r3, #31
 8005068:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800506c:	9304      	str	r3, [sp, #16]
		xEntryCount = xLFNCount + 1;
 800506e:	3301      	adds	r3, #1
 8005070:	9306      	str	r3, [sp, #24]
uint32_t ulDirCluster = pxFindParams->ulDirCluster;
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	9307      	str	r3, [sp, #28]
	xError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 8005076:	aa0d      	add	r2, sp, #52	; 0x34
 8005078:	4619      	mov	r1, r3
 800507a:	9802      	ldr	r0, [sp, #8]
 800507c:	f7fe ff14 	bl	8003ea8 <FF_InitEntryFetch>
	if( FF_isERR( xError ) == pdFALSE )
 8005080:	1e05      	subs	r5, r0, #0
 8005082:	f2c0 8194 	blt.w	80053ae <FF_CreateDirent+0x402>
		uxEntry = pxFindParams->lFreeEntry >= 0 ? pxFindParams->lFreeEntry : 0;
 8005086:	6864      	ldr	r4, [r4, #4]
 8005088:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		for ( ; uxEntry < FF_MAX_ENTRIES_PER_DIRECTORY; uxEntry++ )
 800508c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005090:	429c      	cmp	r4, r3
 8005092:	f200 817a 	bhi.w	800538a <FF_CreateDirent+0x3de>
 8005096:	f04f 0900 	mov.w	r9, #0
 800509a:	464f      	mov	r7, r9
				xError = FF_FetchEntryWithContext( pxIOManager, uxEntry, &xFetchContext, NULL );
 800509c:	46cb      	mov	fp, r9
				if( ++freeCount == usSequential )
 800509e:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80050a2:	4628      	mov	r0, r5
 80050a4:	e022      	b.n	80050ec <FF_CreateDirent+0x140>
			FF_CreateShortName( pxFindParams, pxDirEntry->pcFileName );
 80050a6:	9903      	ldr	r1, [sp, #12]
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff fd0f 	bl	8004acc <FF_CreateShortName>
 80050ae:	e7b8      	b.n	8005022 <FF_CreateDirent+0x76>
		{
			/* There is no need to create a LFN entry because the file name
			fits into a normal 32-byte entry.. */
			xLFNCount = 0;
			xEntryCount = 1;
 80050b0:	2301      	movs	r3, #1
 80050b2:	9306      	str	r3, [sp, #24]
			xLFNCount = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	e7db      	b.n	8005072 <FF_CreateDirent+0xc6>
					xError = FF_ExtendDirectory( pxIOManager, ulDirCluster );
 80050ba:	9907      	ldr	r1, [sp, #28]
 80050bc:	9802      	ldr	r0, [sp, #8]
 80050be:	f7ff ff0f 	bl	8004ee0 <FF_ExtendDirectory>
 80050c2:	4605      	mov	r5, r0
					xEntryFound = pdTRUE;
 80050c4:	2701      	movs	r7, #1
 80050c6:	e056      	b.n	8005176 <FF_CreateDirent+0x1ca>
						( FF_SIZEOF_DIRECTORY_ENTRY * ( uxEntry % ( FF_SIZEOF_SECTOR / FF_SIZEOF_DIRECTORY_ENTRY ) ) );
 80050c8:	f004 070f 	and.w	r7, r4, #15
					pucEntryBuffer = xFetchContext.pxBuffer->pucBuffer +
 80050cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 80050d4:	e000      	b.n	80050d8 <FF_CreateDirent+0x12c>
				pucEntryBuffer += FF_SIZEOF_DIRECTORY_ENTRY;
 80050d6:	3720      	adds	r7, #32
 80050d8:	783b      	ldrb	r3, [r7, #0]
			if( FF_isEndOfDir( pucEntryBuffer ) )	/* If its the end of the Dir, then FreeDirents from here. */
 80050da:	b1fb      	cbz	r3, 800511c <FF_CreateDirent+0x170>
			if( FF_isDeleted( pucEntryBuffer ) )
 80050dc:	2be5      	cmp	r3, #229	; 0xe5
 80050de:	d036      	beq.n	800514e <FF_CreateDirent+0x1a2>
				freeCount = 0;
 80050e0:	46d9      	mov	r9, fp
		for ( ; uxEntry < FF_MAX_ENTRIES_PER_DIRECTORY; uxEntry++ )
 80050e2:	3401      	adds	r4, #1
 80050e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050e8:	429c      	cmp	r4, r3
 80050ea:	d042      	beq.n	8005172 <FF_CreateDirent+0x1c6>
			if( ( pucEntryBuffer == NULL ) ||
 80050ec:	b12f      	cbz	r7, 80050fa <FF_CreateDirent+0x14e>
				( pucEntryBuffer >= xFetchContext.pxBuffer->pucBuffer + ( FF_SIZEOF_SECTOR - FF_SIZEOF_DIRECTORY_ENTRY ) ) )
 80050ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
			if( ( pucEntryBuffer == NULL ) ||
 80050f6:	429f      	cmp	r7, r3
 80050f8:	d3ed      	bcc.n	80050d6 <FF_CreateDirent+0x12a>
				xError = FF_FetchEntryWithContext( pxIOManager, uxEntry, &xFetchContext, NULL );
 80050fa:	465b      	mov	r3, fp
 80050fc:	aa0d      	add	r2, sp, #52	; 0x34
 80050fe:	4621      	mov	r1, r4
 8005100:	9802      	ldr	r0, [sp, #8]
 8005102:	f7fe ff05 	bl	8003f10 <FF_FetchEntryWithContext>
				if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 8005106:	b283      	uxth	r3, r0
 8005108:	2b34      	cmp	r3, #52	; 0x34
 800510a:	d0d6      	beq.n	80050ba <FF_CreateDirent+0x10e>
				else if( FF_isERR( xError ) )
 800510c:	2800      	cmp	r0, #0
 800510e:	f2c0 8135 	blt.w	800537c <FF_CreateDirent+0x3d0>
				if( pucEntryBuffer == NULL )
 8005112:	2f00      	cmp	r7, #0
 8005114:	d0d8      	beq.n	80050c8 <FF_CreateDirent+0x11c>
					pucEntryBuffer = xFetchContext.pxBuffer->pucBuffer;
 8005116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005118:	689f      	ldr	r7, [r3, #8]
 800511a:	e7dd      	b.n	80050d8 <FF_CreateDirent+0x12c>
 800511c:	4605      	mov	r5, r0
				if( ( uxEntry + usSequential ) >
 800511e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8005122:	fa14 f183 	uxtah	r1, r4, r3
					( ( DirLength * ( ( UBaseType_t )pxIOManager->xPartition.ulSectorsPerCluster * pxIOManager->xPartition.usBlkSize ) ) / FF_SIZEOF_DIRECTORY_ENTRY ) )
 8005126:	9802      	ldr	r0, [sp, #8]
 8005128:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800512a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800512c:	fb03 f202 	mul.w	r2, r3, r2
 8005130:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005134:	fb03 f302 	mul.w	r3, r3, r2
				if( ( uxEntry + usSequential ) >
 8005138:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800513c:	d801      	bhi.n	8005142 <FF_CreateDirent+0x196>
				xEntryFound = pdTRUE;
 800513e:	2701      	movs	r7, #1
 8005140:	e019      	b.n	8005176 <FF_CreateDirent+0x1ca>
					xError = FF_ExtendDirectory( pxIOManager, ulDirCluster );
 8005142:	9907      	ldr	r1, [sp, #28]
 8005144:	f7ff fecc 	bl	8004ee0 <FF_ExtendDirectory>
 8005148:	4605      	mov	r5, r0
				xEntryFound = pdTRUE;
 800514a:	2701      	movs	r7, #1
 800514c:	e013      	b.n	8005176 <FF_CreateDirent+0x1ca>
				if( ++freeCount == usSequential )
 800514e:	f109 0901 	add.w	r9, r9, #1
 8005152:	fa1f f989 	uxth.w	r9, r9
 8005156:	45ca      	cmp	sl, r9
 8005158:	d1c3      	bne.n	80050e2 <FF_CreateDirent+0x136>
					xError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800515a:	a90d      	add	r1, sp, #52	; 0x34
 800515c:	9802      	ldr	r0, [sp, #8]
 800515e:	f7fe feca 	bl	8003ef6 <FF_CleanupEntryFetch>
 8005162:	4605      	mov	r5, r0
					uxEntry = ( uxEntry - ( usSequential - 1 ) );/* Return the beginning entry in the sequential sequence. */
 8005164:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8005168:	f1c3 0301 	rsb	r3, r3, #1
 800516c:	441c      	add	r4, r3
					xEntryFound = pdTRUE;
 800516e:	2701      	movs	r7, #1
 8005170:	e001      	b.n	8005176 <FF_CreateDirent+0x1ca>
 8005172:	4605      	mov	r5, r0
BaseType_t xEntryFound = pdFALSE;
 8005174:	2700      	movs	r7, #0
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8005176:	a90d      	add	r1, sp, #52	; 0x34
 8005178:	9802      	ldr	r0, [sp, #8]
 800517a:	f7fe febc 	bl	8003ef6 <FF_CleanupEntryFetch>
			if( FF_isERR( xError ) == pdFALSE )
 800517e:	2d00      	cmp	r5, #0
 8005180:	f2c0 8115 	blt.w	80053ae <FF_CreateDirent+0x402>
	if( FF_isERR( xError ) == pdFALSE )
 8005184:	2800      	cmp	r0, #0
 8005186:	f2c0 8106 	blt.w	8005396 <FF_CreateDirent+0x3ea>
		if( xEntryFound != pdFALSE )
 800518a:	2f00      	cmp	r7, #0
 800518c:	f000 8105 	beq.w	800539a <FF_CreateDirent+0x3ee>
			xError = uxEntry;
 8005190:	4625      	mov	r5, r4
		}
		lFreeEntry = FF_FindFreeDirent( pxIOManager, pxFindParams, ( uint16_t ) xEntryCount );

		if( FF_isERR( lFreeEntry ) )
 8005192:	2c00      	cmp	r4, #0
 8005194:	f2c0 8103 	blt.w	800539e <FF_CreateDirent+0x3f2>
			xReturn = lFreeEntry;
			break;
		}
		#if( ffconfigLFN_SUPPORT != 0 )
		{
			if( xLFNCount > 0 )
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	dd6a      	ble.n	8005274 <FF_CreateDirent+0x2c8>
			{
				ucCheckSum = FF_CreateChkSum( pucEntryBuffer );
 800519e:	a81a      	add	r0, sp, #104	; 0x68
 80051a0:	f7fe fcd8 	bl	8003b54 <FF_CreateChkSum>
 80051a4:	9006      	str	r0, [sp, #24]
			y = strlen( pcName );
 80051a6:	9803      	ldr	r0, [sp, #12]
 80051a8:	f7fb f81c 	bl	80001e4 <strlen>
			if( y > ffconfigMAX_FILENAME )
 80051ac:	28c1      	cmp	r0, #193	; 0xc1
 80051ae:	f300 80fa 	bgt.w	80053a6 <FF_CreateDirent+0x3fa>
			xNumLFNs	= y / 13;	/* Number of LFNs is the total number of UTF-16 units, divided by 13 ( 13 units per LFN ). */
 80051b2:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <FF_CreateDirent+0x2b4>)
 80051b4:	fb83 2300 	smull	r2, r3, r3, r0
 80051b8:	17c2      	asrs	r2, r0, #31
 80051ba:	ebc2 0ba3 	rsb	fp, r2, r3, asr #2
			xEndPos	= y % 13;	/* The ending position in an LFN, of the last LFN UTF-16 character. */
 80051be:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80051c2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
			if( xEndPos )
 80051c6:	1ac3      	subs	r3, r0, r3
 80051c8:	9307      	str	r3, [sp, #28]
 80051ca:	d102      	bne.n	80051d2 <FF_CreateDirent+0x226>
				xEndPos = 13;
 80051cc:	230d      	movs	r3, #13
 80051ce:	9307      	str	r3, [sp, #28]
 80051d0:	e001      	b.n	80051d6 <FF_CreateDirent+0x22a>
				xNumLFNs++;
 80051d2:	f10b 0b01 	add.w	fp, fp, #1
			xError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 80051d6:	aa08      	add	r2, sp, #32
 80051d8:	9905      	ldr	r1, [sp, #20]
 80051da:	9802      	ldr	r0, [sp, #8]
 80051dc:	f7fe fe64 	bl	8003ea8 <FF_InitEntryFetch>
			if( FF_isERR( xError ) == pdFALSE )
 80051e0:	1e03      	subs	r3, r0, #0
 80051e2:	461f      	mov	r7, r3
 80051e4:	f2c0 80e1 	blt.w	80053aa <FF_CreateDirent+0x3fe>
					NamePtr = pcName + 13 * ( xNumLFNs - 1 );
 80051e8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80051ec:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 80051f0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80051f4:	9a03      	ldr	r2, [sp, #12]
 80051f6:	441a      	add	r2, r3
 80051f8:	4691      	mov	r9, r2
				for( xIndex = xNumLFNs; xIndex > 0; xIndex-- )
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	dd33      	ble.n	8005268 <FF_CreateDirent+0x2bc>
 8005200:	465f      	mov	r7, fp
 8005202:	f04f 0a00 	mov.w	sl, #0
					xError = FF_PushEntryWithContext( pxIOManager, ( uint32_t ) ( usEntry + ( xNumLFNs - xIndex ) ), &xFetchContext, pucEntryBuffer );
 8005206:	9403      	str	r4, [sp, #12]
 8005208:	9c06      	ldr	r4, [sp, #24]
					if( xIndex == xNumLFNs )
 800520a:	45bb      	cmp	fp, r7
 800520c:	d018      	beq.n	8005240 <FF_CreateDirent+0x294>
						FF_CreateLFNEntry( pucEntryBuffer, ( uint8_t * ) NamePtr, ( UBaseType_t ) 13u, ( UBaseType_t ) xIndex, ucCheckSum );
 800520e:	9400      	str	r4, [sp, #0]
 8005210:	463b      	mov	r3, r7
 8005212:	220d      	movs	r2, #13
 8005214:	4649      	mov	r1, r9
 8005216:	a80d      	add	r0, sp, #52	; 0x34
 8005218:	f7fe fd3c 	bl	8003c94 <FF_CreateLFNEntry>
					NamePtr -= 13;
 800521c:	f1a9 090d 	sub.w	r9, r9, #13
					xError = FF_PushEntryWithContext( pxIOManager, ( uint32_t ) ( usEntry + ( xNumLFNs - xIndex ) ), &xFetchContext, pucEntryBuffer );
 8005220:	ab0d      	add	r3, sp, #52	; 0x34
 8005222:	aa08      	add	r2, sp, #32
 8005224:	fa1a f185 	uxtah	r1, sl, r5
 8005228:	9802      	ldr	r0, [sp, #8]
 800522a:	f7fe fee9 	bl	8004000 <FF_PushEntryWithContext>
					if( FF_isERR( xError ) )
 800522e:	2800      	cmp	r0, #0
 8005230:	db18      	blt.n	8005264 <FF_CreateDirent+0x2b8>
 8005232:	f10a 0a01 	add.w	sl, sl, #1
				for( xIndex = xNumLFNs; xIndex > 0; xIndex-- )
 8005236:	3f01      	subs	r7, #1
 8005238:	d1e7      	bne.n	800520a <FF_CreateDirent+0x25e>
 800523a:	9c03      	ldr	r4, [sp, #12]
 800523c:	4607      	mov	r7, r0
 800523e:	e013      	b.n	8005268 <FF_CreateDirent+0x2bc>
						FF_CreateLFNEntry( pucEntryBuffer, ( uint8_t * ) NamePtr, ( UBaseType_t ) xEndPos, ( UBaseType_t ) xIndex, ucCheckSum );
 8005240:	9400      	str	r4, [sp, #0]
 8005242:	463b      	mov	r3, r7
 8005244:	9a07      	ldr	r2, [sp, #28]
 8005246:	4649      	mov	r1, r9
 8005248:	a80d      	add	r0, sp, #52	; 0x34
 800524a:	f7fe fd23 	bl	8003c94 <FF_CreateLFNEntry>
						pucEntryBuffer[0] |= 0x40;
 800524e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8005252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005256:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800525a:	e7df      	b.n	800521c <FF_CreateDirent+0x270>
 800525c:	0801906c 	.word	0x0801906c
 8005260:	4ec4ec4f 	.word	0x4ec4ec4f
 8005264:	9c03      	ldr	r4, [sp, #12]
 8005266:	4607      	mov	r7, r0
					xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8005268:	a908      	add	r1, sp, #32
 800526a:	9802      	ldr	r0, [sp, #8]
 800526c:	f7fe fe43 	bl	8003ef6 <FF_CleanupEntryFetch>
					if( FF_isERR( xTempError ) == pdFALSE )
 8005270:	2800      	cmp	r0, #0
 8005272:	db7e      	blt.n	8005372 <FF_CreateDirent+0x3c6>
		#endif /* ffconfigLFN_SUPPORT */
		if( FF_isERR( xReturn ) == pdFALSE )
		{
			#if( ffconfigTIME_SUPPORT != 0 )
			{
				FF_GetSystemTime( &pxDirEntry->xCreateTime );		/* Date and Time Created. */
 8005274:	f108 0716 	add.w	r7, r8, #22
 8005278:	4638      	mov	r0, r7
 800527a:	f004 fd35 	bl	8009ce8 <FF_GetSystemTime>
				pxDirEntry->xModifiedTime = pxDirEntry->xCreateTime;	/* Date and Time Modified. */
 800527e:	f108 0922 	add.w	r9, r8, #34	; 0x22
 8005282:	f8d8 1016 	ldr.w	r1, [r8, #22]
 8005286:	f8d8 201a 	ldr.w	r2, [r8, #26]
 800528a:	f8d8 301e 	ldr.w	r3, [r8, #30]
 800528e:	f8c8 1022 	str.w	r1, [r8, #34]	; 0x22
 8005292:	f8c8 2026 	str.w	r2, [r8, #38]	; 0x26
 8005296:	f8c8 302a 	str.w	r3, [r8, #42]	; 0x2a
				pxDirEntry->xAccessedTime = pxDirEntry->xCreateTime;	/* Date of Last Access. */
 800529a:	f8d8 0016 	ldr.w	r0, [r8, #22]
 800529e:	f8d8 101a 	ldr.w	r1, [r8, #26]
 80052a2:	f8d8 201e 	ldr.w	r2, [r8, #30]
 80052a6:	f8c8 002e 	str.w	r0, [r8, #46]	; 0x2e
 80052aa:	f8c8 1032 	str.w	r1, [r8, #50]	; 0x32
 80052ae:	f8c8 2036 	str.w	r2, [r8, #54]	; 0x36
				FF_PlaceTime( pucEntryBuffer, FF_FAT_DIRENT_CREATE_TIME, &pxDirEntry->xCreateTime );
 80052b2:	463a      	mov	r2, r7
 80052b4:	210e      	movs	r1, #14
 80052b6:	a81a      	add	r0, sp, #104	; 0x68
 80052b8:	f7fe fc60 	bl	8003b7c <FF_PlaceTime>
				FF_PlaceDate( pucEntryBuffer, FF_FAT_DIRENT_CREATE_DATE, &pxDirEntry->xCreateTime );
 80052bc:	463a      	mov	r2, r7
 80052be:	2110      	movs	r1, #16
 80052c0:	a81a      	add	r0, sp, #104	; 0x68
 80052c2:	f7fe fc70 	bl	8003ba6 <FF_PlaceDate>
				FF_PlaceTime( pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_TIME, &pxDirEntry->xModifiedTime );
 80052c6:	464a      	mov	r2, r9
 80052c8:	2116      	movs	r1, #22
 80052ca:	a81a      	add	r0, sp, #104	; 0x68
 80052cc:	f7fe fc56 	bl	8003b7c <FF_PlaceTime>
				FF_PlaceDate( pucEntryBuffer, FF_FAT_DIRENT_LASTMOD_DATE, &pxDirEntry->xModifiedTime );
 80052d0:	464a      	mov	r2, r9
 80052d2:	2118      	movs	r1, #24
 80052d4:	a81a      	add	r0, sp, #104	; 0x68
 80052d6:	f7fe fc66 	bl	8003ba6 <FF_PlaceDate>
		pBuffer[ aOffset ] = ( uint8_t ) Value;
 80052da:	f898 30fb 	ldrb.w	r3, [r8, #251]	; 0xfb
 80052de:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
			}
			#endif /*  ffconfigTIME_SUPPORT */

			FF_putChar( pucEntryBuffer,  FF_FAT_DIRENT_ATTRIB, pxDirEntry->ucAttrib );
		#if( ffconfigSHORTNAME_CASE != 0 )
			FF_putChar( pucEntryBuffer,  FF_FAT_CASE_OFFS, ( uint32_t ) lFitShort & ( FF_FAT_CASE_ATTR_BASE | FF_FAT_CASE_ATTR_EXT ) );
 80052e2:	f006 0318 	and.w	r3, r6, #24
 80052e6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		#endif
			FF_putShort( pucEntryBuffer, FF_FAT_DIRENT_CLUS_HIGH, ( uint16_t )( pxDirEntry->ulObjectCluster >> 16 ) );
 80052ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80052ee:	0c1a      	lsrs	r2, r3, #16
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80052f0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
		pBuffer[ 1 ] = u16.bytes.u8_1;
 80052f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80052f8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80052fc:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8005300:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005304:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
		u32.u32 = Value;
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
		pBuffer[ 0 ] = u32.bytes.u8_0;
 800530c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8005310:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005314:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8005318:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800531c:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
		pBuffer[ 3 ] = u32.bytes.u8_3;
 8005320:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8005324:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
			FF_putShort( pucEntryBuffer, FF_FAT_DIRENT_CLUS_LOW, ( uint16_t )( pxDirEntry->ulObjectCluster ) );
			FF_putLong( pucEntryBuffer,  FF_FAT_DIRENT_FILESIZE, pxDirEntry->ulFileSize );

			xReturn = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 8005328:	aa15      	add	r2, sp, #84	; 0x54
 800532a:	9905      	ldr	r1, [sp, #20]
 800532c:	9f02      	ldr	r7, [sp, #8]
 800532e:	4638      	mov	r0, r7
 8005330:	f7fe fdba 	bl	8003ea8 <FF_InitEntryFetch>
			if( FF_isERR( xReturn ) )
 8005334:	1e06      	subs	r6, r0, #0
 8005336:	db3b      	blt.n	80053b0 <FF_CreateDirent+0x404>
			{
				break;
			}
			xReturn = FF_PushEntryWithContext( pxIOManager, ( uint16_t ) ( lFreeEntry + xLFNCount ), &xFetchContext, pucEntryBuffer );
 8005338:	9b04      	ldr	r3, [sp, #16]
 800533a:	18e1      	adds	r1, r4, r3
 800533c:	ab1a      	add	r3, sp, #104	; 0x68
 800533e:	aa15      	add	r2, sp, #84	; 0x54
 8005340:	b289      	uxth	r1, r1
 8005342:	4638      	mov	r0, r7
 8005344:	f7fe fe5c 	bl	8004000 <FF_PushEntryWithContext>
 8005348:	4604      	mov	r4, r0

			{
			FF_Error_t xTempError;

				xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800534a:	a915      	add	r1, sp, #84	; 0x54
 800534c:	4638      	mov	r0, r7
 800534e:	f7fe fdd2 	bl	8003ef6 <FF_CleanupEntryFetch>
 8005352:	4606      	mov	r6, r0
				if( FF_isERR( xReturn ) == pdFALSE )
 8005354:	2c00      	cmp	r4, #0
 8005356:	db24      	blt.n	80053a2 <FF_CreateDirent+0x3f6>
			#endif /* ffconfigHASH_CACHE*/
		}
	}
	while( pdFALSE );

	FF_UnlockDirectory( pxIOManager );
 8005358:	9802      	ldr	r0, [sp, #8]
 800535a:	f003 fbe3 	bl	8008b24 <FF_UnlockDirectory>

	if( FF_isERR( xReturn ) == pdFALSE )
 800535e:	2e00      	cmp	r6, #0
 8005360:	db29      	blt.n	80053b6 <FF_CreateDirent+0x40a>
	{
		if( pxDirEntry != NULL )
 8005362:	f1b8 0f00 	cmp.w	r8, #0
 8005366:	d026      	beq.n	80053b6 <FF_CreateDirent+0x40a>
		{
			pxDirEntry->usCurrentItem = ( uint16_t )( lFreeEntry + xLFNCount );
 8005368:	9b04      	ldr	r3, [sp, #16]
 800536a:	441d      	add	r5, r3
 800536c:	f8a8 5014 	strh.w	r5, [r8, #20]
		}
	}

	return xReturn;
 8005370:	e021      	b.n	80053b6 <FF_CreateDirent+0x40a>
		if( FF_isERR( xReturn ) == pdFALSE )
 8005372:	2f00      	cmp	r7, #0
 8005374:	bfb8      	it	lt
 8005376:	463e      	movlt	r6, r7
 8005378:	db1a      	blt.n	80053b0 <FF_CreateDirent+0x404>
 800537a:	e77b      	b.n	8005274 <FF_CreateDirent+0x2c8>
 800537c:	4605      	mov	r5, r0
			xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800537e:	a90d      	add	r1, sp, #52	; 0x34
 8005380:	9802      	ldr	r0, [sp, #8]
 8005382:	f7fe fdb8 	bl	8003ef6 <FF_CleanupEntryFetch>
 8005386:	462e      	mov	r6, r5
 8005388:	e7e6      	b.n	8005358 <FF_CreateDirent+0x3ac>
 800538a:	a90d      	add	r1, sp, #52	; 0x34
 800538c:	9802      	ldr	r0, [sp, #8]
 800538e:	f7fe fdb2 	bl	8003ef6 <FF_CleanupEntryFetch>
BaseType_t xEntryFound = pdFALSE;
 8005392:	2700      	movs	r7, #0
 8005394:	e6f6      	b.n	8005184 <FF_CreateDirent+0x1d8>
	if( FF_isERR( xError ) == pdFALSE )
 8005396:	4605      	mov	r5, r0
 8005398:	e7f5      	b.n	8005386 <FF_CreateDirent+0x3da>
			xError = ( FF_Error_t ) ( FF_ERR_DIR_DIRECTORY_FULL | FF_FINDFREEDIRENT );
 800539a:	4d09      	ldr	r5, [pc, #36]	; (80053c0 <FF_CreateDirent+0x414>)
 800539c:	e7f3      	b.n	8005386 <FF_CreateDirent+0x3da>
			xError = uxEntry;
 800539e:	4626      	mov	r6, r4
 80053a0:	e006      	b.n	80053b0 <FF_CreateDirent+0x404>
			xReturn = FF_PushEntryWithContext( pxIOManager, ( uint16_t ) ( lFreeEntry + xLFNCount ), &xFetchContext, pucEntryBuffer );
 80053a2:	4626      	mov	r6, r4
 80053a4:	e004      	b.n	80053b0 <FF_CreateDirent+0x404>
				xError = ( FF_Error_t ) ( FF_ERR_DIR_NAME_TOO_LONG | FF_CREATELFNS );
 80053a6:	4e07      	ldr	r6, [pc, #28]	; (80053c4 <FF_CreateDirent+0x418>)
 80053a8:	e002      	b.n	80053b0 <FF_CreateDirent+0x404>
			xError = FF_InitEntryFetch( pxIOManager, ulDirCluster, &xFetchContext );
 80053aa:	461e      	mov	r6, r3
 80053ac:	e000      	b.n	80053b0 <FF_CreateDirent+0x404>
 80053ae:	462e      	mov	r6, r5
	FF_UnlockDirectory( pxIOManager );
 80053b0:	9802      	ldr	r0, [sp, #8]
 80053b2:	f003 fbb7 	bl	8008b24 <FF_UnlockDirectory>
}	/* FF_CreateDirent() */
 80053b6:	4630      	mov	r0, r6
 80053b8:	b023      	add	sp, #140	; 0x8c
 80053ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	82070033 	.word	0x82070033
 80053c4:	820a003a 	.word	0x820a003a

080053c8 <FF_CreateFile>:
#if( ffconfigUNICODE_UTF16_SUPPORT != 0 )
uint32_t FF_CreateFile( FF_IOManager_t *pxIOManager, FF_FindParams_t *pxFindParams, FF_T_WCHAR *pcFileName, FF_DirEnt_t *pxDirEntry, FF_Error_t *pxError )
#else
uint32_t FF_CreateFile( FF_IOManager_t *pxIOManager, FF_FindParams_t *pxFindParams, char *pcFileName, FF_DirEnt_t *pxDirEntry, FF_Error_t *pxError )
#endif
{
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b0c7      	sub	sp, #284	; 0x11c
 80053cc:	4604      	mov	r4, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	4615      	mov	r5, r2
 80053d2:	461e      	mov	r6, r3
FF_DirEnt_t xMyFile;
FF_Error_t xTempError, xError = FF_ERR_NONE;
 80053d4:	2100      	movs	r1, #0
 80053d6:	9101      	str	r1, [sp, #4]
uint32_t ulResult;

	memset ( &xMyFile, '\0', sizeof( xMyFile ) );
 80053d8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80053dc:	a802      	add	r0, sp, #8
 80053de:	f012 f9f5 	bl	80177cc <memset>
	{
		wcsncpy( xMyFile.pcFileName, pcFileName, ffconfigMAX_FILENAME );
	}
	#else
	{
		strncpy( xMyFile.pcFileName, pcFileName, ffconfigMAX_FILENAME );
 80053e2:	22c1      	movs	r2, #193	; 0xc1
 80053e4:	4629      	mov	r1, r5
 80053e6:	f10d 0042 	add.w	r0, sp, #66	; 0x42
 80053ea:	f012 fc76 	bl	8017cda <strncpy>
	}
	#endif

	xMyFile.ulObjectCluster = FF_CreateClusterChain( pxIOManager, &xError );
 80053ee:	a901      	add	r1, sp, #4
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fd59 	bl	8005ea8 <FF_CreateClusterChain>
 80053f6:	9003      	str	r0, [sp, #12]

	if( FF_isERR( xError ) == pdFALSE )
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db29      	blt.n	8005452 <FF_CreateFile+0x8a>
	{
		xError = FF_CreateDirent( pxIOManager, pxFindParams, &xMyFile );
 80053fe:	aa02      	add	r2, sp, #8
 8005400:	4639      	mov	r1, r7
 8005402:	4620      	mov	r0, r4
 8005404:	f7ff fdd2 	bl	8004fac <FF_CreateDirent>
 8005408:	9001      	str	r0, [sp, #4]
		if( FF_isERR( xError ) == pdFALSE )
 800540a:	2800      	cmp	r0, #0
 800540c:	db13      	blt.n	8005436 <FF_CreateFile+0x6e>
		{
			/* The new file now has a cluster chain and it has an entry
			in its directory.  Copy data to a pointer provided by caller: */
			if( pxDirEntry != NULL )
 800540e:	b12e      	cbz	r6, 800541c <FF_CreateFile+0x54>
			{
				memcpy( pxDirEntry, &xMyFile, sizeof( FF_DirEnt_t ) );
 8005410:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005414:	a902      	add	r1, sp, #8
 8005416:	4630      	mov	r0, r6
 8005418:	f012 f9b3 	bl	8017782 <memcpy>
				xMyFile.ulObjectCluster = 0ul;
			}
			FF_UnlockFAT( pxIOManager );
		}
		/* Now flush all buffers to disk. */
		xTempError = FF_FlushCache( pxIOManager );
 800541c:	4620      	mov	r0, r4
 800541e:	f002 fb65 	bl	8007aec <FF_FlushCache>
		if( FF_isERR( xError ) == pdFALSE )
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	db14      	blt.n	8005452 <FF_CreateFile+0x8a>
		{
			xError = xTempError;
		}
	}

	*pxError = xError;
 8005428:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800542a:	6018      	str	r0, [r3, #0]

	if( FF_isERR( xError ) == pdFALSE )
 800542c:	2800      	cmp	r0, #0
	{
		ulResult = xMyFile.ulObjectCluster;
 800542e:	bfac      	ite	ge
 8005430:	9803      	ldrge	r0, [sp, #12]
	}
	else
	{
		ulResult = 0;
 8005432:	2000      	movlt	r0, #0
	}

	return ulResult;
 8005434:	e011      	b.n	800545a <FF_CreateFile+0x92>
			FF_LockFAT( pxIOManager );
 8005436:	4620      	mov	r0, r4
 8005438:	f003 fbb4 	bl	8008ba4 <FF_LockFAT>
				FF_UnlinkClusterChain( pxIOManager, xMyFile.ulObjectCluster, 0 );
 800543c:	2200      	movs	r2, #0
 800543e:	9903      	ldr	r1, [sp, #12]
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fd83 	bl	8005f4c <FF_UnlinkClusterChain>
				xMyFile.ulObjectCluster = 0ul;
 8005446:	2300      	movs	r3, #0
 8005448:	9303      	str	r3, [sp, #12]
			FF_UnlockFAT( pxIOManager );
 800544a:	4620      	mov	r0, r4
 800544c:	f003 fbd2 	bl	8008bf4 <FF_UnlockFAT>
 8005450:	e7e4      	b.n	800541c <FF_CreateFile+0x54>
	*pxError = xError;
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8005456:	6013      	str	r3, [r2, #0]
		ulResult = 0;
 8005458:	2000      	movs	r0, #0
}	/* FF_CreateFile() */
 800545a:	b047      	add	sp, #284	; 0x11c
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005460 <FF_MkDir>:
#if( ffconfigUNICODE_UTF16_SUPPORT != 0 )
FF_Error_t FF_MkDir( FF_IOManager_t *pxIOManager, const FF_T_WCHAR *pcPath )
#else
FF_Error_t FF_MkDir( FF_IOManager_t *pxIOManager, const char *pcPath )
#endif
{
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	b0dc      	sub	sp, #368	; 0x170
 8005464:	4604      	mov	r4, r0
 8005466:	460d      	mov	r5, r1
	const char	*pcDirName;
#endif
uint8_t	pucEntryBuffer[ FF_SIZEOF_DIRECTORY_ENTRY ];
uint32_t ulObjectCluster;
BaseType_t xIndex;
FF_Error_t xError = FF_ERR_NONE;
 8005468:	2100      	movs	r1, #0
 800546a:	910f      	str	r1, [sp, #60]	; 0x3c

FF_FindParams_t xFindParams;

	memset ( &xFindParams, '\0', sizeof( xFindParams ) );
 800546c:	2230      	movs	r2, #48	; 0x30
 800546e:	a803      	add	r0, sp, #12
 8005470:	f012 f9ac 	bl	80177cc <memset>
	/* Inform the functions that the entry will be created if not found */
	xFindParams.ulFlags |= FIND_FLAG_CREATE_FLAG;
 8005474:	2320      	movs	r3, #32
 8005476:	9305      	str	r3, [sp, #20]

	/* Open a do {} while ( pdFALSE ) loop */
	do
	{
		if( pxIOManager == NULL )
 8005478:	b354      	cbz	r4, 80054d0 <FF_MkDir+0x70>
		{
			xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_MKDIR );
			break;
		}
#if( ffconfigREMOVABLE_MEDIA != 0 )
		if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 800547a:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 800547e:	f013 0f20 	tst.w	r3, #32
 8005482:	d128      	bne.n	80054d6 <FF_MkDir+0x76>
		{
			xIndex = ( BaseType_t ) wcslen( pcPath );
		}
		#else
		{
			xIndex = ( BaseType_t ) strlen( pcPath );
 8005484:	4628      	mov	r0, r5
 8005486:	f7fa fead 	bl	80001e4 <strlen>
 800548a:	4602      	mov	r2, r0
		}
		#endif

		/* Find the last slash in the path. */
		while( xIndex != 0 )
 800548c:	2800      	cmp	r0, #0
 800548e:	f000 80ce 	beq.w	800562e <FF_MkDir+0x1ce>
		{
			if( ( pcPath[ xIndex ] == '\\' ) || ( pcPath[ xIndex ] == '/' ) )
 8005492:	1829      	adds	r1, r5, r0
 8005494:	5c2b      	ldrb	r3, [r5, r0]
 8005496:	2b5c      	cmp	r3, #92	; 0x5c
 8005498:	d00a      	beq.n	80054b0 <FF_MkDir+0x50>
 800549a:	2b2f      	cmp	r3, #47	; 0x2f
 800549c:	d008      	beq.n	80054b0 <FF_MkDir+0x50>
		while( xIndex != 0 )
 800549e:	3a01      	subs	r2, #1
 80054a0:	f000 80c5 	beq.w	800562e <FF_MkDir+0x1ce>
			if( ( pcPath[ xIndex ] == '\\' ) || ( pcPath[ xIndex ] == '/' ) )
 80054a4:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 80054a8:	2b5c      	cmp	r3, #92	; 0x5c
 80054aa:	d001      	beq.n	80054b0 <FF_MkDir+0x50>
 80054ac:	2b2f      	cmp	r3, #47	; 0x2f
 80054ae:	d1f6      	bne.n	800549e <FF_MkDir+0x3e>
				break;
			}
			xIndex--;
		}

		pcDirName = pcPath + xIndex + 1;
 80054b0:	1c56      	adds	r6, r2, #1
 80054b2:	442e      	add	r6, r5
		if( xIndex == 0 )
		{
			xIndex = 1;
		}

		xFindParams.ulDirCluster = FF_FindDir( pxIOManager, pcPath, ( uint16_t ) xIndex, &xError );
 80054b4:	ab0f      	add	r3, sp, #60	; 0x3c
 80054b6:	b292      	uxth	r2, r2
 80054b8:	4629      	mov	r1, r5
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7ff f876 	bl	80045ac <FF_FindDir>
 80054c0:	9003      	str	r0, [sp, #12]

		if( FF_isERR( xError ) )
 80054c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	db08      	blt.n	80054da <FF_MkDir+0x7a>
		{
			break;
		}

		if( xFindParams.ulDirCluster == 0UL )
 80054c8:	b950      	cbnz	r0, 80054e0 <FF_MkDir+0x80>
		{
			xError = ( FF_Error_t ) ( FF_ERR_DIR_INVALID_PATH | FF_MKDIR );
 80054ca:	4b5a      	ldr	r3, [pc, #360]	; (8005634 <FF_MkDir+0x1d4>)
 80054cc:	930f      	str	r3, [sp, #60]	; 0x3c
			break;
 80054ce:	e004      	b.n	80054da <FF_MkDir+0x7a>
			xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_MKDIR );
 80054d0:	4b59      	ldr	r3, [pc, #356]	; (8005638 <FF_MkDir+0x1d8>)
 80054d2:	930f      	str	r3, [sp, #60]	; 0x3c
			break;
 80054d4:	e001      	b.n	80054da <FF_MkDir+0x7a>
			xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_MKDIR );
 80054d6:	4b59      	ldr	r3, [pc, #356]	; (800563c <FF_MkDir+0x1dc>)
 80054d8:	930f      	str	r3, [sp, #60]	; 0x3c
		}
		FF_FlushCache( pxIOManager );
	}
	while( pdFALSE );

	return xError;
 80054da:	980f      	ldr	r0, [sp, #60]	; 0x3c
}	/* FF_MkDir() */
 80054dc:	b05c      	add	sp, #368	; 0x170
 80054de:	bd70      	pop	{r4, r5, r6, pc}
		memset( &xMyDirectory, '\0', sizeof( xMyDirectory ) );
 80054e0:	ad18      	add	r5, sp, #96	; 0x60
 80054e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80054e6:	2100      	movs	r1, #0
 80054e8:	4628      	mov	r0, r5
 80054ea:	f012 f96f 	bl	80177cc <memset>
		FF_CreateShortName( &xFindParams, pcDirName );
 80054ee:	4631      	mov	r1, r6
 80054f0:	a803      	add	r0, sp, #12
 80054f2:	f7ff faeb 	bl	8004acc <FF_CreateShortName>
		if( FF_FindEntryInDir( pxIOManager, &xFindParams, pcDirName, 0x00, &xMyDirectory, &xError ) )
 80054f6:	ab0f      	add	r3, sp, #60	; 0x3c
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	9500      	str	r5, [sp, #0]
 80054fc:	2300      	movs	r3, #0
 80054fe:	4632      	mov	r2, r6
 8005500:	a903      	add	r1, sp, #12
 8005502:	4620      	mov	r0, r4
 8005504:	f7fe fee4 	bl	80042d0 <FF_FindEntryInDir>
 8005508:	b128      	cbz	r0, 8005516 <FF_MkDir+0xb6>
			if( FF_isERR( xError ) == pdFALSE )
 800550a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	dbe4      	blt.n	80054da <FF_MkDir+0x7a>
				xError = ( FF_Error_t ) ( FF_ERR_DIR_OBJECT_EXISTS | FF_MKDIR );
 8005510:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <FF_MkDir+0x1e0>)
 8005512:	930f      	str	r3, [sp, #60]	; 0x3c
 8005514:	e7e1      	b.n	80054da <FF_MkDir+0x7a>
		if( ( FF_isERR( xError ) ) && ( FF_GETERROR( xError ) != FF_ERR_DIR_END_OF_DIR ) )
 8005516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	db1f      	blt.n	800555c <FF_MkDir+0xfc>
			strncpy( xMyDirectory.pcFileName, pcDirName, ffconfigMAX_FILENAME );
 800551c:	22c1      	movs	r2, #193	; 0xc1
 800551e:	4631      	mov	r1, r6
 8005520:	f10d 009a 	add.w	r0, sp, #154	; 0x9a
 8005524:	f012 fbd9 	bl	8017cda <strncpy>
		xMyDirectory.ulFileSize = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	9318      	str	r3, [sp, #96]	; 0x60
		xMyDirectory.ucAttrib = FF_FAT_ATTR_DIR;
 800552c:	2310      	movs	r3, #16
 800552e:	f88d 315b 	strb.w	r3, [sp, #347]	; 0x15b
		xMyDirectory.ulObjectCluster = FF_CreateClusterChain( pxIOManager, &xError );
 8005532:	a90f      	add	r1, sp, #60	; 0x3c
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fcb7 	bl	8005ea8 <FF_CreateClusterChain>
 800553a:	9019      	str	r0, [sp, #100]	; 0x64
			FF_GetSystemTime( &xMyDirectory.xCreateTime );
 800553c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
 8005540:	f004 fbd2 	bl	8009ce8 <FF_GetSystemTime>
			FF_GetSystemTime( &xMyDirectory.xModifiedTime );
 8005544:	f10d 0082 	add.w	r0, sp, #130	; 0x82
 8005548:	f004 fbce 	bl	8009ce8 <FF_GetSystemTime>
		if( FF_isERR( xError ) )
 800554c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	dbc3      	blt.n	80054da <FF_MkDir+0x7a>
		if( xMyDirectory.ulObjectCluster == 0UL )
 8005552:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005554:	b931      	cbnz	r1, 8005564 <FF_MkDir+0x104>
			xError = ( FF_Error_t ) ( FF_ERR_DIR_EXTEND_FAILED | FF_MKDIR );
 8005556:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <FF_MkDir+0x1e4>)
 8005558:	930f      	str	r3, [sp, #60]	; 0x3c
			break;
 800555a:	e7be      	b.n	80054da <FF_MkDir+0x7a>
		if( ( FF_isERR( xError ) ) && ( FF_GETERROR( xError ) != FF_ERR_DIR_END_OF_DIR ) )
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b34      	cmp	r3, #52	; 0x34
 8005560:	d1bb      	bne.n	80054da <FF_MkDir+0x7a>
 8005562:	e7db      	b.n	800551c <FF_MkDir+0xbc>
		xError = FF_ClearCluster( pxIOManager, xMyDirectory.ulObjectCluster );
 8005564:	4620      	mov	r0, r4
 8005566:	f000 f9e9 	bl	800593c <FF_ClearCluster>
 800556a:	900f      	str	r0, [sp, #60]	; 0x3c
		if( FF_isERR( xError ) == pdFALSE )
 800556c:	2800      	cmp	r0, #0
 800556e:	db43      	blt.n	80055f8 <FF_MkDir+0x198>
			xError = FF_CreateDirent( pxIOManager, &xFindParams, &xMyDirectory );
 8005570:	aa18      	add	r2, sp, #96	; 0x60
 8005572:	a903      	add	r1, sp, #12
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff fd19 	bl	8004fac <FF_CreateDirent>
 800557a:	900f      	str	r0, [sp, #60]	; 0x3c
		if( FF_isERR( xError ) )
 800557c:	2800      	cmp	r0, #0
 800557e:	db3b      	blt.n	80055f8 <FF_MkDir+0x198>
		pucEntryBuffer[ 0 ] = '.';
 8005580:	aa10      	add	r2, sp, #64	; 0x40
 8005582:	232e      	movs	r3, #46	; 0x2e
 8005584:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		memset( pucEntryBuffer + 1, ' ', 10 );
 8005588:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
 800558c:	f8cd 3041 	str.w	r3, [sp, #65]	; 0x41
 8005590:	f8cd 3045 	str.w	r3, [sp, #69]	; 0x45
 8005594:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
		memset( pucEntryBuffer + 11, 0, FF_SIZEOF_DIRECTORY_ENTRY - 11 );
 8005598:	2100      	movs	r1, #0
 800559a:	f8cd 104b 	str.w	r1, [sp, #75]	; 0x4b
 800559e:	f8cd 104f 	str.w	r1, [sp, #79]	; 0x4f
 80055a2:	f8cd 1053 	str.w	r1, [sp, #83]	; 0x53
 80055a6:	f8cd 1057 	str.w	r1, [sp, #87]	; 0x57
 80055aa:	f8cd 105b 	str.w	r1, [sp, #91]	; 0x5b
 80055ae:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
		ulObjectCluster = xMyDirectory.ulObjectCluster;
 80055b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
		xError = FF_PutEntry( pxIOManager, ( uint16_t ) 0u, ulObjectCluster, &xMyDirectory, pucEntryBuffer );
 80055b4:	9200      	str	r2, [sp, #0]
 80055b6:	ab18      	add	r3, sp, #96	; 0x60
 80055b8:	462a      	mov	r2, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff fa08 	bl	80049d0 <FF_PutEntry>
 80055c0:	900f      	str	r0, [sp, #60]	; 0x3c
		if( FF_isERR( xError ) == pdFALSE )
 80055c2:	2800      	cmp	r0, #0
 80055c4:	db27      	blt.n	8005616 <FF_MkDir+0x1b6>
			pucEntryBuffer[ 1 ] = '.';
 80055c6:	232e      	movs	r3, #46	; 0x2e
 80055c8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
			if( xFindParams.ulDirCluster == pxIOManager->xPartition.ulRootDirCluster )
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80055d0:	4293      	cmp	r3, r2
				xMyDirectory.ulObjectCluster = 0;
 80055d2:	bf08      	it	eq
 80055d4:	2300      	moveq	r3, #0
				xMyDirectory.ulObjectCluster = xFindParams.ulDirCluster;
 80055d6:	9319      	str	r3, [sp, #100]	; 0x64
			xError = FF_PutEntry( pxIOManager, 1u, ulObjectCluster, &xMyDirectory, pucEntryBuffer );
 80055d8:	ab10      	add	r3, sp, #64	; 0x40
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	ab18      	add	r3, sp, #96	; 0x60
 80055de:	462a      	mov	r2, r5
 80055e0:	2101      	movs	r1, #1
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff f9f4 	bl	80049d0 <FF_PutEntry>
 80055e8:	900f      	str	r0, [sp, #60]	; 0x3c
			xMyDirectory.ulObjectCluster = ulObjectCluster;
 80055ea:	9519      	str	r5, [sp, #100]	; 0x64
		if( FF_isERR( xError ) )
 80055ec:	2800      	cmp	r0, #0
 80055ee:	db12      	blt.n	8005616 <FF_MkDir+0x1b6>
		FF_FlushCache( pxIOManager );
 80055f0:	4620      	mov	r0, r4
 80055f2:	f002 fa7b 	bl	8007aec <FF_FlushCache>
 80055f6:	e770      	b.n	80054da <FF_MkDir+0x7a>
			FF_LockFAT( pxIOManager );
 80055f8:	4620      	mov	r0, r4
 80055fa:	f003 fad3 	bl	8008ba4 <FF_LockFAT>
				FF_UnlinkClusterChain( pxIOManager, xMyDirectory.ulObjectCluster, 0 );
 80055fe:	2200      	movs	r2, #0
 8005600:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005602:	4620      	mov	r0, r4
 8005604:	f000 fca2 	bl	8005f4c <FF_UnlinkClusterChain>
			FF_UnlockFAT( pxIOManager );
 8005608:	4620      	mov	r0, r4
 800560a:	f003 faf3 	bl	8008bf4 <FF_UnlockFAT>
			FF_FlushCache( pxIOManager );	/* Don't override error. */
 800560e:	4620      	mov	r0, r4
 8005610:	f002 fa6c 	bl	8007aec <FF_FlushCache>
			break;
 8005614:	e761      	b.n	80054da <FF_MkDir+0x7a>
			FF_LockFAT( pxIOManager );
 8005616:	4620      	mov	r0, r4
 8005618:	f003 fac4 	bl	8008ba4 <FF_LockFAT>
				FF_UnlinkClusterChain( pxIOManager, xMyDirectory.ulObjectCluster, 0 );
 800561c:	2200      	movs	r2, #0
 800561e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fc93 	bl	8005f4c <FF_UnlinkClusterChain>
			FF_UnlockFAT( pxIOManager );
 8005626:	4620      	mov	r0, r4
 8005628:	f003 fae4 	bl	8008bf4 <FF_UnlockFAT>
 800562c:	e7e0      	b.n	80055f0 <FF_MkDir+0x190>
		pcDirName = pcPath + xIndex + 1;
 800562e:	1c6e      	adds	r6, r5, #1
			xIndex = 1;
 8005630:	2201      	movs	r2, #1
 8005632:	e73f      	b.n	80054b4 <FF_MkDir+0x54>
 8005634:	820c0036 	.word	0x820c0036
 8005638:	820c0002 	.word	0x820c0002
 800563c:	820c0008 	.word	0x820c0008
 8005640:	820c0032 	.word	0x820c0032
 8005644:	820c0039 	.word	0x820c0039

08005648 <FF_RmLFNs>:
FF_Error_t FF_RmLFNs( FF_IOManager_t *pxIOManager, uint16_t usDirEntry, FF_FetchContext_t *pxContext )
{
FF_Error_t xError = FF_ERR_NONE;
uint8_t	pucEntryBuffer[ FF_SIZEOF_DIRECTORY_ENTRY ];

	if( usDirEntry != 0 )
 8005648:	b341      	cbz	r1, 800569c <FF_RmLFNs+0x54>
{
 800564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	4616      	mov	r6, r2
 8005652:	4605      	mov	r5, r0
	{
		usDirEntry--;
 8005654:	1e4c      	subs	r4, r1, #1
 8005656:	b2a4      	uxth	r4, r4
		pBuffer[ aOffset ] = ( uint8_t ) Value;
 8005658:	27e5      	movs	r7, #229	; 0xe5
 800565a:	e010      	b.n	800567e <FF_RmLFNs+0x36>
 800565c:	f88d 7000 	strb.w	r7, [sp]
			}

			if( FF_getChar( pucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_ATTRIB ) ) == FF_FAT_ATTR_LFN )
			{
				FF_putChar( pucEntryBuffer, ( uint16_t ) 0, ( uint8_t ) FF_FAT_DELETED );
				xError = FF_PushEntryWithContext( pxIOManager, usDirEntry, pxContext, pucEntryBuffer );
 8005660:	466b      	mov	r3, sp
 8005662:	4632      	mov	r2, r6
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f7fe fcca 	bl	8004000 <FF_PushEntryWithContext>
				if( FF_isERR( xError ) )
 800566c:	2800      	cmp	r0, #0
 800566e:	db12      	blt.n	8005696 <FF_RmLFNs+0x4e>
				{
					break;
				}
			}

			if( usDirEntry == 0 )
 8005670:	b18c      	cbz	r4, 8005696 <FF_RmLFNs+0x4e>
			{
				break;
			}
			usDirEntry--;
 8005672:	3c01      	subs	r4, #1
 8005674:	b2a4      	uxth	r4, r4
		} while( FF_getChar( pucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_ATTRIB ) ) == FF_FAT_ATTR_LFN );
 8005676:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d10b      	bne.n	8005696 <FF_RmLFNs+0x4e>
			xError = FF_FetchEntryWithContext( pxIOManager, usDirEntry, pxContext, pucEntryBuffer );
 800567e:	466b      	mov	r3, sp
 8005680:	4632      	mov	r2, r6
 8005682:	4621      	mov	r1, r4
 8005684:	4628      	mov	r0, r5
 8005686:	f7fe fc43 	bl	8003f10 <FF_FetchEntryWithContext>
			if( FF_isERR( xError ) )
 800568a:	2800      	cmp	r0, #0
 800568c:	db03      	blt.n	8005696 <FF_RmLFNs+0x4e>
			if( FF_getChar( pucEntryBuffer, ( uint16_t )( FF_FAT_DIRENT_ATTRIB ) ) == FF_FAT_ATTR_LFN )
 800568e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d0e2      	beq.n	800565c <FF_RmLFNs+0x14>
	}

	return xError;
}	/* FF_RmLFNs() */
 8005696:	b008      	add	sp, #32
 8005698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
FF_Error_t xError = FF_ERR_NONE;
 800569c:	2000      	movs	r0, #0
	return xError;
 800569e:	4770      	bx	lr

080056a0 <FF_Cluster2LBA>:
uint32_t FF_Cluster2LBA( FF_IOManager_t *pxIOManager, uint32_t ulCluster )
{
uint32_t ulLBA = 0;
FF_Partition_t *pxPartition;

	if( pxIOManager != NULL )
 80056a0:	b148      	cbz	r0, 80056b6 <FF_Cluster2LBA+0x16>
	{
		pxPartition = &( pxIOManager->xPartition );

		if( ulCluster >= 2 )
 80056a2:	2901      	cmp	r1, #1
 80056a4:	d905      	bls.n	80056b2 <FF_Cluster2LBA+0x12>
		{
			ulLBA = ( ( ulCluster - 2 ) * pxPartition->ulSectorsPerCluster ) + pxPartition->ulFirstDataSector;
 80056a6:	3902      	subs	r1, #2
 80056a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80056aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80056ac:	fb02 0001 	mla	r0, r2, r1, r0
 80056b0:	4770      	bx	lr
		}
		else
		{
			ulLBA = pxPartition->ulClusterBeginLBA;
 80056b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80056b4:	4770      	bx	lr
uint32_t ulLBA = 0;
 80056b6:	2000      	movs	r0, #0
		}
	}

	return ulLBA;
}
 80056b8:	4770      	bx	lr

080056ba <FF_getClusterChainNumber>:
where e.g. 'ulEntry' may be a sequence number of a directory entry for
which ulEntrySize = 32 bytes.
*/
uint32_t FF_getClusterChainNumber( FF_IOManager_t *pxIOManager, uint32_t ulEntry, uint32_t ulEntrySize )
{
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 80056ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80056be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80056c0:	fb00 f003 	mul.w	r0, r0, r3
uint32_t ulEntriesPerCluster =  ( ulBytesPerCluster / ulEntrySize );
 80056c4:	fbb0 f0f2 	udiv	r0, r0, r2

	/* E.g. ulBytesPerCluster = 16384, ulEntrySize = 32: 16384 / 32 = 512 entries per cluster. */
	return ulEntry / ulEntriesPerCluster;
}
 80056c8:	fbb1 f0f0 	udiv	r0, r1, r0
 80056cc:	4770      	bx	lr

080056ce <FF_getClusterPosition>:
/*-----------------------------------------------------------*/

/* If the above function returns a cluster number, this function
returns a BYTE position within that cluster. */
uint32_t FF_getClusterPosition( FF_IOManager_t *pxIOManager, uint32_t ulEntry, uint32_t ulEntrySize )
{
 80056ce:	b410      	push	{r4}
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 80056d0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80056d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056d6:	fb03 f304 	mul.w	r3, r3, r4
uint32_t ulEntriesPerCluster =  ( ulBytesPerCluster / ulEntrySize );
 80056da:	fbb3 f3f2 	udiv	r3, r3, r2

	/* Return the block offset within the current cluster: */
	return ( ulEntry % ulEntriesPerCluster ) * ulEntrySize;
 80056de:	fbb1 f0f3 	udiv	r0, r1, r3
 80056e2:	fb00 1013 	mls	r0, r0, r3, r1
}
 80056e6:	fb02 f000 	mul.w	r0, r2, r0
 80056ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <FF_getMajorBlockNumber>:
/*-----------------------------------------------------------*/

/* Return the block offset (= number of major blocks) within the current cluster: */
uint32_t FF_getMajorBlockNumber( FF_IOManager_t *pxIOManager, uint32_t ulEntry, uint32_t ulEntrySize )
{
 80056f0:	b410      	push	{r4}
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 80056f2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80056f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80056f8:	fb00 f003 	mul.w	r0, r0, r3
uint32_t ulEntriesPerCluster = ( ulBytesPerCluster / ulEntrySize );
 80056fc:	fbb0 f0f2 	udiv	r0, r0, r2
uint32_t ulRelClusterEntry;

	/* Calculate the entry number within a cluster: */
	ulRelClusterEntry = ulEntry % ulEntriesPerCluster;
 8005700:	fbb1 f4f0 	udiv	r4, r1, r0
 8005704:	fb04 1110 	mls	r1, r4, r0, r1

	/* Return the block offset within the current cluster: */
	return ulRelClusterEntry / ( pxIOManager->xPartition.usBlkSize / ulEntrySize );
 8005708:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800570c:	fbb1 f0f0 	udiv	r0, r1, r0
 8005710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005714:	4770      	bx	lr

08005716 <FF_getMinorBlockNumber>:
/*-----------------------------------------------------------*/

/* Return the minor block number within the current major block */
uint32_t FF_getMinorBlockNumber( FF_IOManager_t *pxIOManager, uint32_t ulEntry, uint32_t ulEntrySize )
{
 8005716:	b430      	push	{r4, r5}
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 8005718:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800571c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800571e:	fb03 f304 	mul.w	r3, r3, r4
uint32_t ulEntriesPerCluster = ( ulBytesPerCluster / ulEntrySize );
 8005722:	fbb3 f3f2 	udiv	r3, r3, r2
uint32_t ulRelClusterEntry;
uint32_t ulRelMajorBlockEntry;

	/* Calculate the entry number within a cluster: */
	ulRelClusterEntry = ulEntry % ulEntriesPerCluster;
 8005726:	fbb1 f5f3 	udiv	r5, r1, r3
 800572a:	fb05 1113 	mls	r1, r5, r3, r1

	ulRelMajorBlockEntry = ulRelClusterEntry % ( pxIOManager->xPartition.usBlkSize / ulEntrySize );
 800572e:	fbb4 f4f2 	udiv	r4, r4, r2
 8005732:	fbb1 f3f4 	udiv	r3, r1, r4
 8005736:	fb04 1413 	mls	r4, r4, r3, r1

	return ulRelMajorBlockEntry / ( pxIOManager->usSectorSize / ulEntrySize );
 800573a:	f8b0 56b0 	ldrh.w	r5, [r0, #1712]	; 0x6b0
 800573e:	fbb5 f2f2 	udiv	r2, r5, r2
}
 8005742:	fbb4 f0f2 	udiv	r0, r4, r2
 8005746:	bc30      	pop	{r4, r5}
 8005748:	4770      	bx	lr

0800574a <FF_getMinorBlockEntry>:
/*-----------------------------------------------------------*/

/* Get the entry number within the minor block */
uint32_t FF_getMinorBlockEntry( FF_IOManager_t *pxIOManager, uint32_t ulEntry, uint32_t ulEntrySize )
{
 800574a:	b430      	push	{r4, r5}
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 800574c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8005750:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005752:	fb03 f304 	mul.w	r3, r3, r4
uint32_t ulEntriesPerCluster =  ( ulBytesPerCluster / ulEntrySize );
 8005756:	fbb3 f3f2 	udiv	r3, r3, r2
uint32_t ulRelClusterEntry;
uint32_t ulRelMajorBlockEntry;

	/* Calculate the entry number within a cluster: */
	ulRelClusterEntry = ulEntry % ulEntriesPerCluster;
 800575a:	fbb1 f5f3 	udiv	r5, r1, r3
 800575e:	fb05 1113 	mls	r1, r5, r3, r1

	ulRelMajorBlockEntry = ulRelClusterEntry % ( pxIOManager->xPartition.usBlkSize / ulEntrySize );
 8005762:	fbb4 f4f2 	udiv	r4, r4, r2
 8005766:	fbb1 f3f4 	udiv	r3, r1, r4
 800576a:	fb04 1413 	mls	r4, r4, r3, r1

	return ulRelMajorBlockEntry % ( pxIOManager->usSectorSize / ulEntrySize );
 800576e:	f8b0 56b0 	ldrh.w	r5, [r0, #1712]	; 0x6b0
 8005772:	fbb5 f2f2 	udiv	r2, r5, r2
 8005776:	fbb4 f0f2 	udiv	r0, r4, r2
}
 800577a:	fb02 4010 	mls	r0, r2, r0, r4
 800577e:	bc30      	pop	{r4, r5}
 8005780:	4770      	bx	lr

08005782 <FF_ReleaseFATBuffers>:
/*-----------------------------------------------------------*/

FF_Error_t FF_ReleaseFATBuffers( FF_IOManager_t *pxIOManager, FF_FATBuffers_t *pxFATBuffers )
{
 8005782:	b570      	push	{r4, r5, r6, lr}
 8005784:	4606      	mov	r6, r0
 8005786:	460c      	mov	r4, r1
	#warning Only maintaining one FAT table
#endif
	/* 'ffconfigBUF_STORE_COUNT' equals to the number of FAT tables. */
	for( xIndex = 0; xIndex < ffconfigBUF_STORE_COUNT; xIndex++ )
	{
		pxBuffer = pxFATBuffers->pxBuffers[ xIndex ];
 8005788:	6809      	ldr	r1, [r1, #0]
		if( pxBuffer != NULL )
 800578a:	b189      	cbz	r1, 80057b0 <FF_ReleaseFATBuffers+0x2e>
		{
		FF_Error_t xTempError = FF_ERR_NONE;

			pxFATBuffers->pxBuffers[ xIndex ] = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	6023      	str	r3, [r4, #0]
			xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005790:	f002 fad8 	bl	8007d44 <FF_ReleaseBuffer>
 8005794:	4605      	mov	r5, r0
		pxBuffer = pxFATBuffers->pxBuffers[ xIndex ];
 8005796:	6861      	ldr	r1, [r4, #4]
		if( pxBuffer != NULL )
 8005798:	b141      	cbz	r1, 80057ac <FF_ReleaseFATBuffers+0x2a>
			pxFATBuffers->pxBuffers[ xIndex ] = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	6063      	str	r3, [r4, #4]
			xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 800579e:	4630      	mov	r0, r6
 80057a0:	f002 fad0 	bl	8007d44 <FF_ReleaseBuffer>
 80057a4:	ea15 0525 	ands.w	r5, r5, r5, asr #32
 80057a8:	bf38      	it	cc
 80057aa:	4605      	movcc	r5, r0
		fatStat.clearCount++;
	}
	#endif /* ffconfigFAT_USES_STAT */

	return xError;
}
 80057ac:	4628      	mov	r0, r5
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
FF_Error_t xError = FF_ERR_NONE;
 80057b0:	2500      	movs	r5, #0
 80057b2:	e7f0      	b.n	8005796 <FF_ReleaseFATBuffers+0x14>

080057b4 <prvGetFromFATBuffers>:
/*-----------------------------------------------------------*/

FF_Buffer_t *prvGetFromFATBuffers( FF_IOManager_t *pxIOManager, FF_FATBuffers_t *pxFATBuffers, BaseType_t xBufferIndex,
	uint32_t ulFATSector, FF_Error_t *pxError, uint8_t ucMode )
{
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	4606      	mov	r6, r0
 80057b8:	461d      	mov	r5, r3
 80057ba:	f89d 701c 	ldrb.w	r7, [sp, #28]
FF_Error_t xError = FF_ERR_NONE;
FF_Buffer_t *pxBuffer = NULL;

	if( pxFATBuffers != NULL )
 80057be:	b1e9      	cbz	r1, 80057fc <prvGetFromFATBuffers+0x48>
 80057c0:	460b      	mov	r3, r1
	{
		/* See if the same buffer can be reused. */
		pxBuffer = pxFATBuffers->pxBuffers[ xBufferIndex ];
 80057c2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]

		if( pxBuffer != NULL )
 80057c6:	b320      	cbz	r0, 8005812 <prvGetFromFATBuffers+0x5e>
		{
			/* Now the buffer is either owned by pxBuffer,
			or it has been released, so put it to NULL. */
			pxFATBuffers->pxBuffers[ xBufferIndex ] = NULL;
 80057c8:	2100      	movs	r1, #0
 80057ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			if(
 80057ce:	6803      	ldr	r3, [r0, #0]
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	d00a      	beq.n	80057ea <prvGetFromFATBuffers+0x36>
				}
				#endif /* ffconfigFAT_USES_STAT */
			}
			else
			{
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80057d4:	4601      	mov	r1, r0
 80057d6:	4630      	mov	r0, r6
 80057d8:	f002 fab4 	bl	8007d44 <FF_ReleaseBuffer>
			}
			#endif /* ffconfigFAT_USES_STAT */
		}
	}

	if( ( pxBuffer == NULL ) && ( FF_isERR( xError ) == pdFALSE ) )
 80057dc:	1e04      	subs	r4, r0, #0
 80057de:	bfb8      	it	lt
 80057e0:	2000      	movlt	r0, #0
 80057e2:	da0c      	bge.n	80057fe <prvGetFromFATBuffers+0x4a>
			/* Setting an error code without the Module/Function,
			will be filled-in by the caller. */
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_ERRFLAG );
		}
	}
	*pxError = xError;
 80057e4:	9b06      	ldr	r3, [sp, #24]
 80057e6:	601c      	str	r4, [r3, #0]

	return pxBuffer;
}
 80057e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( pxBuffer->ulSector == ulFATSector ) &&
 80057ea:	f017 0f02 	tst.w	r7, #2
 80057ee:	d012      	beq.n	8005816 <prvGetFromFATBuffers+0x62>
				( ( ( ucMode & FF_MODE_WRITE ) == 0 ) ||
 80057f0:	7b03      	ldrb	r3, [r0, #12]
 80057f2:	f013 0f02 	tst.w	r3, #2
 80057f6:	d0ed      	beq.n	80057d4 <prvGetFromFATBuffers+0x20>
 80057f8:	2400      	movs	r4, #0
 80057fa:	e7f3      	b.n	80057e4 <prvGetFromFATBuffers+0x30>
 80057fc:	2400      	movs	r4, #0
		pxBuffer = FF_GetBuffer( pxIOManager, ulFATSector, ucMode );
 80057fe:	463a      	mov	r2, r7
 8005800:	4629      	mov	r1, r5
 8005802:	4630      	mov	r0, r6
 8005804:	f002 f9d4 	bl	8007bb0 <FF_GetBuffer>
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_ERRFLAG );
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <prvGetFromFATBuffers+0x68>)
 800580a:	2800      	cmp	r0, #0
 800580c:	bf08      	it	eq
 800580e:	461c      	moveq	r4, r3
 8005810:	e7e8      	b.n	80057e4 <prvGetFromFATBuffers+0x30>
 8005812:	2400      	movs	r4, #0
 8005814:	e7f3      	b.n	80057fe <prvGetFromFATBuffers+0x4a>
 8005816:	2400      	movs	r4, #0
 8005818:	e7e4      	b.n	80057e4 <prvGetFromFATBuffers+0x30>
 800581a:	bf00      	nop
 800581c:	80000004 	.word	0x80000004

08005820 <FF_getFATEntry>:
/*-----------------------------------------------------------*/


/* Get a FAT entry, which is nothing more than a number referring to a sector. */
uint32_t FF_getFATEntry( FF_IOManager_t *pxIOManager, uint32_t ulCluster, FF_Error_t *pxError, FF_FATBuffers_t *pxFATBuffers )
{
 8005820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005824:	b085      	sub	sp, #20
 8005826:	4604      	mov	r4, r0
 8005828:	460d      	mov	r5, r1
 800582a:	4617      	mov	r7, r2
uint32_t ulFATSectorEntry;
/* The function result. */
uint32_t ulFATEntry = 0;
uint32_t ulLBAAdjust;
uint32_t ulRelClusterEntry = 0;
FF_Error_t xError = FF_ERR_NONE;
 800582c:	2200      	movs	r2, #0
 800582e:	9203      	str	r2, [sp, #12]
/* preferred mode, user might want to update this entry. */
uint8_t ucMode = pxFATBuffers ? pxFATBuffers->ucMode : FF_MODE_READ;
 8005830:	461e      	mov	r6, r3
 8005832:	b183      	cbz	r3, 8005856 <FF_getFATEntry+0x36>
 8005834:	f893 9008 	ldrb.w	r9, [r3, #8]

	FF_Assert_Lock( pxIOManager, FF_FAT_LOCK );
 8005838:	2101      	movs	r1, #1
 800583a:	4620      	mov	r0, r4
 800583c:	f003 f99e 	bl	8008b7c <FF_Assert_Lock>

	if( ulCluster >= pxIOManager->xPartition.ulNumClusters )
 8005840:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005842:	42ab      	cmp	r3, r5
 8005844:	d80a      	bhi.n	800585c <FF_getFATEntry+0x3c>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
			}
		}	/* if( FF_isERR( xError ) == pdFALSE ) */
	}	/* else Handle FAT16, FAT32, and FAT12 (in case the entry lies on a single sector). */

	if( FF_isERR( xError ) )
 8005846:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <FF_getFATEntry+0x118>)
	{
		/* The sector address 0 is not meaningful and here it is used as the 'error value'. */
		ulFATEntry = 0UL;
 8005848:	2500      	movs	r5, #0
	}

	if( pxError != NULL )
 800584a:	b107      	cbz	r7, 800584e <FF_getFATEntry+0x2e>
	{
		*pxError = xError;
 800584c:	603a      	str	r2, [r7, #0]
	}

	return ( int32_t )ulFATEntry;
}	/* FF_getFATEntry() */
 800584e:	4628      	mov	r0, r5
 8005850:	b005      	add	sp, #20
 8005852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
uint8_t ucMode = pxFATBuffers ? pxFATBuffers->ucMode : FF_MODE_READ;
 8005856:	f04f 0901 	mov.w	r9, #1
 800585a:	e7ed      	b.n	8005838 <FF_getFATEntry+0x18>
		if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 800585c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d043      	beq.n	80058ec <FF_getFATEntry+0xcc>
		else if( pxIOManager->xPartition.ucType == FF_T_FAT16 )
 8005864:	2b0b      	cmp	r3, #11
			ulFATOffset = ulCluster * 2;
 8005866:	bf0c      	ite	eq
 8005868:	006d      	lsleq	r5, r5, #1
			ulFATOffset = ulCluster + ( ulCluster / 2 );
 800586a:	eb05 0555 	addne.w	r5, r5, r5, lsr #1
		ulFATSector = pxIOManager->xPartition.ulFATBeginLBA + ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 800586e:	f8b4 8050 	ldrh.w	r8, [r4, #80]	; 0x50
		ulFATSectorEntry = ulFATOffset % pxIOManager->xPartition.usBlkSize;
 8005872:	fbb5 f2f8 	udiv	r2, r5, r8
 8005876:	fb08 5512 	mls	r5, r8, r2, r5
		ulLBAAdjust = ulFATSectorEntry / ( ( uint32_t ) pxIOManager->usSectorSize );
 800587a:	f8b4 86b0 	ldrh.w	r8, [r4, #1712]	; 0x6b0
		ulRelClusterEntry = ulFATSectorEntry % pxIOManager->usSectorSize;
 800587e:	fbb5 f3f8 	udiv	r3, r5, r8
 8005882:	fb08 5813 	mls	r8, r8, r3, r5
		ulFATSector = pxIOManager->xPartition.ulFATBeginLBA + ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 8005886:	6921      	ldr	r1, [r4, #16]
 8005888:	440a      	add	r2, r1
	return LBA * pxIOManager->xPartition.ucBlkFactor;
 800588a:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
		ulFATSector += ulLBAAdjust;
 800588e:	fb01 3302 	mla	r3, r1, r2, r3
	if( FF_isERR( xError ) == pdFALSE )
 8005892:	9a03      	ldr	r2, [sp, #12]
 8005894:	2a00      	cmp	r2, #0
 8005896:	db4d      	blt.n	8005934 <FF_getFATEntry+0x114>
		pxBuffer = prvGetFromFATBuffers( pxIOManager, pxFATBuffers, 0, ulFATSector, &xError, ucMode );
 8005898:	f8cd 9004 	str.w	r9, [sp, #4]
 800589c:	aa03      	add	r2, sp, #12
 800589e:	9200      	str	r2, [sp, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	4631      	mov	r1, r6
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7ff ff85 	bl	80057b4 <prvGetFromFATBuffers>
		if( FF_isERR( xError ) )
 80058aa:	9a03      	ldr	r2, [sp, #12]
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	db1f      	blt.n	80058f0 <FF_getFATEntry+0xd0>
			switch( pxIOManager->xPartition.ucType )
 80058b0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80058b4:	2b0b      	cmp	r3, #11
 80058b6:	d027      	beq.n	8005908 <FF_getFATEntry+0xe8>
 80058b8:	2b0c      	cmp	r3, #12
 80058ba:	d133      	bne.n	8005924 <FF_getFATEntry+0x104>
		pBuffer += aOffset;
 80058bc:	6881      	ldr	r1, [r0, #8]
 80058be:	eb01 0308 	add.w	r3, r1, r8
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80058c2:	f893 e003 	ldrb.w	lr, [r3, #3]
 80058c6:	2500      	movs	r5, #0
 80058c8:	f36e 651f 	bfi	r5, lr, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80058cc:	f893 e002 	ldrb.w	lr, [r3, #2]
 80058d0:	f36e 4517 	bfi	r5, lr, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	f363 250f 	bfi	r5, r3, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80058da:	f811 3008 	ldrb.w	r3, [r1, r8]
 80058de:	f363 0507 	bfi	r5, r3, #0, #8
					ulFATEntry &= 0x0fffffff;
 80058e2:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			if( pxFATBuffers != NULL )
 80058e6:	b1fe      	cbz	r6, 8005928 <FF_getFATEntry+0x108>
				pxFATBuffers->pxBuffers[ 0 ] = pxBuffer;
 80058e8:	6030      	str	r0, [r6, #0]
 80058ea:	e7ae      	b.n	800584a <FF_getFATEntry+0x2a>
			ulFATOffset = ulCluster * 4;
 80058ec:	00ad      	lsls	r5, r5, #2
 80058ee:	e7be      	b.n	800586e <FF_getFATEntry+0x4e>
			xError = FF_GETERROR( xError ) | FF_GETFATENTRY;
 80058f0:	b292      	uxth	r2, r2
 80058f2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80058f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058fa:	9203      	str	r2, [sp, #12]
uint32_t ulFATEntry = 0;
 80058fc:	2500      	movs	r5, #0
	if( FF_isERR( xError ) )
 80058fe:	9a03      	ldr	r2, [sp, #12]
		ulFATEntry = 0UL;
 8005900:	2a00      	cmp	r2, #0
 8005902:	bfb8      	it	lt
 8005904:	2500      	movlt	r5, #0
 8005906:	e7a0      	b.n	800584a <FF_getFATEntry+0x2a>
		pBuffer += aOffset;
 8005908:	6883      	ldr	r3, [r0, #8]
 800590a:	eb03 0108 	add.w	r1, r3, r8
		u16.bytes.u8_1 = pBuffer[ 1 ];
 800590e:	7849      	ldrb	r1, [r1, #1]
 8005910:	f04f 0500 	mov.w	r5, #0
 8005914:	f361 250f 	bfi	r5, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8005918:	f813 3008 	ldrb.w	r3, [r3, r8]
 800591c:	f363 0507 	bfi	r5, r3, #0, #8
		return u16.u16;
 8005920:	b2ad      	uxth	r5, r5
					break;
 8005922:	e7e0      	b.n	80058e6 <FF_getFATEntry+0xc6>
					ulFATEntry = 0;
 8005924:	2500      	movs	r5, #0
 8005926:	e7de      	b.n	80058e6 <FF_getFATEntry+0xc6>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005928:	4601      	mov	r1, r0
 800592a:	4620      	mov	r0, r4
 800592c:	f002 fa0a 	bl	8007d44 <FF_ReleaseBuffer>
 8005930:	9003      	str	r0, [sp, #12]
 8005932:	e7e4      	b.n	80058fe <FF_getFATEntry+0xde>
		ulFATEntry = 0UL;
 8005934:	2500      	movs	r5, #0
 8005936:	e788      	b.n	800584a <FF_getFATEntry+0x2a>
 8005938:	84010016 	.word	0x84010016

0800593c <FF_ClearCluster>:
/*-----------------------------------------------------------*/

/* Write all zero's to all sectors of a given cluster. */
FF_Error_t FF_ClearCluster( FF_IOManager_t *pxIOManager, uint32_t ulCluster )
{
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	b083      	sub	sp, #12
 8005942:	4605      	mov	r5, r0
FF_Buffer_t *pxBuffer = NULL;
BaseType_t xIndex;
uint32_t ulBaseLBA;

	/* Calculate from cluster number to a real block address. */
	ulBaseLBA = FF_Cluster2LBA( pxIOManager, ulCluster );
 8005944:	f7ff feac 	bl	80056a0 <FF_Cluster2LBA>
 8005948:	f895 7055 	ldrb.w	r7, [r5, #85]	; 0x55
 800594c:	fb00 f707 	mul.w	r7, r0, r7
	ulBaseLBA = FF_getRealLBA( pxIOManager, ulBaseLBA );

	for( xIndex = 0; xIndex < ( BaseType_t ) pxIOManager->xPartition.ulSectorsPerCluster; xIndex++ )
 8005950:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	dd38      	ble.n	80059c8 <FF_ClearCluster+0x8c>
 8005956:	2400      	movs	r4, #0
 8005958:	4626      	mov	r6, r4
	{
		if( xIndex == 0 )
		{
			/* When using the FF_MODE_WR_ONLY flag, the data will not be read from disk.
			Only in the first round a buffer will be claimed. */
			pxBuffer = FF_GetBuffer( pxIOManager, ulBaseLBA, FF_MODE_WR_ONLY );
 800595a:	f04f 0a42 	mov.w	sl, #66	; 0x42
			if( pxBuffer == NULL )
			{
				xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_CLEARCLUSTER );
				break;
			}
			memset( pxBuffer->pucBuffer, 0x00, pxIOManager->usSectorSize );
 800595e:	46a0      	mov	r8, r4
		}

		xError = FF_BlockWrite( pxIOManager, ulBaseLBA + xIndex, 1, pxBuffer->pucBuffer, pdFALSE );
 8005960:	f04f 0901 	mov.w	r9, #1
 8005964:	e00e      	b.n	8005984 <FF_ClearCluster+0x48>
 8005966:	68b3      	ldr	r3, [r6, #8]
 8005968:	f8cd 8000 	str.w	r8, [sp]
 800596c:	464a      	mov	r2, r9
 800596e:	19e1      	adds	r1, r4, r7
 8005970:	4628      	mov	r0, r5
 8005972:	f002 f883 	bl	8007a7c <FF_BlockWrite>
		if( FF_isERR( xError ) )
 8005976:	f1b0 0b00 	subs.w	fp, r0, #0
 800597a:	db13      	blt.n	80059a4 <FF_ClearCluster+0x68>
	for( xIndex = 0; xIndex < ( BaseType_t ) pxIOManager->xPartition.ulSectorsPerCluster; xIndex++ )
 800597c:	3401      	adds	r4, #1
 800597e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005980:	42a3      	cmp	r3, r4
 8005982:	dd0f      	ble.n	80059a4 <FF_ClearCluster+0x68>
		if( xIndex == 0 )
 8005984:	2c00      	cmp	r4, #0
 8005986:	d1ee      	bne.n	8005966 <FF_ClearCluster+0x2a>
			pxBuffer = FF_GetBuffer( pxIOManager, ulBaseLBA, FF_MODE_WR_ONLY );
 8005988:	4652      	mov	r2, sl
 800598a:	4639      	mov	r1, r7
 800598c:	4628      	mov	r0, r5
 800598e:	f002 f90f 	bl	8007bb0 <FF_GetBuffer>
			if( pxBuffer == NULL )
 8005992:	4606      	mov	r6, r0
 8005994:	b1d0      	cbz	r0, 80059cc <FF_ClearCluster+0x90>
			memset( pxBuffer->pucBuffer, 0x00, pxIOManager->usSectorSize );
 8005996:	f8b5 26b0 	ldrh.w	r2, [r5, #1712]	; 0x6b0
 800599a:	4641      	mov	r1, r8
 800599c:	6880      	ldr	r0, [r0, #8]
 800599e:	f011 ff15 	bl	80177cc <memset>
 80059a2:	e7e0      	b.n	8005966 <FF_ClearCluster+0x2a>
		{
			break;
		}
	}

	if( pxBuffer != NULL )
 80059a4:	b176      	cbz	r6, 80059c4 <FF_ClearCluster+0x88>
	{
	FF_Error_t xTempError;

		/* The contents of the buffer (all zero's) has been written explicitly to disk
		by calling FF_BlockWrite().  Therefore, the bModified should be cleared. */
		pxBuffer->bModified = pdFALSE;
 80059a6:	7b73      	ldrb	r3, [r6, #13]
 80059a8:	f36f 0300 	bfc	r3, #0, #1
 80059ac:	7373      	strb	r3, [r6, #13]
		/* Releasing the handle will not write anything */
		xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	f002 f9c7 	bl	8007d44 <FF_ReleaseBuffer>
 80059b6:	ea30 002b 	bics.w	r0, r0, fp, asr #32
 80059ba:	bf28      	it	cs
 80059bc:	4658      	movcs	r0, fp
			xError = xTempError;
		}
	}

	return xError;
}
 80059be:	b003      	add	sp, #12
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	4658      	mov	r0, fp
 80059c6:	e7fa      	b.n	80059be <FF_ClearCluster+0x82>
FF_Error_t xError = FF_ERR_NONE;
 80059c8:	2000      	movs	r0, #0
 80059ca:	e7f8      	b.n	80059be <FF_ClearCluster+0x82>
				xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_CLEARCLUSTER );
 80059cc:	4800      	ldr	r0, [pc, #0]	; (80059d0 <FF_ClearCluster+0x94>)
 80059ce:	e7f6      	b.n	80059be <FF_ClearCluster+0x82>
 80059d0:	84020004 	.word	0x84020004

080059d4 <FF_isEndOfChain>:
 **/
BaseType_t FF_isEndOfChain( FF_IOManager_t *pxIOManager, uint32_t ulFATEntry )
{
BaseType_t	xResult = pdFALSE;

	if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 80059d4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d00d      	beq.n	80059f8 <FF_isEndOfChain+0x24>
		if( ( ulFATEntry & 0x0fffffff ) >= 0x0ffffff8 )
		{
			xResult = pdTRUE;
		}
	}
	else if( pxIOManager->xPartition.ucType == FF_T_FAT16 )
 80059dc:	2b0b      	cmp	r3, #11
	{
		if( ulFATEntry >= 0x0000fff8 )
 80059de:	bf0c      	ite	eq
 80059e0:	f64f 70f7 	movweq	r0, #65527	; 0xfff7
			xResult = pdTRUE;
		}
	}
	else
	{
		if( ulFATEntry >= 0x00000ff8 )
 80059e4:	f640 70f7 	movwne	r0, #4087	; 0xff7
 80059e8:	4281      	cmp	r1, r0
 80059ea:	bf94      	ite	ls
 80059ec:	2000      	movls	r0, #0
 80059ee:	2001      	movhi	r0, #1
		}
	}

	if( ulFATEntry == 0x00000000 )
	{
		xResult = pdTRUE;	/* Perhaps trying to read a deleted file! */
 80059f0:	2900      	cmp	r1, #0
	}

	return xResult;
}
 80059f2:	bf08      	it	eq
 80059f4:	2001      	moveq	r0, #1
 80059f6:	4770      	bx	lr
		if( ( ulFATEntry & 0x0fffffff ) >= 0x0ffffff8 )
 80059f8:	f021 4070 	bic.w	r0, r1, #4026531840	; 0xf0000000
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <FF_isEndOfChain+0x34>)
 80059fe:	4298      	cmp	r0, r3
 8005a00:	bf94      	ite	ls
 8005a02:	2000      	movls	r0, #0
 8005a04:	2001      	movhi	r0, #1
 8005a06:	e7f3      	b.n	80059f0 <FF_isEndOfChain+0x1c>
 8005a08:	0ffffff7 	.word	0x0ffffff7

08005a0c <FF_TraverseFAT>:
{
 8005a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	4690      	mov	r8, r2
 8005a18:	4699      	mov	r9, r3
FF_Error_t xError = FF_ERR_NONE;
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	9403      	str	r4, [sp, #12]
BaseType_t xTakeLock = FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE;
 8005a1e:	2101      	movs	r1, #1
 8005a20:	f003 f898 	bl	8008b54 <FF_Has_Lock>
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 8005a24:	9400      	str	r4, [sp, #0]
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 8005a26:	9401      	str	r4, [sp, #4]
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f88d 3008 	strb.w	r3, [sp, #8]
	if( xTakeLock )
 8005a2e:	4682      	mov	sl, r0
 8005a30:	b1c0      	cbz	r0, 8005a64 <FF_TraverseFAT+0x58>
	for( ulIndex = 0; ulIndex < ulCount; ulIndex++ )
 8005a32:	463c      	mov	r4, r7
 8005a34:	f1b8 0f00 	cmp.w	r8, #0
 8005a38:	d023      	beq.n	8005a82 <FF_TraverseFAT+0x76>
{
 8005a3a:	2500      	movs	r5, #0
		ulFatEntry = FF_getFATEntry( pxIOManager, ulCurrentCluster, &xError, &xFATBuffers );
 8005a3c:	466b      	mov	r3, sp
 8005a3e:	aa03      	add	r2, sp, #12
 8005a40:	4639      	mov	r1, r7
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff feec 	bl	8005820 <FF_getFATEntry>
 8005a48:	4604      	mov	r4, r0
		if( FF_isERR( xError ) )
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db14      	blt.n	8005a7a <FF_TraverseFAT+0x6e>
		if( FF_isEndOfChain( pxIOManager, ulFatEntry ) )
 8005a50:	4601      	mov	r1, r0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7ff ffbe 	bl	80059d4 <FF_isEndOfChain>
 8005a58:	bb10      	cbnz	r0, 8005aa0 <FF_TraverseFAT+0x94>
	for( ulIndex = 0; ulIndex < ulCount; ulIndex++ )
 8005a5a:	3501      	adds	r5, #1
		ulFatEntry = FF_getFATEntry( pxIOManager, ulCurrentCluster, &xError, &xFATBuffers );
 8005a5c:	4627      	mov	r7, r4
	for( ulIndex = 0; ulIndex < ulCount; ulIndex++ )
 8005a5e:	45a8      	cmp	r8, r5
 8005a60:	d8ec      	bhi.n	8005a3c <FF_TraverseFAT+0x30>
 8005a62:	e00b      	b.n	8005a7c <FF_TraverseFAT+0x70>
		FF_LockFAT( pxIOManager );
 8005a64:	4630      	mov	r0, r6
 8005a66:	f003 f89d 	bl	8008ba4 <FF_LockFAT>
	for( ulIndex = 0; ulIndex < ulCount; ulIndex++ )
 8005a6a:	f1b8 0f00 	cmp.w	r8, #0
 8005a6e:	d1e4      	bne.n	8005a3a <FF_TraverseFAT+0x2e>
 8005a70:	463c      	mov	r4, r7
		FF_UnlockFAT( pxIOManager );
 8005a72:	4630      	mov	r0, r6
 8005a74:	f003 f8be 	bl	8008bf4 <FF_UnlockFAT>
 8005a78:	e003      	b.n	8005a82 <FF_TraverseFAT+0x76>
			ulFatEntry = 0;
 8005a7a:	2400      	movs	r4, #0
	if( xTakeLock )
 8005a7c:	f1ba 0f00 	cmp.w	sl, #0
 8005a80:	d0f7      	beq.n	8005a72 <FF_TraverseFAT+0x66>
		xTempError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 8005a82:	4669      	mov	r1, sp
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff fe7c 	bl	8005782 <FF_ReleaseFATBuffers>
		if( FF_isERR( xError ) == pdFALSE )
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db00      	blt.n	8005a92 <FF_TraverseFAT+0x86>
			xError = xTempError;
 8005a90:	9003      	str	r0, [sp, #12]
	*pxError = xError;
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	f8c9 3000 	str.w	r3, [r9]
}
 8005a98:	4620      	mov	r0, r4
 8005a9a:	b004      	add	sp, #16
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	463c      	mov	r4, r7
 8005aa2:	e7eb      	b.n	8005a7c <FF_TraverseFAT+0x70>

08005aa4 <FF_FindEndOfChain>:
{
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	4615      	mov	r5, r2
	if( FF_isEndOfChain( pxIOManager, ulStart ) == pdFALSE )
 8005aae:	f7ff ff91 	bl	80059d4 <FF_isEndOfChain>
 8005ab2:	b130      	cbz	r0, 8005ac2 <FF_FindEndOfChain+0x1e>
		xError = FF_ERR_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9301      	str	r3, [sp, #4]
uint32_t ulFatEntry = ulStart;
 8005ab8:	4620      	mov	r0, r4
	*pxError = xError;
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	602b      	str	r3, [r5, #0]
}
 8005abe:	b002      	add	sp, #8
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
		ulFatEntry = FF_TraverseFAT( pxIOManager, ulStart, ~0UL, &xError );
 8005ac2:	ab01      	add	r3, sp, #4
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ac8:	4621      	mov	r1, r4
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ff9e 	bl	8005a0c <FF_TraverseFAT>
 8005ad0:	e7f3      	b.n	8005aba <FF_FindEndOfChain+0x16>
	...

08005ad4 <FF_putFATEntry>:
 *	@param	pxIOManager		IOMAN object.
 *	@param	ulCluster	Cluster Number to be modified.
 *	@param	ulValue		The value to store.
 **/
FF_Error_t FF_putFATEntry( FF_IOManager_t *pxIOManager, uint32_t ulCluster, uint32_t ulValue, FF_FATBuffers_t *pxFATBuffers )
{
 8005ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	4605      	mov	r5, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	9302      	str	r3, [sp, #8]
uint32_t ulFATSectorEntry;
uint32_t ulFATEntry;
uint32_t ulLBAAdjust;
uint32_t ulRelClusterEntry = 0;
BaseType_t xIndex;
FF_Error_t xError = FF_ERR_NONE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9305      	str	r3, [sp, #20]
#if( ffconfigWRITE_BOTH_FATS != 0 )
	const BaseType_t xNumFATs = pxIOManager->xPartition.ucNumFATS;
 8005ae8:	f890 a056 	ldrb.w	sl, [r0, #86]	; 0x56
#else
	const BaseType_t xNumFATs = 1;
#endif


	FF_Assert_Lock( pxIOManager, FF_FAT_LOCK );
 8005aec:	2101      	movs	r1, #1
 8005aee:	f003 f845 	bl	8008b7c <FF_Assert_Lock>

	/* Avoid corrupting the disk. */
	if( ( ulCluster == 0ul ) || ( ulCluster >= pxIOManager->xPartition.ulNumClusters ) )
 8005af2:	b114      	cbz	r4, 8005afa <FF_putFATEntry+0x26>
 8005af4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d305      	bcc.n	8005b06 <FF_putFATEntry+0x32>
	{
		/* find a more specific error code. */
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_NOT_ENOUGH_FREE_SPACE | FF_PUTFATENTRY );
 8005afa:	4b4e      	ldr	r3, [pc, #312]	; (8005c34 <FF_putFATEntry+0x160>)
 8005afc:	9305      	str	r3, [sp, #20]
		}
	}

	/* FF_putFATEntry() returns just an error code, not an address. */
	return xError;
}	/* FF_putFATEntry() */
 8005afe:	9805      	ldr	r0, [sp, #20]
 8005b00:	b007      	add	sp, #28
 8005b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 8005b06:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d025      	beq.n	8005b5a <FF_putFATEntry+0x86>
		else if( pxIOManager->xPartition.ucType == FF_T_FAT16 )
 8005b0e:	2b0b      	cmp	r3, #11
			ulFATOffset = ulCluster * 2;
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	bf0c      	ite	eq
 8005b14:	005b      	lsleq	r3, r3, #1
			ulFATOffset = ulCluster + ( ulCluster / 2 );
 8005b16:	eb03 0353 	addne.w	r3, r3, r3, lsr #1
		ulFATSector = pxIOManager->xPartition.ulFATBeginLBA + ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 8005b1a:	f8b5 8050 	ldrh.w	r8, [r5, #80]	; 0x50
		ulFATSectorEntry = ulFATOffset % pxIOManager->xPartition.usBlkSize;
 8005b1e:	fbb3 f2f8 	udiv	r2, r3, r8
 8005b22:	fb08 3312 	mls	r3, r8, r2, r3
		ulLBAAdjust = ulFATSectorEntry / ( ( uint32_t ) pxIOManager->usSectorSize );
 8005b26:	f8b5 86b0 	ldrh.w	r8, [r5, #1712]	; 0x6b0
		ulRelClusterEntry = ulFATSectorEntry % pxIOManager->usSectorSize;
 8005b2a:	fbb3 f7f8 	udiv	r7, r3, r8
 8005b2e:	fb08 3817 	mls	r8, r8, r7, r3
		ulFATSector = pxIOManager->xPartition.ulFATBeginLBA + ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 8005b32:	692b      	ldr	r3, [r5, #16]
 8005b34:	441a      	add	r2, r3
	return LBA * pxIOManager->xPartition.ucBlkFactor;
 8005b36:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
		ulFATSector += ulLBAAdjust;
 8005b3a:	fb03 7702 	mla	r7, r3, r2, r7
	if( FF_isERR( xError ) == pdFALSE )
 8005b3e:	9b05      	ldr	r3, [sp, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dbdc      	blt.n	8005afe <FF_putFATEntry+0x2a>
		for( xIndex = 0;
 8005b44:	f1ba 0f00 	cmp.w	sl, #0
 8005b48:	d0d9      	beq.n	8005afe <FF_putFATEntry+0x2a>
 8005b4a:	2400      	movs	r4, #0
			pxBuffer = prvGetFromFATBuffers( pxIOManager, pxFATBuffers, xIndex, ulFATSector, &xError, FF_MODE_WRITE );
 8005b4c:	f10d 0b14 	add.w	fp, sp, #20
				if( ( ulCluster & 0x0001 ) != 0 )
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	e03b      	b.n	8005bd2 <FF_putFATEntry+0xfe>
			ulFATOffset = ulCluster * 4;
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	e7dc      	b.n	8005b1a <FF_putFATEntry+0x46>
				xError = FF_GETERROR( xError ) | FF_PUTFATENTRY;
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b66:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8005b6a:	9305      	str	r3, [sp, #20]
				break;
 8005b6c:	e7c7      	b.n	8005afe <FF_putFATEntry+0x2a>
				ulValue &= 0x0fffffff;
 8005b6e:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
				FF_putLong( pxBuffer->pucBuffer, ulRelClusterEntry, ulValue );
 8005b72:	6882      	ldr	r2, [r0, #8]
		pBuffer += aOffset;
 8005b74:	eb02 0308 	add.w	r3, r2, r8
		pBuffer[ 0 ] = u32.bytes.u8_0;
 8005b78:	f802 6008 	strb.w	r6, [r2, r8]
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8005b7c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8005b80:	705a      	strb	r2, [r3, #1]
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8005b82:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8005b86:	709a      	strb	r2, [r3, #2]
		pBuffer[ 3 ] = u32.bytes.u8_3;
 8005b88:	f3c6 6207 	ubfx	r2, r6, #24, #8
 8005b8c:	70da      	strb	r2, [r3, #3]
 8005b8e:	e012      	b.n	8005bb6 <FF_putFATEntry+0xe2>
				FF_putShort( pxBuffer->pucBuffer, ulRelClusterEntry, ( uint16_t ) ulValue );
 8005b90:	6883      	ldr	r3, [r0, #8]
		pBuffer += aOffset;
 8005b92:	eb03 0208 	add.w	r2, r3, r8
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8005b96:	f803 6008 	strb.w	r6, [r3, r8]
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8005b9a:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8005b9e:	7053      	strb	r3, [r2, #1]
 8005ba0:	e009      	b.n	8005bb6 <FF_putFATEntry+0xe2>
					ulFATEntry	&= 0xF000;
 8005ba2:	f40e 4370 	and.w	r3, lr, #61440	; 0xf000
					ulValue		&= 0x0FFF;
 8005ba6:	f3c6 060b 	ubfx	r6, r6, #0, #12
				FF_putShort( pxBuffer->pucBuffer, ulRelClusterEntry, ( uint16_t ) ( ulFATEntry | ulValue ) );
 8005baa:	4333      	orrs	r3, r6
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8005bac:	f801 3008 	strb.w	r3, [r1, r8]
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8005bb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005bb4:	7053      	strb	r3, [r2, #1]
			if( ( xIndex < ffconfigBUF_STORE_COUNT ) && ( pxFATBuffers != NULL ) )
 8005bb6:	2c01      	cmp	r4, #1
 8005bb8:	dd32      	ble.n	8005c20 <FF_putFATEntry+0x14c>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f002 f8c1 	bl	8007d44 <FF_ReleaseBuffer>
 8005bc2:	9005      	str	r0, [sp, #20]
				if( FF_isERR( xError ) )
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	db9a      	blt.n	8005afe <FF_putFATEntry+0x2a>
			 xIndex++, ulFATSector += pxIOManager->xPartition.ulSectorsPerFAT )
 8005bc8:	3401      	adds	r4, #1
 8005bca:	696b      	ldr	r3, [r5, #20]
 8005bcc:	441f      	add	r7, r3
		for( xIndex = 0;
 8005bce:	45a2      	cmp	sl, r4
 8005bd0:	d095      	beq.n	8005afe <FF_putFATEntry+0x2a>
			pxBuffer = prvGetFromFATBuffers( pxIOManager, pxFATBuffers, xIndex, ulFATSector, &xError, FF_MODE_WRITE );
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	f8cd b000 	str.w	fp, [sp]
 8005bda:	463b      	mov	r3, r7
 8005bdc:	4622      	mov	r2, r4
 8005bde:	9902      	ldr	r1, [sp, #8]
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff fde7 	bl	80057b4 <prvGetFromFATBuffers>
			if( FF_isERR( xError ) )
 8005be6:	9b05      	ldr	r3, [sp, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dbb9      	blt.n	8005b60 <FF_putFATEntry+0x8c>
			if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 8005bec:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d0bc      	beq.n	8005b6e <FF_putFATEntry+0x9a>
			else if( pxIOManager->xPartition.ucType == FF_T_FAT16 )
 8005bf4:	2b0b      	cmp	r3, #11
 8005bf6:	d0cb      	beq.n	8005b90 <FF_putFATEntry+0xbc>
		pBuffer += aOffset;
 8005bf8:	6881      	ldr	r1, [r0, #8]
 8005bfa:	eb01 0208 	add.w	r2, r1, r8
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8005bfe:	7853      	ldrb	r3, [r2, #1]
 8005c00:	f363 290f 	bfi	r9, r3, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8005c04:	f811 3008 	ldrb.w	r3, [r1, r8]
 8005c08:	f363 0907 	bfi	r9, r3, #0, #8
		return u16.u16;
 8005c0c:	fa1f fe89 	uxth.w	lr, r9
				if( ( ulCluster & 0x0001 ) != 0 )
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0c5      	beq.n	8005ba2 <FF_putFATEntry+0xce>
					ulFATEntry &= 0x000F;
 8005c16:	f00e 030f 	and.w	r3, lr, #15
					ulValue		= ( ulValue << 4 );
 8005c1a:	0136      	lsls	r6, r6, #4
					ulValue	   &= 0xFFF0;
 8005c1c:	b2b6      	uxth	r6, r6
 8005c1e:	e7c4      	b.n	8005baa <FF_putFATEntry+0xd6>
			if( ( xIndex < ffconfigBUF_STORE_COUNT ) && ( pxFATBuffers != NULL ) )
 8005c20:	9a02      	ldr	r2, [sp, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	d0c8      	beq.n	8005bba <FF_putFATEntry+0xe6>
				pxFATBuffers->pxBuffers[ xIndex ] = pxBuffer;
 8005c28:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
				pxFATBuffers->ucMode = FF_MODE_WRITE;
 8005c2c:	f04f 0202 	mov.w	r2, #2
 8005c30:	721a      	strb	r2, [r3, #8]
 8005c32:	e7c9      	b.n	8005bc8 <FF_putFATEntry+0xf4>
 8005c34:	84030016 	.word	0x84030016

08005c38 <FF_FindFreeCluster>:
	}
#endif
/*-----------------------------------------------------------*/

uint32_t FF_FindFreeCluster( FF_IOManager_t *pxIOManager, FF_Error_t *pxError, BaseType_t xDoClaim )
{
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b087      	sub	sp, #28
 8005c3e:	4606      	mov	r6, r0
 8005c40:	9104      	str	r1, [sp, #16]
 8005c42:	9205      	str	r2, [sp, #20]
FF_Buffer_t *pxBuffer = NULL;
uint32_t x, ulCluster;
uint32_t ulFATSectorEntry;
uint32_t ulEntriesPerSector;
uint32_t ulFATEntry = 1;
const BaseType_t xEntrySize = ( pxIOManager->xPartition.ucType == FF_T_FAT32 ) ? 4 : 2;
 8005c44:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2504      	moveq	r5, #4
 8005c4e:	2502      	movne	r5, #2
const uint32_t uNumClusters = pxIOManager->xPartition.ulNumClusters;
 8005c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005c52:	9301      	str	r3, [sp, #4]

BaseType_t xTakeLock = FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE;
 8005c54:	2101      	movs	r1, #1
 8005c56:	f002 ff7d 	bl	8008b54 <FF_Has_Lock>

	if( xTakeLock )
 8005c5a:	9003      	str	r0, [sp, #12]
 8005c5c:	b1d8      	cbz	r0, 8005c96 <FF_FindFreeCluster+0x5e>
	{
		FF_LockFAT( pxIOManager );
	}

	ulCluster = pxIOManager->xPartition.ulLastFreeCluster;
 8005c5e:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
		#if( ffconfigFSINFO_TRUSTED != 0 )
		{
			/* If 'ffconfigFSINFO_TRUSTED', the contents of the field 'ulLastFreeCluster' is trusted.
			Only ready it in case of FAT32 and only during the very first time, i.e. when
			ulLastFreeCluster is still zero. */
			if( ( pxIOManager->xPartition.ucType == FF_T_FAT32 ) && ( pxIOManager->xPartition.ulLastFreeCluster == 0ul ) )
 8005c62:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d019      	beq.n	8005c9e <FF_FindFreeCluster+0x66>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4698      	mov	r8, r3
		if( FF_isERR( xError ) == pdFALSE )
		{
		uint32_t ulFATSector;
		uint32_t ulFATOffset;

			ulEntriesPerSector = pxIOManager->usSectorSize / xEntrySize;
 8005c6e:	f8b6 b6b0 	ldrh.w	fp, [r6, #1712]	; 0x6b0
 8005c72:	fb9b fbf5 	sdiv	fp, fp, r5
			ulFATOffset = ulCluster * xEntrySize;
 8005c76:	9502      	str	r5, [sp, #8]
 8005c78:	fb09 f505 	mul.w	r5, r9, r5

			/* Start from a sector where the first free entry is expected,
			and iterate through every FAT sector. */
			for( ulFATSector = ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 8005c7c:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
 8005c80:	fbb5 f3f3 	udiv	r3, r5, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	6973      	ldr	r3, [r6, #20]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	f080 80ba 	bcs.w	8005e04 <FF_FindFreeCluster+0x1cc>
 8005c90:	f04f 0801 	mov.w	r8, #1
 8005c94:	e094      	b.n	8005dc0 <FF_FindFreeCluster+0x188>
		FF_LockFAT( pxIOManager );
 8005c96:	4630      	mov	r0, r6
 8005c98:	f002 ff84 	bl	8008ba4 <FF_LockFAT>
 8005c9c:	e7df      	b.n	8005c5e <FF_FindFreeCluster+0x26>
			if( ( pxIOManager->xPartition.ucType == FF_T_FAT32 ) && ( pxIOManager->xPartition.ulLastFreeCluster == 0ul ) )
 8005c9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ca2:	d002      	beq.n	8005caa <FF_FindFreeCluster+0x72>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4698      	mov	r8, r3
 8005ca8:	e7e1      	b.n	8005c6e <FF_FindFreeCluster+0x36>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFSInfoLBA, FF_MODE_READ );
 8005caa:	2201      	movs	r2, #1
 8005cac:	6a31      	ldr	r1, [r6, #32]
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f001 ff7e 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f000 80c2 	beq.w	8005e40 <FF_FindFreeCluster+0x208>
					if( ( FF_getLong(pxBuffer->pucBuffer, 0 ) == 0x41615252 ) &&
 8005cbc:	6883      	ldr	r3, [r0, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8005cbe:	78d8      	ldrb	r0, [r3, #3]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8005cc6:	7898      	ldrb	r0, [r3, #2]
 8005cc8:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8005ccc:	7858      	ldrb	r0, [r3, #1]
 8005cce:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8005cd2:	7818      	ldrb	r0, [r3, #0]
 8005cd4:	f360 0207 	bfi	r2, r0, #0, #8
 8005cd8:	486f      	ldr	r0, [pc, #444]	; (8005e98 <FF_FindFreeCluster+0x260>)
 8005cda:	4282      	cmp	r2, r0
 8005cdc:	d007      	beq.n	8005cee <FF_FindFreeCluster+0xb6>
					xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f002 f830 	bl	8007d44 <FF_ReleaseBuffer>
		if( FF_isERR( xError ) == pdFALSE )
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	f2c0 80b6 	blt.w	8005e58 <FF_FindFreeCluster+0x220>
 8005cec:	e7bf      	b.n	8005c6e <FF_FindFreeCluster+0x36>
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8005cee:	f893 01e7 	ldrb.w	r0, [r3, #487]	; 0x1e7
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8005cf8:	f893 01e6 	ldrb.w	r0, [r3, #486]	; 0x1e6
 8005cfc:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8005d00:	f893 01e5 	ldrb.w	r0, [r3, #485]	; 0x1e5
 8005d04:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8005d08:	f893 01e4 	ldrb.w	r0, [r3, #484]	; 0x1e4
 8005d0c:	f360 0207 	bfi	r2, r0, #0, #8
					if( ( FF_getLong(pxBuffer->pucBuffer, 0 ) == 0x41615252 ) &&
 8005d10:	4862      	ldr	r0, [pc, #392]	; (8005e9c <FF_FindFreeCluster+0x264>)
 8005d12:	4282      	cmp	r2, r0
 8005d14:	d1e3      	bne.n	8005cde <FF_FindFreeCluster+0xa6>
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8005d16:	f893 21ef 	ldrb.w	r2, [r3, #495]	; 0x1ef
 8005d1a:	f362 691f 	bfi	r9, r2, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8005d1e:	f893 21ee 	ldrb.w	r2, [r3, #494]	; 0x1ee
 8005d22:	f362 4917 	bfi	r9, r2, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8005d26:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 8005d2a:	f362 290f 	bfi	r9, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8005d2e:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8005d32:	f363 0907 	bfi	r9, r3, #0, #8
 8005d36:	e7d2      	b.n	8005cde <FF_FindFreeCluster+0xa6>
		pBuffer += aOffset;
 8005d38:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005d3c:	eb0c 0203 	add.w	r2, ip, r3
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8005d40:	f892 8003 	ldrb.w	r8, [r2, #3]
 8005d44:	f368 6a1f 	bfi	sl, r8, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8005d48:	f892 8002 	ldrb.w	r8, [r2, #2]
 8005d4c:	f368 4a17 	bfi	sl, r8, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8005d50:	7852      	ldrb	r2, [r2, #1]
 8005d52:	f362 2a0f 	bfi	sl, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8005d56:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8005d5a:	f363 0a07 	bfi	sl, r3, #0, #8
					ulFATSectorEntry = ulFATOffset % pxIOManager->xPartition.usBlkSize;
					if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
					{
						ulFATEntry = FF_getLong( pxBuffer->pucBuffer, ulFATSectorEntry );
						/* Clear the top 4 bits. */
						ulFATEntry &= 0x0fffffff;
 8005d5e:	f02a 4370 	bic.w	r3, sl, #4026531840	; 0xf0000000
					}
					else
					{
						ulFATEntry = ( uint32_t ) FF_getShort( pxBuffer->pucBuffer, ulFATSectorEntry );
					}
					if( ulFATEntry == 0x00000000 )
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d07b      	beq.n	8005e5e <FF_FindFreeCluster+0x226>
					{
						/* Break and return 'ulCluster' */
						break;
					}
					ulFATOffset += xEntrySize;
 8005d66:	4405      	add	r5, r0
					ulCluster++;
 8005d68:	3401      	adds	r4, #1
				for( x = ( ulCluster % ulEntriesPerSector ); x < ulEntriesPerSector; x++ )
 8005d6a:	eb04 0209 	add.w	r2, r4, r9
 8005d6e:	4593      	cmp	fp, r2
 8005d70:	d918      	bls.n	8005da4 <FF_FindFreeCluster+0x16c>
					if( ulCluster >= uNumClusters )
 8005d72:	45a6      	cmp	lr, r4
 8005d74:	f000 8086 	beq.w	8005e84 <FF_FindFreeCluster+0x24c>
					ulFATSectorEntry = ulFATOffset % pxIOManager->xPartition.usBlkSize;
 8005d78:	f8b6 3050 	ldrh.w	r3, [r6, #80]	; 0x50
 8005d7c:	fbb5 f2f3 	udiv	r2, r5, r3
 8005d80:	fb03 5312 	mls	r3, r3, r2, r5
					if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 8005d84:	f896 2054 	ldrb.w	r2, [r6, #84]	; 0x54
 8005d88:	2a0c      	cmp	r2, #12
 8005d8a:	d0d5      	beq.n	8005d38 <FF_FindFreeCluster+0x100>
		pBuffer += aOffset;
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	eb02 0c03 	add.w	ip, r2, r3
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8005d92:	f89c c001 	ldrb.w	ip, [ip, #1]
 8005d96:	f36c 270f 	bfi	r7, ip, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8005d9a:	5cd3      	ldrb	r3, [r2, r3]
 8005d9c:	f363 0707 	bfi	r7, r3, #0, #8
		return u16.u16;
 8005da0:	b2bb      	uxth	r3, r7
 8005da2:	e7de      	b.n	8005d62 <FF_FindFreeCluster+0x12a>
 8005da4:	4698      	mov	r8, r3
				}
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005da6:	4630      	mov	r0, r6
 8005da8:	f001 ffcc 	bl	8007d44 <FF_ReleaseBuffer>
				pxBuffer = NULL;
				if( FF_isERR( xError ) )
 8005dac:	2800      	cmp	r0, #0
 8005dae:	db70      	blt.n	8005e92 <FF_FindFreeCluster+0x25a>
 8005db0:	46a1      	mov	r9, r4
				 ulFATSector++ )
 8005db2:	9b00      	ldr	r3, [sp, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	461a      	mov	r2, r3
 8005db8:	9300      	str	r3, [sp, #0]
			for( ulFATSector = ( ulFATOffset / pxIOManager->xPartition.usBlkSize );
 8005dba:	6973      	ldr	r3, [r6, #20]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d93d      	bls.n	8005e3c <FF_FindFreeCluster+0x204>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFATBeginLBA + ulFATSector, FF_MODE_READ );
 8005dc0:	6931      	ldr	r1, [r6, #16]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	9b00      	ldr	r3, [sp, #0]
 8005dc6:	4419      	add	r1, r3
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f001 fef1 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 8005dce:	4601      	mov	r1, r0
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d059      	beq.n	8005e88 <FF_FindFreeCluster+0x250>
				for( x = ( ulCluster % ulEntriesPerSector ); x < ulEntriesPerSector; x++ )
 8005dd4:	fbb9 f3fb 	udiv	r3, r9, fp
 8005dd8:	fb0b 9313 	mls	r3, fp, r3, r9
					if( ulCluster >= uNumClusters )
 8005ddc:	9801      	ldr	r0, [sp, #4]
 8005dde:	4548      	cmp	r0, r9
 8005de0:	d905      	bls.n	8005dee <FF_FindFreeCluster+0x1b6>
 8005de2:	464c      	mov	r4, r9
 8005de4:	eba3 0909 	sub.w	r9, r3, r9
 8005de8:	4686      	mov	lr, r0
 8005dea:	9802      	ldr	r0, [sp, #8]
 8005dec:	e7c4      	b.n	8005d78 <FF_FindFreeCluster+0x140>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005dee:	4630      	mov	r0, r6
 8005df0:	f001 ffa8 	bl	8007d44 <FF_ReleaseBuffer>
				if( FF_isERR( xError ) )
 8005df4:	2800      	cmp	r0, #0
 8005df6:	db4a      	blt.n	8005e8e <FF_FindFreeCluster+0x256>
				{
					break;
				}
				if( ulFATEntry == 0x00000000 )
 8005df8:	f1b8 0f00 	cmp.w	r8, #0
 8005dfc:	d1d9      	bne.n	8005db2 <FF_FindFreeCluster+0x17a>
 8005dfe:	4680      	mov	r8, r0
 8005e00:	464c      	mov	r4, r9
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FINDFREECLUSTER );
 8005e02:	46a1      	mov	r9, r4
				{
					/* And break from the outer loop. */
					break;
				}
			}
			if( ( FF_isERR( xError ) == pdFALSE ) &&
 8005e04:	6973      	ldr	r3, [r6, #20]
 8005e06:	9a00      	ldr	r2, [sp, #0]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d023      	beq.n	8005e54 <FF_FindFreeCluster+0x21c>

	if( FF_isERR( xError ) )
	{
		ulCluster = 0UL;
	}
	if( ( ulCluster != 0UL ) && ( xDoClaim != pdFALSE ) )
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	d02d      	beq.n	8005e6e <FF_FindFreeCluster+0x236>
 8005e12:	9b05      	ldr	r3, [sp, #20]
 8005e14:	b35b      	cbz	r3, 8005e6e <FF_FindFreeCluster+0x236>
	{
	FF_Error_t xTempError;

		/* Found a free cluster! */
		pxIOManager->xPartition.ulLastFreeCluster = ulCluster + 1;
 8005e16:	f109 0301 	add.w	r3, r9, #1
 8005e1a:	63b3      	str	r3, [r6, #56]	; 0x38

		xTempError = FF_putFATEntry( pxIOManager, ulCluster, 0xFFFFFFFF, NULL );
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e22:	4649      	mov	r1, r9
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff fe55 	bl	8005ad4 <FF_putFATEntry>
		if( FF_isERR( xError ) == pdFALSE )
 8005e2a:	4643      	mov	r3, r8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db0a      	blt.n	8005e46 <FF_FindFreeCluster+0x20e>
		{
			xError = xTempError;
 8005e30:	4680      	mov	r8, r0
 8005e32:	2800      	cmp	r0, #0
 8005e34:	bfb8      	it	lt
 8005e36:	f04f 0900 	movlt.w	r9, #0
 8005e3a:	e018      	b.n	8005e6e <FF_FindFreeCluster+0x236>
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	e7e1      	b.n	8005e04 <FF_FindFreeCluster+0x1cc>
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FINDFREECLUSTER );
 8005e40:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <FF_FindFreeCluster+0x268>)
 8005e42:	4698      	mov	r8, r3
 8005e44:	e013      	b.n	8005e6e <FF_FindFreeCluster+0x236>
		}

		if( FF_isERR( xError ) )
		{
			ulCluster = 0UL;
 8005e46:	f04f 0900 	mov.w	r9, #0
 8005e4a:	e010      	b.n	8005e6e <FF_FindFreeCluster+0x236>
		}
	}
	if( xTakeLock )
	{
		FF_UnlockFAT( pxIOManager );
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f002 fed1 	bl	8008bf4 <FF_UnlockFAT>
 8005e52:	e00f      	b.n	8005e74 <FF_FindFreeCluster+0x23c>
				xError = ( FF_Error_t ) ( FF_ERR_IOMAN_NOT_ENOUGH_FREE_SPACE | FF_FINDFREECLUSTER );
 8005e54:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <FF_FindFreeCluster+0x26c>)
 8005e56:	4698      	mov	r8, r3
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FINDFREECLUSTER );
 8005e58:	f04f 0900 	mov.w	r9, #0
 8005e5c:	e007      	b.n	8005e6e <FF_FindFreeCluster+0x236>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f001 ff70 	bl	8007d44 <FF_ReleaseBuffer>
				if( FF_isERR( xError ) )
 8005e64:	1e03      	subs	r3, r0, #0
 8005e66:	4698      	mov	r8, r3
 8005e68:	dacb      	bge.n	8005e02 <FF_FindFreeCluster+0x1ca>
			ulCluster = 0UL;
 8005e6a:	f04f 0900 	mov.w	r9, #0
	if( xTakeLock )
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0eb      	beq.n	8005e4c <FF_FindFreeCluster+0x214>
	}
	*pxError = xError;
 8005e74:	9b04      	ldr	r3, [sp, #16]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8c2 8000 	str.w	r8, [r2]

	return ulCluster;
}	/* FF_FindFreeCluster */
 8005e7c:	4648      	mov	r0, r9
 8005e7e:	b007      	add	sp, #28
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	4698      	mov	r8, r3
 8005e86:	e78e      	b.n	8005da6 <FF_FindFreeCluster+0x16e>
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_FINDFREECLUSTER );
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <FF_FindFreeCluster+0x268>)
 8005e8a:	4698      	mov	r8, r3
 8005e8c:	e7ed      	b.n	8005e6a <FF_FindFreeCluster+0x232>
 8005e8e:	4680      	mov	r8, r0
 8005e90:	e7eb      	b.n	8005e6a <FF_FindFreeCluster+0x232>
 8005e92:	4680      	mov	r8, r0
 8005e94:	e7e9      	b.n	8005e6a <FF_FindFreeCluster+0x232>
 8005e96:	bf00      	nop
 8005e98:	41615252 	.word	0x41615252
 8005e9c:	61417272 	.word	0x61417272
 8005ea0:	84040004 	.word	0x84040004
 8005ea4:	84040016 	.word	0x84040016

08005ea8 <FF_CreateClusterChain>:
 * @brief	Creates a Cluster Chain
 *	@return > 0 New created cluster
 *	@return = 0 See pxError
 **/
uint32_t FF_CreateClusterChain( FF_IOManager_t *pxIOManager, FF_Error_t *pxError )
{
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	4605      	mov	r5, r0
 8005eae:	460e      	mov	r6, r1
uint32_t ulStartCluster;
FF_Error_t xError = FF_ERR_NONE;
 8005eb0:	ac02      	add	r4, sp, #8
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f844 3d04 	str.w	r3, [r4, #-4]!

	FF_LockFAT( pxIOManager );
 8005eb8:	f002 fe74 	bl	8008ba4 <FF_LockFAT>
	{
		ulStartCluster = FF_FindFreeCluster( pxIOManager, &xError, pdTRUE );
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f7ff feb9 	bl	8005c38 <FF_FindFreeCluster>
 8005ec6:	4604      	mov	r4, r0
	}
	FF_UnlockFAT( pxIOManager );
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f002 fe93 	bl	8008bf4 <FF_UnlockFAT>

	if( ulStartCluster != 0L )
 8005ece:	b924      	cbnz	r4, 8005eda <FF_CreateClusterChain+0x32>
	{
		xError = FF_DecreaseFreeClusters( pxIOManager, 1 );
	}
	*pxError = xError;
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	6033      	str	r3, [r6, #0]

	return ulStartCluster;
}
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
		xError = FF_DecreaseFreeClusters( pxIOManager, 1 );
 8005eda:	2101      	movs	r1, #1
 8005edc:	4628      	mov	r0, r5
 8005ede:	f002 fd51 	bl	8008984 <FF_DecreaseFreeClusters>
 8005ee2:	9001      	str	r0, [sp, #4]
 8005ee4:	e7f4      	b.n	8005ed0 <FF_CreateClusterChain+0x28>

08005ee6 <FF_GetChainLength>:
/*-----------------------------------------------------------*/

uint32_t FF_GetChainLength( FF_IOManager_t *pxIOManager, uint32_t ulStartCluster, uint32_t *pulEndOfChain, FF_Error_t *pxError )
{
 8005ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	4606      	mov	r6, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4617      	mov	r7, r2
 8005ef2:	4698      	mov	r8, r3
uint32_t ulLength = 0;
FF_FATBuffers_t xFATBuffers;
FF_Error_t xError = FF_ERR_NONE;
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	9500      	str	r5, [sp, #0]
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 8005ef8:	9501      	str	r5, [sp, #4]
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 8005efa:	9502      	str	r5, [sp, #8]
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 8005efc:	2301      	movs	r3, #1
 8005efe:	f88d 300c 	strb.w	r3, [sp, #12]

	FF_InitFATBuffers( &xFATBuffers, FF_MODE_READ );

	FF_LockFAT( pxIOManager );
 8005f02:	f002 fe4f 	bl	8008ba4 <FF_LockFAT>
	{
		while( FF_isEndOfChain( pxIOManager, ulStartCluster ) == pdFALSE )
 8005f06:	4621      	mov	r1, r4
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f7ff fd63 	bl	80059d4 <FF_isEndOfChain>
 8005f0e:	b960      	cbnz	r0, 8005f2a <FF_GetChainLength+0x44>
		{
			ulStartCluster = FF_getFATEntry( pxIOManager, ulStartCluster, &xError, &xFATBuffers );
 8005f10:	ab01      	add	r3, sp, #4
 8005f12:	466a      	mov	r2, sp
 8005f14:	4621      	mov	r1, r4
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff fc82 	bl	8005820 <FF_getFATEntry>
 8005f1c:	4604      	mov	r4, r0
			if( FF_isERR( xError ) )
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db01      	blt.n	8005f28 <FF_GetChainLength+0x42>
			{
				ulLength = 0;
				break;
			}
			ulLength++;
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7ee      	b.n	8005f06 <FF_GetChainLength+0x20>
				ulLength = 0;
 8005f28:	2500      	movs	r5, #0
		}
		if( pulEndOfChain != NULL )
 8005f2a:	b107      	cbz	r7, 8005f2e <FF_GetChainLength+0x48>
		{
			/* _HT_
			ulStartCluster has just been tested as an end-of-chain token.
			Not sure if the caller expects this. */
			*pulEndOfChain = ulStartCluster;
 8005f2c:	603c      	str	r4, [r7, #0]
		}
		xError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 8005f2e:	a901      	add	r1, sp, #4
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff fc26 	bl	8005782 <FF_ReleaseFATBuffers>
 8005f36:	9000      	str	r0, [sp, #0]
	}
	FF_UnlockFAT( pxIOManager );
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f002 fe5b 	bl	8008bf4 <FF_UnlockFAT>

	*pxError = xError;
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	f8c8 3000 	str.w	r3, [r8]

	return ulLength;
}
 8005f44:	4628      	mov	r0, r5
 8005f46:	b004      	add	sp, #16
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f4c <FF_UnlinkClusterChain>:
 *	@return 0 On Success.
 *	@return	-1 If the device driver failed to provide access.
 *
 **/
FF_Error_t FF_UnlinkClusterChain( FF_IOManager_t *pxIOManager, uint32_t ulStartCluster, BaseType_t xDoTruncate )
{
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	b087      	sub	sp, #28
 8005f52:	4605      	mov	r5, r0
 8005f54:	468b      	mov	fp, r1
 8005f56:	4691      	mov	r9, r2
uint32_t ulFATEntry;
uint32_t ulCurrentCluster;
uint32_t ulLength = 0;
uint32_t ulLastFree = ulStartCluster;
FF_Error_t xTempError;
FF_Error_t xError = FF_ERR_NONE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9305      	str	r3, [sp, #20]
FF_FATBuffers_t xFATBuffers;

BaseType_t xTakeLock = FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE;
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	f002 fdf9 	bl	8008b54 <FF_Has_Lock>

	if( xTakeLock )
 8005f62:	9001      	str	r0, [sp, #4]
 8005f64:	b148      	cbz	r0, 8005f7a <FF_UnlinkClusterChain+0x2e>
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 8005f66:	2700      	movs	r7, #0
 8005f68:	9702      	str	r7, [sp, #8]
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 8005f6a:	9703      	str	r7, [sp, #12]
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f88d 3010 	strb.w	r3, [sp, #16]
uint32_t ulLastFree = ulStartCluster;
 8005f72:	46d8      	mov	r8, fp

	ulFATEntry = ulStartCluster;

	/* Free all clusters in the chain! */
	ulCurrentCluster = ulStartCluster;
	ulFATEntry = ulCurrentCluster;
 8005f74:	465c      	mov	r4, fp
		{
			xError = FF_putFATEntry( pxIOManager, ulCurrentCluster, 0xFFFFFFFF, &xFATBuffers );
		}
		else
		{
			xError = FF_putFATEntry( pxIOManager, ulCurrentCluster, 0x00000000, &xFATBuffers );
 8005f76:	46ba      	mov	sl, r7
 8005f78:	e017      	b.n	8005faa <FF_UnlinkClusterChain+0x5e>
		FF_LockFAT( pxIOManager );
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f002 fe12 	bl	8008ba4 <FF_LockFAT>
 8005f80:	e7f1      	b.n	8005f66 <FF_UnlinkClusterChain+0x1a>
			xError = FF_putFATEntry( pxIOManager, ulCurrentCluster, 0x00000000, &xFATBuffers );
 8005f82:	ab02      	add	r3, sp, #8
 8005f84:	4652      	mov	r2, sl
 8005f86:	4621      	mov	r1, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f7ff fda3 	bl	8005ad4 <FF_putFATEntry>
 8005f8e:	9005      	str	r0, [sp, #20]
			ulLength++;
 8005f90:	3701      	adds	r7, #1
		}
		if( FF_isERR( xError ) )
 8005f92:	9b05      	ldr	r3, [sp, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db32      	blt.n	8005ffe <FF_UnlinkClusterChain+0xb2>
 8005f98:	45a0      	cmp	r8, r4
 8005f9a:	bf28      	it	cs
 8005f9c:	46a0      	movcs	r8, r4
		if( ulLastFree > ulCurrentCluster )
		{
			ulLastFree = ulCurrentCluster;
		}
		ulCurrentCluster = ulFATEntry;
	} while( FF_isEndOfChain( pxIOManager, ulFATEntry ) == pdFALSE );
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f7ff fd17 	bl	80059d4 <FF_isEndOfChain>
		ulFATEntry = FF_getFATEntry( pxIOManager, ulFATEntry, &xError, &xFATBuffers );
 8005fa6:	4634      	mov	r4, r6
	} while( FF_isEndOfChain( pxIOManager, ulFATEntry ) == pdFALSE );
 8005fa8:	bb20      	cbnz	r0, 8005ff4 <FF_UnlinkClusterChain+0xa8>
		ulFATEntry = FF_getFATEntry( pxIOManager, ulFATEntry, &xError, &xFATBuffers );
 8005faa:	ab02      	add	r3, sp, #8
 8005fac:	aa05      	add	r2, sp, #20
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f7ff fc35 	bl	8005820 <FF_getFATEntry>
 8005fb6:	4606      	mov	r6, r0
		if( FF_isERR( xError ) )
 8005fb8:	9b05      	ldr	r3, [sp, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db1f      	blt.n	8005ffe <FF_UnlinkClusterChain+0xb2>
		if( ( xDoTruncate != pdFALSE ) && ( ulCurrentCluster == ulStartCluster ) )
 8005fbe:	f1b9 0f00 	cmp.w	r9, #0
 8005fc2:	d0de      	beq.n	8005f82 <FF_UnlinkClusterChain+0x36>
 8005fc4:	455c      	cmp	r4, fp
 8005fc6:	d1dc      	bne.n	8005f82 <FF_UnlinkClusterChain+0x36>
			xError = FF_putFATEntry( pxIOManager, ulCurrentCluster, 0xFFFFFFFF, &xFATBuffers );
 8005fc8:	ab02      	add	r3, sp, #8
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f7ff fd7f 	bl	8005ad4 <FF_putFATEntry>
 8005fd6:	9005      	str	r0, [sp, #20]
 8005fd8:	e7db      	b.n	8005f92 <FF_UnlinkClusterChain+0x46>
		xError = xTempError;
	}

	if( xTakeLock )
	{
		FF_UnlockFAT( pxIOManager );
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f002 fe0a 	bl	8008bf4 <FF_UnlockFAT>
 8005fe0:	e018      	b.n	8006014 <FF_UnlinkClusterChain+0xc8>
	}
	if( ulLength != 0 )
	{
		xTempError = FF_IncreaseFreeClusters( pxIOManager, ulLength );
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f002 fc43 	bl	8008870 <FF_IncreaseFreeClusters>
		if( FF_isERR( xError ) == pdFALSE )
 8005fea:	9b05      	ldr	r3, [sp, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db13      	blt.n	8006018 <FF_UnlinkClusterChain+0xcc>
		{
			xError = xTempError;
 8005ff0:	9005      	str	r0, [sp, #20]
 8005ff2:	e011      	b.n	8006018 <FF_UnlinkClusterChain+0xcc>
		if( pxIOManager->xPartition.ulLastFreeCluster > ulLastFree )
 8005ff4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ff6:	4543      	cmp	r3, r8
 8005ff8:	d901      	bls.n	8005ffe <FF_UnlinkClusterChain+0xb2>
			pxIOManager->xPartition.ulLastFreeCluster = ulLastFree;
 8005ffa:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
	xTempError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 8005ffe:	a902      	add	r1, sp, #8
 8006000:	4628      	mov	r0, r5
 8006002:	f7ff fbbe 	bl	8005782 <FF_ReleaseFATBuffers>
	if( FF_isERR( xError ) == pdFALSE )
 8006006:	9b05      	ldr	r3, [sp, #20]
 8006008:	2b00      	cmp	r3, #0
		xError = xTempError;
 800600a:	bfa8      	it	ge
 800600c:	9005      	strge	r0, [sp, #20]
	if( xTakeLock )
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0e2      	beq.n	8005fda <FF_UnlinkClusterChain+0x8e>
	if( ulLength != 0 )
 8006014:	2f00      	cmp	r7, #0
 8006016:	d1e4      	bne.n	8005fe2 <FF_UnlinkClusterChain+0x96>
		}
	}

	return xError;
 8006018:	9805      	ldr	r0, [sp, #20]
}
 800601a:	b007      	add	sp, #28
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006020 <FF_CountFreeClusters>:
#endif
/*-----------------------------------------------------------*/


uint32_t FF_CountFreeClusters( FF_IOManager_t *pxIOManager, FF_Error_t *pxError )
{
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006024:	b083      	sub	sp, #12
 8006026:	4605      	mov	r5, r0
 8006028:	9100      	str	r1, [sp, #0]
uint32_t ulFATEntry;
uint32_t ulEntriesPerSector;
uint32_t ulFreeClusters = 0;
uint32_t ClusterNum = 0;
BaseType_t xInfoKnown = pdFALSE;
BaseType_t xTakeLock = FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE;
 800602a:	2101      	movs	r1, #1
 800602c:	f002 fd92 	bl	8008b54 <FF_Has_Lock>

	if( xTakeLock )
 8006030:	9001      	str	r0, [sp, #4]
 8006032:	b1e0      	cbz	r0, 800606e <FF_CountFreeClusters+0x4e>
	{
		/* For FAT16 and FAT32 */
		#if( ffconfigFSINFO_TRUSTED != 0 )
		{
			/* If 'ffconfigFSINFO_TRUSTED', the contents of the field 'ulFreeClusterCount' is trusted. */
			if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 8006034:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8006038:	2b0c      	cmp	r3, #12
 800603a:	d01c      	beq.n	8006076 <FF_CountFreeClusters+0x56>
FF_Error_t xError = FF_ERR_NONE;
 800603c:	f04f 0b00 	mov.w	fp, #0
					}
				}
			}
		}
		#endif
		if( ( xInfoKnown == pdFALSE ) && ( pxIOManager->xPartition.usBlkSize != 0 ) )
 8006040:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80bb 	beq.w	80061c0 <FF_CountFreeClusters+0x1a0>
		{
			if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 800604a:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800604e:	2b0c      	cmp	r3, #12
			{
				ulEntriesPerSector = pxIOManager->usSectorSize / 4;
 8006050:	f8b5 a6b0 	ldrh.w	sl, [r5, #1712]	; 0x6b0
 8006054:	bf0c      	ite	eq
 8006056:	ea4f 0a9a 	moveq.w	sl, sl, lsr #2
			}
			else
			{
				ulEntriesPerSector = pxIOManager->usSectorSize / 2;
 800605a:	ea4f 0a5a 	movne.w	sl, sl, lsr #1
			}
			for( ulIndex = 0; ulIndex < pxIOManager->xPartition.ulSectorsPerFAT; ulIndex++ )
 800605e:	696b      	ldr	r3, [r5, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80be 	beq.w	80061e2 <FF_CountFreeClusters+0x1c2>
 8006066:	2400      	movs	r4, #0
 8006068:	46a0      	mov	r8, r4
 800606a:	46a1      	mov	r9, r4
 800606c:	e092      	b.n	8006194 <FF_CountFreeClusters+0x174>
		FF_LockFAT( pxIOManager );
 800606e:	4628      	mov	r0, r5
 8006070:	f002 fd98 	bl	8008ba4 <FF_LockFAT>
 8006074:	e7de      	b.n	8006034 <FF_CountFreeClusters+0x14>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFSInfoLBA, FF_MODE_READ );
 8006076:	2201      	movs	r2, #1
 8006078:	6a29      	ldr	r1, [r5, #32]
 800607a:	4628      	mov	r0, r5
 800607c:	f001 fd98 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 8006080:	4601      	mov	r1, r0
 8006082:	2800      	cmp	r0, #0
 8006084:	f000 80b0 	beq.w	80061e8 <FF_CountFreeClusters+0x1c8>
					if( ( FF_getLong( pxBuffer->pucBuffer, 0 ) == 0x41615252 ) &&
 8006088:	6883      	ldr	r3, [r0, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 800608a:	78d8      	ldrb	r0, [r3, #3]
 800608c:	2200      	movs	r2, #0
 800608e:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8006092:	7898      	ldrb	r0, [r3, #2]
 8006094:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8006098:	7858      	ldrb	r0, [r3, #1]
 800609a:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 800609e:	7818      	ldrb	r0, [r3, #0]
 80060a0:	f360 0207 	bfi	r2, r0, #0, #8
 80060a4:	4858      	ldr	r0, [pc, #352]	; (8006208 <FF_CountFreeClusters+0x1e8>)
 80060a6:	4282      	cmp	r2, r0
 80060a8:	d004      	beq.n	80060b4 <FF_CountFreeClusters+0x94>
					xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80060aa:	4628      	mov	r0, r5
 80060ac:	f001 fe4a 	bl	8007d44 <FF_ReleaseBuffer>
 80060b0:	4683      	mov	fp, r0
 80060b2:	e7c5      	b.n	8006040 <FF_CountFreeClusters+0x20>
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80060b4:	f893 01e7 	ldrb.w	r0, [r3, #487]	; 0x1e7
 80060b8:	2200      	movs	r2, #0
 80060ba:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80060be:	f893 01e6 	ldrb.w	r0, [r3, #486]	; 0x1e6
 80060c2:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80060c6:	f893 01e5 	ldrb.w	r0, [r3, #485]	; 0x1e5
 80060ca:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80060ce:	f893 01e4 	ldrb.w	r0, [r3, #484]	; 0x1e4
 80060d2:	f360 0207 	bfi	r2, r0, #0, #8
					if( ( FF_getLong( pxBuffer->pucBuffer, 0 ) == 0x41615252 ) &&
 80060d6:	484d      	ldr	r0, [pc, #308]	; (800620c <FF_CountFreeClusters+0x1ec>)
 80060d8:	4282      	cmp	r2, r0
 80060da:	d1e6      	bne.n	80060aa <FF_CountFreeClusters+0x8a>
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80060dc:	f893 21eb 	ldrb.w	r2, [r3, #491]	; 0x1eb
 80060e0:	2400      	movs	r4, #0
 80060e2:	f362 641f 	bfi	r4, r2, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80060e6:	f893 21ea 	ldrb.w	r2, [r3, #490]	; 0x1ea
 80060ea:	f362 4417 	bfi	r4, r2, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80060ee:	f893 21e9 	ldrb.w	r2, [r3, #489]	; 0x1e9
 80060f2:	f362 240f 	bfi	r4, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80060f6:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 80060fa:	f363 0407 	bfi	r4, r3, #0, #8
		return u32.u32;
 80060fe:	46a0      	mov	r8, r4
						if( ulFreeClusters != ~0ul )
 8006100:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006104:	d0d1      	beq.n	80060aa <FF_CountFreeClusters+0x8a>
					xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8006106:	4628      	mov	r0, r5
 8006108:	f001 fe1c 	bl	8007d44 <FF_ReleaseBuffer>
 800610c:	4683      	mov	fp, r0
						pxIOManager->xPartition.ulFreeClusterCount = ulFreeClusters;
 800610e:	63ec      	str	r4, [r5, #60]	; 0x3c
 8006110:	e058      	b.n	80061c4 <FF_CountFreeClusters+0x1a4>
		pBuffer += aOffset;
 8006112:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8006116:	eb0e 0243 	add.w	r2, lr, r3, lsl #1
		u32.bytes.u8_3 = pBuffer[ 3 ];
 800611a:	f892 c003 	ldrb.w	ip, [r2, #3]
 800611e:	f36c 671f 	bfi	r7, ip, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8006122:	f892 c002 	ldrb.w	ip, [r2, #2]
 8006126:	f36c 4717 	bfi	r7, ip, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 800612a:	7852      	ldrb	r2, [r2, #1]
 800612c:	f362 270f 	bfi	r7, r2, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8006130:	f81e 2013 	ldrb.w	r2, [lr, r3, lsl #1]
 8006134:	f362 0707 	bfi	r7, r2, #0, #8
				for( x = 0; x < ulEntriesPerSector; x++ )
				{
					if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
					{
						/* Clearing the top 4 bits. */
						ulFATEntry = FF_getLong( pxBuffer->pucBuffer, x * 4 ) & 0x0fffffff;
 8006138:	f027 4270 	bic.w	r2, r7, #4026531840	; 0xf0000000
 800613c:	e015      	b.n	800616a <FF_CountFreeClusters+0x14a>
					if( ulFATEntry == 0ul )
					{
						ulFreeClusters++;
					}
					/* FAT table might not be cluster aligned. */
					if( ClusterNum > pxIOManager->xPartition.ulNumClusters )
 800613e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006140:	42a2      	cmp	r2, r4
 8006142:	d317      	bcc.n	8006174 <FF_CountFreeClusters+0x154>
					{
						/* Stop counting if that's the case. */
						break;
					}
					ClusterNum++;
 8006144:	3401      	adds	r4, #1
 8006146:	3302      	adds	r3, #2
				for( x = 0; x < ulEntriesPerSector; x++ )
 8006148:	4284      	cmp	r4, r0
 800614a:	d013      	beq.n	8006174 <FF_CountFreeClusters+0x154>
					if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 800614c:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 8006150:	2a0c      	cmp	r2, #12
 8006152:	d0de      	beq.n	8006112 <FF_CountFreeClusters+0xf2>
		pBuffer += aOffset;
 8006154:	688a      	ldr	r2, [r1, #8]
 8006156:	eb02 0e03 	add.w	lr, r2, r3
		u16.bytes.u8_1 = pBuffer[ 1 ];
 800615a:	f89e e001 	ldrb.w	lr, [lr, #1]
 800615e:	f36e 260f 	bfi	r6, lr, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8006162:	5cd2      	ldrb	r2, [r2, r3]
 8006164:	f362 0607 	bfi	r6, r2, #0, #8
		return u16.u16;
 8006168:	b2b2      	uxth	r2, r6
					if( ulFATEntry == 0ul )
 800616a:	2a00      	cmp	r2, #0
 800616c:	d1e7      	bne.n	800613e <FF_CountFreeClusters+0x11e>
						ulFreeClusters++;
 800616e:	f108 0801 	add.w	r8, r8, #1
 8006172:	e7e4      	b.n	800613e <FF_CountFreeClusters+0x11e>
				}

				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8006174:	4628      	mov	r0, r5
 8006176:	f001 fde5 	bl	8007d44 <FF_ReleaseBuffer>
				pxBuffer = NULL;
				if( FF_isERR( xError ) )
 800617a:	2800      	cmp	r0, #0
 800617c:	db41      	blt.n	8006202 <FF_CountFreeClusters+0x1e2>
				{
					break;
				}
				if( ClusterNum > pxIOManager->xPartition.ulNumClusters )
 800617e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006180:	42a3      	cmp	r3, r4
 8006182:	d334      	bcc.n	80061ee <FF_CountFreeClusters+0x1ce>
 8006184:	4598      	cmp	r8, r3
 8006186:	bf28      	it	cs
 8006188:	4698      	movcs	r8, r3
			for( ulIndex = 0; ulIndex < pxIOManager->xPartition.ulSectorsPerFAT; ulIndex++ )
 800618a:	f109 0901 	add.w	r9, r9, #1
 800618e:	696b      	ldr	r3, [r5, #20]
 8006190:	454b      	cmp	r3, r9
 8006192:	d90e      	bls.n	80061b2 <FF_CountFreeClusters+0x192>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFATBeginLBA + ulIndex, FF_MODE_READ );
 8006194:	6929      	ldr	r1, [r5, #16]
 8006196:	2201      	movs	r2, #1
 8006198:	4449      	add	r1, r9
 800619a:	4628      	mov	r0, r5
 800619c:	f001 fd08 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 80061a0:	4601      	mov	r1, r0
 80061a2:	b330      	cbz	r0, 80061f2 <FF_CountFreeClusters+0x1d2>
				for( x = 0; x < ulEntriesPerSector; x++ )
 80061a4:	f1ba 0f00 	cmp.w	sl, #0
 80061a8:	d0e4      	beq.n	8006174 <FF_CountFreeClusters+0x154>
 80061aa:	eb0a 0004 	add.w	r0, sl, r4
 80061ae:	2300      	movs	r3, #0
 80061b0:	e7cc      	b.n	800614c <FF_CountFreeClusters+0x12c>
 80061b2:	4683      	mov	fp, r0
				}
			}	/* for( ulIndex = 0; ulIndex < pxIOManager->xPartition.ulSectorsPerFAT; ulIndex++ ) */
		}
	}

	if( xTakeLock )
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	b96b      	cbnz	r3, 80061d4 <FF_CountFreeClusters+0x1b4>
	{
		FF_UnlockFAT( pxIOManager );
 80061b8:	4628      	mov	r0, r5
 80061ba:	f002 fd1b 	bl	8008bf4 <FF_UnlockFAT>
 80061be:	e004      	b.n	80061ca <FF_CountFreeClusters+0x1aa>
 80061c0:	f04f 0800 	mov.w	r8, #0
	if( xTakeLock )
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f6      	beq.n	80061b8 <FF_CountFreeClusters+0x198>
	}

	if( FF_isERR( xError ) )
	{
		ulFreeClusters = 0;
 80061ca:	f1bb 0f00 	cmp.w	fp, #0
 80061ce:	bfb8      	it	lt
 80061d0:	f04f 0800 	movlt.w	r8, #0
	}
	*pxError = xError;
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	f8c3 b000 	str.w	fp, [r3]

	return ulFreeClusters;
}
 80061da:	4640      	mov	r0, r8
 80061dc:	b003      	add	sp, #12
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for( ulIndex = 0; ulIndex < pxIOManager->xPartition.ulSectorsPerFAT; ulIndex++ )
 80061e2:	f04f 0800 	mov.w	r8, #0
 80061e6:	e7ed      	b.n	80061c4 <FF_CountFreeClusters+0x1a4>
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_COUNTFREECLUSTERS );
 80061e8:	f8df b024 	ldr.w	fp, [pc, #36]	; 8006210 <FF_CountFreeClusters+0x1f0>
 80061ec:	e728      	b.n	8006040 <FF_CountFreeClusters+0x20>
 80061ee:	4683      	mov	fp, r0
 80061f0:	e7e0      	b.n	80061b4 <FF_CountFreeClusters+0x194>
					xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_COUNTFREECLUSTERS );
 80061f2:	f8df b01c 	ldr.w	fp, [pc, #28]	; 8006210 <FF_CountFreeClusters+0x1f0>
	if( xTakeLock )
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0dd      	beq.n	80061b8 <FF_CountFreeClusters+0x198>
		ulFreeClusters = 0;
 80061fc:	f04f 0800 	mov.w	r8, #0
 8006200:	e7e8      	b.n	80061d4 <FF_CountFreeClusters+0x1b4>
 8006202:	4683      	mov	fp, r0
 8006204:	e7f7      	b.n	80061f6 <FF_CountFreeClusters+0x1d6>
 8006206:	bf00      	nop
 8006208:	41615252 	.word	0x41615252
 800620c:	61417272 	.word	0x61417272
 8006210:	84050004 	.word	0x84050004

08006214 <FF_GetFreeSize>:
/*-----------------------------------------------------------*/

#if( ffconfig64_NUM_SUPPORT != 0 )
	uint64_t FF_GetFreeSize( FF_IOManager_t *pxIOManager, FF_Error_t *pxError )
	{
 8006214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006216:	b083      	sub	sp, #12
 8006218:	460d      	mov	r5, r1
	FF_Error_t xError = FF_ERR_NONE;
 800621a:	2300      	movs	r3, #0
 800621c:	9301      	str	r3, [sp, #4]
	uint32_t ulFreeClusters;
	uint64_t ulFreeSize = 0;

		if( pxIOManager != NULL )
 800621e:	b1e0      	cbz	r0, 800625a <FF_GetFreeSize+0x46>
 8006220:	4604      	mov	r4, r0
		{
			if( pxIOManager->xPartition.ulFreeClusterCount == 0ul )
 8006222:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006224:	b173      	cbz	r3, 8006244 <FF_GetFreeSize+0x30>
				}
				FF_UnlockFAT( pxIOManager );
			}
			ulFreeClusters = pxIOManager->xPartition.ulFreeClusterCount;
			ulFreeSize = ( uint64_t )
				( ( uint64_t ) ulFreeClusters * ( uint64_t )
 8006226:	6be2      	ldr	r2, [r4, #60]	; 0x3c
				( ( uint64_t ) pxIOManager->xPartition.ulSectorsPerCluster *
 8006228:	6c23      	ldr	r3, [r4, #64]	; 0x40
			ulFreeSize = ( uint64_t )
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
				  ( uint64_t ) pxIOManager->xPartition.usBlkSize ) );
 800622e:	f8b4 6050 	ldrh.w	r6, [r4, #80]	; 0x50
			ulFreeSize = ( uint64_t )
 8006232:	fba2 0106 	umull	r0, r1, r2, r6
 8006236:	fb06 1103 	mla	r1, r6, r3, r1
		}
		if( pxError != NULL )
 800623a:	b10d      	cbz	r5, 8006240 <FF_GetFreeSize+0x2c>
		{
			*pxError = xError;
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	602b      	str	r3, [r5, #0]
		}

		return ulFreeSize;
	}
 8006240:	b003      	add	sp, #12
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
				FF_LockFAT( pxIOManager );
 8006244:	f002 fcae 	bl	8008ba4 <FF_LockFAT>
					pxIOManager->xPartition.ulFreeClusterCount = FF_CountFreeClusters( pxIOManager, &xError );
 8006248:	a901      	add	r1, sp, #4
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff fee8 	bl	8006020 <FF_CountFreeClusters>
 8006250:	63e0      	str	r0, [r4, #60]	; 0x3c
				FF_UnlockFAT( pxIOManager );
 8006252:	4620      	mov	r0, r4
 8006254:	f002 fcce 	bl	8008bf4 <FF_UnlockFAT>
 8006258:	e7e5      	b.n	8006226 <FF_GetFreeSize+0x12>
	uint64_t ulFreeSize = 0;
 800625a:	2000      	movs	r0, #0
 800625c:	2100      	movs	r1, #0
 800625e:	e7ec      	b.n	800623a <FF_GetFreeSize+0x26>

08006260 <FF_RmPathCache>:
	#if( ffconfigUNICODE_UTF16_SUPPORT != 0 )
	static void FF_RmPathCache ( FF_IOManager_t * pxIOManager, const FF_T_WCHAR * pcPath )
	#else
	static void FF_RmPathCache ( FF_IOManager_t * pxIOManager, const char *pcPath )
	#endif
	{
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4680      	mov	r8, r0
 8006266:	4689      	mov	r9, r1
		/*
	* The directory 'path' will be removed or renamed
	* now clear all entries starting with 'path' in the path cache
	*/
		BaseType_t	xIndex;
		BaseType_t	pathLen = STRLEN( pcPath );
 8006268:	4608      	mov	r0, r1
 800626a:	f7f9 ffbb 	bl	80001e4 <strlen>
 800626e:	4605      	mov	r5, r0

		FF_PendSemaphore( pxIOManager->pvSemaphore );
 8006270:	f8d8 06a0 	ldr.w	r0, [r8, #1696]	; 0x6a0
 8006274:	f002 fc10 	bl	8008a98 <FF_PendSemaphore>
 8006278:	f108 0458 	add.w	r4, r8, #88	; 0x58
 800627c:	f508 67d3 	add.w	r7, r8, #1688	; 0x698
			{
				BaseType_t	len2 = STRLEN( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath );

				if( len2 >= pathLen && FF_strmatch( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath, pcPath, pathLen ) )
				{
					pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath[ 0 ] = '\0';
 8006280:	f04f 0a00 	mov.w	sl, #0
 8006284:	e002      	b.n	800628c <FF_RmPathCache+0x2c>
 8006286:	34c8      	adds	r4, #200	; 0xc8
			for( xIndex = 0; xIndex < ffconfigPATH_CACHE_DEPTH; xIndex++ )
 8006288:	42bc      	cmp	r4, r7
 800628a:	d010      	beq.n	80062ae <FF_RmPathCache+0x4e>
				BaseType_t	len2 = STRLEN( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath );
 800628c:	4620      	mov	r0, r4
 800628e:	f7f9 ffa9 	bl	80001e4 <strlen>
				if( len2 >= pathLen && FF_strmatch( pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath, pcPath, pathLen ) )
 8006292:	4285      	cmp	r5, r0
 8006294:	dcf7      	bgt.n	8006286 <FF_RmPathCache+0x26>
 8006296:	462a      	mov	r2, r5
 8006298:	4649      	mov	r1, r9
 800629a:	4620      	mov	r0, r4
 800629c:	f003 fb07 	bl	80098ae <FF_strmatch>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0f0      	beq.n	8006286 <FF_RmPathCache+0x26>
					pxIOManager->xPartition.pxPathCache[ xIndex ].pcPath[ 0 ] = '\0';
 80062a4:	f884 a000 	strb.w	sl, [r4]
					pxIOManager->xPartition.pxPathCache[ xIndex ].ulDirCluster = 0;
 80062a8:	f8c4 a0c4 	str.w	sl, [r4, #196]	; 0xc4
 80062ac:	e7eb      	b.n	8006286 <FF_RmPathCache+0x26>
				}
			}
		}

		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 80062ae:	f8d8 06a0 	ldr.w	r0, [r8, #1696]	; 0x6a0
 80062b2:	f002 fc01 	bl	8008ab8 <FF_ReleaseSemaphore>
 80062b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062ba <FF_GetSequentialClusters>:
	return xReturn;
}	/* FF_FileSize() */
/*-----------------------------------------------------------*/

static uint32_t FF_GetSequentialClusters( FF_IOManager_t *pxIOManager, uint32_t ulStartCluster, uint32_t ulLimit, FF_Error_t *pxError )
{
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	4680      	mov	r8, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	4617      	mov	r7, r2
 80062c6:	461e      	mov	r6, r3
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 80062c8:	2500      	movs	r5, #0
 80062ca:	9501      	str	r5, [sp, #4]
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 80062cc:	9502      	str	r5, [sp, #8]
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 80062ce:	2301      	movs	r3, #1
 80062d0:	f88d 300c 	strb.w	r3, [sp, #12]
uint32_t ulIndex = 0;

	FF_FATBuffers_t xFATBuffers;
	FF_InitFATBuffers( &xFATBuffers, FF_MODE_READ );

	*pxError = FF_ERR_NONE;
 80062d4:	6035      	str	r5, [r6, #0]

	FF_LockFAT( pxIOManager );
 80062d6:	f002 fc65 	bl	8008ba4 <FF_LockFAT>
	do
	{
		ulCurrentCluster = ulNextCluster;
		ulNextCluster = FF_getFATEntry( pxIOManager, ulCurrentCluster, pxError, &xFATBuffers );
 80062da:	ab01      	add	r3, sp, #4
 80062dc:	4632      	mov	r2, r6
 80062de:	4621      	mov	r1, r4
 80062e0:	4640      	mov	r0, r8
 80062e2:	f7ff fa9d 	bl	8005820 <FF_getFATEntry>
		if( FF_isERR( *pxError ) )
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db0a      	blt.n	8006302 <FF_GetSequentialClusters+0x48>
		{
			ulIndex = 0;
			break;
		}

		if( ulNextCluster == ( ulCurrentCluster + 1 ) )
 80062ec:	3401      	adds	r4, #1
 80062ee:	42a0      	cmp	r0, r4
 80062f0:	d108      	bne.n	8006304 <FF_GetSequentialClusters+0x4a>
		{
			ulIndex++;
 80062f2:	3501      	adds	r5, #1
 80062f4:	4604      	mov	r4, r0
		else
		{
			break;
		}

		if( ( ulLimit != 0 ) && ( ulIndex == ulLimit ) )
 80062f6:	2f00      	cmp	r7, #0
 80062f8:	d0ef      	beq.n	80062da <FF_GetSequentialClusters+0x20>
 80062fa:	42bd      	cmp	r5, r7
 80062fc:	d1ed      	bne.n	80062da <FF_GetSequentialClusters+0x20>
			ulIndex++;
 80062fe:	463d      	mov	r5, r7
 8006300:	e000      	b.n	8006304 <FF_GetSequentialClusters+0x4a>
			ulIndex = 0;
 8006302:	2500      	movs	r5, #0
			break;
		}
	}
	while( ulNextCluster == ( ulCurrentCluster + 1 ) );

	FF_UnlockFAT( pxIOManager );
 8006304:	4640      	mov	r0, r8
 8006306:	f002 fc75 	bl	8008bf4 <FF_UnlockFAT>

	*pxError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 800630a:	a901      	add	r1, sp, #4
 800630c:	4640      	mov	r0, r8
 800630e:	f7ff fa38 	bl	8005782 <FF_ReleaseFATBuffers>
 8006312:	6030      	str	r0, [r6, #0]

	return ulIndex;
}	/* FF_GetSequentialClusters() */
 8006314:	4628      	mov	r0, r5
 8006316:	b004      	add	sp, #16
 8006318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800631c <FF_SetCluster>:
 *  Side effects:
 *    - pxFile->ulCurrentCluster     : relative cluster number (0 <= Num < ulChainLength)
 *    - pxFile->ulAddrCurrentCluster : fysical cluster on the partition
 **/
static uint32_t FF_SetCluster( FF_FILE *pxFile, FF_Error_t *pxError )
{
 800631c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631e:	b083      	sub	sp, #12
 8006320:	4604      	mov	r4, r0
 8006322:	460f      	mov	r7, r1
FF_IOManager_t *pxIOManager = pxFile->pxIOManager;
 8006324:	6806      	ldr	r6, [r0, #0]
uint32_t ulNewCluster = FF_getClusterChainNumber( pxIOManager, pxFile->ulFilePointer, 1 );
 8006326:	2201      	movs	r2, #1
 8006328:	69c1      	ldr	r1, [r0, #28]
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff f9c5 	bl	80056ba <FF_getClusterChainNumber>
 8006330:	4605      	mov	r5, r0
FF_Error_t xResult = FF_ERR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	9301      	str	r3, [sp, #4]
uint32_t ulReturn;

	if( ulNewCluster > pxFile->ulCurrentCluster )
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	4298      	cmp	r0, r3
 800633a:	d81c      	bhi.n	8006376 <FF_SetCluster+0x5a>
			pxFile->ulAddrCurrentCluster = FF_TraverseFAT( pxIOManager, pxFile->ulAddrCurrentCluster,
				ulNewCluster - pxFile->ulCurrentCluster, &xResult );
		}
		FF_UnlockFAT( pxIOManager );
	}
	else if( ulNewCluster < pxFile->ulCurrentCluster )
 800633c:	4298      	cmp	r0, r3
 800633e:	d32d      	bcc.n	800639c <FF_SetCluster+0x80>
		/* Well positioned. */
	}

	if( FF_isERR( xResult ) == pdFALSE )
	{
		pxFile->ulCurrentCluster = ulNewCluster;
 8006340:	6125      	str	r5, [r4, #16]
	ulItemLBA = FF_Cluster2LBA( pxFile->pxIOManager, pxFile->ulAddrCurrentCluster );
 8006342:	6961      	ldr	r1, [r4, #20]
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	f7ff f9ab 	bl	80056a0 <FF_Cluster2LBA>
 800634a:	4605      	mov	r5, r0
	ulItemLBA += FF_getMajorBlockNumber( pxFile->pxIOManager, pxFile->ulFilePointer, 1 );
 800634c:	2201      	movs	r2, #1
 800634e:	69e1      	ldr	r1, [r4, #28]
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	f7ff f9cd 	bl	80056f0 <FF_getMajorBlockNumber>
	ulItemLBA = FF_getRealLBA( pxFile->pxIOManager, ulItemLBA );
 8006356:	6823      	ldr	r3, [r4, #0]
	ulItemLBA += FF_getMajorBlockNumber( pxFile->pxIOManager, pxFile->ulFilePointer, 1 );
 8006358:	4428      	add	r0, r5
	return LBA * pxIOManager->xPartition.ucBlkFactor;
 800635a:	f893 5055 	ldrb.w	r5, [r3, #85]	; 0x55
 800635e:	fb05 f500 	mul.w	r5, r5, r0
	ulItemLBA += FF_getMinorBlockNumber( pxFile->pxIOManager, pxFile->ulFilePointer, 1 );
 8006362:	2201      	movs	r2, #1
 8006364:	69e1      	ldr	r1, [r4, #28]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff f9d5 	bl	8005716 <FF_getMinorBlockNumber>
 800636c:	4428      	add	r0, r5
	}
	else
	{
		ulReturn = 0;
	}
	*pxError = xResult;
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	603b      	str	r3, [r7, #0]

	return ulReturn;
}	/* FF_SetCluster() */
 8006372:	b003      	add	sp, #12
 8006374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FF_LockFAT( pxIOManager );
 8006376:	4630      	mov	r0, r6
 8006378:	f002 fc14 	bl	8008ba4 <FF_LockFAT>
			pxFile->ulAddrCurrentCluster = FF_TraverseFAT( pxIOManager, pxFile->ulAddrCurrentCluster,
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	ab01      	add	r3, sp, #4
 8006380:	1aaa      	subs	r2, r5, r2
 8006382:	6961      	ldr	r1, [r4, #20]
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff fb41 	bl	8005a0c <FF_TraverseFAT>
 800638a:	6160      	str	r0, [r4, #20]
		FF_UnlockFAT( pxIOManager );
 800638c:	4630      	mov	r0, r6
 800638e:	f002 fc31 	bl	8008bf4 <FF_UnlockFAT>
	if( FF_isERR( xResult ) == pdFALSE )
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	dad3      	bge.n	8006340 <FF_SetCluster+0x24>
		ulReturn = 0;
 8006398:	2000      	movs	r0, #0
 800639a:	e7e8      	b.n	800636e <FF_SetCluster+0x52>
		FF_LockFAT( pxIOManager );
 800639c:	4630      	mov	r0, r6
 800639e:	f002 fc01 	bl	8008ba4 <FF_LockFAT>
			pxFile->ulAddrCurrentCluster = FF_TraverseFAT( pxIOManager, pxFile->ulObjectCluster, ulNewCluster, &xResult );
 80063a2:	ab01      	add	r3, sp, #4
 80063a4:	462a      	mov	r2, r5
 80063a6:	68a1      	ldr	r1, [r4, #8]
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7ff fb2f 	bl	8005a0c <FF_TraverseFAT>
 80063ae:	6160      	str	r0, [r4, #20]
		FF_UnlockFAT( pxIOManager );
 80063b0:	4630      	mov	r0, r6
 80063b2:	f002 fc1f 	bl	8008bf4 <FF_UnlockFAT>
 80063b6:	e7ec      	b.n	8006392 <FF_SetCluster+0x76>

080063b8 <FF_ReadPartial>:
/*-----------------------------------------------------------*/

static int32_t FF_ReadPartial( FF_FILE *pxFile, uint32_t ulItemLBA, uint32_t ulRelBlockPos, uint32_t ulCount,
	uint8_t *pucBuffer, FF_Error_t *pxError )
{
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	4604      	mov	r4, r0
 80063bc:	4617      	mov	r7, r2
 80063be:	461d      	mov	r5, r3
	}
	#else
	{
	FF_Buffer_t *pxBuffer;
		/* Reading in the standard way, using FF_Buffer_t. */
		pxBuffer = FF_GetBuffer( pxFile->pxIOManager, ulItemLBA, FF_MODE_READ );
 80063c0:	2201      	movs	r2, #1
 80063c2:	6800      	ldr	r0, [r0, #0]
 80063c4:	f001 fbf4 	bl	8007bb0 <FF_GetBuffer>
		if( pxBuffer == NULL )
 80063c8:	b188      	cbz	r0, 80063ee <FF_ReadPartial+0x36>
 80063ca:	4606      	mov	r6, r0
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_READ );
			ulBytesRead = 0ul;
		}
		else
		{
			memcpy( pucBuffer, pxBuffer->pucBuffer + ulRelBlockPos, ulCount );
 80063cc:	6881      	ldr	r1, [r0, #8]
 80063ce:	462a      	mov	r2, r5
 80063d0:	4439      	add	r1, r7
 80063d2:	9806      	ldr	r0, [sp, #24]
 80063d4:	f011 f9d5 	bl	8017782 <memcpy>
			/* Releasing a buffer in FF_MODE_READ mode will not lead to an error,
			because no disk access is needed. */
			xError = FF_ReleaseBuffer( pxFile->pxIOManager, pxBuffer );
 80063d8:	4631      	mov	r1, r6
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	f001 fcb2 	bl	8007d44 <FF_ReleaseBuffer>
			pxFile->ulFilePointer += ulCount;
 80063e0:	69e3      	ldr	r3, [r4, #28]
 80063e2:	442b      	add	r3, r5
 80063e4:	61e3      	str	r3, [r4, #28]
			ulBytesRead = ulCount;
		}
	}
	#endif

	*pxError = xError;
 80063e6:	9b07      	ldr	r3, [sp, #28]
 80063e8:	6018      	str	r0, [r3, #0]

	return ulBytesRead;
}	/* FF_ReadPartial() */
 80063ea:	4628      	mov	r0, r5
 80063ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ulBytesRead = 0ul;
 80063ee:	2500      	movs	r5, #0
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_READ );
 80063f0:	4800      	ldr	r0, [pc, #0]	; (80063f4 <FF_ReadPartial+0x3c>)
 80063f2:	e7f8      	b.n	80063e6 <FF_ReadPartial+0x2e>
 80063f4:	830c0004 	.word	0x830c0004

080063f8 <FF_WritePartial>:
}	/* FF_GetLine() */
/*-----------------------------------------------------------*/

static int32_t FF_WritePartial( FF_FILE *pxFile, uint32_t ulItemLBA, uint32_t ulRelBlockPos, uint32_t ulCount,
	const uint8_t *pucBuffer, FF_Error_t *pxError )
{
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4604      	mov	r4, r0
 80063fc:	461d      	mov	r5, r3
		}
	}
	#else
	{
	FF_Buffer_t *pxBuffer;
		if( ( ulRelBlockPos == 0 ) && ( pxFile->ulFilePointer >= pxFile->ulFileSize ) )
 80063fe:	4617      	mov	r7, r2
 8006400:	b91a      	cbnz	r2, 800640a <FF_WritePartial+0x12>
 8006402:	69c2      	ldr	r2, [r0, #28]
 8006404:	6843      	ldr	r3, [r0, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d21c      	bcs.n	8006444 <FF_WritePartial+0x4c>
		}
		else
		{
			/* A partial write will be done, make sure to read the contents before
			changing anything. */
			pxBuffer = FF_GetBuffer( pxFile->pxIOManager, ulItemLBA, FF_MODE_WRITE );
 800640a:	2202      	movs	r2, #2
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	f001 fbcf 	bl	8007bb0 <FF_GetBuffer>
 8006412:	4606      	mov	r6, r0
		}

		if( pxBuffer == NULL )
 8006414:	b1e6      	cbz	r6, 8006450 <FF_WritePartial+0x58>
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_WRITE );
		}
		else
		{
			/* Here we copy to the sector boundary. */
			memcpy( ( pxBuffer->pucBuffer + ulRelBlockPos ), pucBuffer, ulCount );
 8006416:	68b0      	ldr	r0, [r6, #8]
 8006418:	462a      	mov	r2, r5
 800641a:	9906      	ldr	r1, [sp, #24]
 800641c:	4438      	add	r0, r7
 800641e:	f011 f9b0 	bl	8017782 <memcpy>

			xError = FF_ReleaseBuffer( pxFile->pxIOManager, pxBuffer );
 8006422:	4631      	mov	r1, r6
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	f001 fc8d 	bl	8007d44 <FF_ReleaseBuffer>
		}
	}
	#endif
	if( FF_isERR( xError ) == pdFALSE )
 800642a:	2800      	cmp	r0, #0
 800642c:	db13      	blt.n	8006456 <FF_WritePartial+0x5e>
	{
		pxFile->ulFilePointer += ulCount;
 800642e:	69e3      	ldr	r3, [r4, #28]
 8006430:	442b      	add	r3, r5
 8006432:	61e3      	str	r3, [r4, #28]
		ulBytesWritten = ulCount;

		if( pxFile->ulFilePointer > pxFile->ulFileSize )
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	4293      	cmp	r3, r2
 8006438:	d900      	bls.n	800643c <FF_WritePartial+0x44>
		{
			pxFile->ulFileSize = pxFile->ulFilePointer;
 800643a:	6063      	str	r3, [r4, #4]
	}
	else
	{
		ulBytesWritten = 0ul;
	}
	*pxError = xError;
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	6018      	str	r0, [r3, #0]

	return ulBytesWritten;
}	/* FF_WritePartial() */
 8006440:	4628      	mov	r0, r5
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxBuffer = FF_GetBuffer( pxFile->pxIOManager, ulItemLBA, FF_MODE_WR_ONLY );
 8006444:	2242      	movs	r2, #66	; 0x42
 8006446:	6800      	ldr	r0, [r0, #0]
 8006448:	f001 fbb2 	bl	8007bb0 <FF_GetBuffer>
 800644c:	4606      	mov	r6, r0
 800644e:	e7e1      	b.n	8006414 <FF_WritePartial+0x1c>
			xError = ( FF_Error_t ) ( FF_ERR_DEVICE_DRIVER_FAILED | FF_WRITE );
 8006450:	4802      	ldr	r0, [pc, #8]	; (800645c <FF_WritePartial+0x64>)
		ulBytesWritten = 0ul;
 8006452:	2500      	movs	r5, #0
 8006454:	e7f2      	b.n	800643c <FF_WritePartial+0x44>
 8006456:	2500      	movs	r5, #0
 8006458:	e7f0      	b.n	800643c <FF_WritePartial+0x44>
 800645a:	bf00      	nop
 800645c:	83100004 	.word	0x83100004

08006460 <FF_Truncate>:
*	@return 0 on sucess.
*	@return negative if some error occurred
*
**/
static FF_Error_t FF_Truncate( FF_FILE *pxFile, BaseType_t bClosing )
{
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	b0c9      	sub	sp, #292	; 0x124
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
FF_Error_t xError;
FF_IOManager_t *pxIOManager = pxFile->pxIOManager;
 8006468:	6805      	ldr	r5, [r0, #0]
uint32_t ulClusterSize;
uint32_t ulClusterCount;
uint32_t ulClustersNeeded;

	/* The number of bytes contained in a cluster. */
	ulClusterSize = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 800646a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800646e:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8006470:	fb04 f403 	mul.w	r4, r4, r3

	/* See how many clusters have been allocated. */
	ulClusterCount = FF_GetChainLength( pxIOManager, pxFile->ulObjectCluster, NULL, &xError );
 8006474:	ab47      	add	r3, sp, #284	; 0x11c
 8006476:	2200      	movs	r2, #0
 8006478:	6881      	ldr	r1, [r0, #8]
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fd33 	bl	8005ee6 <FF_GetChainLength>

	/* Calculate the actual number of clusters needed, rounding up */
	ulClustersNeeded = ( pxFile->ulFileSize + ulClusterSize - 1 ) / ulClusterSize;
 8006480:	6873      	ldr	r3, [r6, #4]
	if( bClosing != pdFALSE )
 8006482:	2f00      	cmp	r7, #0
 8006484:	d031      	beq.n	80064ea <FF_Truncate+0x8a>
	{
		/* The handle will be closed after truncating.  This function is called
		because Filesize is an exact multiple of ulClusterSize. */
		ulClustersNeeded = pxFile->ulFileSize / ulClusterSize;
 8006486:	fbb3 f4f4 	udiv	r4, r3, r4
		position within the file. Always keep an extra cluster to write to. */
		ulClustersNeeded = ( pxFile->ulFileSize + ulClusterSize ) / ulClusterSize;
	}

	/* First change the FAT chain. */
	if( ( FF_isERR( xError ) == pdFALSE ) && ( ulClusterCount > ulClustersNeeded ) )
 800648a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800648c:	2b00      	cmp	r3, #0
 800648e:	db45      	blt.n	800651c <FF_Truncate+0xbc>
 8006490:	4284      	cmp	r4, r0
 8006492:	d243      	bcs.n	800651c <FF_Truncate+0xbc>
	{
		if( ulClustersNeeded == 0ul )
 8006494:	bb6c      	cbnz	r4, 80064f2 <FF_Truncate+0x92>
		{
			FF_LockFAT( pxIOManager );
 8006496:	4628      	mov	r0, r5
 8006498:	f002 fb84 	bl	8008ba4 <FF_LockFAT>
			{
				/* In FF_Truncate() */
				xError = FF_UnlinkClusterChain( pxIOManager, pxFile->ulObjectCluster, 0 );
 800649c:	2200      	movs	r2, #0
 800649e:	68b1      	ldr	r1, [r6, #8]
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7ff fd53 	bl	8005f4c <FF_UnlinkClusterChain>
 80064a6:	9047      	str	r0, [sp, #284]	; 0x11c
			}
			FF_UnlockFAT( pxIOManager );
 80064a8:	4628      	mov	r0, r5
 80064aa:	f002 fba3 	bl	8008bf4 <FF_UnlockFAT>

			if( FF_isERR( xError ) == pdFALSE )
 80064ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	db33      	blt.n	800651c <FF_Truncate+0xbc>
			{
			FF_DirEnt_t xOriginalEntry;

				/* The directory denotes the address of the first data cluster of every file.
				Now change it to 'ulAddrCurrentCluster': */
				xError = FF_GetEntry( pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry );
 80064b4:	ab03      	add	r3, sp, #12
 80064b6:	6a32      	ldr	r2, [r6, #32]
 80064b8:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fe f92e 	bl	800471c <FF_GetEntry>
 80064c0:	9047      	str	r0, [sp, #284]	; 0x11c

				if( FF_isERR( xError ) == pdFALSE )
 80064c2:	2800      	cmp	r0, #0
 80064c4:	db2a      	blt.n	800651c <FF_Truncate+0xbc>
				{
					xOriginalEntry.ulObjectCluster = 0ul;
 80064c6:	2300      	movs	r3, #0
 80064c8:	9304      	str	r3, [sp, #16]
					xError = FF_PutEntry( pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry, NULL );
 80064ca:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	ab03      	add	r3, sp, #12
 80064d0:	6a32      	ldr	r2, [r6, #32]
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7fe fa7c 	bl	80049d0 <FF_PutEntry>
 80064d8:	9047      	str	r0, [sp, #284]	; 0x11c

					if( FF_isERR( xError ) == pdFALSE )
 80064da:	2800      	cmp	r0, #0
 80064dc:	db1e      	blt.n	800651c <FF_Truncate+0xbc>
					{
						pxFile->ulObjectCluster = 0ul;
 80064de:	2300      	movs	r3, #0
 80064e0:	60b3      	str	r3, [r6, #8]
						pxFile->ulChainLength = 0ul;
 80064e2:	60f3      	str	r3, [r6, #12]
						pxFile->ulCurrentCluster = 0ul;
 80064e4:	6133      	str	r3, [r6, #16]
						pxFile->ulEndOfChain = 0ul;
 80064e6:	61b3      	str	r3, [r6, #24]
 80064e8:	e018      	b.n	800651c <FF_Truncate+0xbc>
	ulClustersNeeded = ( pxFile->ulFileSize + ulClusterSize - 1 ) / ulClusterSize;
 80064ea:	4423      	add	r3, r4
		ulClustersNeeded = ( pxFile->ulFileSize + ulClusterSize ) / ulClusterSize;
 80064ec:	fbb3 f4f4 	udiv	r4, r3, r4
 80064f0:	e7cb      	b.n	800648a <FF_Truncate+0x2a>
				}
			}
		}
		else
		{
			FF_LockFAT( pxIOManager );
 80064f2:	4628      	mov	r0, r5
 80064f4:	f002 fb56 	bl	8008ba4 <FF_LockFAT>
			{
				uint32_t ulTruncateCluster = FF_TraverseFAT( pxIOManager, pxFile->ulObjectCluster, ulClustersNeeded - 1, &xError );
 80064f8:	ab47      	add	r3, sp, #284	; 0x11c
 80064fa:	1e62      	subs	r2, r4, #1
 80064fc:	68b1      	ldr	r1, [r6, #8]
 80064fe:	4628      	mov	r0, r5
 8006500:	f7ff fa84 	bl	8005a0c <FF_TraverseFAT>

				if( FF_isERR( xError ) == pdFALSE )
 8006504:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006506:	2b00      	cmp	r3, #0
 8006508:	db05      	blt.n	8006516 <FF_Truncate+0xb6>
				{
					xError = FF_UnlinkClusterChain( pxIOManager, ulTruncateCluster, 1 );
 800650a:	2201      	movs	r2, #1
 800650c:	4601      	mov	r1, r0
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fd1c 	bl	8005f4c <FF_UnlinkClusterChain>
 8006514:	9047      	str	r0, [sp, #284]	; 0x11c
				}
			}
			FF_UnlockFAT( pxIOManager );
 8006516:	4628      	mov	r0, r5
 8006518:	f002 fb6c 	bl	8008bf4 <FF_UnlockFAT>
		}
	}

	return xError;
}	/* FF_Truncate() */
 800651c:	9847      	ldr	r0, [sp, #284]	; 0x11c
 800651e:	b049      	add	sp, #292	; 0x124
 8006520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006524 <FF_ExtendFile>:
{
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	b0ca      	sub	sp, #296	; 0x128
FF_IOManager_t *pxIOManager = pxFile->pxIOManager;
 800652a:	6804      	ldr	r4, [r0, #0]
uint32_t ulBytesPerCluster = pxIOManager->xPartition.usBlkSize * pxIOManager->xPartition.ulSectorsPerCluster;
 800652c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8006530:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8006532:	fb07 f303 	mul.w	r3, r7, r3
uint32_t ulTotalClustersNeeded = ( ulSize + ulBytesPerCluster - 1 ) / ulBytesPerCluster;
 8006536:	1e4f      	subs	r7, r1, #1
 8006538:	441f      	add	r7, r3
 800653a:	fbb7 f7f3 	udiv	r7, r7, r3
FF_Error_t xError = FF_ERR_NONE;
 800653e:	2300      	movs	r3, #0
 8006540:	9305      	str	r3, [sp, #20]
	if( ( pxFile->ucMode & FF_MODE_WRITE ) != FF_MODE_WRITE )
 8006542:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8006546:	f013 0f02 	tst.w	r3, #2
 800654a:	d105      	bne.n	8006558 <FF_ExtendFile+0x34>
		xError = ( FF_Error_t ) ( FF_ERR_FILE_NOT_OPENED_IN_WRITE_MODE | FF_EXTENDFILE );
 800654c:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <FF_ExtendFile+0x180>)
 800654e:	9305      	str	r3, [sp, #20]
	return xError;
 8006550:	9805      	ldr	r0, [sp, #20]
}	/* FF_ExtendFile() */
 8006552:	b04a      	add	sp, #296	; 0x128
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	4606      	mov	r6, r0
		if( ( pxFile->ulFileSize == 0 ) && ( pxFile->ulObjectCluster == 0 ) )
 800655a:	6843      	ldr	r3, [r0, #4]
 800655c:	b90b      	cbnz	r3, 8006562 <FF_ExtendFile+0x3e>
 800655e:	6883      	ldr	r3, [r0, #8]
 8006560:	b1e3      	cbz	r3, 800659c <FF_ExtendFile+0x78>
		if( pxFile->ulChainLength == 0 )
 8006562:	68f3      	ldr	r3, [r6, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d03f      	beq.n	80065e8 <FF_ExtendFile+0xc4>
	if( ( FF_isERR( xError ) == pdFALSE ) && ( ulTotalClustersNeeded > pxFile->ulChainLength ) )
 8006568:	68f5      	ldr	r5, [r6, #12]
 800656a:	42af      	cmp	r7, r5
 800656c:	d9f0      	bls.n	8006550 <FF_ExtendFile+0x2c>
		ulNextCluster = pxFile->ulAddrCurrentCluster;
 800656e:	f8d6 8014 	ldr.w	r8, [r6, #20]
		FF_LockFAT( pxIOManager );
 8006572:	4620      	mov	r0, r4
 8006574:	f002 fb16 	bl	8008ba4 <FF_LockFAT>
		ulCurrentCluster = FF_FindEndOfChain( pxIOManager, ulNextCluster, &xError );
 8006578:	aa05      	add	r2, sp, #20
 800657a:	4641      	mov	r1, r8
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff fa91 	bl	8005aa4 <FF_FindEndOfChain>
 8006582:	4682      	mov	sl, r0
		if( FF_isERR( xError ) == pdFALSE )
 8006584:	9b05      	ldr	r3, [sp, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	db3a      	blt.n	8006600 <FF_ExtendFile+0xdc>
		ulClusterToExtend = ( ulTotalClustersNeeded - pxFile->ulChainLength );
 800658a:	1b7f      	subs	r7, r7, r5
			for( xIndex = 0; xIndex < ( BaseType_t ) ulClusterToExtend; xIndex++ )
 800658c:	2f00      	cmp	r7, #0
 800658e:	f340 8084 	ble.w	800669a <FF_ExtendFile+0x176>
 8006592:	f04f 0800 	mov.w	r8, #0
				ulNextCluster = FF_FindFreeCluster( pxIOManager, &xError, pdTRUE );
 8006596:	f04f 0901 	mov.w	r9, #1
 800659a:	e055      	b.n	8006648 <FF_ExtendFile+0x124>
			pxFile->ulAddrCurrentCluster = FF_CreateClusterChain( pxFile->pxIOManager, &xError );
 800659c:	a905      	add	r1, sp, #20
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff fc82 	bl	8005ea8 <FF_CreateClusterChain>
 80065a4:	6170      	str	r0, [r6, #20]
			if( FF_isERR( xError ) == pdFALSE )
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dbd1      	blt.n	8006550 <FF_ExtendFile+0x2c>
				xError = FF_GetEntry( pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry );
 80065ac:	ab06      	add	r3, sp, #24
 80065ae:	6a32      	ldr	r2, [r6, #32]
 80065b0:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fe f8b2 	bl	800471c <FF_GetEntry>
 80065b8:	9005      	str	r0, [sp, #20]
				if( FF_isERR( xError ) == pdFALSE )
 80065ba:	2800      	cmp	r0, #0
 80065bc:	dbc8      	blt.n	8006550 <FF_ExtendFile+0x2c>
					xOriginalEntry.ulObjectCluster = pxFile->ulAddrCurrentCluster;
 80065be:	6973      	ldr	r3, [r6, #20]
 80065c0:	9307      	str	r3, [sp, #28]
					xError = FF_PutEntry( pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry, NULL );
 80065c2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80065c4:	2300      	movs	r3, #0
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	ab06      	add	r3, sp, #24
 80065ca:	6a32      	ldr	r2, [r6, #32]
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7fe f9ff 	bl	80049d0 <FF_PutEntry>
 80065d2:	9005      	str	r0, [sp, #20]
					if( FF_isERR( xError ) == pdFALSE )
 80065d4:	2800      	cmp	r0, #0
 80065d6:	dbbb      	blt.n	8006550 <FF_ExtendFile+0x2c>
						pxFile->ulObjectCluster = pxFile->ulAddrCurrentCluster;
 80065d8:	6973      	ldr	r3, [r6, #20]
 80065da:	60b3      	str	r3, [r6, #8]
						pxFile->ulChainLength = 1;
 80065dc:	2201      	movs	r2, #1
 80065de:	60f2      	str	r2, [r6, #12]
						pxFile->ulCurrentCluster = 0;
 80065e0:	2200      	movs	r2, #0
 80065e2:	6132      	str	r2, [r6, #16]
						pxFile->ulEndOfChain = pxFile->ulAddrCurrentCluster;
 80065e4:	61b3      	str	r3, [r6, #24]
 80065e6:	e7bf      	b.n	8006568 <FF_ExtendFile+0x44>
			pxFile->ulChainLength = FF_GetChainLength( pxIOManager, pxFile->ulObjectCluster, &pxFile->ulEndOfChain, &xError );
 80065e8:	ab05      	add	r3, sp, #20
 80065ea:	f106 0218 	add.w	r2, r6, #24
 80065ee:	68b1      	ldr	r1, [r6, #8]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff fc78 	bl	8005ee6 <FF_GetChainLength>
 80065f6:	60f0      	str	r0, [r6, #12]
	if( ( FF_isERR( xError ) == pdFALSE ) && ( ulTotalClustersNeeded > pxFile->ulChainLength ) )
 80065f8:	9b05      	ldr	r3, [sp, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dab4      	bge.n	8006568 <FF_ExtendFile+0x44>
 80065fe:	e7a7      	b.n	8006550 <FF_ExtendFile+0x2c>
BaseType_t xIndex = 0;
 8006600:	f04f 0800 	mov.w	r8, #0
 8006604:	e030      	b.n	8006668 <FF_ExtendFile+0x144>
			( pxFile->ulAddrCurrentCluster != pxFile->ulEndOfChain ) )
 8006606:	69b3      	ldr	r3, [r6, #24]
		if( ( pxFile->ulCurrentCluster == pxFile->ulChainLength - 1 ) &&
 8006608:	6972      	ldr	r2, [r6, #20]
 800660a:	429a      	cmp	r2, r3
			pxFile->ulAddrCurrentCluster = pxFile->ulEndOfChain;
 800660c:	bf18      	it	ne
 800660e:	6173      	strne	r3, [r6, #20]
 8006610:	e03a      	b.n	8006688 <FF_ExtendFile+0x164>
	pxFATBuffers->pxBuffers[ 0 ] = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	9302      	str	r3, [sp, #8]
	pxFATBuffers->pxBuffers[ 1 ] = NULL;
 8006616:	9303      	str	r3, [sp, #12]
	pxFATBuffers->ucMode = ucMode; /* FF_MODE_READ/WRITE */
 8006618:	2302      	movs	r3, #2
 800661a:	f88d 3010 	strb.w	r3, [sp, #16]
				xError = FF_putFATEntry( pxIOManager, ulCurrentCluster, ulNextCluster, &xFATBuffers );
 800661e:	ab02      	add	r3, sp, #8
 8006620:	4602      	mov	r2, r0
 8006622:	4651      	mov	r1, sl
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fa55 	bl	8005ad4 <FF_putFATEntry>
 800662a:	9005      	str	r0, [sp, #20]
				if( FF_isERR( xError ) )
 800662c:	2800      	cmp	r0, #0
 800662e:	db18      	blt.n	8006662 <FF_ExtendFile+0x13e>
				xError = FF_ReleaseFATBuffers( pxIOManager, &xFATBuffers );
 8006630:	a902      	add	r1, sp, #8
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff f8a5 	bl	8005782 <FF_ReleaseFATBuffers>
 8006638:	9005      	str	r0, [sp, #20]
				if( FF_isERR( xError ) )
 800663a:	2800      	cmp	r0, #0
 800663c:	db11      	blt.n	8006662 <FF_ExtendFile+0x13e>
			for( xIndex = 0; xIndex < ( BaseType_t ) ulClusterToExtend; xIndex++ )
 800663e:	f108 0801 	add.w	r8, r8, #1
				ulNextCluster = FF_FindFreeCluster( pxIOManager, &xError, pdTRUE );
 8006642:	46aa      	mov	sl, r5
			for( xIndex = 0; xIndex < ( BaseType_t ) ulClusterToExtend; xIndex++ )
 8006644:	45b8      	cmp	r8, r7
 8006646:	d02b      	beq.n	80066a0 <FF_ExtendFile+0x17c>
				ulNextCluster = FF_FindFreeCluster( pxIOManager, &xError, pdTRUE );
 8006648:	464a      	mov	r2, r9
 800664a:	a905      	add	r1, sp, #20
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff faf3 	bl	8005c38 <FF_FindFreeCluster>
 8006652:	4605      	mov	r5, r0
				if( ( FF_isERR( xError ) == pdFALSE ) && ( ulNextCluster == 0UL ) )
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	db03      	blt.n	8006662 <FF_ExtendFile+0x13e>
 800665a:	2800      	cmp	r0, #0
 800665c:	d1d9      	bne.n	8006612 <FF_ExtendFile+0xee>
					xError = ( FF_Error_t ) ( FF_ERR_FAT_NO_FREE_CLUSTERS | FF_EXTENDFILE );
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <FF_ExtendFile+0x184>)
 8006660:	9305      	str	r3, [sp, #20]
			pxFile->ulChainLength += xIndex;
 8006662:	68f3      	ldr	r3, [r6, #12]
 8006664:	4443      	add	r3, r8
 8006666:	60f3      	str	r3, [r6, #12]
		FF_UnlockFAT( pxIOManager );
 8006668:	4620      	mov	r0, r4
 800666a:	f002 fac3 	bl	8008bf4 <FF_UnlockFAT>
			xTempError = FF_DecreaseFreeClusters( pxIOManager, ( uint32_t ) xIndex );	/* Keep Tab of Numbers for fast FreeSize() */
 800666e:	4641      	mov	r1, r8
 8006670:	4620      	mov	r0, r4
 8006672:	f002 f987 	bl	8008984 <FF_DecreaseFreeClusters>
			if( FF_isERR( xError ) == pdFALSE )
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	2b00      	cmp	r3, #0
				xError = xTempError;
 800667a:	bfa8      	it	ge
 800667c:	9005      	strge	r0, [sp, #20]
		if( ( pxFile->ulCurrentCluster == pxFile->ulChainLength - 1 ) &&
 800667e:	68f3      	ldr	r3, [r6, #12]
 8006680:	3b01      	subs	r3, #1
 8006682:	6932      	ldr	r2, [r6, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d0be      	beq.n	8006606 <FF_ExtendFile+0xe2>
			xTempError = FF_FlushCache( pxIOManager );
 8006688:	4620      	mov	r0, r4
 800668a:	f001 fa2f 	bl	8007aec <FF_FlushCache>
			if( FF_isERR( xError ) == pdFALSE )
 800668e:	9b05      	ldr	r3, [sp, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f6ff af5d 	blt.w	8006550 <FF_ExtendFile+0x2c>
				xError = xTempError;
 8006696:	9005      	str	r0, [sp, #20]
 8006698:	e75a      	b.n	8006550 <FF_ExtendFile+0x2c>
			for( xIndex = 0; xIndex < ( BaseType_t ) ulClusterToExtend; xIndex++ )
 800669a:	4605      	mov	r5, r0
 800669c:	f04f 0800 	mov.w	r8, #0
				pxFile->ulEndOfChain = ulCurrentCluster;
 80066a0:	61b5      	str	r5, [r6, #24]
 80066a2:	e7de      	b.n	8006662 <FF_ExtendFile+0x13e>
 80066a4:	830a0023 	.word	0x830a0023
 80066a8:	830a0046 	.word	0x830a0046

080066ac <FF_GetModeBits>:
{
 80066ac:	4602      	mov	r2, r0
	while( *pcMode != '\0' )
 80066ae:	7803      	ldrb	r3, [r0, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80b6 	beq.w	8006822 <FF_GetModeBits+0x176>
 80066b6:	2000      	movs	r0, #0
 80066b8:	e006      	b.n	80066c8 <FF_GetModeBits+0x1c>
				ucModeBits |= FF_MODE_READ;
 80066ba:	f040 0001 	orr.w	r0, r0, #1
	while( *pcMode != '\0' )
 80066be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80ac 	beq.w	8006820 <FF_GetModeBits+0x174>
		switch( *pcMode )
 80066c8:	3b2b      	subs	r3, #43	; 0x2b
 80066ca:	2b4c      	cmp	r3, #76	; 0x4c
 80066cc:	d8f7      	bhi.n	80066be <FF_GetModeBits+0x12>
 80066ce:	a101      	add	r1, pc, #4	; (adr r1, 80066d4 <FF_GetModeBits+0x28>)
 80066d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d4:	08006815 	.word	0x08006815
 80066d8:	080066bf 	.word	0x080066bf
 80066dc:	080066bf 	.word	0x080066bf
 80066e0:	080066bf 	.word	0x080066bf
 80066e4:	080066bf 	.word	0x080066bf
 80066e8:	080066bf 	.word	0x080066bf
 80066ec:	080066bf 	.word	0x080066bf
 80066f0:	080066bf 	.word	0x080066bf
 80066f4:	080066bf 	.word	0x080066bf
 80066f8:	080066bf 	.word	0x080066bf
 80066fc:	080066bf 	.word	0x080066bf
 8006700:	080066bf 	.word	0x080066bf
 8006704:	080066bf 	.word	0x080066bf
 8006708:	080066bf 	.word	0x080066bf
 800670c:	080066bf 	.word	0x080066bf
 8006710:	080066bf 	.word	0x080066bf
 8006714:	080066bf 	.word	0x080066bf
 8006718:	080066bf 	.word	0x080066bf
 800671c:	080066bf 	.word	0x080066bf
 8006720:	080066bf 	.word	0x080066bf
 8006724:	080066bf 	.word	0x080066bf
 8006728:	080066bf 	.word	0x080066bf
 800672c:	0800680f 	.word	0x0800680f
 8006730:	080066bf 	.word	0x080066bf
 8006734:	080066bf 	.word	0x080066bf
 8006738:	0800681b 	.word	0x0800681b
 800673c:	080066bf 	.word	0x080066bf
 8006740:	080066bf 	.word	0x080066bf
 8006744:	080066bf 	.word	0x080066bf
 8006748:	080066bf 	.word	0x080066bf
 800674c:	080066bf 	.word	0x080066bf
 8006750:	080066bf 	.word	0x080066bf
 8006754:	080066bf 	.word	0x080066bf
 8006758:	080066bf 	.word	0x080066bf
 800675c:	080066bf 	.word	0x080066bf
 8006760:	080066bf 	.word	0x080066bf
 8006764:	080066bf 	.word	0x080066bf
 8006768:	080066bf 	.word	0x080066bf
 800676c:	080066bf 	.word	0x080066bf
 8006770:	080066bb 	.word	0x080066bb
 8006774:	080066bf 	.word	0x080066bf
 8006778:	080066bf 	.word	0x080066bf
 800677c:	080066bf 	.word	0x080066bf
 8006780:	080066bf 	.word	0x080066bf
 8006784:	08006809 	.word	0x08006809
 8006788:	080066bf 	.word	0x080066bf
 800678c:	080066bf 	.word	0x080066bf
 8006790:	080066bf 	.word	0x080066bf
 8006794:	080066bf 	.word	0x080066bf
 8006798:	080066bf 	.word	0x080066bf
 800679c:	080066bf 	.word	0x080066bf
 80067a0:	080066bf 	.word	0x080066bf
 80067a4:	080066bf 	.word	0x080066bf
 80067a8:	080066bf 	.word	0x080066bf
 80067ac:	0800680f 	.word	0x0800680f
 80067b0:	080066bf 	.word	0x080066bf
 80067b4:	080066bf 	.word	0x080066bf
 80067b8:	080066bf 	.word	0x080066bf
 80067bc:	080066bf 	.word	0x080066bf
 80067c0:	080066bf 	.word	0x080066bf
 80067c4:	080066bf 	.word	0x080066bf
 80067c8:	080066bf 	.word	0x080066bf
 80067cc:	080066bf 	.word	0x080066bf
 80067d0:	080066bf 	.word	0x080066bf
 80067d4:	080066bf 	.word	0x080066bf
 80067d8:	080066bf 	.word	0x080066bf
 80067dc:	080066bf 	.word	0x080066bf
 80067e0:	080066bf 	.word	0x080066bf
 80067e4:	080066bf 	.word	0x080066bf
 80067e8:	080066bf 	.word	0x080066bf
 80067ec:	080066bf 	.word	0x080066bf
 80067f0:	080066bb 	.word	0x080066bb
 80067f4:	080066bf 	.word	0x080066bf
 80067f8:	080066bf 	.word	0x080066bf
 80067fc:	080066bf 	.word	0x080066bf
 8006800:	080066bf 	.word	0x080066bf
 8006804:	08006809 	.word	0x08006809
				ucModeBits |= FF_MODE_TRUNCATE;
 8006808:	f040 001a 	orr.w	r0, r0, #26
				break;
 800680c:	e757      	b.n	80066be <FF_GetModeBits+0x12>
				ucModeBits |= FF_MODE_CREATE; /* Create if not exist. */
 800680e:	f040 000e 	orr.w	r0, r0, #14
				break;
 8006812:	e754      	b.n	80066be <FF_GetModeBits+0x12>
				ucModeBits |= FF_MODE_WRITE;	/* RW Mode. */
 8006814:	f040 0003 	orr.w	r0, r0, #3
				break;
 8006818:	e751      	b.n	80066be <FF_GetModeBits+0x12>
				ucModeBits |= FF_MODE_DIR;
 800681a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
				break;
 800681e:	e74e      	b.n	80066be <FF_GetModeBits+0x12>
 8006820:	4770      	bx	lr
uint8_t ucModeBits = 0x00;
 8006822:	2000      	movs	r0, #0
}	/* FF_GetModeBits() */
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <FF_Open>:
{
 8006828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800682c:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8006830:	4605      	mov	r5, r0
 8006832:	4689      	mov	r9, r1
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
	memset( &xFindParams, '\0', sizeof( xFindParams ) );
 8006838:	2230      	movs	r2, #48	; 0x30
 800683a:	2100      	movs	r1, #0
 800683c:	a833      	add	r0, sp, #204	; 0xcc
 800683e:	f010 ffc5 	bl	80177cc <memset>
	if( ( ucMode & FF_MODE_CREATE ) != 0 )
 8006842:	f016 0808 	ands.w	r8, r6, #8
		xFindParams.ulFlags |= FIND_FLAG_CREATE_FLAG;
 8006846:	bf1c      	itt	ne
 8006848:	2320      	movne	r3, #32
 800684a:	9335      	strne	r3, [sp, #212]	; 0xd4
	if( pxIOManager == NULL )
 800684c:	b1d5      	cbz	r5, 8006884 <FF_Open+0x5c>
	else if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 800684e:	f895 36b5 	ldrb.w	r3, [r5, #1717]	; 0x6b5
 8006852:	f013 0f20 	tst.w	r3, #32
 8006856:	d018      	beq.n	800688a <FF_Open+0x62>
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_OPEN );
 8006858:	4b84      	ldr	r3, [pc, #528]	; (8006a6c <FF_Open+0x244>)
 800685a:	933f      	str	r3, [sp, #252]	; 0xfc
FF_FILE *pxFile = NULL;
 800685c:	2400      	movs	r4, #0
	if( FF_isERR( xError ) == pdFALSE )
 800685e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8006860:	2b00      	cmp	r3, #0
 8006862:	db63      	blt.n	800692c <FF_Open+0x104>
		if( ( xDirEntry.ucAttrib == FF_FAT_ATTR_DIR ) && ( ( ucMode & FF_MODE_DIR ) == 0 ) )
 8006864:	f89d 31fb 	ldrb.w	r3, [sp, #507]	; 0x1fb
 8006868:	2b10      	cmp	r3, #16
 800686a:	f000 809f 	beq.w	80069ac <FF_Open+0x184>
		else if( ( ( ucMode & ( FF_MODE_WRITE | FF_MODE_APPEND ) ) != 0 ) && ( ( xDirEntry.ucAttrib & FF_FAT_ATTR_READONLY ) != 0 ) )
 800686e:	f016 0f06 	tst.w	r6, #6
 8006872:	f000 80a1 	beq.w	80069b8 <FF_Open+0x190>
 8006876:	f013 0f01 	tst.w	r3, #1
 800687a:	f000 809d 	beq.w	80069b8 <FF_Open+0x190>
			xError = ( FF_Error_t ) ( FF_ERR_FILE_IS_READ_ONLY | FF_OPEN );
 800687e:	4b7c      	ldr	r3, [pc, #496]	; (8006a70 <FF_Open+0x248>)
 8006880:	933f      	str	r3, [sp, #252]	; 0xfc
 8006882:	e053      	b.n	800692c <FF_Open+0x104>
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_OPEN );
 8006884:	4b7b      	ldr	r3, [pc, #492]	; (8006a74 <FF_Open+0x24c>)
 8006886:	933f      	str	r3, [sp, #252]	; 0xfc
 8006888:	e7e8      	b.n	800685c <FF_Open+0x34>
		xError = FF_ERR_NONE;
 800688a:	2300      	movs	r3, #0
 800688c:	933f      	str	r3, [sp, #252]	; 0xfc
		xIndex = ( BaseType_t ) STRLEN( pcPath );
 800688e:	4648      	mov	r0, r9
 8006890:	f7f9 fca8 	bl	80001e4 <strlen>
 8006894:	4604      	mov	r4, r0
		while( xIndex != 0 )
 8006896:	2800      	cmp	r0, #0
 8006898:	f000 80e0 	beq.w	8006a5c <FF_Open+0x234>
			if( ( pcPath[ xIndex ] == '\\' ) || ( pcPath[ xIndex ] == '/' ) )
 800689c:	eb09 0200 	add.w	r2, r9, r0
 80068a0:	f819 3000 	ldrb.w	r3, [r9, r0]
 80068a4:	2b5c      	cmp	r3, #92	; 0x5c
 80068a6:	d00a      	beq.n	80068be <FF_Open+0x96>
 80068a8:	2b2f      	cmp	r3, #47	; 0x2f
 80068aa:	d008      	beq.n	80068be <FF_Open+0x96>
		while( xIndex != 0 )
 80068ac:	3c01      	subs	r4, #1
 80068ae:	f000 80d5 	beq.w	8006a5c <FF_Open+0x234>
			if( ( pcPath[ xIndex ] == '\\' ) || ( pcPath[ xIndex ] == '/' ) )
 80068b2:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80068b6:	2b5c      	cmp	r3, #92	; 0x5c
 80068b8:	d001      	beq.n	80068be <FF_Open+0x96>
 80068ba:	2b2f      	cmp	r3, #47	; 0x2f
 80068bc:	d1f6      	bne.n	80068ac <FF_Open+0x84>
		STRNCPY( pcFileName, pcPath + xIndex + 1, ffconfigMAX_FILENAME );
 80068be:	1c61      	adds	r1, r4, #1
 80068c0:	22c1      	movs	r2, #193	; 0xc1
 80068c2:	4449      	add	r1, r9
 80068c4:	a802      	add	r0, sp, #8
 80068c6:	f011 fa08 	bl	8017cda <strncpy>
		FF_CreateShortName( &xFindParams, pcFileName );
 80068ca:	a902      	add	r1, sp, #8
 80068cc:	a833      	add	r0, sp, #204	; 0xcc
 80068ce:	f7fe f8fd 	bl	8004acc <FF_CreateShortName>
		xFindParams.ulDirCluster = FF_FindDir( pxIOManager, pcPath, xIndex, &xError );
 80068d2:	ab3f      	add	r3, sp, #252	; 0xfc
 80068d4:	b2a2      	uxth	r2, r4
 80068d6:	4649      	mov	r1, r9
 80068d8:	4628      	mov	r0, r5
 80068da:	f7fd fe67 	bl	80045ac <FF_FindDir>
 80068de:	9033      	str	r0, [sp, #204]	; 0xcc
		if( xFindParams.ulDirCluster == 0ul )
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d131      	bne.n	8006948 <FF_Open+0x120>
			if( ( ucMode & FF_MODE_WRITE ) != 0 )
 80068e4:	f016 0f02 	tst.w	r6, #2
 80068e8:	d128      	bne.n	800693c <FF_Open+0x114>
FF_FILE *pxFile = NULL;
 80068ea:	2400      	movs	r4, #0
	if( FF_isERR( xError ) == pdFALSE )
 80068ec:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	db1c      	blt.n	800692c <FF_Open+0x104>
		pxFile->ucMode = ucMode;
 80068f2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
		ulFileCluster = FF_FindEntryInDir( pxIOManager, &xFindParams, pcFileName, 0x00, &xDirEntry, &xError );
 80068f6:	ab3f      	add	r3, sp, #252	; 0xfc
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	ab40      	add	r3, sp, #256	; 0x100
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2300      	movs	r3, #0
 8006900:	aa02      	add	r2, sp, #8
 8006902:	a933      	add	r1, sp, #204	; 0xcc
 8006904:	4628      	mov	r0, r5
 8006906:	f7fd fce3 	bl	80042d0 <FF_FindEntryInDir>
		if( ulFileCluster == 0ul )
 800690a:	2800      	cmp	r0, #0
 800690c:	d1a7      	bne.n	800685e <FF_Open+0x36>
			if( STRLEN( pcFileName ) == STRLEN( xDirEntry.pcFileName ) )
 800690e:	a802      	add	r0, sp, #8
 8006910:	f7f9 fc68 	bl	80001e4 <strlen>
 8006914:	4681      	mov	r9, r0
 8006916:	f50d 709d 	add.w	r0, sp, #314	; 0x13a
 800691a:	f7f9 fc63 	bl	80001e4 <strlen>
 800691e:	4581      	cmp	r9, r0
 8006920:	d022      	beq.n	8006968 <FF_Open+0x140>
			if( ( ucMode & FF_MODE_CREATE ) == 0 )
 8006922:	f1b8 0f00 	cmp.w	r8, #0
 8006926:	d12d      	bne.n	8006984 <FF_Open+0x15c>
				xError = ( FF_Error_t ) ( FF_ERR_FILE_NOT_FOUND | FF_OPEN );
 8006928:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <FF_Open+0x250>)
 800692a:	933f      	str	r3, [sp, #252]	; 0xfc
		if( pxFile != NULL )
 800692c:	2c00      	cmp	r4, #0
 800692e:	f000 808d 	beq.w	8006a4c <FF_Open+0x224>
			ffconfigFREE( pxFile );
 8006932:	4620      	mov	r0, r4
 8006934:	f00c fe4e 	bl	80135d4 <vPortFree>
		pxFile = NULL;
 8006938:	2400      	movs	r4, #0
 800693a:	e087      	b.n	8006a4c <FF_Open+0x224>
				FF_PRINTF( "FF_Open[%s]: Path not found\n", pcPath );
 800693c:	4649      	mov	r1, r9
 800693e:	484f      	ldr	r0, [pc, #316]	; (8006a7c <FF_Open+0x254>)
 8006940:	f010 f806 	bl	8016950 <lUDPLoggingPrintf>
FF_FILE *pxFile = NULL;
 8006944:	2400      	movs	r4, #0
 8006946:	e7d1      	b.n	80068ec <FF_Open+0xc4>
		else if( FF_isERR( xError ) == pdFALSE )
 8006948:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800694a:	2b00      	cmp	r3, #0
 800694c:	db86      	blt.n	800685c <FF_Open+0x34>
	pxFile = ffconfigMALLOC( sizeof( FF_FILE ) );
 800694e:	2030      	movs	r0, #48	; 0x30
 8006950:	f00c fdda 	bl	8013508 <pvPortMalloc>
	if( pxFile == NULL )
 8006954:	4604      	mov	r4, r0
 8006956:	b120      	cbz	r0, 8006962 <FF_Open+0x13a>
		memset( pxFile, 0, sizeof( *pxFile ) );
 8006958:	2230      	movs	r2, #48	; 0x30
 800695a:	2100      	movs	r1, #0
 800695c:	f010 ff36 	bl	80177cc <memset>
 8006960:	e7c4      	b.n	80068ec <FF_Open+0xc4>
		*pxError = ( FF_Error_t ) ( FF_ERR_NOT_ENOUGH_MEMORY | FF_OPEN );
 8006962:	4b47      	ldr	r3, [pc, #284]	; (8006a80 <FF_Open+0x258>)
 8006964:	933f      	str	r3, [sp, #252]	; 0xfc
 8006966:	e779      	b.n	800685c <FF_Open+0x34>
				if( ( xDirEntry.ulFileSize == 0 ) && ( FF_strmatch( pcFileName, xDirEntry.pcFileName, ( BaseType_t ) STRLEN( pcFileName ) ) == pdTRUE ) )
 8006968:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1d9      	bne.n	8006922 <FF_Open+0xfa>
 800696e:	464a      	mov	r2, r9
 8006970:	f50d 719d 	add.w	r1, sp, #314	; 0x13a
 8006974:	a802      	add	r0, sp, #8
 8006976:	f002 ff9a 	bl	80098ae <FF_strmatch>
 800697a:	2801      	cmp	r0, #1
 800697c:	d1d1      	bne.n	8006922 <FF_Open+0xfa>
					xError = FF_ERR_NONE;
 800697e:	2300      	movs	r3, #0
 8006980:	933f      	str	r3, [sp, #252]	; 0xfc
 8006982:	e76f      	b.n	8006864 <FF_Open+0x3c>
				ulFileCluster = FF_CreateFile( pxIOManager, &xFindParams, pcFileName, &xDirEntry, &xError );
 8006984:	f10d 08fc 	add.w	r8, sp, #252	; 0xfc
 8006988:	f8cd 8000 	str.w	r8, [sp]
 800698c:	ab40      	add	r3, sp, #256	; 0x100
 800698e:	aa02      	add	r2, sp, #8
 8006990:	a933      	add	r1, sp, #204	; 0xcc
 8006992:	4628      	mov	r0, r5
 8006994:	f7fe fd18 	bl	80053c8 <FF_CreateFile>
				if( FF_isERR( xError ) == pdFALSE )
 8006998:	f8d8 3000 	ldr.w	r3, [r8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	dbc5      	blt.n	800692c <FF_Open+0x104>
					xDirEntry.usCurrentItem += 1;
 80069a0:	f8bd 3114 	ldrh.w	r3, [sp, #276]	; 0x114
 80069a4:	3301      	adds	r3, #1
 80069a6:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 80069aa:	e75b      	b.n	8006864 <FF_Open+0x3c>
		if( ( xDirEntry.ucAttrib == FF_FAT_ATTR_DIR ) && ( ( ucMode & FF_MODE_DIR ) == 0 ) )
 80069ac:	f016 0f80 	tst.w	r6, #128	; 0x80
 80069b0:	d102      	bne.n	80069b8 <FF_Open+0x190>
			xError = ( FF_Error_t ) ( FF_ERR_FILE_OBJECT_IS_A_DIR | FF_OPEN );
 80069b2:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <FF_Open+0x25c>)
 80069b4:	933f      	str	r3, [sp, #252]	; 0xfc
 80069b6:	e7b9      	b.n	800692c <FF_Open+0x104>
		pxFile->pxIOManager = pxIOManager;
 80069b8:	6025      	str	r5, [r4, #0]
		pxFile->ulFilePointer = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61e3      	str	r3, [r4, #28]
		pxFile->ulObjectCluster = xDirEntry.ulObjectCluster;
 80069be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80069c0:	60a2      	str	r2, [r4, #8]
		pxFile->ulFileSize = xDirEntry.ulFileSize;
 80069c2:	9940      	ldr	r1, [sp, #256]	; 0x100
 80069c4:	6061      	str	r1, [r4, #4]
		pxFile->ulCurrentCluster = 0;
 80069c6:	6123      	str	r3, [r4, #16]
		pxFile->ulAddrCurrentCluster = pxFile->ulObjectCluster;
 80069c8:	6162      	str	r2, [r4, #20]
		pxFile->pxNext = NULL;
 80069ca:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxFile->ulDirCluster = xFindParams.ulDirCluster;
 80069cc:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80069ce:	6222      	str	r2, [r4, #32]
		pxFile->usDirEntry = xDirEntry.usCurrentItem - 1;
 80069d0:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 80069d4:	3a01      	subs	r2, #1
 80069d6:	8562      	strh	r2, [r4, #42]	; 0x2a
		pxFile->ulChainLength = 0;
 80069d8:	60e3      	str	r3, [r4, #12]
		pxFile->ulEndOfChain = 0;
 80069da:	61a3      	str	r3, [r4, #24]
		pxFile->ulValidFlags &= ~( FF_VALID_FLAG_DELETED );
 80069dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069de:	f023 0302 	bic.w	r3, r3, #2
 80069e2:	6263      	str	r3, [r4, #36]	; 0x24
		FF_PendSemaphore( pxIOManager->pvSemaphore );
 80069e4:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 80069e8:	f002 f856 	bl	8008a98 <FF_PendSemaphore>
			pxFileChain = ( FF_FILE * ) pxIOManager->FirstFile;
 80069ec:	f8d5 36a4 	ldr.w	r3, [r5, #1700]	; 0x6a4
			if( pxFileChain == NULL )
 80069f0:	b10b      	cbz	r3, 80069f6 <FF_Open+0x1ce>
					if( ( pxFileChain->ulObjectCluster == pxFile->ulObjectCluster ) &&
 80069f2:	68a1      	ldr	r1, [r4, #8]
 80069f4:	e005      	b.n	8006a02 <FF_Open+0x1da>
				pxIOManager->FirstFile = pxFile;
 80069f6:	f8c5 46a4 	str.w	r4, [r5, #1700]	; 0x6a4
 80069fa:	e019      	b.n	8006a30 <FF_Open+0x208>
					if( pxFileChain->pxNext == NULL )
 80069fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fe:	b1b2      	cbz	r2, 8006a2e <FF_Open+0x206>
					pxFileChain = ( FF_FILE * ) pxFileChain->pxNext;
 8006a00:	4613      	mov	r3, r2
					if( ( pxFileChain->ulObjectCluster == pxFile->ulObjectCluster ) &&
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	428a      	cmp	r2, r1
 8006a06:	d1f9      	bne.n	80069fc <FF_Open+0x1d4>
 8006a08:	6a18      	ldr	r0, [r3, #32]
 8006a0a:	6a22      	ldr	r2, [r4, #32]
 8006a0c:	4290      	cmp	r0, r2
 8006a0e:	d1f5      	bne.n	80069fc <FF_Open+0x1d4>
						( pxFileChain->ulDirCluster == pxFile->ulDirCluster ) &&
 8006a10:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8006a12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006a14:	4290      	cmp	r0, r2
 8006a16:	d1f1      	bne.n	80069fc <FF_Open+0x1d4>
						if( ( ( pxFileChain->ucMode | pxFile->ucMode ) & ( FF_MODE_WRITE | FF_MODE_APPEND ) ) != 0 )
 8006a18:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006a1c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8006a20:	4302      	orrs	r2, r0
 8006a22:	f012 0f06 	tst.w	r2, #6
 8006a26:	d0e9      	beq.n	80069fc <FF_Open+0x1d4>
							xError = ( FF_Error_t ) ( FF_ERR_FILE_ALREADY_OPEN | FF_OPEN );
 8006a28:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <FF_Open+0x260>)
 8006a2a:	933f      	str	r3, [sp, #252]	; 0xfc
							break;
 8006a2c:	e000      	b.n	8006a30 <FF_Open+0x208>
						pxFileChain->pxNext = pxFile;
 8006a2e:	62dc      	str	r4, [r3, #44]	; 0x2c
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8006a30:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8006a34:	f002 f840 	bl	8008ab8 <FF_ReleaseSemaphore>
	if( FF_isERR( xError ) == pdFALSE )
 8006a38:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f6ff af76 	blt.w	800692c <FF_Open+0x104>
		if( ( ucMode & FF_MODE_TRUNCATE ) != 0 )
 8006a40:	f016 0f10 	tst.w	r6, #16
 8006a44:	d002      	beq.n	8006a4c <FF_Open+0x224>
			pxFile->ulFileSize = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	6063      	str	r3, [r4, #4]
			pxFile->ulFilePointer = 0;
 8006a4a:	61e3      	str	r3, [r4, #28]
	if( pxError != NULL )
 8006a4c:	b10f      	cbz	r7, 8006a52 <FF_Open+0x22a>
		*pxError = xError;
 8006a4e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8006a50:	603b      	str	r3, [r7, #0]
}  /* FF_Open() */
 8006a52:	4620      	mov	r0, r4
 8006a54:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8006a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		STRNCPY( pcFileName, pcPath + xIndex + 1, ffconfigMAX_FILENAME );
 8006a5c:	22c1      	movs	r2, #193	; 0xc1
 8006a5e:	f109 0101 	add.w	r1, r9, #1
 8006a62:	a802      	add	r0, sp, #8
 8006a64:	f011 f939 	bl	8017cda <strncpy>
			xIndex = 1;
 8006a68:	2401      	movs	r4, #1
 8006a6a:	e72e      	b.n	80068ca <FF_Open+0xa2>
 8006a6c:	83020008 	.word	0x83020008
 8006a70:	83020021 	.word	0x83020021
 8006a74:	83020002 	.word	0x83020002
 8006a78:	8302001f 	.word	0x8302001f
 8006a7c:	08019078 	.word	0x08019078
 8006a80:	83020003 	.word	0x83020003
 8006a84:	83020020 	.word	0x83020020
 8006a88:	8302001e 	.word	0x8302001e

08006a8c <FF_isDirEmpty>:
	if( pxIOManager == NULL )
 8006a8c:	b310      	cbz	r0, 8006ad4 <FF_isDirEmpty+0x48>
{
 8006a8e:	b570      	push	{r4, r5, r6, lr}
 8006a90:	b0c4      	sub	sp, #272	; 0x110
 8006a92:	4604      	mov	r4, r0
 8006a94:	460a      	mov	r2, r1
		xError = FF_FindFirst( pxIOManager, &xDirEntry, pcPath );
 8006a96:	4669      	mov	r1, sp
 8006a98:	f7fd ff58 	bl	800494c <FF_FindFirst>
		while( xError == 0 )
 8006a9c:	b9e0      	cbnz	r0, 8006ad8 <FF_isDirEmpty+0x4c>
			if( ( strcmp( xDirEntry.pcFileName, ".." ) != 0 ) && ( strcmp( xDirEntry.pcFileName, "." ) != 0 ) )
 8006a9e:	4d0f      	ldr	r5, [pc, #60]	; (8006adc <FF_isDirEmpty+0x50>)
 8006aa0:	4e0f      	ldr	r6, [pc, #60]	; (8006ae0 <FF_isDirEmpty+0x54>)
 8006aa2:	e004      	b.n	8006aae <FF_isDirEmpty+0x22>
			xError = FF_FindNext( pxIOManager, &xDirEntry );
 8006aa4:	4669      	mov	r1, sp
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7fd fe84 	bl	80047b4 <FF_FindNext>
		while( xError == 0 )
 8006aac:	b978      	cbnz	r0, 8006ace <FF_isDirEmpty+0x42>
			if( ( strcmp( xDirEntry.pcFileName, ".." ) != 0 ) && ( strcmp( xDirEntry.pcFileName, "." ) != 0 ) )
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 8006ab4:	f7f9 fb8c 	bl	80001d0 <strcmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0f3      	beq.n	8006aa4 <FF_isDirEmpty+0x18>
 8006abc:	4631      	mov	r1, r6
 8006abe:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 8006ac2:	f7f9 fb85 	bl	80001d0 <strcmp>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d0ec      	beq.n	8006aa4 <FF_isDirEmpty+0x18>
				xReturn = pdFALSE;
 8006aca:	2000      	movs	r0, #0
	return xReturn;
 8006acc:	e000      	b.n	8006ad0 <FF_isDirEmpty+0x44>
		xReturn = pdTRUE;
 8006ace:	2001      	movs	r0, #1
}	/* FF_isDirEmpty() */
 8006ad0:	b044      	add	sp, #272	; 0x110
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
		xReturn = pdFALSE;
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	4770      	bx	lr
		xReturn = pdTRUE;
 8006ad8:	2001      	movs	r0, #1
 8006ada:	e7f9      	b.n	8006ad0 <FF_isDirEmpty+0x44>
 8006adc:	08019098 	.word	0x08019098
 8006ae0:	08026708 	.word	0x08026708

08006ae4 <FF_GetC>:
{
 8006ae4:	b530      	push	{r4, r5, lr}
 8006ae6:	b085      	sub	sp, #20
	if( pxFile == NULL )
 8006ae8:	b160      	cbz	r0, 8006b04 <FF_GetC+0x20>
 8006aea:	4604      	mov	r4, r0
	else if( ( pxFile->ucMode & FF_MODE_READ ) == 0 )
 8006aec:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8006af0:	f012 0f01 	tst.w	r2, #1
 8006af4:	d009      	beq.n	8006b0a <FF_GetC+0x26>
	else if( pxFile->ulFilePointer >= pxFile->ulFileSize )
 8006af6:	69c1      	ldr	r1, [r0, #28]
 8006af8:	6842      	ldr	r2, [r0, #4]
 8006afa:	4291      	cmp	r1, r2
 8006afc:	d30a      	bcc.n	8006b14 <FF_GetC+0x30>
		xResult = FF_ERR_FILE_READ_ZERO | FF_READ;
 8006afe:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <FF_GetC+0x6c>)
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	e004      	b.n	8006b0e <FF_GetC+0x2a>
		xResult = FF_ERR_NULL_POINTER | FF_GETC;	/* Ensure this is a signed error. */
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <FF_GetC+0x70>)
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	e001      	b.n	8006b0e <FF_GetC+0x2a>
		xResult = FF_ERR_FILE_NOT_OPENED_IN_READ_MODE | FF_GETC;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <FF_GetC+0x74>)
 8006b0c:	9302      	str	r3, [sp, #8]
}	/* FF_GetC() */
 8006b0e:	9802      	ldr	r0, [sp, #8]
 8006b10:	b005      	add	sp, #20
 8006b12:	bd30      	pop	{r4, r5, pc}
		ulRelBlockPos = FF_getMinorBlockEntry( pxFile->pxIOManager, pxFile->ulFilePointer, 1 );
 8006b14:	2201      	movs	r2, #1
 8006b16:	6800      	ldr	r0, [r0, #0]
 8006b18:	f7fe fe17 	bl	800574a <FF_getMinorBlockEntry>
 8006b1c:	4605      	mov	r5, r0
		ulItemLBA = FF_SetCluster( pxFile, &xResult );
 8006b1e:	a902      	add	r1, sp, #8
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff fbfb 	bl	800631c <FF_SetCluster>
		if( FF_isERR( xResult ) == pdFALSE )
 8006b26:	9b02      	ldr	r3, [sp, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dbf0      	blt.n	8006b0e <FF_GetC+0x2a>
			FF_ReadPartial( pxFile, ulItemLBA, ulRelBlockPos, 1, &ucReturnedChar, &xResult );
 8006b2c:	ab02      	add	r3, sp, #8
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	f10d 030f 	add.w	r3, sp, #15
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2301      	movs	r3, #1
 8006b38:	462a      	mov	r2, r5
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff fc3b 	bl	80063b8 <FF_ReadPartial>
			if( FF_isERR( xResult ) == pdFALSE )
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	2b00      	cmp	r3, #0
				xResult = ( int32_t ) ( ( uint32_t ) ucReturnedChar );
 8006b46:	bfa4      	itt	ge
 8006b48:	f89d 300f 	ldrbge.w	r3, [sp, #15]
 8006b4c:	9302      	strge	r3, [sp, #8]
 8006b4e:	e7de      	b.n	8006b0e <FF_GetC+0x2a>
 8006b50:	830c002c 	.word	0x830c002c
 8006b54:	830d0002 	.word	0x830d0002
 8006b58:	830d0024 	.word	0x830d0024

08006b5c <FF_Invalidate>:
	{
 8006b5c:	b538      	push	{r3, r4, r5, lr}
		if( pxIOManager == NULL )
 8006b5e:	b1f0      	cbz	r0, 8006b9e <FF_Invalidate+0x42>
 8006b60:	4605      	mov	r5, r0
			FF_PendSemaphore( pxIOManager->pvSemaphore );
 8006b62:	f8d0 06a0 	ldr.w	r0, [r0, #1696]	; 0x6a0
 8006b66:	f001 ff97 	bl	8008a98 <FF_PendSemaphore>
				pxIOManager->ucFlags |= FF_IOMAN_DEVICE_IS_EXTRACTED;
 8006b6a:	f895 36b5 	ldrb.w	r3, [r5, #1717]	; 0x6b5
 8006b6e:	f043 0320 	orr.w	r3, r3, #32
 8006b72:	f885 36b5 	strb.w	r3, [r5, #1717]	; 0x6b5
				pxFileChain = ( FF_FILE * ) pxIOManager->FirstFile;
 8006b76:	f8d5 36a4 	ldr.w	r3, [r5, #1700]	; 0x6a4
				if( pxFileChain != NULL )
 8006b7a:	b173      	cbz	r3, 8006b9a <FF_Invalidate+0x3e>
 8006b7c:	2400      	movs	r4, #0
						pxFileChain->ulValidFlags |= FF_VALID_FLAG_INVALID;
 8006b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b80:	f042 0201 	orr.w	r2, r2, #1
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24
						xResult++;
 8006b86:	3401      	adds	r4, #1
						pxFileChain = pxFileChain->pxNext;
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					while( pxFileChain != NULL );
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f7      	bne.n	8006b7e <FF_Invalidate+0x22>
			FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8006b8e:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8006b92:	f001 ff91 	bl	8008ab8 <FF_ReleaseSemaphore>
	}	/* FF_Invalidate() */
 8006b96:	4620      	mov	r0, r4
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
			xResult = 0;
 8006b9a:	2400      	movs	r4, #0
 8006b9c:	e7f7      	b.n	8006b8e <FF_Invalidate+0x32>
			xResult = FF_ERR_NULL_POINTER | FF_INVALIDATE;
 8006b9e:	4c01      	ldr	r4, [pc, #4]	; (8006ba4 <FF_Invalidate+0x48>)
		return xResult;
 8006ba0:	e7f9      	b.n	8006b96 <FF_Invalidate+0x3a>
 8006ba2:	bf00      	nop
 8006ba4:	83130002 	.word	0x83130002

08006ba8 <FF_CheckValid>:
{
 8006ba8:	b510      	push	{r4, lr}
	if( ( pxFile == NULL ) || ( pxFile->pxIOManager == NULL ) )
 8006baa:	b318      	cbz	r0, 8006bf4 <FF_CheckValid+0x4c>
 8006bac:	4604      	mov	r4, r0
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	b313      	cbz	r3, 8006bf8 <FF_CheckValid+0x50>
		FF_PendSemaphore( pxFile->pxIOManager->pvSemaphore );
 8006bb2:	f8d3 06a0 	ldr.w	r0, [r3, #1696]	; 0x6a0
 8006bb6:	f001 ff6f 	bl	8008a98 <FF_PendSemaphore>
			pxFileChain = ( FF_FILE * ) pxFile->pxIOManager->FirstFile;
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	f8d2 36a4 	ldr.w	r3, [r2, #1700]	; 0x6a4
			while( pxFileChain != NULL )
 8006bc0:	b1b3      	cbz	r3, 8006bf0 <FF_CheckValid+0x48>
				if( pxFileChain == pxFile )
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	d010      	beq.n	8006be8 <FF_CheckValid+0x40>
				pxFileChain = pxFileChain->pxNext;
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			while( pxFileChain != NULL )
 8006bc8:	b183      	cbz	r3, 8006bec <FF_CheckValid+0x44>
				if( pxFileChain == pxFile )
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d1fb      	bne.n	8006bc6 <FF_CheckValid+0x1e>
					if( ( pxFileChain->ulValidFlags & FF_VALID_FLAG_INVALID ) != 0 )
 8006bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd0:	f003 0301 	and.w	r3, r3, #1
						xError = FF_ERR_NONE;
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	4c09      	ldr	r4, [pc, #36]	; (8006bfc <FF_CheckValid+0x54>)
 8006bd8:	bf08      	it	eq
 8006bda:	2400      	moveq	r4, #0
		FF_ReleaseSemaphore( pxFile->pxIOManager->pvSemaphore );
 8006bdc:	f8d2 06a0 	ldr.w	r0, [r2, #1696]	; 0x6a0
 8006be0:	f001 ff6a 	bl	8008ab8 <FF_ReleaseSemaphore>
}	/* FF_CheckValid() */
 8006be4:	4620      	mov	r0, r4
 8006be6:	bd10      	pop	{r4, pc}
			pxFileChain = ( FF_FILE * ) pxFile->pxIOManager->FirstFile;
 8006be8:	461c      	mov	r4, r3
 8006bea:	e7f0      	b.n	8006bce <FF_CheckValid+0x26>
			xError = ( FF_Error_t ) ( FF_ERR_FILE_BAD_HANDLE | FF_CHECKVALID );
 8006bec:	4c04      	ldr	r4, [pc, #16]	; (8006c00 <FF_CheckValid+0x58>)
 8006bee:	e7f5      	b.n	8006bdc <FF_CheckValid+0x34>
 8006bf0:	4c03      	ldr	r4, [pc, #12]	; (8006c00 <FF_CheckValid+0x58>)
 8006bf2:	e7f3      	b.n	8006bdc <FF_CheckValid+0x34>
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_CHECKVALID );
 8006bf4:	4c03      	ldr	r4, [pc, #12]	; (8006c04 <FF_CheckValid+0x5c>)
 8006bf6:	e7f5      	b.n	8006be4 <FF_CheckValid+0x3c>
 8006bf8:	4c02      	ldr	r4, [pc, #8]	; (8006c04 <FF_CheckValid+0x5c>)
	return xError;
 8006bfa:	e7f3      	b.n	8006be4 <FF_CheckValid+0x3c>
 8006bfc:	8314002b 	.word	0x8314002b
 8006c00:	8314002a 	.word	0x8314002a
 8006c04:	83140002 	.word	0x83140002

08006c08 <FF_Read>:
{
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	b08b      	sub	sp, #44	; 0x2c
 8006c0e:	9102      	str	r1, [sp, #8]
	if( pxFile == NULL )
 8006c10:	b180      	cbz	r0, 8006c34 <FF_Read+0x2c>
 8006c12:	4615      	mov	r5, r2
 8006c14:	461f      	mov	r7, r3
 8006c16:	4604      	mov	r4, r0
		xError = FF_CheckValid( pxFile );
 8006c18:	f7ff ffc6 	bl	8006ba8 <FF_CheckValid>
 8006c1c:	9009      	str	r0, [sp, #36]	; 0x24
		if( FF_isERR( xError ) == pdFALSE )
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f2c0 814c 	blt.w	8006ebc <FF_Read+0x2b4>
			if( ( pxFile->ucMode & FF_MODE_READ ) == 0 )
 8006c24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006c28:	f013 0f01 	tst.w	r3, #1
 8006c2c:	d106      	bne.n	8006c3c <FF_Read+0x34>
				xError = ( FF_Error_t ) ( FF_ERR_FILE_NOT_OPENED_IN_READ_MODE | FF_READ );
 8006c2e:	4bac      	ldr	r3, [pc, #688]	; (8006ee0 <FF_Read+0x2d8>)
 8006c30:	9309      	str	r3, [sp, #36]	; 0x24
 8006c32:	e001      	b.n	8006c38 <FF_Read+0x30>
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_READ );
 8006c34:	4bab      	ldr	r3, [pc, #684]	; (8006ee4 <FF_Read+0x2dc>)
 8006c36:	9309      	str	r3, [sp, #36]	; 0x24
	if( FF_GETERROR( xError ) == FF_ERR_FILE_READ_ZERO )
 8006c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c3a:	e14a      	b.n	8006ed2 <FF_Read+0x2ca>
			else if( pxFile->ulFilePointer >= pxFile->ulFileSize )
 8006c3c:	69e3      	ldr	r3, [r4, #28]
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	f080 8149 	bcs.w	8006ed8 <FF_Read+0x2d0>
uint32_t ulBytesLeft = ulElementSize * ulCount;
 8006c46:	9902      	ldr	r1, [sp, #8]
 8006c48:	fb05 f501 	mul.w	r5, r5, r1
			else if( ( pxFile->ulFilePointer + ulBytesLeft ) > pxFile->ulFileSize )
 8006c4c:	18e9      	adds	r1, r5, r3
 8006c4e:	428a      	cmp	r2, r1
 8006c50:	d200      	bcs.n	8006c54 <FF_Read+0x4c>
				ulBytesLeft = pxFile->ulFileSize - pxFile->ulFilePointer;
 8006c52:	1ad5      	subs	r5, r2, r3
		pxIOManager = pxFile->pxIOManager;
 8006c54:	6826      	ldr	r6, [r4, #0]
		ulItemLBA = FF_SetCluster( pxFile, &xError );
 8006c56:	a909      	add	r1, sp, #36	; 0x24
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff fb5f 	bl	800631c <FF_SetCluster>
 8006c5e:	4681      	mov	r9, r0
		ulRelBlockPos = FF_getMinorBlockEntry( pxIOManager, pxFile->ulFilePointer, 1 );
 8006c60:	2201      	movs	r2, #1
 8006c62:	69e1      	ldr	r1, [r4, #28]
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7fe fd70 	bl	800574a <FF_getMinorBlockEntry>
 8006c6a:	4680      	mov	r8, r0
			if( ( ulRelBlockPos + ulBytesLeft ) <= ( uint32_t ) pxIOManager->usSectorSize )
 8006c6c:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8006c70:	1942      	adds	r2, r0, r5
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d96e      	bls.n	8006d54 <FF_Read+0x14c>
			if( ulRelBlockPos != 0 )
 8006c76:	f1b8 0f00 	cmp.w	r8, #0
 8006c7a:	d176      	bne.n	8006d6a <FF_Read+0x162>
			ulBytesPerCluster = ( pxIOManager->xPartition.ulSectorsPerCluster * pxIOManager->usSectorSize );
 8006c7c:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8006c80:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8006c82:	fb02 fa03 	mul.w	sl, r2, r3
			ulRelClusterPos = pxFile->ulFilePointer % ( ulBytesPerCluster * pxIOManager->xPartition.ucBlkFactor );
 8006c86:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
 8006c8a:	fb0a f303 	mul.w	r3, sl, r3
 8006c8e:	69e2      	ldr	r2, [r4, #28]
 8006c90:	fbb2 f9f3 	udiv	r9, r2, r3
 8006c94:	fb03 2919 	mls	r9, r3, r9, r2
			if( ( ulRelClusterPos != 0 ) && ( ( ulRelClusterPos + ulBytesLeft ) >= ulBytesPerCluster ) )
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	d003      	beq.n	8006ca6 <FF_Read+0x9e>
 8006c9e:	eb05 0309 	add.w	r3, r5, r9
 8006ca2:	459a      	cmp	sl, r3
 8006ca4:	d973      	bls.n	8006d8e <FF_Read+0x186>
			if( ulBytesLeft >= ulBytesPerCluster )
 8006ca6:	4555      	cmp	r5, sl
 8006ca8:	f080 8096 	bcs.w	8006dd8 <FF_Read+0x1d0>
			while( ulBytesLeft >= ( uint32_t ) pxIOManager->usSectorSize )
 8006cac:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	d330      	bcc.n	8006d16 <FF_Read+0x10e>
				xError = FF_BlockRead( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 8006cb4:	f04f 0900 	mov.w	r9, #0
 8006cb8:	4618      	mov	r0, r3
				ulSectors = ulBytesLeft / pxIOManager->usSectorSize;
 8006cba:	fbb5 faf0 	udiv	sl, r5, r0
					uint32_t ulOffset = ( pxFile->ulFilePointer / pxIOManager->usSectorSize ) % pPart->ulSectorsPerCluster;
 8006cbe:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8006cc0:	69e3      	ldr	r3, [r4, #28]
 8006cc2:	fbb3 f3f0 	udiv	r3, r3, r0
 8006cc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cca:	fb02 3310 	mls	r3, r2, r0, r3
					uint32_t ulRemain = pPart->ulSectorsPerCluster - ulOffset;
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	4592      	cmp	sl, r2
 8006cd2:	bf28      	it	cs
 8006cd4:	4692      	movcs	sl, r2
				ulItemLBA = FF_SetCluster( pxFile, &xError );
 8006cd6:	a909      	add	r1, sp, #36	; 0x24
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7ff fb1f 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 8006cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db18      	blt.n	8006d16 <FF_Read+0x10e>
				xError = FF_BlockRead( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 8006ce4:	f8cd 9000 	str.w	r9, [sp]
 8006ce8:	463b      	mov	r3, r7
 8006cea:	4652      	mov	r2, sl
 8006cec:	4601      	mov	r1, r0
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f000 fe8c 	bl	8007a0c <FF_BlockRead>
 8006cf4:	9009      	str	r0, [sp, #36]	; 0x24
				if( FF_isERR( xError ) )
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	db0d      	blt.n	8006d16 <FF_Read+0x10e>
				ulBytesToRead = ulSectors * pxIOManager->usSectorSize;
 8006cfa:	f8b6 26b0 	ldrh.w	r2, [r6, #1712]	; 0x6b0
 8006cfe:	fb0a f202 	mul.w	r2, sl, r2
				pxFile->ulFilePointer += ulBytesToRead;
 8006d02:	69e3      	ldr	r3, [r4, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	61e3      	str	r3, [r4, #28]
				ulBytesLeft -= ulBytesToRead;
 8006d08:	1aad      	subs	r5, r5, r2
				pucBuffer += ulBytesToRead;
 8006d0a:	4417      	add	r7, r2
				ulBytesRead += ulBytesToRead;
 8006d0c:	4490      	add	r8, r2
			while( ulBytesLeft >= ( uint32_t ) pxIOManager->usSectorSize )
 8006d0e:	f8b6 06b0 	ldrh.w	r0, [r6, #1712]	; 0x6b0
 8006d12:	42a8      	cmp	r0, r5
 8006d14:	d9d1      	bls.n	8006cba <FF_Read+0xb2>
			if( ulBytesLeft == 0 )
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	f000 80d2 	beq.w	8006ec0 <FF_Read+0x2b8>
			ulItemLBA = FF_SetCluster( pxFile, &xError );
 8006d1c:	a909      	add	r1, sp, #36	; 0x24
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fafc 	bl	800631c <FF_SetCluster>
			if( FF_isERR( xError ) )
 8006d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f2c0 80ca 	blt.w	8006ec0 <FF_Read+0x2b8>
			FF_ReadPartial( pxFile, ulItemLBA, 0, ulBytesLeft, pucBuffer, &xError );
 8006d2c:	ab09      	add	r3, sp, #36	; 0x24
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	9700      	str	r7, [sp, #0]
 8006d32:	462b      	mov	r3, r5
 8006d34:	2200      	movs	r2, #0
 8006d36:	4601      	mov	r1, r0
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff fb3d 	bl	80063b8 <FF_ReadPartial>
			if( FF_isERR( xError ) == pdFALSE )
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f2c0 80bd 	blt.w	8006ec0 <FF_Read+0x2b8>
				ulBytesRead += ulBytesLeft;
 8006d46:	44a8      	add	r8, r5
	if( FF_GETERROR( xError ) == FF_ERR_FILE_READ_ZERO )
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b2c      	cmp	r3, #44	; 0x2c
 8006d4c:	f040 80be 	bne.w	8006ecc <FF_Read+0x2c4>
		lResult = 0;
 8006d50:	2000      	movs	r0, #0
 8006d52:	e0be      	b.n	8006ed2 <FF_Read+0x2ca>
				ulBytesRead = FF_ReadPartial( pxFile, ulItemLBA, ulRelBlockPos, ulBytesLeft, pucBuffer, &xError );
 8006d54:	ab09      	add	r3, sp, #36	; 0x24
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	9700      	str	r7, [sp, #0]
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7ff fb29 	bl	80063b8 <FF_ReadPartial>
 8006d66:	4680      	mov	r8, r0
				break;
 8006d68:	e0aa      	b.n	8006ec0 <FF_Read+0x2b8>
				ulBytesRead = FF_ReadPartial( pxFile, ulItemLBA, ulRelBlockPos, ulBytesToRead, pucBuffer, &xError );
 8006d6a:	aa09      	add	r2, sp, #36	; 0x24
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9700      	str	r7, [sp, #0]
 8006d70:	eba3 0308 	sub.w	r3, r3, r8
 8006d74:	4642      	mov	r2, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fb1d 	bl	80063b8 <FF_ReadPartial>
 8006d7e:	4680      	mov	r8, r0
				if( FF_isERR( xError ) )
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f2c0 809c 	blt.w	8006ec0 <FF_Read+0x2b8>
				ulBytesLeft -= ulBytesRead;
 8006d88:	1a2d      	subs	r5, r5, r0
				pucBuffer += ulBytesRead;
 8006d8a:	4407      	add	r7, r0
 8006d8c:	e776      	b.n	8006c7c <FF_Read+0x74>
				ulItemLBA = FF_SetCluster( pxFile, &xError );
 8006d8e:	a909      	add	r1, sp, #36	; 0x24
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff fac3 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f2c0 8091 	blt.w	8006ec0 <FF_Read+0x2b8>
				ulSectors = pxIOManager->xPartition.ulSectorsPerCluster - ( ulRelClusterPos / pxIOManager->usSectorSize );
 8006d9e:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8006da2:	fbb9 f3f3 	udiv	r3, r9, r3
 8006da6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8006da8:	eba2 0903 	sub.w	r9, r2, r3
				xError = FF_BlockRead( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	463b      	mov	r3, r7
 8006db2:	464a      	mov	r2, r9
 8006db4:	4601      	mov	r1, r0
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 fe28 	bl	8007a0c <FF_BlockRead>
 8006dbc:	9009      	str	r0, [sp, #36]	; 0x24
				if( FF_isERR( xError ) )
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	db7e      	blt.n	8006ec0 <FF_Read+0x2b8>
				ulBytesToRead = ulSectors * pxIOManager->usSectorSize;
 8006dc2:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8006dc6:	fb09 f303 	mul.w	r3, r9, r3
				ulBytesLeft -= ulBytesToRead;
 8006dca:	1aed      	subs	r5, r5, r3
				pucBuffer += ulBytesToRead;
 8006dcc:	441f      	add	r7, r3
				ulBytesRead += ulBytesToRead;
 8006dce:	4498      	add	r8, r3
				pxFile->ulFilePointer += ulBytesToRead;
 8006dd0:	69e2      	ldr	r2, [r4, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	61e3      	str	r3, [r4, #28]
 8006dd6:	e766      	b.n	8006ca6 <FF_Read+0x9e>
			FF_SetCluster( pxFile, &xError );
 8006dd8:	a909      	add	r1, sp, #36	; 0x24
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff fa9e 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db6c      	blt.n	8006ec0 <FF_Read+0x2b8>
				ulClusters = ulBytesLeft / ulBytesPerCluster;
 8006de6:	fbb5 f3fa 	udiv	r3, r5, sl
 8006dea:	461a      	mov	r2, r3
 8006dec:	9303      	str	r3, [sp, #12]
FF_Error_t xError = FF_ERR_NONE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	9308      	str	r3, [sp, #32]
	while( ulCount != 0 )
 8006df2:	4613      	mov	r3, r2
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	d052      	beq.n	8006e9e <FF_Read+0x296>
			ulSequentialClusters =
 8006df8:	9504      	str	r5, [sp, #16]
 8006dfa:	9605      	str	r6, [sp, #20]
 8006dfc:	f8cd a018 	str.w	sl, [sp, #24]
 8006e00:	461e      	mov	r6, r3
 8006e02:	46bb      	mov	fp, r7
 8006e04:	9707      	str	r7, [sp, #28]
 8006e06:	e036      	b.n	8006e76 <FF_Read+0x26e>
		if( ( ulCount - 1 ) > 0 )
 8006e08:	f04f 0900 	mov.w	r9, #0
		ulSectors = ( ulSequentialClusters + 1 ) * pxFile->pxIOManager->xPartition.ulSectorsPerCluster;
 8006e0c:	f109 0a01 	add.w	sl, r9, #1
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006e14:	fb05 f50a 	mul.w	r5, r5, sl
		ulItemLBA = FF_Cluster2LBA( pxFile->pxIOManager, pxFile->ulAddrCurrentCluster );
 8006e18:	6961      	ldr	r1, [r4, #20]
 8006e1a:	f7fe fc41 	bl	80056a0 <FF_Cluster2LBA>
		ulItemLBA = FF_getRealLBA( pxFile->pxIOManager, ulItemLBA );
 8006e1e:	6827      	ldr	r7, [r4, #0]
	return LBA * pxIOManager->xPartition.ucBlkFactor;
 8006e20:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
		xError = FF_BlockRead( pxFile->pxIOManager, ulItemLBA, ulSectors, buffer, pdFALSE );
 8006e24:	2300      	movs	r3, #0
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	465b      	mov	r3, fp
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	fb00 f101 	mul.w	r1, r0, r1
 8006e30:	4638      	mov	r0, r7
 8006e32:	f000 fdeb 	bl	8007a0c <FF_BlockRead>
 8006e36:	9008      	str	r0, [sp, #32]
		if( FF_isERR( xError ) )
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	db28      	blt.n	8006e8e <FF_Read+0x286>
		ulCount -= ( ulSequentialClusters + 1 );
 8006e3c:	ea6f 0309 	mvn.w	r3, r9
 8006e40:	441e      	add	r6, r3
		FF_LockFAT( pxFile->pxIOManager );
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	f001 feae 	bl	8008ba4 <FF_LockFAT>
				FF_TraverseFAT( pxFile->pxIOManager, pxFile->ulAddrCurrentCluster, ulSequentialClusters + 1, &xError );
 8006e48:	ab08      	add	r3, sp, #32
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	6961      	ldr	r1, [r4, #20]
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	f7fe fddc 	bl	8005a0c <FF_TraverseFAT>
			pxFile->ulAddrCurrentCluster =
 8006e54:	6160      	str	r0, [r4, #20]
		FF_UnlockFAT( pxFile->pxIOManager );
 8006e56:	6820      	ldr	r0, [r4, #0]
 8006e58:	f001 fecc 	bl	8008bf4 <FF_UnlockFAT>
		if( FF_isERR( xError ) )
 8006e5c:	9b08      	ldr	r3, [sp, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db15      	blt.n	8006e8e <FF_Read+0x286>
		pxFile->ulCurrentCluster += ( ulSequentialClusters + 1 );
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	444b      	add	r3, r9
 8006e68:	6123      	str	r3, [r4, #16]
		buffer += ulSectors * pxFile->pxIOManager->usSectorSize;
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	f8b3 36b0 	ldrh.w	r3, [r3, #1712]	; 0x6b0
 8006e70:	fb05 bb03 	mla	fp, r5, r3, fp
	while( ulCount != 0 )
 8006e74:	b176      	cbz	r6, 8006e94 <FF_Read+0x28c>
		if( ( ulCount - 1 ) > 0 )
 8006e76:	2e01      	cmp	r6, #1
 8006e78:	d0c6      	beq.n	8006e08 <FF_Read+0x200>
			ulSequentialClusters =
 8006e7a:	ab08      	add	r3, sp, #32
 8006e7c:	1e72      	subs	r2, r6, #1
 8006e7e:	6961      	ldr	r1, [r4, #20]
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	f7ff fa1a 	bl	80062ba <FF_GetSequentialClusters>
 8006e86:	4681      	mov	r9, r0
			if( FF_isERR( xError ) )
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dabe      	bge.n	8006e0c <FF_Read+0x204>
	return xError;
 8006e8e:	9b08      	ldr	r3, [sp, #32]
				xError = FF_ReadClusters( pxFile, ulClusters, pucBuffer );
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	e015      	b.n	8006ec0 <FF_Read+0x2b8>
 8006e94:	9d04      	ldr	r5, [sp, #16]
 8006e96:	9e05      	ldr	r6, [sp, #20]
 8006e98:	f8dd a018 	ldr.w	sl, [sp, #24]
 8006e9c:	9f07      	ldr	r7, [sp, #28]
	return xError;
 8006e9e:	9b08      	ldr	r3, [sp, #32]
				xError = FF_ReadClusters( pxFile, ulClusters, pucBuffer );
 8006ea0:	9309      	str	r3, [sp, #36]	; 0x24
				ulBytesToRead = ulBytesPerCluster * ulClusters;
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	fb03 f30a 	mul.w	r3, r3, sl
				pxFile->ulFilePointer += ulBytesToRead;
 8006ea8:	69e2      	ldr	r2, [r4, #28]
 8006eaa:	441a      	add	r2, r3
 8006eac:	61e2      	str	r2, [r4, #28]
 8006eae:	fbb5 f2fa 	udiv	r2, r5, sl
 8006eb2:	fb0a 5512 	mls	r5, sl, r2, r5
				pucBuffer += ulBytesToRead;
 8006eb6:	441f      	add	r7, r3
				ulBytesRead += ulBytesToRead;
 8006eb8:	4498      	add	r8, r3
 8006eba:	e6f7      	b.n	8006cac <FF_Read+0xa4>
uint32_t ulBytesRead = 0;
 8006ebc:	f04f 0800 	mov.w	r8, #0
	if( FF_GETERROR( xError ) == FF_ERR_FILE_READ_ZERO )
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	b283      	uxth	r3, r0
 8006ec4:	2b2c      	cmp	r3, #44	; 0x2c
 8006ec6:	d009      	beq.n	8006edc <FF_Read+0x2d4>
	else if( FF_isERR( xError ) )
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	db02      	blt.n	8006ed2 <FF_Read+0x2ca>
		lResult = ( int32_t )( ulBytesRead / ulElementSize );
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	fbb8 f0f3 	udiv	r0, r8, r3
}	/* FF_Read() */
 8006ed2:	b00b      	add	sp, #44	; 0x2c
 8006ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lResult = 0;
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7fa      	b.n	8006ed2 <FF_Read+0x2ca>
 8006edc:	2000      	movs	r0, #0
	return lResult;
 8006ede:	e7f8      	b.n	8006ed2 <FF_Read+0x2ca>
 8006ee0:	830c0024 	.word	0x830c0024
 8006ee4:	830c0002 	.word	0x830c0002

08006ee8 <FF_Seek>:
{
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	4604      	mov	r4, r0
 8006eee:	460d      	mov	r5, r1
 8006ef0:	4616      	mov	r6, r2
	xError = FF_CheckValid( pxFile );
 8006ef2:	f7ff fe59 	bl	8006ba8 <FF_CheckValid>
 8006ef6:	9001      	str	r0, [sp, #4]
	if( FF_isERR( xError ) == pdFALSE )
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	db22      	blt.n	8006f42 <FF_Seek+0x5a>
		xError = FF_FlushCache( pxFile->pxIOManager );
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	f000 fdf5 	bl	8007aec <FF_FlushCache>
 8006f02:	9001      	str	r0, [sp, #4]
		if( FF_isERR( xError ) == pdFALSE )
 8006f04:	2800      	cmp	r0, #0
 8006f06:	db1c      	blt.n	8006f42 <FF_Seek+0x5a>
			if( xOrigin == FF_SEEK_SET )
 8006f08:	b146      	cbz	r6, 8006f1c <FF_Seek+0x34>
			else if( xOrigin == FF_SEEK_CUR )
 8006f0a:	2e01      	cmp	r6, #1
 8006f0c:	d004      	beq.n	8006f18 <FF_Seek+0x30>
			else if( xOrigin == FF_SEEK_END )
 8006f0e:	2e02      	cmp	r6, #2
 8006f10:	d012      	beq.n	8006f38 <FF_Seek+0x50>
				xError = ( FF_Error_t ) ( FF_SEEK | FF_ERR_FILE_SEEK_INVALID_ORIGIN );
 8006f12:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <FF_Seek+0x60>)
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	e014      	b.n	8006f42 <FF_Seek+0x5a>
				lPosition = ( ( int32_t ) pxFile->ulFilePointer ) + lOffset;
 8006f18:	69e3      	ldr	r3, [r4, #28]
 8006f1a:	441d      	add	r5, r3
				if( ( lPosition >= 0L ) && ( lPosition <= ( long ) pxFile->ulFileSize ) )
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	db0e      	blt.n	8006f3e <FF_Seek+0x56>
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	42ab      	cmp	r3, r5
 8006f24:	db0b      	blt.n	8006f3e <FF_Seek+0x56>
					if( lPosition != ( long ) pxFile->ulFilePointer )
 8006f26:	69e3      	ldr	r3, [r4, #28]
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	d00a      	beq.n	8006f42 <FF_Seek+0x5a>
						pxFile->ulFilePointer = lPosition;
 8006f2c:	61e5      	str	r5, [r4, #28]
						FF_SetCluster( pxFile, &xError );
 8006f2e:	a901      	add	r1, sp, #4
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7ff f9f3 	bl	800631c <FF_SetCluster>
 8006f36:	e004      	b.n	8006f42 <FF_Seek+0x5a>
				lPosition = ( ( int32_t ) pxFile->ulFileSize ) + lOffset;
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	441d      	add	r5, r3
 8006f3c:	e7ee      	b.n	8006f1c <FF_Seek+0x34>
					xError = ( FF_Error_t ) ( FF_SEEK | FF_ERR_FILE_SEEK_INVALID_POSITION );
 8006f3e:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <FF_Seek+0x64>)
 8006f40:	9301      	str	r3, [sp, #4]
	return xError;
 8006f42:	9801      	ldr	r0, [sp, #4]
}	/* FF_Seek() */
 8006f44:	b002      	add	sp, #8
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	8312002d 	.word	0x8312002d
 8006f4c:	8312002e 	.word	0x8312002e

08006f50 <FF_PutC>:
{
 8006f50:	b530      	push	{r4, r5, lr}
 8006f52:	b087      	sub	sp, #28
 8006f54:	f88d 100f 	strb.w	r1, [sp, #15]
	if( pxFile == NULL )
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d035      	beq.n	8006fc8 <FF_PutC+0x78>
 8006f5c:	4604      	mov	r4, r0
	else if( ( pxFile->ucMode & FF_MODE_WRITE ) == 0 )
 8006f5e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8006f62:	f013 0f02 	tst.w	r3, #2
 8006f66:	d032      	beq.n	8006fce <FF_PutC+0x7e>
		xResult = FF_ERR_NONE;
 8006f68:	2200      	movs	r2, #0
 8006f6a:	9205      	str	r2, [sp, #20]
			if( ( pxFile->ucMode & FF_MODE_APPEND ) != 0 )
 8006f6c:	f013 0f04 	tst.w	r3, #4
 8006f70:	d003      	beq.n	8006f7a <FF_PutC+0x2a>
				if( pxFile->ulFilePointer < pxFile->ulFileSize )
 8006f72:	69c2      	ldr	r2, [r0, #28]
 8006f74:	6843      	ldr	r3, [r0, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d32e      	bcc.n	8006fd8 <FF_PutC+0x88>
			ulRelBlockPos = FF_getMinorBlockEntry( pxFile->pxIOManager, pxFile->ulFilePointer, 1 );
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	69e1      	ldr	r1, [r4, #28]
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	f7fe fbe3 	bl	800574a <FF_getMinorBlockEntry>
 8006f84:	4605      	mov	r5, r0
			xResult = FF_ExtendFile( pxFile, pxFile->ulFilePointer + 2 );
 8006f86:	69e1      	ldr	r1, [r4, #28]
 8006f88:	3102      	adds	r1, #2
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f7ff faca 	bl	8006524 <FF_ExtendFile>
 8006f90:	9005      	str	r0, [sp, #20]
			if( FF_isERR( xResult ) )
 8006f92:	2800      	cmp	r0, #0
 8006f94:	db1d      	blt.n	8006fd2 <FF_PutC+0x82>
			ulItemLBA = FF_SetCluster( pxFile, &xResult );
 8006f96:	a905      	add	r1, sp, #20
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7ff f9bf 	bl	800631c <FF_SetCluster>
			if( FF_isERR( xResult ) )
 8006f9e:	9b05      	ldr	r3, [sp, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	db16      	blt.n	8006fd2 <FF_PutC+0x82>
			FF_WritePartial( pxFile, ulItemLBA, ulRelBlockPos, 1, &ucValue, &xResult );
 8006fa4:	ab05      	add	r3, sp, #20
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	f10d 030f 	add.w	r3, sp, #15
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2301      	movs	r3, #1
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7ff fa1f 	bl	80063f8 <FF_WritePartial>
			if( FF_isERR( xResult ) == pdFALSE )
 8006fba:	9b05      	ldr	r3, [sp, #20]
 8006fbc:	2b00      	cmp	r3, #0
				xResult = ( FF_Error_t ) ucValue;
 8006fbe:	bfa4      	itt	ge
 8006fc0:	f89d 300f 	ldrbge.w	r3, [sp, #15]
 8006fc4:	9305      	strge	r3, [sp, #20]
 8006fc6:	e004      	b.n	8006fd2 <FF_PutC+0x82>
		xResult = FF_ERR_NULL_POINTER | FF_PUTC;
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <FF_PutC+0x98>)
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	e001      	b.n	8006fd2 <FF_PutC+0x82>
		xResult = FF_ERR_FILE_NOT_OPENED_IN_WRITE_MODE | FF_PUTC;
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <FF_PutC+0x9c>)
 8006fd0:	9305      	str	r3, [sp, #20]
}	/* FF_PutC() */
 8006fd2:	9805      	ldr	r0, [sp, #20]
 8006fd4:	b007      	add	sp, #28
 8006fd6:	bd30      	pop	{r4, r5, pc}
					xResult = FF_Seek( pxFile, 0, FF_SEEK_END );
 8006fd8:	2202      	movs	r2, #2
 8006fda:	2100      	movs	r1, #0
 8006fdc:	f7ff ff84 	bl	8006ee8 <FF_Seek>
 8006fe0:	9005      	str	r0, [sp, #20]
					if( FF_isERR( xResult ) )
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	dac9      	bge.n	8006f7a <FF_PutC+0x2a>
 8006fe6:	e7f4      	b.n	8006fd2 <FF_PutC+0x82>
 8006fe8:	83110002 	.word	0x83110002
 8006fec:	83110023 	.word	0x83110023

08006ff0 <FF_Write>:
{
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	b08b      	sub	sp, #44	; 0x2c
	if( pxFile == NULL )
 8006ff6:	b180      	cbz	r0, 800701a <FF_Write+0x2a>
 8006ff8:	468b      	mov	fp, r1
 8006ffa:	4615      	mov	r5, r2
 8006ffc:	461f      	mov	r7, r3
 8006ffe:	4604      	mov	r4, r0
		xError = FF_CheckValid( pxFile );
 8007000:	f7ff fdd2 	bl	8006ba8 <FF_CheckValid>
 8007004:	9009      	str	r0, [sp, #36]	; 0x24
		if( FF_isERR( xError ) == pdFALSE )
 8007006:	2800      	cmp	r0, #0
 8007008:	db09      	blt.n	800701e <FF_Write+0x2e>
			if( ( pxFile->ucMode & FF_MODE_WRITE ) == 0 )
 800700a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800700e:	f013 0f02 	tst.w	r3, #2
 8007012:	d106      	bne.n	8007022 <FF_Write+0x32>
				xError = ( FF_Error_t ) ( FF_ERR_FILE_NOT_OPENED_IN_WRITE_MODE | FF_WRITE );
 8007014:	4baf      	ldr	r3, [pc, #700]	; (80072d4 <FF_Write+0x2e4>)
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	e001      	b.n	800701e <FF_Write+0x2e>
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_READ );
 800701a:	4baf      	ldr	r3, [pc, #700]	; (80072d8 <FF_Write+0x2e8>)
 800701c:	9309      	str	r3, [sp, #36]	; 0x24
	if( FF_isERR( xError ) )
 800701e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007020:	e09e      	b.n	8007160 <FF_Write+0x170>
			else if( ( pxFile->ucMode & FF_MODE_APPEND ) != 0 )
 8007022:	f013 0f04 	tst.w	r3, #4
 8007026:	d003      	beq.n	8007030 <FF_Write+0x40>
				if( pxFile->ulFilePointer < pxFile->ulFileSize )
 8007028:	69e2      	ldr	r2, [r4, #28]
 800702a:	6863      	ldr	r3, [r4, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d37d      	bcc.n	800712c <FF_Write+0x13c>
uint32_t ulBytesLeft = ulElementSize * ulCount;
 8007030:	fb05 f50b 	mul.w	r5, r5, fp
		pxIOManager = pxFile->pxIOManager;
 8007034:	6826      	ldr	r6, [r4, #0]
			xError = FF_ExtendFile( pxFile, pxFile->ulFilePointer + ulBytesLeft + 1 );
 8007036:	69e1      	ldr	r1, [r4, #28]
 8007038:	3101      	adds	r1, #1
 800703a:	4429      	add	r1, r5
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff fa71 	bl	8006524 <FF_ExtendFile>
 8007042:	9009      	str	r0, [sp, #36]	; 0x24
			if( FF_isERR( xError ) )
 8007044:	2800      	cmp	r0, #0
 8007046:	db7a      	blt.n	800713e <FF_Write+0x14e>
			ulRelBlockPos = FF_getMinorBlockEntry( pxIOManager, pxFile->ulFilePointer, 1 );	/* Get the position within a block. */
 8007048:	2201      	movs	r2, #1
 800704a:	69e1      	ldr	r1, [r4, #28]
 800704c:	4630      	mov	r0, r6
 800704e:	f7fe fb7c 	bl	800574a <FF_getMinorBlockEntry>
 8007052:	4680      	mov	r8, r0
			ulItemLBA = FF_SetCluster( pxFile, &xError );
 8007054:	a909      	add	r1, sp, #36	; 0x24
 8007056:	4620      	mov	r0, r4
 8007058:	f7ff f960 	bl	800631c <FF_SetCluster>
			if( FF_isERR( xError ) )
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	db6d      	blt.n	800713e <FF_Write+0x14e>
			if( ( ulRelBlockPos + ulBytesLeft ) <= ( uint32_t ) pxIOManager->usSectorSize )
 8007062:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8007066:	eb05 0208 	add.w	r2, r5, r8
 800706a:	429a      	cmp	r2, r3
 800706c:	d969      	bls.n	8007142 <FF_Write+0x152>
			if( ulRelBlockPos != 0 )
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	d00f      	beq.n	8007094 <FF_Write+0xa4>
				nBytesWritten = FF_WritePartial( pxFile, ulItemLBA, ulRelBlockPos, nBytesToWrite, pucBuffer, &xError );
 8007074:	aa09      	add	r2, sp, #36	; 0x24
 8007076:	9201      	str	r2, [sp, #4]
 8007078:	9700      	str	r7, [sp, #0]
 800707a:	eba3 0308 	sub.w	r3, r3, r8
 800707e:	4642      	mov	r2, r8
 8007080:	4601      	mov	r1, r0
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff f9b8 	bl	80063f8 <FF_WritePartial>
				if( FF_isERR( xError ) )
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	db57      	blt.n	800713e <FF_Write+0x14e>
				nBytesWritten = FF_WritePartial( pxFile, ulItemLBA, ulRelBlockPos, nBytesToWrite, pucBuffer, &xError );
 800708e:	4680      	mov	r8, r0
				ulBytesLeft -= nBytesWritten;
 8007090:	1a2d      	subs	r5, r5, r0
				pucBuffer += nBytesWritten;
 8007092:	4407      	add	r7, r0
			ulBytesPerCluster = ( pxIOManager->xPartition.ulSectorsPerCluster * pxIOManager->usSectorSize );
 8007094:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8007098:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	9303      	str	r3, [sp, #12]
			ulRelClusterPos = FF_getClusterPosition( pxIOManager, pxFile->ulFilePointer, 1 );
 80070a0:	2201      	movs	r2, #1
 80070a2:	69e1      	ldr	r1, [r4, #28]
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7fe fb12 	bl	80056ce <FF_getClusterPosition>
			if( ( ulRelClusterPos != 0 ) && ( ( ulRelClusterPos + ulBytesLeft ) >= ulBytesPerCluster ) )
 80070aa:	4681      	mov	r9, r0
 80070ac:	b118      	cbz	r0, 80070b6 <FF_Write+0xc6>
 80070ae:	182b      	adds	r3, r5, r0
 80070b0:	9a03      	ldr	r2, [sp, #12]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d957      	bls.n	8007166 <FF_Write+0x176>
			if( ulBytesLeft >= ulBytesPerCluster )
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	429d      	cmp	r5, r3
 80070ba:	d27c      	bcs.n	80071b6 <FF_Write+0x1c6>
				xError = FF_BlockWrite( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 80070bc:	f04f 0900 	mov.w	r9, #0
			while( ulBytesLeft >= ( uint32_t ) pxIOManager->usSectorSize )
 80070c0:	f8b6 06b0 	ldrh.w	r0, [r6, #1712]	; 0x6b0
 80070c4:	4285      	cmp	r5, r0
 80070c6:	f0c0 80ea 	bcc.w	800729e <FF_Write+0x2ae>
				ulSectors = ulBytesLeft / pxIOManager->usSectorSize;
 80070ca:	fbb5 faf0 	udiv	sl, r5, r0
					uint32_t ulOffset = ( pxFile->ulFilePointer / pxIOManager->usSectorSize ) % pPart->ulSectorsPerCluster;
 80070ce:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80070d0:	69e1      	ldr	r1, [r4, #28]
 80070d2:	fbb1 f1f0 	udiv	r1, r1, r0
 80070d6:	fbb1 f2f3 	udiv	r2, r1, r3
 80070da:	fb03 1112 	mls	r1, r3, r2, r1
					uint32_t ulRemain = pPart->ulSectorsPerCluster - ulOffset;
 80070de:	1a5a      	subs	r2, r3, r1
 80070e0:	4592      	cmp	sl, r2
 80070e2:	bf28      	it	cs
 80070e4:	4692      	movcs	sl, r2
				ulItemLBA = FF_SetCluster( pxFile, &xError );
 80070e6:	a909      	add	r1, sp, #36	; 0x24
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7ff f917 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 80070ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f2c0 80ea 	blt.w	80072ca <FF_Write+0x2da>
				xError = FF_BlockWrite( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 80070f6:	f8cd 9000 	str.w	r9, [sp]
 80070fa:	463b      	mov	r3, r7
 80070fc:	4652      	mov	r2, sl
 80070fe:	4601      	mov	r1, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f000 fcbb 	bl	8007a7c <FF_BlockWrite>
 8007106:	9009      	str	r0, [sp, #36]	; 0x24
				if( FF_isERR( xError ) )
 8007108:	2800      	cmp	r0, #0
 800710a:	f2c0 80de 	blt.w	80072ca <FF_Write+0x2da>
				nBytesToWrite = ulSectors * pxIOManager->usSectorSize;
 800710e:	f8b6 26b0 	ldrh.w	r2, [r6, #1712]	; 0x6b0
 8007112:	fb0a f202 	mul.w	r2, sl, r2
				ulBytesLeft -= nBytesToWrite;
 8007116:	1aad      	subs	r5, r5, r2
				pucBuffer += nBytesToWrite;
 8007118:	4417      	add	r7, r2
				nBytesWritten += nBytesToWrite;
 800711a:	4490      	add	r8, r2
				pxFile->ulFilePointer += nBytesToWrite;
 800711c:	69e3      	ldr	r3, [r4, #28]
 800711e:	441a      	add	r2, r3
 8007120:	61e2      	str	r2, [r4, #28]
				if( pxFile->ulFilePointer > pxFile->ulFileSize )
 8007122:	6863      	ldr	r3, [r4, #4]
 8007124:	429a      	cmp	r2, r3
					pxFile->ulFileSize = pxFile->ulFilePointer;
 8007126:	bf88      	it	hi
 8007128:	6062      	strhi	r2, [r4, #4]
 800712a:	e7c9      	b.n	80070c0 <FF_Write+0xd0>
					xError = FF_Seek( pxFile, 0, FF_SEEK_END );
 800712c:	2202      	movs	r2, #2
 800712e:	2100      	movs	r1, #0
 8007130:	4620      	mov	r0, r4
 8007132:	f7ff fed9 	bl	8006ee8 <FF_Seek>
 8007136:	9009      	str	r0, [sp, #36]	; 0x24
	if( FF_isERR( xError ) == pdFALSE )
 8007138:	2800      	cmp	r0, #0
 800713a:	f6bf af79 	bge.w	8007030 <FF_Write+0x40>
	if( FF_isERR( xError ) )
 800713e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007140:	e00e      	b.n	8007160 <FF_Write+0x170>
				nBytesWritten = FF_WritePartial( pxFile, ulItemLBA, ulRelBlockPos, ulBytesLeft, pucBuffer, &xError );
 8007142:	ab09      	add	r3, sp, #36	; 0x24
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	9700      	str	r7, [sp, #0]
 8007148:	462b      	mov	r3, r5
 800714a:	4642      	mov	r2, r8
 800714c:	4601      	mov	r1, r0
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff f952 	bl	80063f8 <FF_WritePartial>
 8007154:	4680      	mov	r8, r0
	if( FF_isERR( xError ) )
 8007156:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007158:	2800      	cmp	r0, #0
 800715a:	db01      	blt.n	8007160 <FF_Write+0x170>
		lResult = ( int32_t )( nBytesWritten / ulElementSize );
 800715c:	fbb8 f0fb 	udiv	r0, r8, fp
}	/* FF_Write() */
 8007160:	b00b      	add	sp, #44	; 0x2c
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ulItemLBA = FF_SetCluster( pxFile, &xError );
 8007166:	a909      	add	r1, sp, #36	; 0x24
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff f8d7 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	dbe4      	blt.n	800713e <FF_Write+0x14e>
				ulSectors = pxIOManager->xPartition.ulSectorsPerCluster - ( ulRelClusterPos / pxIOManager->usSectorSize );
 8007174:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 8007178:	fbb9 f9f3 	udiv	r9, r9, r3
 800717c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800717e:	eba3 0909 	sub.w	r9, r3, r9
				xError = FF_BlockWrite( pxIOManager, ulItemLBA, ulSectors, pucBuffer, pdFALSE );
 8007182:	2300      	movs	r3, #0
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	463b      	mov	r3, r7
 8007188:	464a      	mov	r2, r9
 800718a:	4601      	mov	r1, r0
 800718c:	4630      	mov	r0, r6
 800718e:	f000 fc75 	bl	8007a7c <FF_BlockWrite>
 8007192:	9009      	str	r0, [sp, #36]	; 0x24
				if( FF_isERR( xError ) )
 8007194:	2800      	cmp	r0, #0
 8007196:	dbd2      	blt.n	800713e <FF_Write+0x14e>
				nBytesToWrite = ulSectors * pxIOManager->usSectorSize;
 8007198:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 800719c:	fb09 f303 	mul.w	r3, r9, r3
				ulBytesLeft -= nBytesToWrite;
 80071a0:	1aed      	subs	r5, r5, r3
				pucBuffer += nBytesToWrite;
 80071a2:	441f      	add	r7, r3
				nBytesWritten += nBytesToWrite;
 80071a4:	4498      	add	r8, r3
				pxFile->ulFilePointer += nBytesToWrite;
 80071a6:	69e2      	ldr	r2, [r4, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	61e3      	str	r3, [r4, #28]
				if( pxFile->ulFilePointer > pxFile->ulFileSize )
 80071ac:	6862      	ldr	r2, [r4, #4]
 80071ae:	4293      	cmp	r3, r2
					pxFile->ulFileSize = pxFile->ulFilePointer;
 80071b0:	bf88      	it	hi
 80071b2:	6063      	strhi	r3, [r4, #4]
 80071b4:	e77f      	b.n	80070b6 <FF_Write+0xc6>
				FF_SetCluster( pxFile, &xError );
 80071b6:	a909      	add	r1, sp, #36	; 0x24
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7ff f8af 	bl	800631c <FF_SetCluster>
				if( FF_isERR( xError ) )
 80071be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dbbc      	blt.n	800713e <FF_Write+0x14e>
				ulClusters = ( ulBytesLeft / ulBytesPerCluster );
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	fbb5 f3f3 	udiv	r3, r5, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	9304      	str	r3, [sp, #16]
FF_Error_t xError = FF_ERR_NONE;
 80071ce:	2300      	movs	r3, #0
 80071d0:	9308      	str	r3, [sp, #32]
	while( ulCount != 0 )
 80071d2:	4613      	mov	r3, r2
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	d04d      	beq.n	8007274 <FF_Write+0x284>
			ulSequentialClusters =
 80071d8:	9505      	str	r5, [sp, #20]
 80071da:	9606      	str	r6, [sp, #24]
 80071dc:	461e      	mov	r6, r3
 80071de:	46ba      	mov	sl, r7
 80071e0:	9707      	str	r7, [sp, #28]
 80071e2:	e035      	b.n	8007250 <FF_Write+0x260>
		if( ( ulCount - 1 ) > 0 )
 80071e4:	2700      	movs	r7, #0
		ulSectors = ( ulSequentialClusters + 1 ) * pxFile->pxIOManager->xPartition.ulSectorsPerCluster;
 80071e6:	f107 0901 	add.w	r9, r7, #1
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80071ee:	fb05 f509 	mul.w	r5, r5, r9
		ulItemLBA = FF_Cluster2LBA( pxFile->pxIOManager, pxFile->ulAddrCurrentCluster );
 80071f2:	6961      	ldr	r1, [r4, #20]
 80071f4:	f7fe fa54 	bl	80056a0 <FF_Cluster2LBA>
		ulItemLBA = FF_getRealLBA( pxFile->pxIOManager, ulItemLBA );
 80071f8:	f8d4 e000 	ldr.w	lr, [r4]
 80071fc:	f89e 1055 	ldrb.w	r1, [lr, #85]	; 0x55
		xError = FF_BlockWrite( pxFile->pxIOManager, ulItemLBA, ulSectors, buffer, pdFALSE );
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4653      	mov	r3, sl
 8007206:	462a      	mov	r2, r5
 8007208:	fb00 f101 	mul.w	r1, r0, r1
 800720c:	4670      	mov	r0, lr
 800720e:	f000 fc35 	bl	8007a7c <FF_BlockWrite>
 8007212:	9008      	str	r0, [sp, #32]
		if( FF_isERR( xError ) )
 8007214:	2800      	cmp	r0, #0
 8007216:	db27      	blt.n	8007268 <FF_Write+0x278>
		ulCount -= ulSequentialClusters + 1;
 8007218:	43fb      	mvns	r3, r7
 800721a:	441e      	add	r6, r3
		FF_LockFAT( pxFile->pxIOManager );
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	f001 fcc1 	bl	8008ba4 <FF_LockFAT>
				FF_TraverseFAT( pxFile->pxIOManager, pxFile->ulAddrCurrentCluster, ulSequentialClusters + 1, &xError );
 8007222:	ab08      	add	r3, sp, #32
 8007224:	464a      	mov	r2, r9
 8007226:	6961      	ldr	r1, [r4, #20]
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	f7fe fbef 	bl	8005a0c <FF_TraverseFAT>
			pxFile->ulAddrCurrentCluster =
 800722e:	6160      	str	r0, [r4, #20]
		FF_UnlockFAT( pxFile->pxIOManager );
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	f001 fcdf 	bl	8008bf4 <FF_UnlockFAT>
		if( FF_isERR( xError ) )
 8007236:	9b08      	ldr	r3, [sp, #32]
 8007238:	2b00      	cmp	r3, #0
 800723a:	db15      	blt.n	8007268 <FF_Write+0x278>
		pxFile->ulCurrentCluster += ( ulSequentialClusters + 1 );
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	3301      	adds	r3, #1
 8007240:	441f      	add	r7, r3
 8007242:	6127      	str	r7, [r4, #16]
		buffer += ulSectors * pxFile->pxIOManager->usSectorSize;
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	f8b3 36b0 	ldrh.w	r3, [r3, #1712]	; 0x6b0
 800724a:	fb05 aa03 	mla	sl, r5, r3, sl
	while( ulCount != 0 )
 800724e:	b176      	cbz	r6, 800726e <FF_Write+0x27e>
		if( ( ulCount - 1 ) > 0 )
 8007250:	2e01      	cmp	r6, #1
 8007252:	d0c7      	beq.n	80071e4 <FF_Write+0x1f4>
			ulSequentialClusters =
 8007254:	ab08      	add	r3, sp, #32
 8007256:	1e72      	subs	r2, r6, #1
 8007258:	6961      	ldr	r1, [r4, #20]
 800725a:	6820      	ldr	r0, [r4, #0]
 800725c:	f7ff f82d 	bl	80062ba <FF_GetSequentialClusters>
 8007260:	4607      	mov	r7, r0
			if( FF_isERR( xError ) )
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dabe      	bge.n	80071e6 <FF_Write+0x1f6>
	return xError;
 8007268:	9b08      	ldr	r3, [sp, #32]
				xError = FF_WriteClusters( pxFile, ulClusters, pucBuffer );
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	e773      	b.n	8007156 <FF_Write+0x166>
 800726e:	9d05      	ldr	r5, [sp, #20]
 8007270:	9e06      	ldr	r6, [sp, #24]
 8007272:	9f07      	ldr	r7, [sp, #28]
	return xError;
 8007274:	9b08      	ldr	r3, [sp, #32]
				xError = FF_WriteClusters( pxFile, ulClusters, pucBuffer );
 8007276:	9309      	str	r3, [sp, #36]	; 0x24
				nBytesToWrite = ulBytesPerCluster * ulClusters;
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	9803      	ldr	r0, [sp, #12]
 800727c:	fb03 f300 	mul.w	r3, r3, r0
 8007280:	fbb5 f2f0 	udiv	r2, r5, r0
 8007284:	fb00 5512 	mls	r5, r0, r2, r5
				pucBuffer += nBytesToWrite;
 8007288:	441f      	add	r7, r3
				nBytesWritten += nBytesToWrite;
 800728a:	4498      	add	r8, r3
				pxFile->ulFilePointer += nBytesToWrite;
 800728c:	69e2      	ldr	r2, [r4, #28]
 800728e:	4413      	add	r3, r2
 8007290:	61e3      	str	r3, [r4, #28]
				if( pxFile->ulFilePointer > pxFile->ulFileSize )
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	4293      	cmp	r3, r2
 8007296:	f67f af11 	bls.w	80070bc <FF_Write+0xcc>
					pxFile->ulFileSize = pxFile->ulFilePointer;
 800729a:	6063      	str	r3, [r4, #4]
 800729c:	e70e      	b.n	80070bc <FF_Write+0xcc>
			if( ulBytesLeft == 0 )
 800729e:	2d00      	cmp	r5, #0
 80072a0:	f43f af59 	beq.w	8007156 <FF_Write+0x166>
			ulItemLBA = FF_SetCluster( pxFile, &xError );
 80072a4:	a909      	add	r1, sp, #36	; 0x24
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7ff f838 	bl	800631c <FF_SetCluster>
			if( FF_isERR( xError ) )
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f6ff af45 	blt.w	800713e <FF_Write+0x14e>
			FF_WritePartial( pxFile, ulItemLBA, 0, ulBytesLeft, pucBuffer, &xError );
 80072b4:	ab09      	add	r3, sp, #36	; 0x24
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	9700      	str	r7, [sp, #0]
 80072ba:	462b      	mov	r3, r5
 80072bc:	2200      	movs	r2, #0
 80072be:	4601      	mov	r1, r0
 80072c0:	4620      	mov	r0, r4
 80072c2:	f7ff f899 	bl	80063f8 <FF_WritePartial>
			nBytesWritten += ulBytesLeft;
 80072c6:	44a8      	add	r8, r5
 80072c8:	e745      	b.n	8007156 <FF_Write+0x166>
			if( ulBytesLeft == 0 )
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	d1ea      	bne.n	80072a4 <FF_Write+0x2b4>
	if( FF_isERR( xError ) )
 80072ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072d0:	e746      	b.n	8007160 <FF_Write+0x170>
 80072d2:	bf00      	nop
 80072d4:	83100023 	.word	0x83100023
 80072d8:	830c0002 	.word	0x830c0002

080072dc <FF_Close>:
{
 80072dc:	b530      	push	{r4, r5, lr}
 80072de:	b0c7      	sub	sp, #284	; 0x11c
		if( pxFile == NULL )
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f000 8098 	beq.w	8007416 <FF_Close+0x13a>
 80072e6:	4604      	mov	r4, r0
		xError = FF_CheckValid( pxFile );
 80072e8:	f7ff fc5e 	bl	8006ba8 <FF_CheckValid>
 80072ec:	4605      	mov	r5, r0
			if( FF_GETERROR( xError ) == FF_ERR_FILE_MEDIA_REMOVED )
 80072ee:	b283      	uxth	r3, r0
 80072f0:	2b2b      	cmp	r3, #43	; 0x2b
 80072f2:	d04d      	beq.n	8007390 <FF_Close+0xb4>
		if( FF_isERR( xError ) )
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f2c0 808b 	blt.w	8007410 <FF_Close+0x134>
		if( ( ( pxFile->ulValidFlags & FF_VALID_FLAG_DELETED ) == 0 ) &&
 80072fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fc:	f013 0f02 	tst.w	r3, #2
 8007300:	d130      	bne.n	8007364 <FF_Close+0x88>
 8007302:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007306:	f013 0f0e 	tst.w	r3, #14
 800730a:	d02b      	beq.n	8007364 <FF_Close+0x88>
			ulClusterSize = pxFile->pxIOManager->xPartition.usBlkSize * pxFile->pxIOManager->xPartition.ulSectorsPerCluster;
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8007312:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007314:	fb03 f301 	mul.w	r3, r3, r1
			if( ( ( pxFile->ulFileSize % ulClusterSize ) == 0 ) && ( pxFile->ulObjectCluster != 0ul ) )
 8007318:	6861      	ldr	r1, [r4, #4]
 800731a:	fbb1 f2f3 	udiv	r2, r1, r3
 800731e:	fb03 1312 	mls	r3, r3, r2, r1
 8007322:	b913      	cbnz	r3, 800732a <FF_Close+0x4e>
 8007324:	68a3      	ldr	r3, [r4, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d157      	bne.n	80073da <FF_Close+0xfe>
				xError = FF_GetEntry( pxFile->pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry );
 800732a:	ab02      	add	r3, sp, #8
 800732c:	6a22      	ldr	r2, [r4, #32]
 800732e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	f7fd f9f3 	bl	800471c <FF_GetEntry>
				if( ( FF_isERR( xError ) == pdFALSE ) &&
 8007336:	1e05      	subs	r5, r0, #0
 8007338:	db14      	blt.n	8007364 <FF_Close+0x88>
					( ( pxFile->ulFileSize != xOriginalEntry.ulFileSize ) || ( pxFile->ulFileSize == 0UL ) ) )
 800733a:	6863      	ldr	r3, [r4, #4]
				if( ( FF_isERR( xError ) == pdFALSE ) &&
 800733c:	9a02      	ldr	r2, [sp, #8]
 800733e:	4293      	cmp	r3, r2
 8007340:	d052      	beq.n	80073e8 <FF_Close+0x10c>
					if( pxFile->ulFileSize == 0UL )
 8007342:	2b00      	cmp	r3, #0
 8007344:	d052      	beq.n	80073ec <FF_Close+0x110>
					xOriginalEntry.ulFileSize = pxFile->ulFileSize;
 8007346:	9302      	str	r3, [sp, #8]
					xError = FF_PutEntry( pxFile->pxIOManager, pxFile->usDirEntry, pxFile->ulDirCluster, &xOriginalEntry, NULL );
 8007348:	6a22      	ldr	r2, [r4, #32]
 800734a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	2300      	movs	r3, #0
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	ab02      	add	r3, sp, #8
 8007354:	f7fd fb3c 	bl	80049d0 <FF_PutEntry>
			if( FF_isERR( xError ) == pdFALSE )
 8007358:	1e05      	subs	r5, r0, #0
 800735a:	db03      	blt.n	8007364 <FF_Close+0x88>
				xError = FF_FlushCache( pxFile->pxIOManager ); /* Ensure all modified blocks are flushed to disk! */
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	f000 fbc5 	bl	8007aec <FF_FlushCache>
 8007362:	4605      	mov	r5, r0
		FF_PendSemaphore( pxFile->pxIOManager->pvSemaphore );
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	f8d3 06a0 	ldr.w	r0, [r3, #1696]	; 0x6a0
 800736a:	f001 fb95 	bl	8008a98 <FF_PendSemaphore>
			pxFileChain = ( FF_FILE * ) pxFile->pxIOManager->FirstFile;
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
			if( pxFileChain == pxFile )
 8007374:	4294      	cmp	r4, r2
 8007376:	d03c      	beq.n	80073f2 <FF_Close+0x116>
				while( pxFileChain )
 8007378:	2a00      	cmp	r2, #0
 800737a:	d041      	beq.n	8007400 <FF_Close+0x124>
					if( pxFileChain->pxNext == pxFile )
 800737c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800737e:	429c      	cmp	r4, r3
 8007380:	d03b      	beq.n	80073fa <FF_Close+0x11e>
				while( pxFileChain )
 8007382:	2b00      	cmp	r3, #0
 8007384:	d03c      	beq.n	8007400 <FF_Close+0x124>
					if( pxFileChain->pxNext == pxFile )
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4294      	cmp	r4, r2
 800738a:	d037      	beq.n	80073fc <FF_Close+0x120>
 800738c:	4613      	mov	r3, r2
 800738e:	e7f8      	b.n	8007382 <FF_Close+0xa6>
				FF_PendSemaphore( pxFile->pxIOManager->pvSemaphore );
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	f8d3 06a0 	ldr.w	r0, [r3, #1696]	; 0x6a0
 8007396:	f001 fb7f 	bl	8008a98 <FF_PendSemaphore>
					pxFileChain = ( FF_FILE * ) pxFile->pxIOManager->FirstFile;
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
					if( pxFileChain == pxFile )
 80073a0:	4294      	cmp	r4, r2
 80073a2:	d009      	beq.n	80073b8 <FF_Close+0xdc>
						while( pxFileChain )
 80073a4:	b17a      	cbz	r2, 80073c6 <FF_Close+0xea>
							if( pxFileChain->pxNext == pxFile )
 80073a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d009      	beq.n	80073c0 <FF_Close+0xe4>
						while( pxFileChain )
 80073ac:	b15b      	cbz	r3, 80073c6 <FF_Close+0xea>
							if( pxFileChain->pxNext == pxFile )
 80073ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b0:	4294      	cmp	r4, r2
 80073b2:	d006      	beq.n	80073c2 <FF_Close+0xe6>
 80073b4:	4613      	mov	r3, r2
 80073b6:	e7f9      	b.n	80073ac <FF_Close+0xd0>
						pxFile->pxIOManager->FirstFile = pxFile->pxNext;
 80073b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073ba:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 80073be:	e002      	b.n	80073c6 <FF_Close+0xea>
							if( pxFileChain->pxNext == pxFile )
 80073c0:	4613      	mov	r3, r2
								pxFileChain->pxNext = pxFile->pxNext;
 80073c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c
				FF_ReleaseSemaphore( pxFile->pxIOManager->pvSemaphore );
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f8d3 06a0 	ldr.w	r0, [r3, #1696]	; 0x6a0
 80073cc:	f001 fb74 	bl	8008ab8 <FF_ReleaseSemaphore>
				ffconfigFREE( pxFile );	/* So at least we have freed the pointer. */
 80073d0:	4620      	mov	r0, r4
 80073d2:	f00c f8ff 	bl	80135d4 <vPortFree>
				xError = FF_ERR_NONE;
 80073d6:	2500      	movs	r5, #0
				break;
 80073d8:	e01a      	b.n	8007410 <FF_Close+0x134>
				xError = FF_Truncate( pxFile, pdTRUE );
 80073da:	2101      	movs	r1, #1
 80073dc:	4620      	mov	r0, r4
 80073de:	f7ff f83f 	bl	8006460 <FF_Truncate>
			if( FF_isERR( xError ) == pdFALSE )
 80073e2:	1e05      	subs	r5, r0, #0
 80073e4:	dbbe      	blt.n	8007364 <FF_Close+0x88>
 80073e6:	e7a0      	b.n	800732a <FF_Close+0x4e>
					( ( pxFile->ulFileSize != xOriginalEntry.ulFileSize ) || ( pxFile->ulFileSize == 0UL ) ) )
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1b7      	bne.n	800735c <FF_Close+0x80>
						xOriginalEntry.ulObjectCluster = 0;
 80073ec:	2200      	movs	r2, #0
 80073ee:	9203      	str	r2, [sp, #12]
 80073f0:	e7a9      	b.n	8007346 <FF_Close+0x6a>
				pxFile->pxIOManager->FirstFile = pxFile->pxNext;
 80073f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073f4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 80073f8:	e002      	b.n	8007400 <FF_Close+0x124>
					if( pxFileChain->pxNext == pxFile )
 80073fa:	4613      	mov	r3, r2
						pxFileChain->pxNext = pxFile->pxNext;
 80073fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073fe:	62da      	str	r2, [r3, #44]	; 0x2c
		FF_ReleaseSemaphore( pxFile->pxIOManager->pvSemaphore );
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	f8d3 06a0 	ldr.w	r0, [r3, #1696]	; 0x6a0
 8007406:	f001 fb57 	bl	8008ab8 <FF_ReleaseSemaphore>
		ffconfigFREE( pxFile );
 800740a:	4620      	mov	r0, r4
 800740c:	f00c f8e2 	bl	80135d4 <vPortFree>
}	/* FF_Close() */
 8007410:	4628      	mov	r0, r5
 8007412:	b047      	add	sp, #284	; 0x11c
 8007414:	bd30      	pop	{r4, r5, pc}
			xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_CLOSE );
 8007416:	4d01      	ldr	r5, [pc, #4]	; (800741c <FF_Close+0x140>)
	return xError;
 8007418:	e7fa      	b.n	8007410 <FF_Close+0x134>
 800741a:	bf00      	nop
 800741c:	83150002 	.word	0x83150002

08007420 <FF_RmDir>:
{
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	b08e      	sub	sp, #56	; 0x38
FF_Error_t			xError = FF_ERR_NONE;
 8007424:	2300      	movs	r3, #0
 8007426:	9300      	str	r3, [sp, #0]
	if( pxIOManager == NULL )
 8007428:	b150      	cbz	r0, 8007440 <FF_RmDir+0x20>
 800742a:	4604      	mov	r4, r0
	else if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 800742c:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 8007430:	f013 0f20 	tst.w	r3, #32
 8007434:	d007      	beq.n	8007446 <FF_RmDir+0x26>
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_RMDIR );
 8007436:	4b40      	ldr	r3, [pc, #256]	; (8007538 <FF_RmDir+0x118>)
 8007438:	9300      	str	r3, [sp, #0]
}	/* FF_RmDir() */
 800743a:	9800      	ldr	r0, [sp, #0]
 800743c:	b00e      	add	sp, #56	; 0x38
 800743e:	bd70      	pop	{r4, r5, r6, pc}
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_RMDIR );
 8007440:	4b3e      	ldr	r3, [pc, #248]	; (800753c <FF_RmDir+0x11c>)
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	e7f9      	b.n	800743a <FF_RmDir+0x1a>
 8007446:	460d      	mov	r5, r1
		pxFile = FF_Open( pxIOManager, pcPath, FF_MODE_DIR, &xError );
 8007448:	466b      	mov	r3, sp
 800744a:	2280      	movs	r2, #128	; 0x80
 800744c:	f7ff f9ec 	bl	8006828 <FF_Open>
		if( pxFile != NULL )
 8007450:	4606      	mov	r6, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f1      	beq.n	800743a <FF_RmDir+0x1a>
			pxFile->ulValidFlags |= FF_VALID_FLAG_DELETED;
 8007456:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	6243      	str	r3, [r0, #36]	; 0x24
			memset( &xFetchContext, '\0', sizeof( xFetchContext ) );
 800745e:	2300      	movs	r3, #0
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	9303      	str	r3, [sp, #12]
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	9305      	str	r3, [sp, #20]
			FF_LockDirectory( pxIOManager );
 800746a:	4620      	mov	r0, r4
 800746c:	f001 fb40 	bl	8008af0 <FF_LockDirectory>
				if( FF_isDirEmpty( pxIOManager, pcPath ) == pdFALSE )
 8007470:	4629      	mov	r1, r5
 8007472:	4620      	mov	r0, r4
 8007474:	f7ff fb0a 	bl	8006a8c <FF_isDirEmpty>
 8007478:	b9d8      	cbnz	r0, 80074b2 <FF_RmDir+0x92>
					xError = ( FF_ERR_DIR_NOT_EMPTY | FF_RMDIR );
 800747a:	4b31      	ldr	r3, [pc, #196]	; (8007540 <FF_RmDir+0x120>)
 800747c:	9300      	str	r3, [sp, #0]
				xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 800747e:	a901      	add	r1, sp, #4
 8007480:	4620      	mov	r0, r4
 8007482:	f7fc fd38 	bl	8003ef6 <FF_CleanupEntryFetch>
				if( FF_isERR( xError ) == pdFALSE )
 8007486:	9b00      	ldr	r3, [sp, #0]
 8007488:	2b00      	cmp	r3, #0
					xError = xTempError;
 800748a:	bfa8      	it	ge
 800748c:	9000      	strge	r0, [sp, #0]
				FF_UnlockDirectory( pxIOManager );
 800748e:	4620      	mov	r0, r4
 8007490:	f001 fb48 	bl	8008b24 <FF_UnlockDirectory>
				xTempError = FF_Close( pxFile );
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ff21 	bl	80072dc <FF_Close>
				if( FF_isERR( xError ) == pdFALSE )
 800749a:	9b00      	ldr	r3, [sp, #0]
 800749c:	2b00      	cmp	r3, #0
					xError = xTempError;
 800749e:	bfa8      	it	ge
 80074a0:	9000      	strge	r0, [sp, #0]
				xTempError = FF_FlushCache( pxIOManager );
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fb22 	bl	8007aec <FF_FlushCache>
				if( FF_isERR( xError ) == pdFALSE )
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	2b00      	cmp	r3, #0
					xError = xTempError;
 80074ac:	bfa8      	it	ge
 80074ae:	9000      	strge	r0, [sp, #0]
 80074b0:	e7c3      	b.n	800743a <FF_RmDir+0x1a>
				FF_LockFAT( pxIOManager );
 80074b2:	4620      	mov	r0, r4
 80074b4:	f001 fb76 	bl	8008ba4 <FF_LockFAT>
					xError = FF_UnlinkClusterChain( pxIOManager, pxFile->ulObjectCluster, 0 );
 80074b8:	2200      	movs	r2, #0
 80074ba:	68b1      	ldr	r1, [r6, #8]
 80074bc:	4620      	mov	r0, r4
 80074be:	f7fe fd45 	bl	8005f4c <FF_UnlinkClusterChain>
 80074c2:	9000      	str	r0, [sp, #0]
				FF_UnlockFAT( pxIOManager );
 80074c4:	4620      	mov	r0, r4
 80074c6:	f001 fb95 	bl	8008bf4 <FF_UnlockFAT>
				if( FF_isERR( xError ) )
 80074ca:	9b00      	ldr	r3, [sp, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dbd6      	blt.n	800747e <FF_RmDir+0x5e>
				xError = FF_InitEntryFetch( pxIOManager, pxFile->ulDirCluster, &xFetchContext );
 80074d0:	aa01      	add	r2, sp, #4
 80074d2:	6a31      	ldr	r1, [r6, #32]
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7fc fce7 	bl	8003ea8 <FF_InitEntryFetch>
 80074da:	9000      	str	r0, [sp, #0]
				if( FF_isERR( xError ) )
 80074dc:	2800      	cmp	r0, #0
 80074de:	dbce      	blt.n	800747e <FF_RmDir+0x5e>
				xError = FF_RmLFNs( pxIOManager, pxFile->usDirEntry, &xFetchContext );
 80074e0:	aa01      	add	r2, sp, #4
 80074e2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80074e4:	4620      	mov	r0, r4
 80074e6:	f7fe f8af 	bl	8005648 <FF_RmLFNs>
 80074ea:	9000      	str	r0, [sp, #0]
				if( FF_isERR( xError ) )
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dbc6      	blt.n	800747e <FF_RmDir+0x5e>
				xError = FF_FetchEntryWithContext( pxIOManager, pxFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 80074f0:	ab06      	add	r3, sp, #24
 80074f2:	aa01      	add	r2, sp, #4
 80074f4:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7fc fd0a 	bl	8003f10 <FF_FetchEntryWithContext>
 80074fc:	9000      	str	r0, [sp, #0]
				if( FF_isERR( xError ) == pdFALSE )
 80074fe:	2800      	cmp	r0, #0
 8007500:	dbbd      	blt.n	800747e <FF_RmDir+0x5e>
					ucEntryBuffer[0] = FF_FAT_DELETED;
 8007502:	23e5      	movs	r3, #229	; 0xe5
 8007504:	f88d 3018 	strb.w	r3, [sp, #24]
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8007508:	2300      	movs	r3, #0
 800750a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		pBuffer[ 1 ] = u16.bytes.u8_1;
 800750e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		pBuffer[ 0 ] = u16.bytes.u8_0;
 8007512:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		pBuffer[ 1 ] = u16.bytes.u8_1;
 8007516:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
					xError = FF_PushEntryWithContext( pxIOManager, pxFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 800751a:	ab06      	add	r3, sp, #24
 800751c:	aa01      	add	r2, sp, #4
 800751e:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8007520:	4620      	mov	r0, r4
 8007522:	f7fc fd6d 	bl	8004000 <FF_PushEntryWithContext>
 8007526:	9000      	str	r0, [sp, #0]
				if( FF_isERR( xError ) )
 8007528:	2800      	cmp	r0, #0
 800752a:	dba8      	blt.n	800747e <FF_RmDir+0x5e>
					FF_RmPathCache( pxIOManager, pcPath );
 800752c:	4629      	mov	r1, r5
 800752e:	4620      	mov	r0, r4
 8007530:	f7fe fe96 	bl	8006260 <FF_RmPathCache>
 8007534:	e7a3      	b.n	800747e <FF_RmDir+0x5e>
 8007536:	bf00      	nop
 8007538:	83040008 	.word	0x83040008
 800753c:	83040002 	.word	0x83040002
 8007540:	83040035 	.word	0x83040035

08007544 <FF_RmFile>:
{
 8007544:	b530      	push	{r4, r5, lr}
 8007546:	b08f      	sub	sp, #60	; 0x3c
 8007548:	4605      	mov	r5, r0
FF_Error_t xError = FF_ERR_NONE;
 800754a:	ab0e      	add	r3, sp, #56	; 0x38
 800754c:	2200      	movs	r2, #0
 800754e:	f843 2d04 	str.w	r2, [r3, #-4]!
	pxFile = FF_Open( pxIOManager, pcPath, FF_MODE_WRITE, &xError );
 8007552:	2202      	movs	r2, #2
 8007554:	f7ff f968 	bl	8006828 <FF_Open>
	if( pxFile != NULL )
 8007558:	2800      	cmp	r0, #0
 800755a:	d058      	beq.n	800760e <FF_RmFile+0xca>
 800755c:	4604      	mov	r4, r0
		pxFile->ulValidFlags |= FF_VALID_FLAG_DELETED;
 800755e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	6243      	str	r3, [r0, #36]	; 0x24
		if( pxFile->ulObjectCluster != 0 )
 8007566:	6883      	ldr	r3, [r0, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d153      	bne.n	8007614 <FF_RmFile+0xd0>
		if( FF_isERR( xError ) == pdFALSE )
 800756c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800756e:	2b00      	cmp	r3, #0
 8007570:	db4d      	blt.n	800760e <FF_RmFile+0xca>
			memset( &xFetchContext, '\0', sizeof( xFetchContext ) );
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	9304      	str	r3, [sp, #16]
			FF_LockDirectory( pxIOManager );
 800757e:	4628      	mov	r0, r5
 8007580:	f001 fab6 	bl	8008af0 <FF_LockDirectory>
				xError = FF_InitEntryFetch( pxIOManager, pxFile->ulDirCluster, &xFetchContext );
 8007584:	466a      	mov	r2, sp
 8007586:	6a21      	ldr	r1, [r4, #32]
 8007588:	4628      	mov	r0, r5
 800758a:	f7fc fc8d 	bl	8003ea8 <FF_InitEntryFetch>
 800758e:	900d      	str	r0, [sp, #52]	; 0x34
				if( FF_isERR( xError ) )
 8007590:	2800      	cmp	r0, #0
 8007592:	db23      	blt.n	80075dc <FF_RmFile+0x98>
				xError = FF_RmLFNs( pxIOManager, ( uint16_t ) pxFile->usDirEntry, &xFetchContext );
 8007594:	466a      	mov	r2, sp
 8007596:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8007598:	4628      	mov	r0, r5
 800759a:	f7fe f855 	bl	8005648 <FF_RmLFNs>
 800759e:	900d      	str	r0, [sp, #52]	; 0x34
				if( FF_isERR( xError ) )
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db1b      	blt.n	80075dc <FF_RmFile+0x98>
				xError = FF_FetchEntryWithContext( pxIOManager, pxFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 80075a4:	ab05      	add	r3, sp, #20
 80075a6:	466a      	mov	r2, sp
 80075a8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7fc fcb0 	bl	8003f10 <FF_FetchEntryWithContext>
 80075b0:	900d      	str	r0, [sp, #52]	; 0x34
				if( FF_isERR( xError ) == pdFALSE )
 80075b2:	2800      	cmp	r0, #0
 80075b4:	db12      	blt.n	80075dc <FF_RmFile+0x98>
					ucEntryBuffer[0] = FF_FAT_DELETED;
 80075b6:	23e5      	movs	r3, #229	; 0xe5
 80075b8:	f88d 3014 	strb.w	r3, [sp, #20]
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80075bc:	2300      	movs	r3, #0
 80075be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		pBuffer[ 1 ] = u16.bytes.u8_1;
 80075c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80075c6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		pBuffer[ 1 ] = u16.bytes.u8_1;
 80075ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
					xError = FF_PushEntryWithContext( pxIOManager, pxFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 80075ce:	ab05      	add	r3, sp, #20
 80075d0:	466a      	mov	r2, sp
 80075d2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80075d4:	4628      	mov	r0, r5
 80075d6:	f7fc fd13 	bl	8004000 <FF_PushEntryWithContext>
 80075da:	900d      	str	r0, [sp, #52]	; 0x34
				xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 80075dc:	4669      	mov	r1, sp
 80075de:	4628      	mov	r0, r5
 80075e0:	f7fc fc89 	bl	8003ef6 <FF_CleanupEntryFetch>
				if( FF_isERR( xError ) == pdFALSE )
 80075e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e6:	2b00      	cmp	r3, #0
					xError = xTempError;
 80075e8:	bfa8      	it	ge
 80075ea:	900d      	strge	r0, [sp, #52]	; 0x34
				FF_UnlockDirectory( pxIOManager );
 80075ec:	4628      	mov	r0, r5
 80075ee:	f001 fa99 	bl	8008b24 <FF_UnlockDirectory>
				xTempError = FF_Close( pxFile );
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7ff fe72 	bl	80072dc <FF_Close>
				if( FF_isERR( xError ) == pdFALSE )
 80075f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fa:	2b00      	cmp	r3, #0
					xError = xTempError;
 80075fc:	bfa8      	it	ge
 80075fe:	900d      	strge	r0, [sp, #52]	; 0x34
				xTempError = FF_FlushCache( pxIOManager );
 8007600:	4628      	mov	r0, r5
 8007602:	f000 fa73 	bl	8007aec <FF_FlushCache>
				if( FF_isERR( xError ) == pdFALSE )
 8007606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007608:	2b00      	cmp	r3, #0
					xError = xTempError;
 800760a:	bfa8      	it	ge
 800760c:	900d      	strge	r0, [sp, #52]	; 0x34
}	/* FF_RmFile() */
 800760e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007610:	b00f      	add	sp, #60	; 0x3c
 8007612:	bd30      	pop	{r4, r5, pc}
			FF_LockFAT( pxIOManager );
 8007614:	4628      	mov	r0, r5
 8007616:	f001 fac5 	bl	8008ba4 <FF_LockFAT>
				xError = FF_UnlinkClusterChain( pxIOManager, pxFile->ulObjectCluster, 0 );
 800761a:	2200      	movs	r2, #0
 800761c:	68a1      	ldr	r1, [r4, #8]
 800761e:	4628      	mov	r0, r5
 8007620:	f7fe fc94 	bl	8005f4c <FF_UnlinkClusterChain>
 8007624:	900d      	str	r0, [sp, #52]	; 0x34
			FF_UnlockFAT( pxIOManager );
 8007626:	4628      	mov	r0, r5
 8007628:	f001 fae4 	bl	8008bf4 <FF_UnlockFAT>
 800762c:	e79e      	b.n	800756c <FF_RmFile+0x28>
	...

08007630 <FF_Move>:
{
 8007630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007634:	b0df      	sub	sp, #380	; 0x17c
 8007636:	461d      	mov	r5, r3
	memset( &xFetchContext, '\0', sizeof( xFetchContext ) );
 8007638:	2300      	movs	r3, #0
 800763a:	930c      	str	r3, [sp, #48]	; 0x30
 800763c:	930d      	str	r3, [sp, #52]	; 0x34
 800763e:	930e      	str	r3, [sp, #56]	; 0x38
 8007640:	930f      	str	r3, [sp, #60]	; 0x3c
 8007642:	9310      	str	r3, [sp, #64]	; 0x40
	if( pxIOManager == NULL )
 8007644:	4604      	mov	r4, r0
 8007646:	b1d8      	cbz	r0, 8007680 <FF_Move+0x50>
 8007648:	4688      	mov	r8, r1
 800764a:	4617      	mov	r7, r2
	else if( ( pxIOManager->ucFlags & FF_IOMAN_DEVICE_IS_EXTRACTED ) != 0 )
 800764c:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 8007650:	f013 0f20 	tst.w	r3, #32
 8007654:	d017      	beq.n	8007686 <FF_Move+0x56>
		xError = ( FF_Error_t ) ( FF_ERR_IOMAN_DRIVER_NOMEDIUM | FF_MOVE );
 8007656:	4b83      	ldr	r3, [pc, #524]	; (8007864 <FF_Move+0x234>)
 8007658:	935d      	str	r3, [sp, #372]	; 0x174
		xTempError = FF_FlushCache( pxIOManager );
 800765a:	4620      	mov	r0, r4
 800765c:	f000 fa46 	bl	8007aec <FF_FlushCache>
		if( FF_isERR( xError ) == pdFALSE )
 8007660:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8007662:	2b00      	cmp	r3, #0
			xError = xTempError;
 8007664:	bfa8      	it	ge
 8007666:	905d      	strge	r0, [sp, #372]	; 0x174
		xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8007668:	a90c      	add	r1, sp, #48	; 0x30
 800766a:	4620      	mov	r0, r4
 800766c:	f7fc fc43 	bl	8003ef6 <FF_CleanupEntryFetch>
		if( FF_isERR( xError ) == pdFALSE )
 8007670:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8007672:	2b00      	cmp	r3, #0
 8007674:	db00      	blt.n	8007678 <FF_Move+0x48>
			xError = xTempError;
 8007676:	905d      	str	r0, [sp, #372]	; 0x174
	return xError;
 8007678:	985d      	ldr	r0, [sp, #372]	; 0x174
}	/* FF_Move() */
 800767a:	b05f      	add	sp, #380	; 0x17c
 800767c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xError = ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_MOVE );
 8007680:	4b79      	ldr	r3, [pc, #484]	; (8007868 <FF_Move+0x238>)
 8007682:	935d      	str	r3, [sp, #372]	; 0x174
 8007684:	e7e9      	b.n	800765a <FF_Move+0x2a>
		pxDestFile = FF_Open( pxIOManager, szDestinationFile, FF_MODE_READ, &xError );
 8007686:	ab5d      	add	r3, sp, #372	; 0x174
 8007688:	2201      	movs	r2, #1
 800768a:	4639      	mov	r1, r7
 800768c:	f7ff f8cc 	bl	8006828 <FF_Open>
		if( ( pxDestFile != NULL) || ( FF_GETERROR( xError ) == FF_ERR_FILE_OBJECT_IS_A_DIR ) )
 8007690:	2800      	cmp	r0, #0
 8007692:	f000 80b5 	beq.w	8007800 <FF_Move+0x1d0>
			xError = ( FF_Error_t ) ( FF_ERR_FILE_DESTINATION_EXISTS | FF_MOVE );
 8007696:	4a75      	ldr	r2, [pc, #468]	; (800786c <FF_Move+0x23c>)
 8007698:	925d      	str	r2, [sp, #372]	; 0x174
				FF_Close( pxDestFile );
 800769a:	f7ff fe1f 	bl	80072dc <FF_Close>
				if( xDeleteIfExists != pdFALSE )
 800769e:	2d00      	cmp	r5, #0
 80076a0:	f040 80b5 	bne.w	800780e <FF_Move+0x1de>
	if( FF_isERR( xError ) == pdFALSE )
 80076a4:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dbd7      	blt.n	800765a <FF_Move+0x2a>
		pSrcFile = FF_Open( pxIOManager, szSourceFile, FF_MODE_WRITE, &xError );
 80076aa:	ab5d      	add	r3, sp, #372	; 0x174
 80076ac:	2202      	movs	r2, #2
 80076ae:	4641      	mov	r1, r8
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7ff f8b9 	bl	8006828 <FF_Open>
 80076b6:	4606      	mov	r6, r0
		if( FF_GETERROR( xError ) == FF_ERR_FILE_OBJECT_IS_A_DIR )
 80076b8:	f8bd 3174 	ldrh.w	r3, [sp, #372]	; 0x174
 80076bc:	2b20      	cmp	r3, #32
 80076be:	f000 80ac 	beq.w	800781a <FF_Move+0x1ea>
	BaseType_t xIsDirectory = pdFALSE;
 80076c2:	f04f 0900 	mov.w	r9, #0
		if( pSrcFile != NULL )
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	f000 80c1 	beq.w	800784e <FF_Move+0x21e>
			xError = FF_InitEntryFetch( pxIOManager, pSrcFile->ulDirCluster, &xFetchContext );
 80076cc:	aa0c      	add	r2, sp, #48	; 0x30
 80076ce:	6a31      	ldr	r1, [r6, #32]
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7fc fbe9 	bl	8003ea8 <FF_InitEntryFetch>
 80076d6:	905d      	str	r0, [sp, #372]	; 0x174
			if( FF_isERR( xError ) == pdFALSE )
 80076d8:	2800      	cmp	r0, #0
 80076da:	f2c0 8087 	blt.w	80077ec <FF_Move+0x1bc>
				xError = FF_FetchEntryWithContext( pxIOManager, pSrcFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 80076de:	ab11      	add	r3, sp, #68	; 0x44
 80076e0:	aa0c      	add	r2, sp, #48	; 0x30
 80076e2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7fc fc13 	bl	8003f10 <FF_FetchEntryWithContext>
 80076ea:	905d      	str	r0, [sp, #372]	; 0x174
				if( FF_isERR( xError ) == pdFALSE )
 80076ec:	2800      	cmp	r0, #0
 80076ee:	db7d      	blt.n	80077ec <FF_Move+0x1bc>
					xMyFile.ucAttrib = FF_getChar( ucEntryBuffer, ( uint16_t ) ( FF_FAT_DIRENT_ATTRIB ) );
 80076f0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80076f4:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
					xMyFile.ulFileSize = pSrcFile->ulFileSize;
 80076f8:	6873      	ldr	r3, [r6, #4]
 80076fa:	9319      	str	r3, [sp, #100]	; 0x64
					xMyFile.ulObjectCluster = pSrcFile->ulObjectCluster;
 80076fc:	68b3      	ldr	r3, [r6, #8]
 80076fe:	931a      	str	r3, [sp, #104]	; 0x68
					xMyFile.usCurrentItem = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
					xIndex = ( BaseType_t ) STRLEN( szDestinationFile );
 8007706:	4638      	mov	r0, r7
 8007708:	f7f8 fd6c 	bl	80001e4 <strlen>
 800770c:	4605      	mov	r5, r0
					while( xIndex != 0 )
 800770e:	2800      	cmp	r0, #0
 8007710:	f000 8095 	beq.w	800783e <FF_Move+0x20e>
						if( ( szDestinationFile[ xIndex ] == '\\' ) || ( szDestinationFile[ xIndex ] == '/' ) )
 8007714:	183a      	adds	r2, r7, r0
 8007716:	5c3b      	ldrb	r3, [r7, r0]
 8007718:	2b5c      	cmp	r3, #92	; 0x5c
 800771a:	d00a      	beq.n	8007732 <FF_Move+0x102>
 800771c:	2b2f      	cmp	r3, #47	; 0x2f
 800771e:	d008      	beq.n	8007732 <FF_Move+0x102>
					while( xIndex != 0 )
 8007720:	3d01      	subs	r5, #1
 8007722:	f000 808c 	beq.w	800783e <FF_Move+0x20e>
						if( ( szDestinationFile[ xIndex ] == '\\' ) || ( szDestinationFile[ xIndex ] == '/' ) )
 8007726:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 800772a:	2b5c      	cmp	r3, #92	; 0x5c
 800772c:	d001      	beq.n	8007732 <FF_Move+0x102>
 800772e:	2b2f      	cmp	r3, #47	; 0x2f
 8007730:	d1f6      	bne.n	8007720 <FF_Move+0xf0>
					STRNCPY( xMyFile.pcFileName, ( szDestinationFile + xIndex + 1 ), ffconfigMAX_FILENAME );
 8007732:	1c69      	adds	r1, r5, #1
 8007734:	22c1      	movs	r2, #193	; 0xc1
 8007736:	4439      	add	r1, r7
 8007738:	f10d 009e 	add.w	r0, sp, #158	; 0x9e
 800773c:	f010 facd 	bl	8017cda <strncpy>
					ulDirCluster = FF_FindDir( pxIOManager, szDestinationFile, xIndex, &xError );
 8007740:	ab5d      	add	r3, sp, #372	; 0x174
 8007742:	b2aa      	uxth	r2, r5
 8007744:	4639      	mov	r1, r7
 8007746:	4620      	mov	r0, r4
 8007748:	f7fc ff30 	bl	80045ac <FF_FindDir>
 800774c:	4605      	mov	r5, r0
		if( FF_isERR( xError ) == pdFALSE )
 800774e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8007750:	2b00      	cmp	r3, #0
 8007752:	db4b      	blt.n	80077ec <FF_Move+0x1bc>
			if( ulDirCluster != 0ul )
 8007754:	2800      	cmp	r0, #0
 8007756:	d07e      	beq.n	8007856 <FF_Move+0x226>
				memset( &xFindParams, '\0', sizeof( xFindParams ) );
 8007758:	2230      	movs	r2, #48	; 0x30
 800775a:	2100      	movs	r1, #0
 800775c:	4668      	mov	r0, sp
 800775e:	f010 f835 	bl	80177cc <memset>
				xError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 8007762:	a90c      	add	r1, sp, #48	; 0x30
 8007764:	4620      	mov	r0, r4
 8007766:	f7fc fbc6 	bl	8003ef6 <FF_CleanupEntryFetch>
 800776a:	905d      	str	r0, [sp, #372]	; 0x174
				if( FF_isERR( xError ) == pdFALSE )
 800776c:	2800      	cmp	r0, #0
 800776e:	db3a      	blt.n	80077e6 <FF_Move+0x1b6>
					xFindParams.ulDirCluster = ulDirCluster;
 8007770:	9500      	str	r5, [sp, #0]
					xError = FF_CreateDirent( pxIOManager, &xFindParams, &xMyFile );
 8007772:	aa19      	add	r2, sp, #100	; 0x64
 8007774:	4669      	mov	r1, sp
 8007776:	4620      	mov	r0, r4
 8007778:	f7fd fc18 	bl	8004fac <FF_CreateDirent>
 800777c:	905d      	str	r0, [sp, #372]	; 0x174
				if( FF_isERR( xError ) == pdFALSE )
 800777e:	2800      	cmp	r0, #0
 8007780:	db31      	blt.n	80077e6 <FF_Move+0x1b6>
					FF_LockDirectory( pxIOManager );
 8007782:	4620      	mov	r0, r4
 8007784:	f001 f9b4 	bl	8008af0 <FF_LockDirectory>
						xError = FF_RmLFNs( pxIOManager, pSrcFile->usDirEntry, &xFetchContext );
 8007788:	aa0c      	add	r2, sp, #48	; 0x30
 800778a:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 800778c:	4620      	mov	r0, r4
 800778e:	f7fd ff5b 	bl	8005648 <FF_RmLFNs>
 8007792:	905d      	str	r0, [sp, #372]	; 0x174
						if( FF_isERR( xError ) == pdFALSE )
 8007794:	2800      	cmp	r0, #0
 8007796:	db23      	blt.n	80077e0 <FF_Move+0x1b0>
							xError = FF_FetchEntryWithContext( pxIOManager, pSrcFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 8007798:	ab11      	add	r3, sp, #68	; 0x44
 800779a:	aa0c      	add	r2, sp, #48	; 0x30
 800779c:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 800779e:	4620      	mov	r0, r4
 80077a0:	f7fc fbb6 	bl	8003f10 <FF_FetchEntryWithContext>
 80077a4:	905d      	str	r0, [sp, #372]	; 0x174
							if( FF_isERR( xError ) == pdFALSE )
 80077a6:	2800      	cmp	r0, #0
 80077a8:	db1a      	blt.n	80077e0 <FF_Move+0x1b0>
								ucEntryBuffer[0] = FF_FAT_DELETED;
 80077aa:	23e5      	movs	r3, #229	; 0xe5
 80077ac:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		pBuffer[ 1 ] = u16.bytes.u8_1;
 80077b6:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		pBuffer[ 0 ] = u16.bytes.u8_0;
 80077ba:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
		pBuffer[ 1 ] = u16.bytes.u8_1;
 80077be:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
								xError = FF_PushEntryWithContext( pxIOManager, pSrcFile->usDirEntry, &xFetchContext, ucEntryBuffer );
 80077c2:	ab11      	add	r3, sp, #68	; 0x44
 80077c4:	aa0c      	add	r2, sp, #48	; 0x30
 80077c6:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7fc fc19 	bl	8004000 <FF_PushEntryWithContext>
 80077ce:	905d      	str	r0, [sp, #372]	; 0x174
								xTempError = FF_CleanupEntryFetch( pxIOManager, &xFetchContext );
 80077d0:	a90c      	add	r1, sp, #48	; 0x30
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7fc fb8f 	bl	8003ef6 <FF_CleanupEntryFetch>
								if( FF_isERR( xError ) == pdFALSE )
 80077d8:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80077da:	2b00      	cmp	r3, #0
									xError = xTempError;
 80077dc:	bfa8      	it	ge
 80077de:	905d      	strge	r0, [sp, #372]	; 0x174
					FF_UnlockDirectory( pxIOManager );
 80077e0:	4620      	mov	r0, r4
 80077e2:	f001 f99f 	bl	8008b24 <FF_UnlockDirectory>
					if( xIsDirectory != 0 )
 80077e6:	f1b9 0f00 	cmp.w	r9, #0
 80077ea:	d120      	bne.n	800782e <FF_Move+0x1fe>
			pSrcFile->ucMode &= ~( FF_MODE_WRITE | FF_MODE_APPEND | FF_MODE_CREATE );
 80077ec:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80077f0:	f023 030e 	bic.w	r3, r3, #14
 80077f4:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
			FF_Close( pSrcFile );
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7ff fd6f 	bl	80072dc <FF_Close>
 80077fe:	e72c      	b.n	800765a <FF_Move+0x2a>
		if( ( pxDestFile != NULL) || ( FF_GETERROR( xError ) == FF_ERR_FILE_OBJECT_IS_A_DIR ) )
 8007800:	f8bd 3174 	ldrh.w	r3, [sp, #372]	; 0x174
 8007804:	2b20      	cmp	r3, #32
 8007806:	d017      	beq.n	8007838 <FF_Move+0x208>
			xError = FF_ERR_NONE;
 8007808:	2300      	movs	r3, #0
 800780a:	935d      	str	r3, [sp, #372]	; 0x174
 800780c:	e74d      	b.n	80076aa <FF_Move+0x7a>
					xError = FF_RmFile( pxIOManager, szDestinationFile );
 800780e:	4639      	mov	r1, r7
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff fe97 	bl	8007544 <FF_RmFile>
 8007816:	905d      	str	r0, [sp, #372]	; 0x174
 8007818:	e744      	b.n	80076a4 <FF_Move+0x74>
			pSrcFile = FF_Open( pxIOManager, szSourceFile, FF_MODE_DIR, &xError );
 800781a:	ab5d      	add	r3, sp, #372	; 0x174
 800781c:	2280      	movs	r2, #128	; 0x80
 800781e:	4641      	mov	r1, r8
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff f801 	bl	8006828 <FF_Open>
 8007826:	4606      	mov	r6, r0
			xIsDirectory = pdTRUE;
 8007828:	f04f 0901 	mov.w	r9, #1
 800782c:	e74b      	b.n	80076c6 <FF_Move+0x96>
						FF_RmPathCache( pxIOManager, szSourceFile );
 800782e:	4641      	mov	r1, r8
 8007830:	4620      	mov	r0, r4
 8007832:	f7fe fd15 	bl	8006260 <FF_RmPathCache>
 8007836:	e7d9      	b.n	80077ec <FF_Move+0x1bc>
			xError = ( FF_Error_t ) ( FF_ERR_FILE_DESTINATION_EXISTS | FF_MOVE );
 8007838:	4b0c      	ldr	r3, [pc, #48]	; (800786c <FF_Move+0x23c>)
 800783a:	935d      	str	r3, [sp, #372]	; 0x174
 800783c:	e70d      	b.n	800765a <FF_Move+0x2a>
					STRNCPY( xMyFile.pcFileName, ( szDestinationFile + xIndex + 1 ), ffconfigMAX_FILENAME );
 800783e:	22c1      	movs	r2, #193	; 0xc1
 8007840:	1c79      	adds	r1, r7, #1
 8007842:	f10d 009e 	add.w	r0, sp, #158	; 0x9e
 8007846:	f010 fa48 	bl	8017cda <strncpy>
						xIndex = 1;
 800784a:	2501      	movs	r5, #1
 800784c:	e778      	b.n	8007740 <FF_Move+0x110>
		if( FF_isERR( xError ) == pdFALSE )
 800784e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8007850:	2b00      	cmp	r3, #0
 8007852:	f6ff af02 	blt.w	800765a <FF_Move+0x2a>
				xError = ( FF_Error_t ) ( FF_ERR_FILE_DIR_NOT_FOUND | FF_MOVE );
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <FF_Move+0x240>)
 8007858:	935d      	str	r3, [sp, #372]	; 0x174
		if( pSrcFile != NULL )
 800785a:	2e00      	cmp	r6, #0
 800785c:	f43f aefd 	beq.w	800765a <FF_Move+0x2a>
 8007860:	e7c4      	b.n	80077ec <FF_Move+0x1bc>
 8007862:	bf00      	nop
 8007864:	83060008 	.word	0x83060008
 8007868:	83060002 	.word	0x83060002
 800786c:	83060026 	.word	0x83060026
 8007870:	83060028 	.word	0x83060028

08007874 <FF_DeleteIOManager>:
FF_Error_t FF_DeleteIOManager( FF_IOManager_t *pxIOManager )
{
FF_Error_t xError;

	/* Ensure no NULL pointer was provided. */
	if( pxIOManager == NULL )
 8007874:	b1d0      	cbz	r0, 80078ac <FF_DeleteIOManager+0x38>
{
 8007876:	b510      	push	{r4, lr}
 8007878:	4604      	mov	r4, r0
	else
	{
		xError = FF_ERR_NONE;

		/* Ensure pxBuffers pointer was allocated. */
		if( ( pxIOManager->ucFlags & FF_IOMAN_ALLOC_BUFDESCR ) != 0 )
 800787a:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 800787e:	f013 0f01 	tst.w	r3, #1
 8007882:	d109      	bne.n	8007898 <FF_DeleteIOManager+0x24>
		{
			ffconfigFREE( pxIOManager->pxBuffers );
		}

		/* Ensure pucCacheMem pointer was allocated. */
		if( ( pxIOManager->ucFlags & FF_IOMAN_ALLOC_BUFFERS ) != 0 )
 8007884:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 8007888:	f013 0f02 	tst.w	r3, #2
 800788c:	d109      	bne.n	80078a2 <FF_DeleteIOManager+0x2e>
		{
			ffconfigFREE( pxIOManager->pucCacheMem );
		}

		/* Finally free the FF_IOManager_t object. */
		ffconfigFREE( pxIOManager );
 800788e:	4620      	mov	r0, r4
 8007890:	f00b fea0 	bl	80135d4 <vPortFree>
		xError = FF_ERR_NONE;
 8007894:	2000      	movs	r0, #0
 8007896:	bd10      	pop	{r4, pc}
			ffconfigFREE( pxIOManager->pxBuffers );
 8007898:	f8d0 069c 	ldr.w	r0, [r0, #1692]	; 0x69c
 800789c:	f00b fe9a 	bl	80135d4 <vPortFree>
 80078a0:	e7f0      	b.n	8007884 <FF_DeleteIOManager+0x10>
			ffconfigFREE( pxIOManager->pucCacheMem );
 80078a2:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 80078a6:	f00b fe95 	bl	80135d4 <vPortFree>
 80078aa:	e7f0      	b.n	800788e <FF_DeleteIOManager+0x1a>
		xError = FF_ERR_NULL_POINTER | FF_DESTROYIOMAN;
 80078ac:	4800      	ldr	r0, [pc, #0]	; (80078b0 <FF_DeleteIOManager+0x3c>)
	}

	return xError;
 80078ae:	4770      	bx	lr
 80078b0:	81020002 	.word	0x81020002

080078b4 <FF_IOMAN_InitBufferDescriptors>:
 *
 *	@param	pxIOManager		IOMAN Object.
 *
 **/
void FF_IOMAN_InitBufferDescriptors( FF_IOManager_t *pxIOManager )
{
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	4606      	mov	r6, r0
uint8_t *pucBuffer = pxIOManager->pucCacheMem;
 80078b8:	f8d0 56ac 	ldr.w	r5, [r0, #1708]	; 0x6ac
FF_Buffer_t *pxBuffer = pxIOManager->pxBuffers;
 80078bc:	f8d0 469c 	ldr.w	r4, [r0, #1692]	; 0x69c
FF_Buffer_t *pxLastBuffer = pxBuffer + pxIOManager->usCacheSize;
 80078c0:	f8b0 26b2 	ldrh.w	r2, [r0, #1714]	; 0x6b2
 80078c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80078c8:	0092      	lsls	r2, r2, #2
 80078ca:	18a7      	adds	r7, r4, r2

	/* Clear the contents of the buffer descriptors. */
	memset( ( void * ) pxBuffer, '\0', sizeof( FF_Buffer_t ) * pxIOManager->usCacheSize );
 80078cc:	2100      	movs	r1, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	f00f ff7c 	bl	80177cc <memset>

	while( pxBuffer < pxLastBuffer )
 80078d4:	42bc      	cmp	r4, r7
 80078d6:	d206      	bcs.n	80078e6 <FF_IOMAN_InitBufferDescriptors+0x32>
	{
		pxBuffer->pucBuffer = pucBuffer;
 80078d8:	60a5      	str	r5, [r4, #8]
		pxBuffer++;
 80078da:	3414      	adds	r4, #20
		pucBuffer += pxIOManager->usSectorSize;
 80078dc:	f8b6 36b0 	ldrh.w	r3, [r6, #1712]	; 0x6b0
 80078e0:	441d      	add	r5, r3
	while( pxBuffer < pxLastBuffer )
 80078e2:	42a7      	cmp	r7, r4
 80078e4:	d8f8      	bhi.n	80078d8 <FF_IOMAN_InitBufferDescriptors+0x24>
 80078e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078e8 <FF_CreateIOManger>:
{
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4606      	mov	r6, r0
 80078ee:	4688      	mov	r8, r1
uint32_t ulCacheSize = pxParameters->ulMemorySize;
 80078f0:	6845      	ldr	r5, [r0, #4]
uint32_t usSectorSize = pxParameters->ulSectorSize;
 80078f2:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if( ( ( usSectorSize % 512 ) != 0 ) || ( usSectorSize == 0 ) )
 80078f6:	f3c9 0308 	ubfx	r3, r9, #0, #9
 80078fa:	b9bb      	cbnz	r3, 800792c <FF_CreateIOManger+0x44>
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	d023      	beq.n	800794a <FF_CreateIOManger+0x62>
	else if( ( ( ulCacheSize % ( uint32_t ) usSectorSize ) != 0 ) || ( ulCacheSize == 0 ) ||
 8007902:	fbb5 f3f9 	udiv	r3, r5, r9
 8007906:	fb09 5313 	mls	r3, r9, r3, r5
 800790a:	bb0b      	cbnz	r3, 8007950 <FF_CreateIOManger+0x68>
 800790c:	b31d      	cbz	r5, 8007956 <FF_CreateIOManger+0x6e>
 800790e:	454d      	cmp	r5, r9
 8007910:	d024      	beq.n	800795c <FF_CreateIOManger+0x74>
		pxIOManager = ( FF_IOManager_t * ) ffconfigMALLOC( sizeof( FF_IOManager_t ) );
 8007912:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007916:	f00b fdf7 	bl	8013508 <pvPortMalloc>
		if( pxIOManager != NULL )
 800791a:	4604      	mov	r4, r0
 800791c:	b308      	cbz	r0, 8007962 <FF_CreateIOManger+0x7a>
			memset( pxIOManager, '\0', sizeof( FF_IOManager_t ) );
 800791e:	f240 62bc 	movw	r2, #1724	; 0x6bc
 8007922:	2100      	movs	r1, #0
 8007924:	f00f ff52 	bl	80177cc <memset>
			xError = FF_ERR_NONE;
 8007928:	2700      	movs	r7, #0
 800792a:	e001      	b.n	8007930 <FF_CreateIOManger+0x48>
		xError = FF_ERR_IOMAN_BAD_BLKSIZE | FF_CREATEIOMAN;
 800792c:	4f34      	ldr	r7, [pc, #208]	; (8007a00 <FF_CreateIOManger+0x118>)
FF_IOManager_t *pxIOManager = NULL;
 800792e:	2400      	movs	r4, #0
	if( FF_CreateEvents( pxIOManager ) != pdTRUE )
 8007930:	4620      	mov	r0, r4
 8007932:	f001 f8cf 	bl	8008ad4 <FF_CreateEvents>
 8007936:	2801      	cmp	r0, #1
 8007938:	d015      	beq.n	8007966 <FF_CreateIOManger+0x7e>
		xError = FF_ERR_NOT_ENOUGH_MEMORY | FF_CREATEIOMAN;
 800793a:	4f32      	ldr	r7, [pc, #200]	; (8007a04 <FF_CreateIOManger+0x11c>)
		if( pxIOManager != NULL )
 800793c:	2c00      	cmp	r4, #0
 800793e:	d048      	beq.n	80079d2 <FF_CreateIOManger+0xea>
			FF_DeleteIOManager( pxIOManager );
 8007940:	4620      	mov	r0, r4
 8007942:	f7ff ff97 	bl	8007874 <FF_DeleteIOManager>
			pxIOManager = NULL;
 8007946:	2400      	movs	r4, #0
 8007948:	e043      	b.n	80079d2 <FF_CreateIOManger+0xea>
		xError = FF_ERR_IOMAN_BAD_BLKSIZE | FF_CREATEIOMAN;
 800794a:	4f2d      	ldr	r7, [pc, #180]	; (8007a00 <FF_CreateIOManger+0x118>)
FF_IOManager_t *pxIOManager = NULL;
 800794c:	2400      	movs	r4, #0
 800794e:	e7ef      	b.n	8007930 <FF_CreateIOManger+0x48>
		xError = FF_ERR_IOMAN_BAD_MEMSIZE | FF_CREATEIOMAN;
 8007950:	4f2d      	ldr	r7, [pc, #180]	; (8007a08 <FF_CreateIOManger+0x120>)
FF_IOManager_t *pxIOManager = NULL;
 8007952:	2400      	movs	r4, #0
 8007954:	e7ec      	b.n	8007930 <FF_CreateIOManger+0x48>
		xError = FF_ERR_IOMAN_BAD_MEMSIZE | FF_CREATEIOMAN;
 8007956:	4f2c      	ldr	r7, [pc, #176]	; (8007a08 <FF_CreateIOManger+0x120>)
FF_IOManager_t *pxIOManager = NULL;
 8007958:	2400      	movs	r4, #0
 800795a:	e7e9      	b.n	8007930 <FF_CreateIOManger+0x48>
		xError = FF_ERR_IOMAN_BAD_MEMSIZE | FF_CREATEIOMAN;
 800795c:	4f2a      	ldr	r7, [pc, #168]	; (8007a08 <FF_CreateIOManger+0x120>)
FF_IOManager_t *pxIOManager = NULL;
 800795e:	2400      	movs	r4, #0
 8007960:	e7e6      	b.n	8007930 <FF_CreateIOManger+0x48>
			xError = FF_ERR_NOT_ENOUGH_MEMORY | FF_CREATEIOMAN;
 8007962:	4f28      	ldr	r7, [pc, #160]	; (8007a04 <FF_CreateIOManger+0x11c>)
 8007964:	e7e4      	b.n	8007930 <FF_CreateIOManger+0x48>
	else if( FF_isERR( xError ) == pdFALSE )
 8007966:	2f00      	cmp	r7, #0
 8007968:	dbe8      	blt.n	800793c <FF_CreateIOManger+0x54>
		if( pxParameters->pucCacheMemory != NULL )
 800796a:	6833      	ldr	r3, [r6, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d038      	beq.n	80079e2 <FF_CreateIOManger+0xfa>
			pxIOManager->pucCacheMem = pxParameters->pucCacheMemory;
 8007970:	f8c4 36ac 	str.w	r3, [r4, #1708]	; 0x6ac
			memset( pxIOManager->pucCacheMem, '\0', ulCacheSize );
 8007974:	462a      	mov	r2, r5
 8007976:	2100      	movs	r1, #0
 8007978:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 800797c:	f00f ff26 	bl	80177cc <memset>
		pxIOManager->usSectorSize = usSectorSize;
 8007980:	f8a4 96b0 	strh.w	r9, [r4, #1712]	; 0x6b0
		pxIOManager->usCacheSize = ( uint16_t ) ( ulCacheSize / ( uint32_t ) usSectorSize );
 8007984:	fbb5 f0f9 	udiv	r0, r5, r9
 8007988:	f8a4 06b2 	strh.w	r0, [r4, #1714]	; 0x6b2
		pxIOManager->pxBuffers = ( FF_Buffer_t * ) ffconfigMALLOC( sizeof( FF_Buffer_t ) * pxIOManager->usCacheSize );
 800798c:	b280      	uxth	r0, r0
 800798e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007992:	0080      	lsls	r0, r0, #2
 8007994:	f00b fdb8 	bl	8013508 <pvPortMalloc>
 8007998:	f8c4 069c 	str.w	r0, [r4, #1692]	; 0x69c
		if( pxIOManager->pxBuffers != NULL )
 800799c:	b370      	cbz	r0, 80079fc <FF_CreateIOManger+0x114>
			pxIOManager->ucFlags |= FF_IOMAN_ALLOC_BUFDESCR;
 800799e:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	f884 36b5 	strb.w	r3, [r4, #1717]	; 0x6b5
			FF_IOMAN_InitBufferDescriptors( pxIOManager );
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff ff82 	bl	80078b4 <FF_IOMAN_InitBufferDescriptors>
			pxIOManager->pvSemaphore = pxParameters->pvSemaphore;
 80079b0:	69b3      	ldr	r3, [r6, #24]
 80079b2:	f8c4 36a0 	str.w	r3, [r4, #1696]	; 0x6a0
			if( pxParameters->xBlockDeviceIsReentrant != pdFALSE )
 80079b6:	69f3      	ldr	r3, [r6, #28]
 80079b8:	b12b      	cbz	r3, 80079c6 <FF_CreateIOManger+0xde>
				pxIOManager->ucFlags |= FF_IOMAN_BLOCK_DEVICE_IS_REENTRANT;
 80079ba:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 80079be:	f043 0310 	orr.w	r3, r3, #16
 80079c2:	f884 36b5 	strb.w	r3, [r4, #1717]	; 0x6b5
			pxIOManager->xBlkDevice.fnpReadBlocks	= pxParameters->fnReadBlocks;
 80079c6:	6933      	ldr	r3, [r6, #16]
 80079c8:	6063      	str	r3, [r4, #4]
			pxIOManager->xBlkDevice.fnpWriteBlocks	= pxParameters->fnWriteBlocks;
 80079ca:	68f3      	ldr	r3, [r6, #12]
 80079cc:	6023      	str	r3, [r4, #0]
			pxIOManager->xBlkDevice.pxDisk			= pxParameters->pxDisk;
 80079ce:	6973      	ldr	r3, [r6, #20]
 80079d0:	60a3      	str	r3, [r4, #8]
	if( pError != NULL )
 80079d2:	f1b8 0f00 	cmp.w	r8, #0
 80079d6:	d001      	beq.n	80079dc <FF_CreateIOManger+0xf4>
		*pError = xError;
 80079d8:	f8c8 7000 	str.w	r7, [r8]
}	/* FF_CreateIOManger() */
 80079dc:	4620      	mov	r0, r4
 80079de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pxIOManager->pucCacheMem = ( uint8_t * ) ffconfigMALLOC( ulCacheSize );
 80079e2:	4628      	mov	r0, r5
 80079e4:	f00b fd90 	bl	8013508 <pvPortMalloc>
 80079e8:	f8c4 06ac 	str.w	r0, [r4, #1708]	; 0x6ac
			if( pxIOManager->pucCacheMem != NULL )
 80079ec:	b130      	cbz	r0, 80079fc <FF_CreateIOManger+0x114>
				pxIOManager->ucFlags |= FF_IOMAN_ALLOC_BUFFERS;
 80079ee:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 80079f2:	f043 0302 	orr.w	r3, r3, #2
 80079f6:	f884 36b5 	strb.w	r3, [r4, #1717]	; 0x6b5
 80079fa:	e7bb      	b.n	8007974 <FF_CreateIOManger+0x8c>
FF_IOManager_t *pxIOManager = NULL;
 80079fc:	4f01      	ldr	r7, [pc, #4]	; (8007a04 <FF_CreateIOManger+0x11c>)
 80079fe:	e79d      	b.n	800793c <FF_CreateIOManger+0x54>
 8007a00:	8101000b 	.word	0x8101000b
 8007a04:	81010003 	.word	0x81010003
 8007a08:	8101000c 	.word	0x8101000c

08007a0c <FF_BlockRead>:
/*-----------------------------------------------------------*/

/* New Interface for FreeRTOS+FAT to read blocks. */
int32_t FF_BlockRead( FF_IOManager_t *pxIOManager, uint32_t ulSectorLBA, uint32_t ulNumSectors, void *pxBuffer,
	BaseType_t xSemLocked )
{
 8007a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
int32_t slRetVal = 0;

	if( pxIOManager->xPartition.ulTotalSectors != 0ul )
 8007a10:	6984      	ldr	r4, [r0, #24]
 8007a12:	b124      	cbz	r4, 8007a1e <FF_BlockRead+0x12>
	{
		/* At some point while formatting a partition, ulTotalSectors might be unknown.
		In that case this test will be skipped. */
		if( ( ulSectorLBA + ulNumSectors ) > ( pxIOManager->xPartition.ulTotalSectors + pxIOManager->xPartition.ulBeginLBA ) )
 8007a14:	188d      	adds	r5, r1, r2
 8007a16:	68c6      	ldr	r6, [r0, #12]
 8007a18:	4434      	add	r4, r6
 8007a1a:	42a5      	cmp	r5, r4
 8007a1c:	d823      	bhi.n	8007a66 <FF_BlockRead+0x5a>
		{
			slRetVal = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_BLOCKREAD;
		}
	}

	if( ( slRetVal == 0ul ) && ( pxIOManager->xBlkDevice.fnpReadBlocks != NULL ) )
 8007a1e:	6847      	ldr	r7, [r0, #4]
 8007a20:	2400      	movs	r4, #0
 8007a22:	b337      	cbz	r7, 8007a72 <FF_BlockRead+0x66>
 8007a24:	4698      	mov	r8, r3
 8007a26:	4616      	mov	r6, r2
 8007a28:	460c      	mov	r4, r1
 8007a2a:	4605      	mov	r5, r0
	{
		do
		{
			/* Make sure we don't execute a NULL. */
			if( ( xSemLocked == pdFALSE ) &&
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	b9e3      	cbnz	r3, 8007a6a <FF_BlockRead+0x5e>
 8007a30:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 8007a34:	f013 0f10 	tst.w	r3, #16
 8007a38:	d010      	beq.n	8007a5c <FF_BlockRead+0x50>
				( ( pxIOManager->ucFlags & FF_IOMAN_BLOCK_DEVICE_IS_REENTRANT ) == pdFALSE ) )
			{
				FF_PendSemaphore( pxIOManager->pvSemaphore );
			}

			slRetVal = pxIOManager->xBlkDevice.fnpReadBlocks( pxBuffer, ulSectorLBA, ulNumSectors, pxIOManager->xBlkDevice.pxDisk );
 8007a3a:	686f      	ldr	r7, [r5, #4]
 8007a3c:	68ab      	ldr	r3, [r5, #8]
 8007a3e:	4632      	mov	r2, r6
 8007a40:	4621      	mov	r1, r4
 8007a42:	4640      	mov	r0, r8
 8007a44:	47b8      	blx	r7
 8007a46:	4604      	mov	r4, r0

			if( ( xSemLocked == pdFALSE ) &&
 8007a48:	f895 36b5 	ldrb.w	r3, [r5, #1717]	; 0x6b5
 8007a4c:	f013 0f10 	tst.w	r3, #16
 8007a50:	d10f      	bne.n	8007a72 <FF_BlockRead+0x66>
				( ( pxIOManager->ucFlags & FF_IOMAN_BLOCK_DEVICE_IS_REENTRANT ) == pdFALSE ) )
			{
				FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007a52:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8007a56:	f001 f82f 	bl	8008ab8 <FF_ReleaseSemaphore>
 8007a5a:	e00a      	b.n	8007a72 <FF_BlockRead+0x66>
				FF_PendSemaphore( pxIOManager->pvSemaphore );
 8007a5c:	f8d0 06a0 	ldr.w	r0, [r0, #1696]	; 0x6a0
 8007a60:	f001 f81a 	bl	8008a98 <FF_PendSemaphore>
 8007a64:	e7e9      	b.n	8007a3a <FF_BlockRead+0x2e>
			slRetVal = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_BLOCKREAD;
 8007a66:	4c04      	ldr	r4, [pc, #16]	; (8007a78 <FF_BlockRead+0x6c>)

			FF_Sleep( ffconfigDRIVER_BUSY_SLEEP_MS );
		} while( pdTRUE );
	}

	return slRetVal;
 8007a68:	e003      	b.n	8007a72 <FF_BlockRead+0x66>
			slRetVal = pxIOManager->xBlkDevice.fnpReadBlocks( pxBuffer, ulSectorLBA, ulNumSectors, pxIOManager->xBlkDevice.pxDisk );
 8007a6a:	6883      	ldr	r3, [r0, #8]
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	47b8      	blx	r7
 8007a70:	4604      	mov	r4, r0
}	/* FF_BlockRead() */
 8007a72:	4620      	mov	r0, r4
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	81070017 	.word	0x81070017

08007a7c <FF_BlockWrite>:
/*-----------------------------------------------------------*/

int32_t FF_BlockWrite( FF_IOManager_t *pxIOManager, uint32_t ulSectorLBA, uint32_t ulNumSectors, void *pxBuffer,
	BaseType_t xSemLocked )
{
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
int32_t slRetVal = 0;

	if( pxIOManager->xPartition.ulTotalSectors != 0 )
 8007a80:	6984      	ldr	r4, [r0, #24]
 8007a82:	b124      	cbz	r4, 8007a8e <FF_BlockWrite+0x12>
	{
		/* At some point while formatting a partition, ulTotalSectors might be unknown.
		In that case this test will be skipped. */
		if( ( ulSectorLBA + ulNumSectors ) > ( pxIOManager->xPartition.ulTotalSectors + pxIOManager->xPartition.ulBeginLBA ) )
 8007a84:	188d      	adds	r5, r1, r2
 8007a86:	68c6      	ldr	r6, [r0, #12]
 8007a88:	4434      	add	r4, r6
 8007a8a:	42a5      	cmp	r5, r4
 8007a8c:	d823      	bhi.n	8007ad6 <FF_BlockWrite+0x5a>
		{
			slRetVal = FF_ERR_IOMAN_OUT_OF_BOUNDS_WRITE | FF_BLOCKWRITE;
		}
	}

	if( ( slRetVal == 0ul ) && ( pxIOManager->xBlkDevice.fnpWriteBlocks != NULL ) )
 8007a8e:	6807      	ldr	r7, [r0, #0]
 8007a90:	2400      	movs	r4, #0
 8007a92:	b337      	cbz	r7, 8007ae2 <FF_BlockWrite+0x66>
 8007a94:	4698      	mov	r8, r3
 8007a96:	4616      	mov	r6, r2
 8007a98:	460c      	mov	r4, r1
 8007a9a:	4605      	mov	r5, r0
	{
		do
		{	/* Make sure we don't execute a NULL. */

			if( ( xSemLocked == pdFALSE ) &&
 8007a9c:	9b06      	ldr	r3, [sp, #24]
 8007a9e:	b9e3      	cbnz	r3, 8007ada <FF_BlockWrite+0x5e>
 8007aa0:	f890 36b5 	ldrb.w	r3, [r0, #1717]	; 0x6b5
 8007aa4:	f013 0f10 	tst.w	r3, #16
 8007aa8:	d010      	beq.n	8007acc <FF_BlockWrite+0x50>
				( ( pxIOManager->ucFlags & FF_IOMAN_BLOCK_DEVICE_IS_REENTRANT ) == pdFALSE ) )
			{
				FF_PendSemaphore( pxIOManager->pvSemaphore );
			}

			slRetVal = pxIOManager->xBlkDevice.fnpWriteBlocks( pxBuffer, ulSectorLBA, ulNumSectors, pxIOManager->xBlkDevice.pxDisk );
 8007aaa:	682f      	ldr	r7, [r5, #0]
 8007aac:	68ab      	ldr	r3, [r5, #8]
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	47b8      	blx	r7
 8007ab6:	4604      	mov	r4, r0

			if( ( xSemLocked == pdFALSE ) &&
 8007ab8:	f895 36b5 	ldrb.w	r3, [r5, #1717]	; 0x6b5
 8007abc:	f013 0f10 	tst.w	r3, #16
 8007ac0:	d10f      	bne.n	8007ae2 <FF_BlockWrite+0x66>
				( ( pxIOManager->ucFlags & FF_IOMAN_BLOCK_DEVICE_IS_REENTRANT ) == pdFALSE ) )
			{
				FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007ac2:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8007ac6:	f000 fff7 	bl	8008ab8 <FF_ReleaseSemaphore>
 8007aca:	e00a      	b.n	8007ae2 <FF_BlockWrite+0x66>
				FF_PendSemaphore( pxIOManager->pvSemaphore );
 8007acc:	f8d0 06a0 	ldr.w	r0, [r0, #1696]	; 0x6a0
 8007ad0:	f000 ffe2 	bl	8008a98 <FF_PendSemaphore>
 8007ad4:	e7e9      	b.n	8007aaa <FF_BlockWrite+0x2e>
			slRetVal = FF_ERR_IOMAN_OUT_OF_BOUNDS_WRITE | FF_BLOCKWRITE;
 8007ad6:	4c04      	ldr	r4, [pc, #16]	; (8007ae8 <FF_BlockWrite+0x6c>)

			FF_Sleep( ffconfigDRIVER_BUSY_SLEEP_MS );
		} while( pdTRUE );
	}

	return slRetVal;
 8007ad8:	e003      	b.n	8007ae2 <FF_BlockWrite+0x66>
			slRetVal = pxIOManager->xBlkDevice.fnpWriteBlocks( pxBuffer, ulSectorLBA, ulNumSectors, pxIOManager->xBlkDevice.pxDisk );
 8007ada:	6883      	ldr	r3, [r0, #8]
 8007adc:	4640      	mov	r0, r8
 8007ade:	47b8      	blx	r7
 8007ae0:	4604      	mov	r4, r0
}	/* FF_BlockWrite() */
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae8:	81080018 	.word	0x81080018

08007aec <FF_FlushCache>:
	if( pxIOManager == NULL )
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d05a      	beq.n	8007ba6 <FF_FlushCache+0xba>
{
 8007af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af2:	b083      	sub	sp, #12
 8007af4:	4604      	mov	r4, r0
		FF_PendSemaphore( pxIOManager->pvSemaphore );
 8007af6:	f8d0 06a0 	ldr.w	r0, [r0, #1696]	; 0x6a0
 8007afa:	f000 ffcd 	bl	8008a98 <FF_PendSemaphore>
			for( xIndex = 0; xIndex < pxIOManager->usCacheSize; xIndex++ )
 8007afe:	f8b4 36b2 	ldrh.w	r3, [r4, #1714]	; 0x6b2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d048      	beq.n	8007b98 <FF_FlushCache+0xac>
 8007b06:	2500      	movs	r5, #0
 8007b08:	462e      	mov	r6, r5
					FF_BlockWrite( pxIOManager, pxIOManager->pxBuffers[ xIndex ].ulSector, 1, pxIOManager->pxBuffers[ xIndex ].pucBuffer, pdTRUE );
 8007b0a:	2701      	movs	r7, #1
 8007b0c:	e020      	b.n	8007b50 <FF_FlushCache+0x64>
					for( xIndex2 = 0; xIndex2 < pxIOManager->usCacheSize; xIndex2++ )
 8007b0e:	3301      	adds	r3, #1
 8007b10:	3214      	adds	r2, #20
 8007b12:	f8b4 16b2 	ldrh.w	r1, [r4, #1714]	; 0x6b2
 8007b16:	4299      	cmp	r1, r3
 8007b18:	dd14      	ble.n	8007b44 <FF_FlushCache+0x58>
						if( ( xIndex != xIndex2 ) &&
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	d0f7      	beq.n	8007b0e <FF_FlushCache+0x22>
							( pxIOManager->pxBuffers[ xIndex2 ].ulSector == pxIOManager->pxBuffers[ xIndex ].ulSector ) &&
 8007b1e:	f8d4 169c 	ldr.w	r1, [r4, #1692]	; 0x69c
 8007b22:	eb01 0e02 	add.w	lr, r1, r2
						if( ( xIndex != xIndex2 ) &&
 8007b26:	5888      	ldr	r0, [r1, r2]
 8007b28:	5949      	ldr	r1, [r1, r5]
 8007b2a:	4288      	cmp	r0, r1
 8007b2c:	d1ef      	bne.n	8007b0e <FF_FlushCache+0x22>
							( pxIOManager->pxBuffers[ xIndex2 ].ulSector == pxIOManager->pxBuffers[ xIndex ].ulSector ) &&
 8007b2e:	f89e 100c 	ldrb.w	r1, [lr, #12]
 8007b32:	2901      	cmp	r1, #1
 8007b34:	d1eb      	bne.n	8007b0e <FF_FlushCache+0x22>
							pxIOManager->pxBuffers[ xIndex2 ].bModified = pdTRUE;
 8007b36:	f89e 100d 	ldrb.w	r1, [lr, #13]
 8007b3a:	f041 0101 	orr.w	r1, r1, #1
 8007b3e:	f88e 100d 	strb.w	r1, [lr, #13]
 8007b42:	e7e4      	b.n	8007b0e <FF_FlushCache+0x22>
			for( xIndex = 0; xIndex < pxIOManager->usCacheSize; xIndex++ )
 8007b44:	3601      	adds	r6, #1
 8007b46:	3514      	adds	r5, #20
 8007b48:	f8b4 36b2 	ldrh.w	r3, [r4, #1714]	; 0x6b2
 8007b4c:	42b3      	cmp	r3, r6
 8007b4e:	dd23      	ble.n	8007b98 <FF_FlushCache+0xac>
				if( ( pxIOManager->pxBuffers[ xIndex ].usNumHandles == 0 ) && ( pxIOManager->pxBuffers[ xIndex ].bModified == pdTRUE ) )
 8007b50:	f8d4 269c 	ldr.w	r2, [r4, #1692]	; 0x69c
 8007b54:	1951      	adds	r1, r2, r5
 8007b56:	68cb      	ldr	r3, [r1, #12]
 8007b58:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007b5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b64:	d1ee      	bne.n	8007b44 <FF_FlushCache+0x58>
					FF_BlockWrite( pxIOManager, pxIOManager->pxBuffers[ xIndex ].ulSector, 1, pxIOManager->pxBuffers[ xIndex ].pucBuffer, pdTRUE );
 8007b66:	688b      	ldr	r3, [r1, #8]
 8007b68:	5951      	ldr	r1, [r2, r5]
 8007b6a:	9700      	str	r7, [sp, #0]
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7ff ff84 	bl	8007a7c <FF_BlockWrite>
					pxIOManager->pxBuffers[ xIndex ].ucMode = FF_MODE_READ;
 8007b74:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
 8007b78:	442b      	add	r3, r5
 8007b7a:	731f      	strb	r7, [r3, #12]
					pxIOManager->pxBuffers[ xIndex ].bModified = pdFALSE;
 8007b7c:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
 8007b80:	442b      	add	r3, r5
 8007b82:	7b5a      	ldrb	r2, [r3, #13]
 8007b84:	f36f 0200 	bfc	r2, #0, #1
 8007b88:	735a      	strb	r2, [r3, #13]
					for( xIndex2 = 0; xIndex2 < pxIOManager->usCacheSize; xIndex2++ )
 8007b8a:	f8b4 36b2 	ldrh.w	r3, [r4, #1714]	; 0x6b2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0d8      	beq.n	8007b44 <FF_FlushCache+0x58>
 8007b92:	2200      	movs	r2, #0
 8007b94:	4613      	mov	r3, r2
 8007b96:	e7c0      	b.n	8007b1a <FF_FlushCache+0x2e>
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007b98:	f8d4 06a0 	ldr.w	r0, [r4, #1696]	; 0x6a0
 8007b9c:	f000 ff8c 	bl	8008ab8 <FF_ReleaseSemaphore>
		xError = FF_ERR_NONE;
 8007ba0:	2000      	movs	r0, #0
}	/* FF_FlushCache() */
 8007ba2:	b003      	add	sp, #12
 8007ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xError = FF_ERR_NULL_POINTER | FF_FLUSHCACHE;
 8007ba6:	4801      	ldr	r0, [pc, #4]	; (8007bac <FF_FlushCache+0xc0>)
	return xError;
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	81050002 	.word	0x81050002

08007bb0 <FF_GetBuffer>:
{
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	460e      	mov	r6, r1
 8007bba:	4693      	mov	fp, r2
const FF_Buffer_t *pxLastBuffer = &( pxIOManager->pxBuffers[ pxIOManager->usCacheSize ] );
 8007bbc:	f8b0 56b2 	ldrh.w	r5, [r0, #1714]	; 0x6b2
 8007bc0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007bc4:	f8d0 369c 	ldr.w	r3, [r0, #1692]	; 0x69c
 8007bc8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007bcc:	f240 78cf 	movw	r8, #1999	; 0x7cf
		FF_BufferWait( pxIOManager, FF_GETBUFFER_SLEEP_TIME_MS );
 8007bd0:	f04f 0a0a 	mov.w	sl, #10
 8007bd4:	e01c      	b.n	8007c10 <FF_GetBuffer+0x60>
		for( pxBuffer = pxIOManager->pxBuffers; pxBuffer < pxLastBuffer; pxBuffer++ )
 8007bd6:	3414      	adds	r4, #20
 8007bd8:	42a5      	cmp	r5, r4
 8007bda:	d94a      	bls.n	8007c72 <FF_GetBuffer+0xc2>
			if( ( pxBuffer->ulSector == ulSector ) && ( pxBuffer->bValid ) )
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	42b3      	cmp	r3, r6
 8007be0:	d1f9      	bne.n	8007bd6 <FF_GetBuffer+0x26>
 8007be2:	7b63      	ldrb	r3, [r4, #13]
 8007be4:	f013 0f02 	tst.w	r3, #2
 8007be8:	d0f5      	beq.n	8007bd6 <FF_GetBuffer+0x26>
		if( pxMatchingBuffer != NULL )
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	d041      	beq.n	8007c72 <FF_GetBuffer+0xc2>
			if( ( ucMode == FF_MODE_READ ) && ( pxMatchingBuffer->ucMode == FF_MODE_READ ) )
 8007bee:	f1bb 0f01 	cmp.w	fp, #1
 8007bf2:	d018      	beq.n	8007c26 <FF_GetBuffer+0x76>
			if( pxMatchingBuffer->usNumHandles == 0 )
 8007bf4:	89e3      	ldrh	r3, [r4, #14]
 8007bf6:	b303      	cbz	r3, 8007c3a <FF_GetBuffer+0x8a>
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007bf8:	f8d7 06a0 	ldr.w	r0, [r7, #1696]	; 0x6a0
 8007bfc:	f000 ff5c 	bl	8008ab8 <FF_ReleaseSemaphore>
		FF_BufferWait( pxIOManager, FF_GETBUFFER_SLEEP_TIME_MS );
 8007c00:	4651      	mov	r1, sl
 8007c02:	4638      	mov	r0, r7
 8007c04:	f001 f810 	bl	8008c28 <FF_BufferWait>
		if( xLoopCount == 0 )
 8007c08:	f1b8 0801 	subs.w	r8, r8, #1
 8007c0c:	f000 8091 	beq.w	8007d32 <FF_GetBuffer+0x182>
 8007c10:	46c1      	mov	r9, r8
		FF_PendSemaphore( pxIOManager->pvSemaphore );
 8007c12:	f8d7 06a0 	ldr.w	r0, [r7, #1696]	; 0x6a0
 8007c16:	f000 ff3f 	bl	8008a98 <FF_PendSemaphore>
		for( pxBuffer = pxIOManager->pxBuffers; pxBuffer < pxLastBuffer; pxBuffer++ )
 8007c1a:	f8d7 269c 	ldr.w	r2, [r7, #1692]	; 0x69c
 8007c1e:	4295      	cmp	r5, r2
 8007c20:	d9ea      	bls.n	8007bf8 <FF_GetBuffer+0x48>
 8007c22:	4614      	mov	r4, r2
 8007c24:	e7da      	b.n	8007bdc <FF_GetBuffer+0x2c>
			if( ( ucMode == FF_MODE_READ ) && ( pxMatchingBuffer->ucMode == FF_MODE_READ ) )
 8007c26:	7b23      	ldrb	r3, [r4, #12]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d1e3      	bne.n	8007bf4 <FF_GetBuffer+0x44>
				pxMatchingBuffer->usNumHandles += 1;
 8007c2c:	89e3      	ldrh	r3, [r4, #14]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	81e3      	strh	r3, [r4, #14]
				pxMatchingBuffer->usPersistance += 1;
 8007c32:	8a23      	ldrh	r3, [r4, #16]
 8007c34:	3301      	adds	r3, #1
 8007c36:	8223      	strh	r3, [r4, #16]
				break;
 8007c38:	e00e      	b.n	8007c58 <FF_GetBuffer+0xa8>
				pxMatchingBuffer->ucMode = ( ucMode & FF_MODE_RD_WR );
 8007c3a:	f00b 0303 	and.w	r3, fp, #3
 8007c3e:	7323      	strb	r3, [r4, #12]
				if( ( ucMode & FF_MODE_WRITE ) != 0 )
 8007c40:	f01b 0f02 	tst.w	fp, #2
 8007c44:	d003      	beq.n	8007c4e <FF_GetBuffer+0x9e>
					pxMatchingBuffer->bModified = pdTRUE;
 8007c46:	7b63      	ldrb	r3, [r4, #13]
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	7363      	strb	r3, [r4, #13]
				pxMatchingBuffer->usNumHandles = 1;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	81e3      	strh	r3, [r4, #14]
				pxMatchingBuffer->usPersistance += 1;
 8007c52:	8a23      	ldrh	r3, [r4, #16]
 8007c54:	3301      	adds	r3, #1
 8007c56:	8223      	strh	r3, [r4, #16]
	if( xLoopCount > 0 )
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	dd05      	ble.n	8007c6a <FF_GetBuffer+0xba>
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007c5e:	f8d7 06a0 	ldr.w	r0, [r7, #1696]	; 0x6a0
 8007c62:	f000 ff29 	bl	8008ab8 <FF_ReleaseSemaphore>
	if( pxMatchingBuffer == NULL )
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	d063      	beq.n	8007d32 <FF_GetBuffer+0x182>
}	/* FF_GetBuffer() */
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	b003      	add	sp, #12
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	f102 0314 	add.w	r3, r2, #20
		for( pxBuffer = pxIOManager->pxBuffers; pxBuffer < pxLastBuffer; pxBuffer++ )
 8007c76:	2400      	movs	r4, #0
 8007c78:	e00c      	b.n	8007c94 <FF_GetBuffer+0xe4>
					( ( pxBuffer->ulLRU == pxRLUBuffer->ulLRU ) && ( pxBuffer->usPersistance > pxRLUBuffer->usPersistance ) ) )
 8007c7a:	f833 ec04 	ldrh.w	lr, [r3, #-4]
 8007c7e:	8a22      	ldrh	r2, [r4, #16]
 8007c80:	4596      	cmp	lr, r2
 8007c82:	d91a      	bls.n	8007cba <FF_GetBuffer+0x10a>
 8007c84:	4604      	mov	r4, r0
 8007c86:	e002      	b.n	8007c8e <FF_GetBuffer+0xde>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	e000      	b.n	8007c8e <FF_GetBuffer+0xde>
 8007c8c:	4604      	mov	r4, r0
			for( pxBuffer = pxIOManager->pxBuffers; pxBuffer < pxLastBuffer; pxBuffer++ )
 8007c8e:	428d      	cmp	r5, r1
 8007c90:	d92c      	bls.n	8007cec <FF_GetBuffer+0x13c>
 8007c92:	3314      	adds	r3, #20
 8007c94:	f1a3 0014 	sub.w	r0, r3, #20
 8007c98:	4619      	mov	r1, r3
				if( pxBuffer->usNumHandles != 0 )
 8007c9a:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	d1f5      	bne.n	8007c8e <FF_GetBuffer+0xde>
				pxBuffer->ulLRU += 1;
 8007ca2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8007ca6:	3201      	adds	r2, #1
 8007ca8:	f843 2c10 	str.w	r2, [r3, #-16]
				if( ( pxRLUBuffer == NULL ) ||
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d0eb      	beq.n	8007c88 <FF_GetBuffer+0xd8>
					( pxBuffer->ulLRU > pxRLUBuffer->ulLRU ) ||
 8007cb0:	f8d4 e004 	ldr.w	lr, [r4, #4]
				if( ( pxRLUBuffer == NULL ) ||
 8007cb4:	4572      	cmp	r2, lr
 8007cb6:	d8e9      	bhi.n	8007c8c <FF_GetBuffer+0xdc>
					( pxBuffer->ulLRU > pxRLUBuffer->ulLRU ) ||
 8007cb8:	d0df      	beq.n	8007c7a <FF_GetBuffer+0xca>
			for( pxBuffer = pxIOManager->pxBuffers; pxBuffer < pxLastBuffer; pxBuffer++ )
 8007cba:	428d      	cmp	r5, r1
 8007cbc:	d8e9      	bhi.n	8007c92 <FF_GetBuffer+0xe2>
				if( pxRLUBuffer->bModified == pdTRUE )
 8007cbe:	7b63      	ldrb	r3, [r4, #13]
 8007cc0:	f013 0f01 	tst.w	r3, #1
 8007cc4:	d008      	beq.n	8007cd8 <FF_GetBuffer+0x128>
					lRetVal = FF_BlockWrite( pxIOManager, pxRLUBuffer->ulSector, 1, pxRLUBuffer->pucBuffer, pdTRUE );
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	6821      	ldr	r1, [r4, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	9200      	str	r2, [sp, #0]
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff fed4 	bl	8007a7c <FF_BlockWrite>
					if( lRetVal < 0 )
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	db27      	blt.n	8007d28 <FF_GetBuffer+0x178>
				if( ucMode == FF_MODE_WR_ONLY )
 8007cd8:	f1bb 0f42 	cmp.w	fp, #66	; 0x42
 8007cdc:	d109      	bne.n	8007cf2 <FF_GetBuffer+0x142>
					memset( pxRLUBuffer->pucBuffer, '\0', pxIOManager->usSectorSize );
 8007cde:	f8b7 26b0 	ldrh.w	r2, [r7, #1712]	; 0x6b0
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	68a0      	ldr	r0, [r4, #8]
 8007ce6:	f00f fd71 	bl	80177cc <memset>
 8007cea:	e00b      	b.n	8007d04 <FF_GetBuffer+0x154>
			if( pxRLUBuffer != NULL )
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d083      	beq.n	8007bf8 <FF_GetBuffer+0x48>
 8007cf0:	e7e5      	b.n	8007cbe <FF_GetBuffer+0x10e>
					lRetVal = FF_BlockRead( pxIOManager, ulSector, 1, pxRLUBuffer->pucBuffer, pdTRUE );
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	9200      	str	r2, [sp, #0]
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7ff fe86 	bl	8007a0c <FF_BlockRead>
					if( lRetVal < 0 )
 8007d00:	2800      	cmp	r0, #0
 8007d02:	db11      	blt.n	8007d28 <FF_GetBuffer+0x178>
				pxRLUBuffer->ucMode = ( ucMode & FF_MODE_RD_WR );
 8007d04:	f00b 0303 	and.w	r3, fp, #3
 8007d08:	7323      	strb	r3, [r4, #12]
				pxRLUBuffer->usPersistance = 1;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	8223      	strh	r3, [r4, #16]
				pxRLUBuffer->ulLRU = 0;
 8007d0e:	2200      	movs	r2, #0
 8007d10:	6062      	str	r2, [r4, #4]
				pxRLUBuffer->usNumHandles = 1;
 8007d12:	81e3      	strh	r3, [r4, #14]
				pxRLUBuffer->ulSector = ulSector;
 8007d14:	6026      	str	r6, [r4, #0]
				pxRLUBuffer->bModified = ( ucMode & FF_MODE_WRITE ) != 0;
 8007d16:	f3cb 0240 	ubfx	r2, fp, #1, #1
 8007d1a:	7b63      	ldrb	r3, [r4, #13]
 8007d1c:	f362 0300 	bfi	r3, r2, #0, #1
				pxRLUBuffer->bValid = pdTRUE;
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	7363      	strb	r3, [r4, #13]
				break;
 8007d26:	e797      	b.n	8007c58 <FF_GetBuffer+0xa8>
	if( xLoopCount > 0 )
 8007d28:	f1b9 0f00 	cmp.w	r9, #0
 8007d2c:	bfc8      	it	gt
 8007d2e:	2400      	movgt	r4, #0
 8007d30:	dc95      	bgt.n	8007c5e <FF_GetBuffer+0xae>
		FF_PRINTF( "FF_GetBuffer[0x%X]: failed mode 0x%X\n", ( unsigned )ulSector, ( unsigned )ucMode );
 8007d32:	465a      	mov	r2, fp
 8007d34:	4631      	mov	r1, r6
 8007d36:	4802      	ldr	r0, [pc, #8]	; (8007d40 <FF_GetBuffer+0x190>)
 8007d38:	f00e fe0a 	bl	8016950 <lUDPLoggingPrintf>
 8007d3c:	2400      	movs	r4, #0
	return pxMatchingBuffer;	/* Return the Matched Buffer! */
 8007d3e:	e794      	b.n	8007c6a <FF_GetBuffer+0xba>
 8007d40:	0801909c 	.word	0x0801909c

08007d44 <FF_ReleaseBuffer>:
{
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
	FF_PendSemaphore( pxIOManager->pvSemaphore );
 8007d4c:	f8d0 06a0 	ldr.w	r0, [r0, #1696]	; 0x6a0
 8007d50:	f000 fea2 	bl	8008a98 <FF_PendSemaphore>
		if( pxBuffer->bModified == pdTRUE )
 8007d54:	7b63      	ldrb	r3, [r4, #13]
 8007d56:	f013 0f01 	tst.w	r3, #1
 8007d5a:	d10e      	bne.n	8007d7a <FF_ReleaseBuffer+0x36>
	FF_Error_t xError = FF_ERR_NONE;
 8007d5c:	2600      	movs	r6, #0
		configASSERT( pxBuffer->usNumHandles != 0 );
 8007d5e:	89e3      	ldrh	r3, [r4, #14]
 8007d60:	b1cb      	cbz	r3, 8007d96 <FF_ReleaseBuffer+0x52>
			pxBuffer->usNumHandles--;
 8007d62:	3b01      	subs	r3, #1
 8007d64:	81e3      	strh	r3, [r4, #14]
	FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8007d66:	f8d5 06a0 	ldr.w	r0, [r5, #1696]	; 0x6a0
 8007d6a:	f000 fea5 	bl	8008ab8 <FF_ReleaseSemaphore>
	FF_BufferProceed( pxIOManager );
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 ff74 	bl	8008c5c <FF_BufferProceed>
}	/* FF_ReleaseBuffer() */
 8007d74:	4630      	mov	r0, r6
 8007d76:	b002      	add	sp, #8
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
			xError = FF_BlockWrite( pxIOManager, pxBuffer->ulSector, 1, pxBuffer->pucBuffer, pdTRUE );
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	9200      	str	r2, [sp, #0]
 8007d7e:	68a3      	ldr	r3, [r4, #8]
 8007d80:	6821      	ldr	r1, [r4, #0]
 8007d82:	4628      	mov	r0, r5
 8007d84:	f7ff fe7a 	bl	8007a7c <FF_BlockWrite>
			if( FF_isERR( xError ) == pdFALSE )
 8007d88:	1e06      	subs	r6, r0, #0
 8007d8a:	dbe8      	blt.n	8007d5e <FF_ReleaseBuffer+0x1a>
				pxBuffer->bModified = pdFALSE;
 8007d8c:	7b63      	ldrb	r3, [r4, #13]
 8007d8e:	f36f 0300 	bfc	r3, #0, #1
 8007d92:	7363      	strb	r3, [r4, #13]
 8007d94:	e7e3      	b.n	8007d5e <FF_ReleaseBuffer+0x1a>
		configASSERT( pxBuffer->usNumHandles != 0 );
 8007d96:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8007d9a:	4803      	ldr	r0, [pc, #12]	; (8007da8 <FF_ReleaseBuffer+0x64>)
 8007d9c:	f00f fa80 	bl	80172a0 <vAssertCalled>
		if( pxBuffer->usNumHandles != 0 )
 8007da0:	89e3      	ldrh	r3, [r4, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0df      	beq.n	8007d66 <FF_ReleaseBuffer+0x22>
 8007da6:	e7dc      	b.n	8007d62 <FF_ReleaseBuffer+0x1e>
 8007da8:	080192b4 	.word	0x080192b4

08007dac <FF_ReadParts>:
	return xResult;
}	/* prvIsValidMedia() */
/*-----------------------------------------------------------*/

void FF_ReadParts( uint8_t *pucBuffer, FF_Part_t *pxParts )
{
 8007dac:	b430      	push	{r4, r5}
 8007dae:	f101 0530 	add.w	r5, r1, #48	; 0x30
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 8007db2:	f890 41be 	ldrb.w	r4, [r0, #446]	; 0x1be
		FF_Part_t pxParts[4];
		FF_ReadParts( pxBuffer->pucBuffer, pxParts );
	*/
	for( xPartNr = 0; xPartNr < 4; xPartNr++, uxOffset += 16, pxParts++ )
	{
		pxParts->ucActive = FF_getChar( pucBuffer, uxOffset + FF_FAT_PTBL_ACTIVE );
 8007db6:	720c      	strb	r4, [r1, #8]
 8007db8:	f890 41c2 	ldrb.w	r4, [r0, #450]	; 0x1c2
		pxParts->ucPartitionID = FF_getChar( pucBuffer, uxOffset + FF_FAT_PTBL_ID );
 8007dbc:	724c      	strb	r4, [r1, #9]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8007dbe:	f890 41cd 	ldrb.w	r4, [r0, #461]	; 0x1cd
 8007dc2:	f364 631f 	bfi	r3, r4, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8007dc6:	f890 41cc 	ldrb.w	r4, [r0, #460]	; 0x1cc
 8007dca:	f364 4317 	bfi	r3, r4, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8007dce:	f890 41cb 	ldrb.w	r4, [r0, #459]	; 0x1cb
 8007dd2:	f364 230f 	bfi	r3, r4, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8007dd6:	f890 41ca 	ldrb.w	r4, [r0, #458]	; 0x1ca
 8007dda:	f364 0307 	bfi	r3, r4, #0, #8
		pxParts->ulSectorCount = FF_getLong( pucBuffer, uxOffset + FF_FAT_PTBL_SECT_COUNT );
 8007dde:	604b      	str	r3, [r1, #4]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8007de0:	f890 41c9 	ldrb.w	r4, [r0, #457]	; 0x1c9
 8007de4:	f364 621f 	bfi	r2, r4, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8007de8:	f890 41c8 	ldrb.w	r4, [r0, #456]	; 0x1c8
 8007dec:	f364 4217 	bfi	r2, r4, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8007df0:	f890 41c7 	ldrb.w	r4, [r0, #455]	; 0x1c7
 8007df4:	f364 220f 	bfi	r2, r4, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8007df8:	f890 41c6 	ldrb.w	r4, [r0, #454]	; 0x1c6
 8007dfc:	f364 0207 	bfi	r2, r4, #0, #8
		pxParts->ulStartLBA = FF_getLong( pucBuffer, uxOffset + FF_FAT_PTBL_LBA );
 8007e00:	f841 2b0c 	str.w	r2, [r1], #12
 8007e04:	3010      	adds	r0, #16
	for( xPartNr = 0; xPartNr < 4; xPartNr++, uxOffset += 16, pxParts++ )
 8007e06:	42a9      	cmp	r1, r5
 8007e08:	d1d3      	bne.n	8007db2 <FF_ReadParts+0x6>
	}
}
 8007e0a:	bc30      	pop	{r4, r5}
 8007e0c:	4770      	bx	lr
	...

08007e10 <FF_PartitionSearch>:
 *
 *	@Return	>=0 Number of partitions found
 *	@Return	<0 error
 **/
FF_Error_t FF_PartitionSearch( FF_IOManager_t *pxIOManager, FF_SPartFound_t *pPartsFound )
{
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	b0ad      	sub	sp, #180	; 0xb4
 8007e16:	4683      	mov	fp, r0
 8007e18:	468a      	mov	sl, r1
BaseType_t xPartNr;
FF_Buffer_t *pxBuffer;
uint8_t *ucDataBuffer;
BaseType_t isPBR = pdFALSE;
FF_Error_t xError = FF_ERR_NONE;
uint32_t prevTotalSectors = pxIOManager->xPartition.ulTotalSectors;
 8007e1a:	6983      	ldr	r3, [r0, #24]
 8007e1c:	9304      	str	r3, [sp, #16]
FF_Part_t pxPartitions[ 4 ];

	memset( pPartsFound, '\0', sizeof( *pPartsFound ) );
 8007e1e:	2100      	movs	r1, #0
 8007e20:	f8ca 1000 	str.w	r1, [sl]
 8007e24:	f8ca 1004 	str.w	r1, [sl, #4]
 8007e28:	f8ca 1008 	str.w	r1, [sl, #8]
 8007e2c:	f8ca 100c 	str.w	r1, [sl, #12]

	do
	{
		pxBuffer = FF_GetBuffer( pxIOManager, 0, FF_MODE_READ );
 8007e30:	2201      	movs	r2, #1
 8007e32:	f7ff febd 	bl	8007bb0 <FF_GetBuffer>
		if( pxBuffer == NULL )
 8007e36:	9005      	str	r0, [sp, #20]
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	f000 8210 	beq.w	800825e <FF_PartitionSearch+0x44e>
			break;
		}

		/* Disable sector checking in FF_BlockRead
		Let user driver return an error is appropriate. */
		pxIOManager->xPartition.ulTotalSectors = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8cb 3018 	str.w	r3, [fp, #24]
		ucDataBuffer = pxBuffer->pucBuffer;
 8007e44:	f8d0 8008 	ldr.w	r8, [r0, #8]
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 8007e48:	f898 31fe 	ldrb.w	r3, [r8, #510]	; 0x1fe

		/* Check MBR (Master Boot Record) or
		PBR (Partition Boot Record) signature. */
		if( ( FF_getChar( ucDataBuffer, FF_FAT_MBR_SIGNATURE ) != 0x55 ) &&
 8007e4c:	2b55      	cmp	r3, #85	; 0x55
 8007e4e:	f000 81db 	beq.w	8008208 <FF_PartitionSearch+0x3f8>
 8007e52:	2baa      	cmp	r3, #170	; 0xaa
 8007e54:	f000 81d8 	beq.w	8008208 <FF_PartitionSearch+0x3f8>
 8007e58:	f898 1000 	ldrb.w	r1, [r8]
			( FF_getChar( ucDataBuffer, FF_FAT_MBR_SIGNATURE ) != 0xAA ) )
		{
			/* No MBR, but is it a PBR ?
			Partition Boot Record */
			if( ( FF_getChar( ucDataBuffer, 0 ) == 0xEB ) && /* PBR Byte 0 */
 8007e5c:	29eb      	cmp	r1, #235	; 0xeb
 8007e5e:	d011      	beq.n	8007e84 <FF_PartitionSearch+0x74>
				Handle this later. */
				isPBR = pdTRUE;
			}
			else
			{
				FF_PRINTF( "FF_PartitionSearch: [%02X,%02X] No signature (%02X %02X), no PBR neither\n",
 8007e60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007e64:	f898 01ff 	ldrb.w	r0, [r8, #511]	; 0x1ff
 8007e68:	9000      	str	r0, [sp, #0]
 8007e6a:	48bf      	ldr	r0, [pc, #764]	; (8008168 <FF_PartitionSearch+0x358>)
 8007e6c:	f00e fd70 	bl	8016950 <lUDPLoggingPrintf>
					FF_getChar( ucDataBuffer, 2 ),
					FF_getChar( ucDataBuffer, FF_FAT_MBR_SIGNATURE ),
					FF_getChar( ucDataBuffer, FF_FAT_MBR_SIGNATURE + 1 ) );

				/* No MBR and no PBR then no partition found. */
				xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_PARTITIONSEARCH;
 8007e70:	4bbe      	ldr	r3, [pc, #760]	; (800816c <FF_PartitionSearch+0x35c>)
 8007e72:	9303      	str	r3, [sp, #12]
		}
	} while( pdFALSE );
done:
	if( pxBuffer )
	{
		FF_Error_t xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8007e74:	9905      	ldr	r1, [sp, #20]
 8007e76:	4658      	mov	r0, fp
 8007e78:	f7ff ff64 	bl	8007d44 <FF_ReleaseBuffer>
		{
			xError = xTempError;
		}
	}

	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	f8cb 3018 	str.w	r3, [fp, #24]
 8007e82:	e1d9      	b.n	8008238 <FF_PartitionSearch+0x428>
			if( ( FF_getChar( ucDataBuffer, 0 ) == 0xEB ) && /* PBR Byte 0 */
 8007e84:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007e88:	2a90      	cmp	r2, #144	; 0x90
 8007e8a:	d1e9      	bne.n	8007e60 <FF_PartitionSearch+0x50>
		FF_ReadParts( ucDataBuffer, pxPartitions );
 8007e8c:	a920      	add	r1, sp, #128	; 0x80
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff ff8c 	bl	8007dac <FF_ReadParts>
 8007e94:	e04d      	b.n	8007f32 <FF_PartitionSearch+0x122>
			else if( pxPartitions[ xPartNr ].ulSectorCount )
 8007e96:	6861      	ldr	r1, [r4, #4]
 8007e98:	b1d9      	cbz	r1, 8007ed2 <FF_PartitionSearch+0xc2>
				FF_Part_t	*p = &pPartsFound->pxPartitions[ pPartsFound->iCount++ ];
 8007e9a:	f8da e000 	ldr.w	lr, [sl]
 8007e9e:	f10e 0701 	add.w	r7, lr, #1
 8007ea2:	f8ca 7000 	str.w	r7, [sl]
				*p = pxPartitions[ xPartNr ];
 8007ea6:	ea4f 054e 	mov.w	r5, lr, lsl #1
 8007eaa:	eb05 060e 	add.w	r6, r5, lr
 8007eae:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8007eb2:	3604      	adds	r6, #4
 8007eb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007eb8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
				p->bIsExtended = 0;
 8007ebc:	eb05 020e 	add.w	r2, r5, lr
 8007ec0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8007ec4:	7b91      	ldrb	r1, [r2, #14]
 8007ec6:	f36f 0100 	bfc	r1, #0, #1
 8007eca:	7391      	strb	r1, [r2, #14]
				if( pPartsFound->iCount >= ffconfigMAX_PARTITIONS )
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	f300 81b7 	bgt.w	8008240 <FF_PartitionSearch+0x430>
		for( xPartNr = 0; ( xPartNr < 4 ) && ( isPBR == pdFALSE ); xPartNr++ )
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	340c      	adds	r4, #12
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	f000 81b2 	beq.w	8008240 <FF_PartitionSearch+0x430>
			if( prvIsExtendedPartition( pxPartitions[ xPartNr ].ucPartitionID ) != pdFALSE )
 8007edc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ee0:	a92c      	add	r1, sp, #176	; 0xb0
 8007ee2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007ee6:	f812 2c27 	ldrb.w	r2, [r2, #-39]
	if( ( ucPartitionID == FF_DOS_EXT_PART ) ||
 8007eea:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8007eee:	2905      	cmp	r1, #5
 8007ef0:	d0ef      	beq.n	8007ed2 <FF_PartitionSearch+0xc2>
 8007ef2:	2a0f      	cmp	r2, #15
 8007ef4:	d0ed      	beq.n	8007ed2 <FF_PartitionSearch+0xc2>
			if( ( pxPartitions[ xPartNr ].ucActive != 0x80 ) &&
 8007ef6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007efa:	a92c      	add	r1, sp, #176	; 0xb0
 8007efc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f00:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8007f04:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8007f08:	d0c5      	beq.n	8007e96 <FF_PartitionSearch+0x86>
				if( ( xPartNr == 0 ) &&
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f040 8183 	bne.w	8008216 <FF_PartitionSearch+0x406>
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8007f10:	f898 200f 	ldrb.w	r2, [r8, #15]
 8007f14:	f362 230f 	bfi	r3, r2, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8007f18:	f898 200e 	ldrb.w	r2, [r8, #14]
 8007f1c:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8177 	beq.w	8008216 <FF_PartitionSearch+0x406>
					( FF_getShort( ucDataBuffer, FF_FAT_RESERVED_SECTORS ) != 0 ) &&
 8007f28:	f898 3010 	ldrb.w	r3, [r8, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8172 	beq.w	8008216 <FF_PartitionSearch+0x406>
 8007f32:	2301      	movs	r3, #1
 8007f34:	930d      	str	r3, [sp, #52]	; 0x34
 8007f36:	e185      	b.n	8008244 <FF_PartitionSearch+0x434>
 8007f38:	ab20      	add	r3, sp, #128	; 0x80
 8007f3a:	930b      	str	r3, [sp, #44]	; 0x2c
		if( FF_isERR( xError ) || ( pPartsFound->iCount >= ffconfigMAX_PARTITIONS ) )
 8007f3c:	2400      	movs	r4, #0
 8007f3e:	9409      	str	r4, [sp, #36]	; 0x24
			FF_PRINTF( "FF_ParseExtended: Read sector %u\n", ( unsigned) ulThisSector );
 8007f40:	4620      	mov	r0, r4
 8007f42:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f46:	f8cd b01c 	str.w	fp, [sp, #28]
 8007f4a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007f4e:	e023      	b.n	8007f98 <FF_PartitionSearch+0x188>
				FF_PRINTF( "FF_ParseExtended: No signature %02X,%02X\n", a, b );
 8007f50:	4887      	ldr	r0, [pc, #540]	; (8008170 <FF_PartitionSearch+0x360>)
 8007f52:	f00e fcfd 	bl	8016950 <lUDPLoggingPrintf>
	if( pxBuffer != NULL )
 8007f56:	f1bb 0f00 	cmp.w	fp, #0
 8007f5a:	f000 80f2 	beq.w	8008142 <FF_PartitionSearch+0x332>
		FF_Error_t xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8007f5e:	4659      	mov	r1, fp
 8007f60:	9807      	ldr	r0, [sp, #28]
 8007f62:	f7ff feef 	bl	8007d44 <FF_ReleaseBuffer>
		if( FF_isERR( xError ) == pdFALSE )
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f2c0 80e1 	blt.w	8008130 <FF_PartitionSearch+0x320>
	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	461a      	mov	r2, r3
 8007f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f74:	6193      	str	r3, [r2, #24]
				if( FF_isERR( xError ) || ( pPartsFound->iCount >= ffconfigMAX_PARTITIONS ) )
 8007f76:	2800      	cmp	r0, #0
 8007f78:	f2c0 80e5 	blt.w	8008146 <FF_PartitionSearch+0x336>
 8007f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f300 817d 	bgt.w	8008280 <FF_PartitionSearch+0x470>
		for( xPartNr = 0; xPartNr < 4; xPartNr++ )
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8e:	320c      	adds	r2, #12
 8007f90:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	f000 80da 	beq.w	800814c <FF_PartitionSearch+0x33c>
			if( prvIsExtendedPartition( pxPartitions[ xPartNr ].ucPartitionID ) )
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007f9e:	aa2c      	add	r2, sp, #176	; 0xb0
 8007fa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fa4:	f813 3c27 	ldrb.w	r3, [r3, #-39]
	if( ( ucPartitionID == FF_DOS_EXT_PART ) ||
 8007fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fac:	2a05      	cmp	r2, #5
 8007fae:	d001      	beq.n	8007fb4 <FF_PartitionSearch+0x1a4>
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d1e8      	bne.n	8007f86 <FF_PartitionSearch+0x176>
				xError = FF_ParseExtended( pxIOManager, pxPartitions[ xPartNr ].ulStartLBA,
 8007fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fb6:	f8d2 8000 	ldr.w	r8, [r2]
 8007fba:	6853      	ldr	r3, [r2, #4]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	930a      	str	r3, [sp, #40]	; 0x28
uint32_t ulSectorSize = pxIOManager->usSectorSize / 512;
 8007fc0:	9907      	ldr	r1, [sp, #28]
 8007fc2:	f8b1 36b0 	ldrh.w	r3, [r1, #1712]	; 0x6b0
 8007fc6:	0a5f      	lsrs	r7, r3, #9
uint32_t prevTotalSectors = pxIOManager->xPartition.ulTotalSectors;
 8007fc8:	698b      	ldr	r3, [r1, #24]
 8007fca:	930e      	str	r3, [sp, #56]	; 0x38
	pxIOManager->xPartition.ulTotalSectors = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	618b      	str	r3, [r1, #24]
	ulThisSize = ulFirstSize;
 8007fd0:	4682      	mov	sl, r0
	ulThisSector = ulFirstSector;
 8007fd2:	46c1      	mov	r9, r8
FF_Error_t xError = FF_ERR_NONE;
 8007fd4:	9303      	str	r3, [sp, #12]
	while( xTryCount-- )
 8007fd6:	2563      	movs	r5, #99	; 0x63
FF_Buffer_t *pxBuffer = NULL;
 8007fd8:	469b      	mov	fp, r3
 8007fda:	e071      	b.n	80080c0 <FF_PartitionSearch+0x2b0>
				if( xExtendedPartNr < 0 )
 8007fdc:	ea36 0626 	bics.w	r6, r6, r6, asr #32
 8007fe0:	bf28      	it	cs
 8007fe2:	462e      	movcs	r6, r5
		for( xPartNr = 0; xPartNr < 4; xPartNr++ )
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	340c      	adds	r4, #12
 8007fe8:	2d04      	cmp	r5, #4
 8007fea:	d052      	beq.n	8008092 <FF_PartitionSearch+0x282>
			if( pxPartitions[ xPartNr ].ulSectorCount == 0 )
 8007fec:	6861      	ldr	r1, [r4, #4]
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d0f8      	beq.n	8007fe4 <FF_PartitionSearch+0x1d4>
			if( prvIsExtendedPartition( pxPartitions[ xPartNr ].ucPartitionID ) )
 8007ff2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007ff6:	a82c      	add	r0, sp, #176	; 0xb0
 8007ff8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007ffc:	f813 3c57 	ldrb.w	r3, [r3, #-87]
	if( ( ucPartitionID == FF_DOS_EXT_PART ) ||
 8008000:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8008004:	2805      	cmp	r0, #5
 8008006:	d0e9      	beq.n	8007fdc <FF_PartitionSearch+0x1cc>
 8008008:	2b0f      	cmp	r3, #15
 800800a:	d0e7      	beq.n	8007fdc <FF_PartitionSearch+0x1cc>
			ulOffset = pxPartitions[ xPartNr ].ulStartLBA * ulSectorSize;
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	fb03 f307 	mul.w	r3, r3, r7
			ulNext = ulThisSector + ulOffset;
 8008012:	eb03 0009 	add.w	r0, r3, r9
				( ulOffset + ulSize > ulThisSize ) ||
 8008016:	fb01 3107 	mla	r1, r1, r7, r3
			if(
 800801a:	4551      	cmp	r1, sl
 800801c:	d804      	bhi.n	8008028 <FF_PartitionSearch+0x218>
				( ulOffset + ulSize > ulThisSize ) ||
 800801e:	4580      	cmp	r8, r0
 8008020:	d802      	bhi.n	8008028 <FF_PartitionSearch+0x218>
				( ulNext < ulFirstSector ) ||
 8008022:	9908      	ldr	r1, [sp, #32]
 8008024:	4288      	cmp	r0, r1
 8008026:	d906      	bls.n	8008036 <FF_PartitionSearch+0x226>
				FF_PRINTF( "Part %d looks insane: ulThisSector %u ulOffset %u ulNext %u\n",
 8008028:	9000      	str	r0, [sp, #0]
 800802a:	464a      	mov	r2, r9
 800802c:	4629      	mov	r1, r5
 800802e:	4851      	ldr	r0, [pc, #324]	; (8008174 <FF_PartitionSearch+0x364>)
 8008030:	f00e fc8e 	bl	8016950 <lUDPLoggingPrintf>
 8008034:	e7d6      	b.n	8007fe4 <FF_PartitionSearch+0x1d4>
				FF_Part_t *p = &pPartsFound->pxPartitions[ pPartsFound->iCount++ ];
 8008036:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008038:	f8d0 e000 	ldr.w	lr, [r0]
 800803c:	f10e 0301 	add.w	r3, lr, #1
 8008040:	6003      	str	r3, [r0, #0]
 8008042:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 8008046:	eb0c 030e 	add.w	r3, ip, lr
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	930f      	str	r3, [sp, #60]	; 0x3c
 800804e:	3304      	adds	r3, #4
 8008050:	9310      	str	r3, [sp, #64]	; 0x40
 8008052:	18c3      	adds	r3, r0, r3
 8008054:	9311      	str	r3, [sp, #68]	; 0x44
				memcpy( p, pxPartitions + xPartNr, sizeof( *p ) );
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	68a2      	ldr	r2, [r4, #8]
 800805c:	9212      	str	r2, [sp, #72]	; 0x48
 800805e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008060:	5081      	str	r1, [r0, r2]
 8008062:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008064:	6043      	str	r3, [r0, #4]
 8008066:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008068:	6083      	str	r3, [r0, #8]
 800806a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800806c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800806e:	4403      	add	r3, r0
				p->ulStartLBA += ulThisSector;
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	444a      	add	r2, r9
 8008074:	605a      	str	r2, [r3, #4]
				p->bIsExtended = pdTRUE;
 8008076:	eb0c 030e 	add.w	r3, ip, lr
 800807a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800807e:	7b9a      	ldrb	r2, [r3, #14]
 8008080:	f042 0201 	orr.w	r2, r2, #1
 8008084:	739a      	strb	r2, [r3, #14]
			if( pPartsFound->iCount >= ffconfigMAX_PARTITIONS )
 8008086:	6803      	ldr	r3, [r0, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc02      	bgt.n	8008092 <FF_PartitionSearch+0x282>
			xTryCount = 100;
 800808c:	2364      	movs	r3, #100	; 0x64
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	e7a8      	b.n	8007fe4 <FF_PartitionSearch+0x1d4>
		if( xExtendedPartNr < 0 )
 8008092:	2e00      	cmp	r6, #0
 8008094:	db48      	blt.n	8008128 <FF_PartitionSearch+0x318>
		ulThisSector = ulFirstSector + pxPartitions[ xExtendedPartNr ].ulStartLBA * ulSectorSize;
 8008096:	0073      	lsls	r3, r6, #1
 8008098:	199a      	adds	r2, r3, r6
 800809a:	a92c      	add	r1, sp, #176	; 0xb0
 800809c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80080a0:	f852 2c60 	ldr.w	r2, [r2, #-96]
 80080a4:	fb02 8907 	mla	r9, r2, r7, r8
		ulThisSize = pxPartitions[ xExtendedPartNr ].ulSectorCount * ulSectorSize;
 80080a8:	441e      	add	r6, r3
 80080aa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80080ae:	f856 3c5c 	ldr.w	r3, [r6, #-92]
 80080b2:	fb03 fa07 	mul.w	sl, r3, r7
	while( xTryCount-- )
 80080b6:	9a06      	ldr	r2, [sp, #24]
 80080b8:	1e55      	subs	r5, r2, #1
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	f43f af4b 	beq.w	8007f56 <FF_PartitionSearch+0x146>
		if( ( pxBuffer == NULL ) || ( pxBuffer->ulSector != ulThisSector ) )
 80080c0:	f1bb 0f00 	cmp.w	fp, #0
 80080c4:	d00b      	beq.n	80080de <FF_PartitionSearch+0x2ce>
 80080c6:	f8db 3000 	ldr.w	r3, [fp]
 80080ca:	454b      	cmp	r3, r9
 80080cc:	d014      	beq.n	80080f8 <FF_PartitionSearch+0x2e8>
				xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80080ce:	4659      	mov	r1, fp
 80080d0:	9807      	ldr	r0, [sp, #28]
 80080d2:	f7ff fe37 	bl	8007d44 <FF_ReleaseBuffer>
				if( FF_isERR( xError ) )
 80080d6:	1e03      	subs	r3, r0, #0
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	f2c0 80ce 	blt.w	800827a <FF_PartitionSearch+0x46a>
			FF_PRINTF( "FF_ParseExtended: Read sector %u\n", ( unsigned) ulThisSector );
 80080de:	4649      	mov	r1, r9
 80080e0:	4825      	ldr	r0, [pc, #148]	; (8008178 <FF_PartitionSearch+0x368>)
 80080e2:	f00e fc35 	bl	8016950 <lUDPLoggingPrintf>
			pxBuffer = FF_GetBuffer( pxIOManager, ulThisSector, FF_MODE_READ );
 80080e6:	2201      	movs	r2, #1
 80080e8:	4649      	mov	r1, r9
 80080ea:	9807      	ldr	r0, [sp, #28]
 80080ec:	f7ff fd60 	bl	8007bb0 <FF_GetBuffer>
			if( pxBuffer == NULL )
 80080f0:	4683      	mov	fp, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f000 80b9 	beq.w	800826a <FF_PartitionSearch+0x45a>
		uint8_t a = FF_getChar( pxBuffer->pucBuffer, FF_FAT_MBR_SIGNATURE + 0 );
 80080f8:	f8db 0008 	ldr.w	r0, [fp, #8]
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 80080fc:	f890 11fe 	ldrb.w	r1, [r0, #510]	; 0x1fe
 8008100:	f890 21ff 	ldrb.w	r2, [r0, #511]	; 0x1ff
			if( ( a != 0x55 ) || ( b != 0xAA ) )
 8008104:	2955      	cmp	r1, #85	; 0x55
 8008106:	f47f af23 	bne.w	8007f50 <FF_PartitionSearch+0x140>
 800810a:	2aaa      	cmp	r2, #170	; 0xaa
 800810c:	f47f af20 	bne.w	8007f50 <FF_PartitionSearch+0x140>
		FF_ReadParts( pxBuffer->pucBuffer, pxPartitions );
 8008110:	a914      	add	r1, sp, #80	; 0x50
 8008112:	f7ff fe4b 	bl	8007dac <FF_ReadParts>
 8008116:	ac14      	add	r4, sp, #80	; 0x50
 8008118:	9506      	str	r5, [sp, #24]
		xExtendedPartNr = -1;
 800811a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		for( xPartNr = 0; xPartNr < 4; xPartNr++ )
 800811e:	2500      	movs	r5, #0
				( ulNext > ulFirstSector + ulFirstSize )
 8008120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008122:	4443      	add	r3, r8
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	e761      	b.n	8007fec <FF_PartitionSearch+0x1dc>
			FF_PRINTF( "No more extended partitions\n" );
 8008128:	4814      	ldr	r0, [pc, #80]	; (800817c <FF_PartitionSearch+0x36c>)
 800812a:	f00e fc11 	bl	8016950 <lUDPLoggingPrintf>
 800812e:	e712      	b.n	8007f56 <FF_PartitionSearch+0x146>
 8008130:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008134:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 8008138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800813a:	f8cb 3018 	str.w	r3, [fp, #24]
 800813e:	9c03      	ldr	r4, [sp, #12]
 8008140:	e06a      	b.n	8008218 <FF_PartitionSearch+0x408>
	if( pxBuffer != NULL )
 8008142:	9803      	ldr	r0, [sp, #12]
 8008144:	e713      	b.n	8007f6e <FF_PartitionSearch+0x15e>
 8008146:	4693      	mov	fp, r2
 8008148:	9003      	str	r0, [sp, #12]
 800814a:	e693      	b.n	8007e74 <FF_PartitionSearch+0x64>
 800814c:	4604      	mov	r4, r0
 800814e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8008152:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008156:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
		if( pPartsFound->iCount == 0 )
 800815a:	f8da 3000 	ldr.w	r3, [sl]
 800815e:	b17b      	cbz	r3, 8008180 <FF_PartitionSearch+0x370>
		if( isPBR )
 8008160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008162:	2b00      	cmp	r3, #0
 8008164:	d058      	beq.n	8008218 <FF_PartitionSearch+0x408>
 8008166:	e00e      	b.n	8008186 <FF_PartitionSearch+0x376>
 8008168:	0801916c 	.word	0x0801916c
 800816c:	810e000f 	.word	0x810e000f
 8008170:	080191dc 	.word	0x080191dc
 8008174:	08019208 	.word	0x08019208
 8008178:	080191b8 	.word	0x080191b8
 800817c:	08019248 	.word	0x08019248
			FF_PRINTF( "FF_Part: no partitions, try as PBR\n" );
 8008180:	4842      	ldr	r0, [pc, #264]	; (800828c <FF_PartitionSearch+0x47c>)
 8008182:	f00e fbe5 	bl	8016950 <lUDPLoggingPrintf>
 8008186:	f898 1015 	ldrb.w	r1, [r8, #21]
	if( ( 0xf8 <= media ) || ( media == 0xf0 ) )
 800818a:	29f7      	cmp	r1, #247	; 0xf7
 800818c:	d801      	bhi.n	8008192 <FF_PartitionSearch+0x382>
			if( !prvIsValidMedia( media ) )
 800818e:	29f0      	cmp	r1, #240	; 0xf0
 8008190:	d134      	bne.n	80081fc <FF_PartitionSearch+0x3ec>
			p->ulStartLBA = 0;	/* FF_FAT_PTBL_LBA */
 8008192:	2300      	movs	r3, #0
 8008194:	f8ca 3004 	str.w	r3, [sl, #4]
			p->ulSectorCount = ( uint32_t ) FF_getShort( pxBuffer->pucBuffer, FF_FAT_16_TOTAL_SECTORS );
 8008198:	9805      	ldr	r0, [sp, #20]
 800819a:	6882      	ldr	r2, [r0, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 800819c:	7d11      	ldrb	r1, [r2, #20]
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	f361 230f 	bfi	r3, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 80081a6:	7cd2      	ldrb	r2, [r2, #19]
 80081a8:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f8ca 3008 	str.w	r3, [sl, #8]
			if( p->ulSectorCount == 0ul )
 80081b2:	b99b      	cbnz	r3, 80081dc <FF_PartitionSearch+0x3cc>
				p->ulSectorCount = FF_getLong( pxBuffer->pucBuffer, FF_FAT_32_TOTAL_SECTORS );
 80081b4:	6882      	ldr	r2, [r0, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80081b6:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 80081ba:	2300      	movs	r3, #0
 80081bc:	f361 631f 	bfi	r3, r1, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80081c0:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 80081c4:	f361 4317 	bfi	r3, r1, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80081c8:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 80081cc:	f361 230f 	bfi	r3, r1, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80081d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80081d4:	f362 0307 	bfi	r3, r2, #0, #8
 80081d8:	f8ca 3008 	str.w	r3, [sl, #8]
			p->ucActive = 0x80;	/* FF_FAT_PTBL_ACTIVE */
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	f88a 300c 	strb.w	r3, [sl, #12]
			p->ucPartitionID = 0x0B;	/* FF_FAT_PTBL_ID MSDOS data partition */
 80081e2:	230b      	movs	r3, #11
 80081e4:	f88a 300d 	strb.w	r3, [sl, #13]
			p->bIsExtended = 0;
 80081e8:	f89a 300e 	ldrb.w	r3, [sl, #14]
 80081ec:	f36f 0300 	bfc	r3, #0, #1
 80081f0:	f88a 300e 	strb.w	r3, [sl, #14]
			pPartsFound->iCount = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f8ca 3000 	str.w	r3, [sl]
 80081fa:	e00d      	b.n	8008218 <FF_PartitionSearch+0x408>
				FF_PRINTF( "FF_Part: Looks like PBR but media %02X\n", media );
 80081fc:	4824      	ldr	r0, [pc, #144]	; (8008290 <FF_PartitionSearch+0x480>)
 80081fe:	f00e fba7 	bl	8016950 <lUDPLoggingPrintf>
				xError = FF_ERR_IOMAN_NO_MOUNTABLE_PARTITION | FF_PARTITIONSEARCH;
 8008202:	4b24      	ldr	r3, [pc, #144]	; (8008294 <FF_PartitionSearch+0x484>)
 8008204:	9303      	str	r3, [sp, #12]
				goto done;
 8008206:	e635      	b.n	8007e74 <FF_PartitionSearch+0x64>
		FF_ReadParts( ucDataBuffer, pxPartitions );
 8008208:	a920      	add	r1, sp, #128	; 0x80
 800820a:	4640      	mov	r0, r8
 800820c:	f7ff fdce 	bl	8007dac <FF_ReadParts>
 8008210:	ac20      	add	r4, sp, #128	; 0x80
 8008212:	2300      	movs	r3, #0
 8008214:	e662      	b.n	8007edc <FF_PartitionSearch+0xcc>
 8008216:	4c20      	ldr	r4, [pc, #128]	; (8008298 <FF_PartitionSearch+0x488>)
		FF_Error_t xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008218:	9905      	ldr	r1, [sp, #20]
 800821a:	4658      	mov	r0, fp
 800821c:	f7ff fd92 	bl	8007d44 <FF_ReleaseBuffer>
 8008220:	9003      	str	r0, [sp, #12]
		if( FF_isERR( xError ) == pdFALSE )
 8008222:	2c00      	cmp	r4, #0
 8008224:	db19      	blt.n	800825a <FF_PartitionSearch+0x44a>
	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	f8cb 3018 	str.w	r3, [fp, #24]

	return FF_isERR( xError ) ? xError : pPartsFound->iCount;
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	db02      	blt.n	8008238 <FF_PartitionSearch+0x428>
 8008232:	f8da 3000 	ldr.w	r3, [sl]
 8008236:	9303      	str	r3, [sp, #12]
}	/* FF_PartitionSearch() */
 8008238:	9803      	ldr	r0, [sp, #12]
 800823a:	b02d      	add	sp, #180	; 0xb4
 800823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008240:	2300      	movs	r3, #0
 8008242:	930d      	str	r3, [sp, #52]	; 0x34
		if( FF_isERR( xError ) || ( pPartsFound->iCount >= ffconfigMAX_PARTITIONS ) )
 8008244:	f8da 3000 	ldr.w	r3, [sl]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f77f ae75 	ble.w	8007f38 <FF_PartitionSearch+0x128>
		FF_Error_t xTempError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 800824e:	9905      	ldr	r1, [sp, #20]
 8008250:	4658      	mov	r0, fp
 8008252:	f7ff fd77 	bl	8007d44 <FF_ReleaseBuffer>
 8008256:	9003      	str	r0, [sp, #12]
 8008258:	e7e5      	b.n	8008226 <FF_PartitionSearch+0x416>
 800825a:	9403      	str	r4, [sp, #12]
 800825c:	e60e      	b.n	8007e7c <FF_PartitionSearch+0x6c>
	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	f8cb 3018 	str.w	r3, [fp, #24]
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_PARTITIONSEARCH;
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <FF_PartitionSearch+0x48c>)
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	e7e6      	b.n	8008238 <FF_PartitionSearch+0x428>
 800826a:	f8dd b01c 	ldr.w	fp, [sp, #28]
				xError = FF_PARSEEXTENDED | FF_ERR_DEVICE_DRIVER_FAILED; /* | FUNCTION...; */
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <FF_PartitionSearch+0x490>)
 8008270:	9303      	str	r3, [sp, #12]
	pxIOManager->xPartition.ulTotalSectors = prevTotalSectors;
 8008272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008274:	f8cb 3018 	str.w	r3, [fp, #24]
 8008278:	e5fc      	b.n	8007e74 <FF_PartitionSearch+0x64>
 800827a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800827e:	e7f8      	b.n	8008272 <FF_PartitionSearch+0x462>
 8008280:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008284:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008288:	e7e1      	b.n	800824e <FF_PartitionSearch+0x43e>
 800828a:	bf00      	nop
 800828c:	08019268 	.word	0x08019268
 8008290:	0801928c 	.word	0x0801928c
 8008294:	810e000e 	.word	0x810e000e
 8008298:	810e000f 	.word	0x810e000f
 800829c:	810e0004 	.word	0x810e0004
 80082a0:	810f0004 	.word	0x810f0004

080082a4 <FF_Mount>:
 *	@Return FF_ERR_IOMAN_INVALID_FORMAT if the master boot record or partition boot block didn't provide sensible data.
 *	@Return FF_ERR_IOMAN_NOT_FAT_FORMATTED if the volume or partition couldn't be determined to be FAT. (@see FreeRTOSFATConfig.h)
 *
 **/
FF_Error_t FF_Mount( FF_Disk_t *pxDisk, BaseType_t xPartitionNumber )
{
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	b086      	sub	sp, #24
FF_Partition_t *pxPartition;
FF_Buffer_t *pxBuffer = 0;
FF_Error_t xError = FF_ERR_NONE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	9305      	str	r3, [sp, #20]
int16_t rootEntryCount;
FF_IOManager_t *pxIOManager = pxDisk->pxIOManager;
 80082ae:	6884      	ldr	r4, [r0, #8]
#if( ffconfigHASH_CACHE != 0 )
	BaseType_t i;
#endif
FF_Error_t xPartitionCount = 0;
FF_SPartFound_t partsFound;
partsFound.iCount = 0;
 80082b0:	9301      	str	r3, [sp, #4]

	do
	{
		if( pxIOManager == NULL )
 80082b2:	b344      	cbz	r4, 8008306 <FF_Mount+0x62>
 80082b4:	460d      	mov	r5, r1

		pxPartition = &( pxIOManager->xPartition );

		#if( ffconfigREMOVABLE_MEDIA != 0 )
		{
			pxIOManager->ucFlags &= ( uint8_t ) ( ~ ( FF_IOMAN_DEVICE_IS_EXTRACTED ) );
 80082b6:	f894 36b5 	ldrb.w	r3, [r4, #1717]	; 0x6b5
 80082ba:	f023 0320 	bic.w	r3, r3, #32
 80082be:	f884 36b5 	strb.w	r3, [r4, #1717]	; 0x6b5
		}
		#endif /* ffconfigREMOVABLE_MEDIA */

		/* FF_IOMAN_InitBufferDescriptors will clear 'pxBuffers' */
		memset( pxIOManager->pucCacheMem, '\0', ( size_t ) pxIOManager->usSectorSize * pxIOManager->usCacheSize );
 80082c2:	f8b4 36b0 	ldrh.w	r3, [r4, #1712]	; 0x6b0
 80082c6:	f8b4 26b2 	ldrh.w	r2, [r4, #1714]	; 0x6b2
 80082ca:	fb02 f203 	mul.w	r2, r2, r3
 80082ce:	2100      	movs	r1, #0
 80082d0:	f8d4 06ac 	ldr.w	r0, [r4, #1708]	; 0x6ac
 80082d4:	f00f fa7a 	bl	80177cc <memset>
			}
		}
		#endif
		#if( ffconfigPATH_CACHE != 0 )
		{
			memset( pxPartition->pxPathCache, '\0', sizeof( pxPartition->pxPathCache ) );
 80082d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80082dc:	2100      	movs	r1, #0
 80082de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082e2:	f00f fa73 	bl	80177cc <memset>
		}
		#endif
		FF_IOMAN_InitBufferDescriptors( pxIOManager );
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7ff fae4 	bl	80078b4 <FF_IOMAN_InitBufferDescriptors>
		pxIOManager->FirstFile = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c4 36a4 	str.w	r3, [r4, #1700]	; 0x6a4

		xPartitionCount = FF_PartitionSearch( pxIOManager, &partsFound );
 80082f2:	a901      	add	r1, sp, #4
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7ff fd8b 	bl	8007e10 <FF_PartitionSearch>
		if( FF_isERR( xPartitionCount ) )
 80082fa:	2800      	cmp	r0, #0
 80082fc:	db06      	blt.n	800830c <FF_Mount+0x68>
		{
			xError = xPartitionCount;
			break;
		}

		if( xPartitionCount == 0 )
 80082fe:	b938      	cbnz	r0, 8008310 <FF_Mount+0x6c>
		{
			xError = FF_ERR_IOMAN_NO_MOUNTABLE_PARTITION | FF_MOUNT;
 8008300:	4b7c      	ldr	r3, [pc, #496]	; (80084f4 <FF_Mount+0x250>)
 8008302:	9305      	str	r3, [sp, #20]
			break;
 8008304:	e05b      	b.n	80083be <FF_Mount+0x11a>
			xError = FF_ERR_NULL_POINTER | FF_MOUNT;
 8008306:	4b7c      	ldr	r3, [pc, #496]	; (80084f8 <FF_Mount+0x254>)
 8008308:	9305      	str	r3, [sp, #20]
			break;
 800830a:	e058      	b.n	80083be <FF_Mount+0x11a>
			xError = xPartitionCount;
 800830c:	9005      	str	r0, [sp, #20]
			break;
 800830e:	e056      	b.n	80083be <FF_Mount+0x11a>
		}

		if( xPartitionNumber >= xPartitionCount )
 8008310:	42a8      	cmp	r0, r5
 8008312:	dc02      	bgt.n	800831a <FF_Mount+0x76>
		{
			xError = FF_ERR_IOMAN_INVALID_PARTITION_NUM | FF_MOUNT;
 8008314:	4b79      	ldr	r3, [pc, #484]	; (80084fc <FF_Mount+0x258>)
 8008316:	9305      	str	r3, [sp, #20]
			break;
 8008318:	e051      	b.n	80083be <FF_Mount+0x11a>
		}

		pxMyPartition = &( partsFound.pxPartitions[ xPartitionNumber ] );

		pxPartition->ulBeginLBA = pxMyPartition->ulStartLBA;
 800831a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800831e:	aa06      	add	r2, sp, #24
 8008320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008324:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8008328:	60e1      	str	r1, [r4, #12]

		if( pxMyPartition->ucPartitionID == 0xEE )
 800832a:	f813 3c07 	ldrb.w	r3, [r3, #-7]
 800832e:	2bee      	cmp	r3, #238	; 0xee
 8008330:	d024      	beq.n	800837c <FF_Mount+0xd8>
				break;
			}
		}

		/* Now we get the Partition sector. */
		pxBuffer = FF_GetBuffer( pxIOManager, pxPartition->ulBeginLBA, FF_MODE_READ );
 8008332:	2201      	movs	r2, #1
 8008334:	68e1      	ldr	r1, [r4, #12]
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fc3a 	bl	8007bb0 <FF_GetBuffer>
		if( pxBuffer == NULL )
 800833c:	4605      	mov	r5, r0
 800833e:	2800      	cmp	r0, #0
 8008340:	f000 80d4 	beq.w	80084ec <FF_Mount+0x248>
		{
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_MOUNT;
			break;
		}

		pxPartition->usBlkSize = FF_getShort( pxBuffer->pucBuffer, FF_FAT_BYTES_PER_SECTOR );
 8008344:	6882      	ldr	r2, [r0, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008346:	7b11      	ldrb	r1, [r2, #12]
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f361 230f 	bfi	r3, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8008350:	7ad2      	ldrb	r2, [r2, #11]
 8008352:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
		if( ( ( pxPartition->usBlkSize % 512 ) != 0 ) || ( pxPartition->usBlkSize == 0 ) )
 800835c:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8008360:	b913      	cbnz	r3, 8008368 <FF_Mount+0xc4>
 8008362:	2a00      	cmp	r2, #0
 8008364:	f040 80d4 	bne.w	8008510 <FF_Mount+0x26c>
		{
			/* An error here should override the current error, as its likely fatal. */
			xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008368:	4629      	mov	r1, r5
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff fcea 	bl	8007d44 <FF_ReleaseBuffer>
			if( FF_isERR( xError ) == pdFALSE )
 8008370:	2800      	cmp	r0, #0
 8008372:	f2c0 8221 	blt.w	80087b8 <FF_Mount+0x514>
			{
				xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_MOUNT;
 8008376:	4b62      	ldr	r3, [pc, #392]	; (8008500 <FF_Mount+0x25c>)
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	e020      	b.n	80083be <FF_Mount+0x11a>
		if( ulPartitionNumber >= 128 )
 800837c:	2d7f      	cmp	r5, #127	; 0x7f
 800837e:	f200 820f 	bhi.w	80087a0 <FF_Mount+0x4fc>
		pxBuffer = FF_GetBuffer( pxIOManager, pxPartition->ulBeginLBA, FF_MODE_READ );
 8008382:	2201      	movs	r2, #1
 8008384:	4620      	mov	r0, r4
 8008386:	f7ff fc13 	bl	8007bb0 <FF_GetBuffer>
		if( pxBuffer == NULL )
 800838a:	4681      	mov	r9, r0
 800838c:	2800      	cmp	r0, #0
 800838e:	f000 8209 	beq.w	80087a4 <FF_Mount+0x500>
		if( memcmp( pxBuffer->pucBuffer, "EFI PART", 8 ) != 0 )
 8008392:	6886      	ldr	r6, [r0, #8]
 8008394:	2208      	movs	r2, #8
 8008396:	495b      	ldr	r1, [pc, #364]	; (8008504 <FF_Mount+0x260>)
 8008398:	4630      	mov	r0, r6
 800839a:	f00f f9e3 	bl	8017764 <memcmp>
 800839e:	b190      	cbz	r0, 80083c6 <FF_Mount+0x122>
			xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80083a0:	4649      	mov	r1, r9
 80083a2:	4620      	mov	r0, r4
 80083a4:	f7ff fcce 	bl	8007d44 <FF_ReleaseBuffer>
				xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_GETEFIPARTITIONENTRY;
 80083a8:	4b57      	ldr	r3, [pc, #348]	; (8008508 <FF_Mount+0x264>)
 80083aa:	ea10 0020 	ands.w	r0, r0, r0, asr #32
 80083ae:	bf38      	it	cc
 80083b0:	4618      	movcc	r0, r3
			xError = FF_GetEfiPartitionEntry( pxIOManager, xPartitionNumber );
 80083b2:	9005      	str	r0, [sp, #20]
		}
		#endif	/* ffconfigMOUNT_FIND_FREE */
	}
	while( pdFALSE );

	if( FF_isERR( xError ) == pdFALSE )
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	db01      	blt.n	80083be <FF_Mount+0x11a>
	{
		xError = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	9305      	str	r3, [sp, #20]
	}

	return xError;
 80083be:	9805      	ldr	r0, [sp, #20]
}	/* FF_Mount() */
 80083c0:	b006      	add	sp, #24
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80083c6:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 80083ca:	f04f 0a00 	mov.w	sl, #0
 80083ce:	f363 6a1f 	bfi	sl, r3, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80083d2:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
 80083d6:	f363 4a17 	bfi	sl, r3, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80083da:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
 80083de:	f363 2a0f 	bfi	sl, r3, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80083e2:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 80083e6:	f363 0a07 	bfi	sl, r3, #0, #8
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80083ea:	f896 3057 	ldrb.w	r3, [r6, #87]	; 0x57
 80083ee:	2700      	movs	r7, #0
 80083f0:	f363 671f 	bfi	r7, r3, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80083f4:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
 80083f8:	f363 4717 	bfi	r7, r3, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80083fc:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
 8008400:	f363 270f 	bfi	r7, r3, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008404:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 8008408:	f363 0707 	bfi	r7, r3, #0, #8
		u32.bytes.u8_3 = pBuffer[ 3 ];
 800840c:	7cf3      	ldrb	r3, [r6, #19]
 800840e:	f04f 0800 	mov.w	r8, #0
 8008412:	f363 681f 	bfi	r8, r3, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8008416:	7cb3      	ldrb	r3, [r6, #18]
 8008418:	f363 4817 	bfi	r8, r3, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 800841c:	7c73      	ldrb	r3, [r6, #17]
 800841e:	f363 280f 	bfi	r8, r3, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008422:	7c33      	ldrb	r3, [r6, #16]
 8008424:	f363 0807 	bfi	r8, r3, #0, #8
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8008428:	7bf3      	ldrb	r3, [r6, #15]
 800842a:	2100      	movs	r1, #0
 800842c:	f363 611f 	bfi	r1, r3, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8008430:	7bb3      	ldrb	r3, [r6, #14]
 8008432:	f363 4117 	bfi	r1, r3, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8008436:	7b73      	ldrb	r3, [r6, #13]
 8008438:	f363 210f 	bfi	r1, r3, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 800843c:	7b33      	ldrb	r3, [r6, #12]
 800843e:	f363 0107 	bfi	r1, r3, #0, #8
		pBuffer[ 0 ] = u32.bytes.u8_0;
 8008442:	2300      	movs	r3, #0
 8008444:	7433      	strb	r3, [r6, #16]
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8008446:	7473      	strb	r3, [r6, #17]
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008448:	74b3      	strb	r3, [r6, #18]
		pBuffer[ 3 ] = u32.bytes.u8_3;
 800844a:	74f3      	strb	r3, [r6, #19]
		ulGPTCrcCheck = FF_GetCRC32( pxBuffer->pucBuffer, ulGPTHeadLength );
 800844c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008450:	f7fb fb4a 	bl	8003ae8 <FF_GetCRC32>
 8008454:	4606      	mov	r6, r0
		FF_putLong( pxBuffer->pucBuffer, FF_GPT_HEAD_CRC, ulGPTHeadCRC );
 8008456:	f8d9 3008 	ldr.w	r3, [r9, #8]
		pBuffer[ 0 ] = u32.bytes.u8_0;
 800845a:	f883 8010 	strb.w	r8, [r3, #16]
		pBuffer[ 1 ] = u32.bytes.u8_1;
 800845e:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8008462:	745a      	strb	r2, [r3, #17]
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008464:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8008468:	749a      	strb	r2, [r3, #18]
		pBuffer[ 3 ] = u32.bytes.u8_3;
 800846a:	f3c8 6207 	ubfx	r2, r8, #24, #8
 800846e:	74da      	strb	r2, [r3, #19]
		xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008470:	4649      	mov	r1, r9
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff fc66 	bl	8007d44 <FF_ReleaseBuffer>
		if( FF_isERR( xError ) )
 8008478:	2800      	cmp	r0, #0
 800847a:	db9a      	blt.n	80083b2 <FF_Mount+0x10e>
		if( ulGPTHeadCRC != ulGPTCrcCheck )
 800847c:	45b0      	cmp	r8, r6
 800847e:	f040 8193 	bne.w	80087a8 <FF_Mount+0x504>
		ulEntrySector = ( ( ulPartitionNumber * ulPartitionEntrySize ) / pxIOManager->usSectorSize ) + ulBeginGPT;
 8008482:	f8b4 36b0 	ldrh.w	r3, [r4, #1712]	; 0x6b0
		ulSectorOffset = ( ulPartitionNumber % ( pxIOManager->usSectorSize / ulPartitionEntrySize ) ) * ulPartitionEntrySize;
 8008486:	fbb3 f6f7 	udiv	r6, r3, r7
 800848a:	fbb5 f2f6 	udiv	r2, r5, r6
 800848e:	fb06 5212 	mls	r2, r6, r2, r5
 8008492:	fb07 f602 	mul.w	r6, r7, r2
		ulEntrySector = ( ( ulPartitionNumber * ulPartitionEntrySize ) / pxIOManager->usSectorSize ) + ulBeginGPT;
 8008496:	fb07 f105 	mul.w	r1, r7, r5
 800849a:	fbb1 f1f3 	udiv	r1, r1, r3
		pxBuffer = FF_GetBuffer( pxIOManager, ulEntrySector, FF_MODE_READ );
 800849e:	2201      	movs	r2, #1
 80084a0:	4451      	add	r1, sl
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7ff fb84 	bl	8007bb0 <FF_GetBuffer>
			if( pxBuffer == NULL )
 80084a8:	4601      	mov	r1, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f000 817e 	beq.w	80087ac <FF_Mount+0x508>
			pxPartition->ulBeginLBA = FF_getLong( pxBuffer->pucBuffer, ulSectorOffset + FF_GPT_ENTRY_FIRST_SECTOR_LBA );
 80084b0:	f106 0220 	add.w	r2, r6, #32
		pBuffer += aOffset;
 80084b4:	6885      	ldr	r5, [r0, #8]
 80084b6:	18a8      	adds	r0, r5, r2
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80084b8:	78c6      	ldrb	r6, [r0, #3]
 80084ba:	2300      	movs	r3, #0
 80084bc:	f366 631f 	bfi	r3, r6, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80084c0:	7886      	ldrb	r6, [r0, #2]
 80084c2:	f366 4317 	bfi	r3, r6, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80084c6:	7840      	ldrb	r0, [r0, #1]
 80084c8:	f360 230f 	bfi	r3, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80084cc:	5caa      	ldrb	r2, [r5, r2]
 80084ce:	f362 0307 	bfi	r3, r2, #0, #8
 80084d2:	60e3      	str	r3, [r4, #12]
		xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80084d4:	4620      	mov	r0, r4
 80084d6:	f7ff fc35 	bl	8007d44 <FF_ReleaseBuffer>
		if( FF_isERR( xError ) == pdFALSE )
 80084da:	2800      	cmp	r0, #0
 80084dc:	f6ff af69 	blt.w	80083b2 <FF_Mount+0x10e>
			if( pxPartition->ulBeginLBA == 0ul )
 80084e0:	68e3      	ldr	r3, [r4, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8164 	beq.w	80087b0 <FF_Mount+0x50c>
			xError = FF_GetEfiPartitionEntry( pxIOManager, xPartitionNumber );
 80084e8:	9005      	str	r0, [sp, #20]
 80084ea:	e722      	b.n	8008332 <FF_Mount+0x8e>
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_MOUNT;
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <FF_Mount+0x268>)
 80084ee:	9305      	str	r3, [sp, #20]
			break;
 80084f0:	e765      	b.n	80083be <FF_Mount+0x11a>
 80084f2:	bf00      	nop
 80084f4:	8103000e 	.word	0x8103000e
 80084f8:	81030002 	.word	0x81030002
 80084fc:	81030010 	.word	0x81030010
 8008500:	8103000f 	.word	0x8103000f
 8008504:	080190c4 	.word	0x080190c4
 8008508:	810a000f 	.word	0x810a000f
 800850c:	81030004 	.word	0x81030004
		pxPartition->usReservedSectors = FF_getShort( pxBuffer->pucBuffer, FF_FAT_RESERVED_SECTORS );
 8008510:	6881      	ldr	r1, [r0, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008512:	7bc8      	ldrb	r0, [r1, #15]
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	f360 230f 	bfi	r3, r0, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 800851c:	7b89      	ldrb	r1, [r1, #14]
 800851e:	f361 0307 	bfi	r3, r1, #0, #8
 8008522:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
		pxPartition->ulFATBeginLBA = pxPartition->ulBeginLBA + pxPartition->usReservedSectors;
 8008526:	68e1      	ldr	r1, [r4, #12]
 8008528:	fa11 f383 	uxtah	r3, r1, r3
 800852c:	6123      	str	r3, [r4, #16]
		pxPartition->ucNumFATS = ( uint8_t ) FF_getShort( pxBuffer->pucBuffer, FF_FAT_NUMBER_OF_FATS );
 800852e:	68ab      	ldr	r3, [r5, #8]
 8008530:	7c1b      	ldrb	r3, [r3, #16]
 8008532:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
		pxPartition->ulSectorsPerFAT = ( uint32_t ) FF_getShort( pxBuffer->pucBuffer, FF_FAT_16_SECTORS_PER_FAT );
 8008536:	68a9      	ldr	r1, [r5, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008538:	7dc8      	ldrb	r0, [r1, #23]
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	f360 230f 	bfi	r3, r0, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8008542:	7d89      	ldrb	r1, [r1, #22]
 8008544:	f361 0307 	bfi	r3, r1, #0, #8
		return u16.u16;
 8008548:	b299      	uxth	r1, r3
 800854a:	6161      	str	r1, [r4, #20]
		return ( uint8_t ) ( pBuffer[ aOffset ] );
 800854c:	68ab      	ldr	r3, [r5, #8]
		pxPartition->ulSectorsPerCluster = FF_getChar( pxBuffer->pucBuffer, FF_FAT_SECTORS_PER_CLUS );
 800854e:	7b5b      	ldrb	r3, [r3, #13]
 8008550:	6423      	str	r3, [r4, #64]	; 0x40
		pxPartition->ucBlkFactor = ( uint8_t ) ( pxPartition->usBlkSize / pxIOManager->usSectorSize );
 8008552:	f8b4 36b0 	ldrh.w	r3, [r4, #1712]	; 0x6b0
 8008556:	fbb2 f2f3 	udiv	r2, r2, r3
 800855a:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
		pxPartition->ulTotalSectors = ( uint32_t ) FF_getShort( pxBuffer->pucBuffer, FF_FAT_16_TOTAL_SECTORS );
 800855e:	68aa      	ldr	r2, [r5, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008560:	7d10      	ldrb	r0, [r2, #20]
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	f360 230f 	bfi	r3, r0, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 800856a:	7cd2      	ldrb	r2, [r2, #19]
 800856c:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 8008570:	b29b      	uxth	r3, r3
 8008572:	61a3      	str	r3, [r4, #24]
		if( pxPartition->ulTotalSectors == 0 )
 8008574:	b98b      	cbnz	r3, 800859a <FF_Mount+0x2f6>
			pxPartition->ulTotalSectors = FF_getLong( pxBuffer->pucBuffer, FF_FAT_32_TOTAL_SECTORS );
 8008576:	68aa      	ldr	r2, [r5, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8008578:	f892 0023 	ldrb.w	r0, [r2, #35]	; 0x23
 800857c:	f360 631f 	bfi	r3, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8008580:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
 8008584:	f360 4317 	bfi	r3, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8008588:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
 800858c:	f360 230f 	bfi	r3, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008590:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008594:	f362 0307 	bfi	r3, r2, #0, #8
 8008598:	61a3      	str	r3, [r4, #24]
		if( pxPartition->ulSectorsPerFAT == 0 )
 800859a:	2900      	cmp	r1, #0
 800859c:	d14f      	bne.n	800863e <FF_Mount+0x39a>
			pxPartition->ulSectorsPerFAT = FF_getLong( pxBuffer->pucBuffer, FF_FAT_32_SECTORS_PER_FAT );
 800859e:	68aa      	ldr	r2, [r5, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80085a0:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 80085a4:	2300      	movs	r3, #0
 80085a6:	f361 631f 	bfi	r3, r1, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80085aa:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80085ae:	f361 4317 	bfi	r3, r1, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80085b2:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 80085b6:	f361 230f 	bfi	r3, r1, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80085ba:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80085be:	f362 0307 	bfi	r3, r2, #0, #8
 80085c2:	6163      	str	r3, [r4, #20]
			pxPartition->ulRootDirCluster = FF_getLong( pxBuffer->pucBuffer, FF_FAT_ROOT_DIR_CLUSTER );
 80085c4:	68aa      	ldr	r2, [r5, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80085c6:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 80085ca:	2300      	movs	r3, #0
 80085cc:	f361 631f 	bfi	r3, r1, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80085d0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 80085d4:	f361 4317 	bfi	r3, r1, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80085d8:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 80085dc:	f361 230f 	bfi	r3, r1, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80085e0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80085e4:	f362 0307 	bfi	r3, r2, #0, #8
 80085e8:	6363      	str	r3, [r4, #52]	; 0x34
			memcpy( pxPartition->pcVolumeLabel, pxBuffer->pucBuffer + FF_FAT_32_VOL_LABEL, sizeof( pxPartition->pcVolumeLabel ) );
 80085ea:	68aa      	ldr	r2, [r5, #8]
 80085ec:	f852 0f47 	ldr.w	r0, [r2, #71]!
 80085f0:	6851      	ldr	r1, [r2, #4]
 80085f2:	6892      	ldr	r2, [r2, #8]
 80085f4:	6460      	str	r0, [r4, #68]	; 0x44
 80085f6:	64a1      	str	r1, [r4, #72]	; 0x48
 80085f8:	64e2      	str	r2, [r4, #76]	; 0x4c
		pxPartition->ulClusterBeginLBA = pxPartition->ulBeginLBA + pxPartition->usReservedSectors + ( pxPartition->ucNumFATS * pxPartition->ulSectorsPerFAT );
 80085fa:	68e0      	ldr	r0, [r4, #12]
 80085fc:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8008600:	6963      	ldr	r3, [r4, #20]
 8008602:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8008606:	4401      	add	r1, r0
 8008608:	fb03 1202 	mla	r2, r3, r2, r1
 800860c:	62e2      	str	r2, [r4, #44]	; 0x2c
			pxPartition->ulFSInfoLBA = pxPartition->ulBeginLBA + FF_getShort( pxBuffer->pucBuffer, 48 );
 800860e:	68aa      	ldr	r2, [r5, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008610:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	f361 230f 	bfi	r3, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 800861c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008620:	f362 0307 	bfi	r3, r2, #0, #8
 8008624:	fa10 f383 	uxtah	r3, r0, r3
 8008628:	6223      	str	r3, [r4, #32]
		FF_ReleaseBuffer( pxIOManager, pxBuffer );	/* Release the buffer finally! */
 800862a:	4629      	mov	r1, r5
 800862c:	4620      	mov	r0, r4
 800862e:	f7ff fb89 	bl	8007d44 <FF_ReleaseBuffer>
		if( pxPartition->usBlkSize == 0 )
 8008632:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8008636:	b96a      	cbnz	r2, 8008654 <FF_Mount+0x3b0>
			xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_MOUNT;
 8008638:	4b63      	ldr	r3, [pc, #396]	; (80087c8 <FF_Mount+0x524>)
 800863a:	9305      	str	r3, [sp, #20]
			break;
 800863c:	e6bf      	b.n	80083be <FF_Mount+0x11a>
			pxPartition->ulRootDirCluster = 1;			/* 1st Cluster is RootDir! */
 800863e:	2301      	movs	r3, #1
 8008640:	6363      	str	r3, [r4, #52]	; 0x34
			memcpy( pxPartition->pcVolumeLabel, pxBuffer->pucBuffer + FF_FAT_16_VOL_LABEL, sizeof( pxPartition->pcVolumeLabel ) );
 8008642:	68aa      	ldr	r2, [r5, #8]
 8008644:	f852 0f2b 	ldr.w	r0, [r2, #43]!
 8008648:	6851      	ldr	r1, [r2, #4]
 800864a:	6892      	ldr	r2, [r2, #8]
 800864c:	6460      	str	r0, [r4, #68]	; 0x44
 800864e:	64a1      	str	r1, [r4, #72]	; 0x48
 8008650:	64e2      	str	r2, [r4, #76]	; 0x4c
 8008652:	e7d2      	b.n	80085fa <FF_Mount+0x356>
		rootEntryCount = FF_getShort( pxBuffer->pucBuffer, FF_FAT_ROOT_ENTRY_COUNT );
 8008654:	68ab      	ldr	r3, [r5, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 8008656:	7c99      	ldrb	r1, [r3, #18]
 8008658:	f04f 0500 	mov.w	r5, #0
 800865c:	f361 250f 	bfi	r5, r1, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8008660:	7c5b      	ldrb	r3, [r3, #17]
 8008662:	f363 0507 	bfi	r5, r3, #0, #8
 8008666:	b22d      	sxth	r5, r5
		pxPartition->ulRootDirSectors = ( ( rootEntryCount * 32 ) + pxPartition->usBlkSize - 1 ) / pxPartition->usBlkSize;
 8008668:	eb02 1345 	add.w	r3, r2, r5, lsl #5
 800866c:	3b01      	subs	r3, #1
 800866e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008672:	6263      	str	r3, [r4, #36]	; 0x24
		pxPartition->ulFirstDataSector = pxPartition->ulClusterBeginLBA + pxPartition->ulRootDirSectors;
 8008674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008676:	441a      	add	r2, r3
 8008678:	62a2      	str	r2, [r4, #40]	; 0x28
		pxPartition->ulDataSectors = pxPartition->ulTotalSectors - ( pxPartition->usReservedSectors + ( pxPartition->ucNumFATS * pxPartition->ulSectorsPerFAT ) + pxPartition->ulRootDirSectors );
 800867a:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 800867e:	69a2      	ldr	r2, [r4, #24]
 8008680:	1a51      	subs	r1, r2, r1
 8008682:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8008686:	6960      	ldr	r0, [r4, #20]
 8008688:	fb00 1212 	mls	r2, r0, r2, r1
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	61e3      	str	r3, [r4, #28]
		if( pxPartition->ulSectorsPerCluster == 0 )
 8008690:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008692:	b912      	cbnz	r2, 800869a <FF_Mount+0x3f6>
			xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_MOUNT;
 8008694:	4b4c      	ldr	r3, [pc, #304]	; (80087c8 <FF_Mount+0x524>)
 8008696:	9305      	str	r3, [sp, #20]
			break;
 8008698:	e691      	b.n	80083be <FF_Mount+0x11a>
		pxPartition->ulNumClusters = pxPartition->ulDataSectors / pxPartition->ulSectorsPerCluster;
 800869a:	fbb3 f3f2 	udiv	r3, r3, r2
 800869e:	6323      	str	r3, [r4, #48]	; 0x30
	if( ucAssumeFATType != 0 )
 80086a0:	4b4a      	ldr	r3, [pc, #296]	; (80087cc <FF_Mount+0x528>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	b393      	cbz	r3, 800870c <FF_Mount+0x468>
		switch( ucAssumeFATType )
 80086a6:	f1a3 020a 	sub.w	r2, r3, #10
 80086aa:	2a02      	cmp	r2, #2
 80086ac:	d82b      	bhi.n	8008706 <FF_Mount+0x462>
			pxPartition->ucType = ucAssumeFATType;
 80086ae:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80086b2:	2000      	movs	r0, #0
		xError = prvDetermineFatType( pxIOManager );
 80086b4:	9005      	str	r0, [sp, #20]
		if( FF_isERR( xError ) )
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f6ff ae81 	blt.w	80083be <FF_Mount+0x11a>
		if( !rootEntryCount && pxPartition->ucType != FF_T_FAT32 )
 80086bc:	b94d      	cbnz	r5, 80086d2 <FF_Mount+0x42e>
 80086be:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80086c2:	2b0c      	cmp	r3, #12
 80086c4:	d005      	beq.n	80086d2 <FF_Mount+0x42e>
			FF_PRINTF( "No root dir, must be a FAT32\n" );
 80086c6:	4842      	ldr	r0, [pc, #264]	; (80087d0 <FF_Mount+0x52c>)
 80086c8:	f00e f942 	bl	8016950 <lUDPLoggingPrintf>
			pxPartition->ucType = FF_T_FAT32;
 80086cc:	230c      	movs	r3, #12
 80086ce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		pxPartition->ucPartitionMounted = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
		pxPartition->ulLastFreeCluster = 0;
 80086d8:	2500      	movs	r5, #0
 80086da:	63a5      	str	r5, [r4, #56]	; 0x38
			FF_LockFAT( pxIOManager );
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fa61 	bl	8008ba4 <FF_LockFAT>
				pxPartition->ulLastFreeCluster = FF_FindFreeCluster( pxIOManager, &xError, pdFALSE );
 80086e2:	462a      	mov	r2, r5
 80086e4:	a905      	add	r1, sp, #20
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7fd faa6 	bl	8005c38 <FF_FindFreeCluster>
 80086ec:	63a0      	str	r0, [r4, #56]	; 0x38
			FF_UnlockFAT( pxIOManager );
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fa80 	bl	8008bf4 <FF_UnlockFAT>
			if( FF_isERR( xError ) )
 80086f4:	9b05      	ldr	r3, [sp, #20]
 80086f6:	42ab      	cmp	r3, r5
 80086f8:	db4c      	blt.n	8008794 <FF_Mount+0x4f0>
			pxPartition->ulFreeClusterCount = FF_CountFreeClusters( pxIOManager, &xError );
 80086fa:	a905      	add	r1, sp, #20
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7fd fc8f 	bl	8006020 <FF_CountFreeClusters>
 8008702:	63e0      	str	r0, [r4, #60]	; 0x3c
 8008704:	e656      	b.n	80083b4 <FF_Mount+0x110>
			ucAssumeFATType = 0;
 8008706:	2200      	movs	r2, #0
 8008708:	4b30      	ldr	r3, [pc, #192]	; (80087cc <FF_Mount+0x528>)
 800870a:	701a      	strb	r2, [r3, #0]
		pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFATBeginLBA, FF_MODE_READ );
 800870c:	2201      	movs	r2, #1
 800870e:	6921      	ldr	r1, [r4, #16]
 8008710:	4620      	mov	r0, r4
 8008712:	f7ff fa4d 	bl	8007bb0 <FF_GetBuffer>
		if( pxBuffer == NULL )
 8008716:	4601      	mov	r1, r0
 8008718:	2800      	cmp	r0, #0
 800871a:	d04f      	beq.n	80087bc <FF_Mount+0x518>
			ulFirstWord = ( uint32_t ) FF_getShort( pxBuffer->pucBuffer, 0x0000 );
 800871c:	688a      	ldr	r2, [r1, #8]
		u16.bytes.u8_1 = pBuffer[ 1 ];
 800871e:	7850      	ldrb	r0, [r2, #1]
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f360 230f 	bfi	r3, r0, #8, #8
		u16.bytes.u8_0 = pBuffer[ 0 ];
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	f362 0307 	bfi	r3, r2, #0, #8
		return u16.u16;
 800872e:	b29e      	uxth	r6, r3
			xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff fb07 	bl	8007d44 <FF_ReleaseBuffer>
	if( ( ucAssumeFATType == 0 ) && ( FF_isERR( xError ) == pdFALSE ) )
 8008736:	4b25      	ldr	r3, [pc, #148]	; (80087cc <FF_Mount+0x528>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1ba      	bne.n	80086b4 <FF_Mount+0x410>
 800873e:	2800      	cmp	r0, #0
 8008740:	db15      	blt.n	800876e <FF_Mount+0x4ca>
		if( pxPartition->ulNumClusters < FAT32_SECTOR_COUNT_65525 )
 8008742:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008744:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8008748:	429a      	cmp	r2, r3
 800874a:	d819      	bhi.n	8008780 <FF_Mount+0x4dc>
			pxPartition->ucType = FF_T_FAT16;
 800874c:	230b      	movs	r3, #11
 800874e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
				if( ulFirstWord == 0xFFF8 )
 8008752:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8008756:	429e      	cmp	r6, r3
 8008758:	d019      	beq.n	800878e <FF_Mount+0x4ea>
					if( ( ulFirstWord & 0x3FF ) != 0x3F8 )
 800875a:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800875e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8008762:	d006      	beq.n	8008772 <FF_Mount+0x4ce>
						FF_PRINTF( "Part at %lu is probably a FAT12\n", pxIOManager->xPartition.ulFATBeginLBA );
 8008764:	6921      	ldr	r1, [r4, #16]
 8008766:	481b      	ldr	r0, [pc, #108]	; (80087d4 <FF_Mount+0x530>)
 8008768:	f00e f8f2 	bl	8016950 <lUDPLoggingPrintf>
					xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_DETERMINEFATTYPE;
 800876c:	481a      	ldr	r0, [pc, #104]	; (80087d8 <FF_Mount+0x534>)
		xError = prvDetermineFatType( pxIOManager );
 800876e:	9005      	str	r0, [sp, #20]
 8008770:	e620      	b.n	80083b4 <FF_Mount+0x110>
						FF_PRINTF( "Partition at %lu has strange FAT data %08lX\n",
 8008772:	4632      	mov	r2, r6
 8008774:	6921      	ldr	r1, [r4, #16]
 8008776:	4819      	ldr	r0, [pc, #100]	; (80087dc <FF_Mount+0x538>)
 8008778:	f00e f8ea 	bl	8016950 <lUDPLoggingPrintf>
					xError = FF_ERR_IOMAN_INVALID_FORMAT | FF_DETERMINEFATTYPE;
 800877c:	4816      	ldr	r0, [pc, #88]	; (80087d8 <FF_Mount+0x534>)
 800877e:	e7f6      	b.n	800876e <FF_Mount+0x4ca>
			pxPartition->ucType = FF_T_FAT32;
 8008780:	230c      	movs	r3, #12
 8008782:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
				FF_PRINTF( "prvDetermineFatType: firstWord %08lX\n", ulFirstWord );
 8008786:	4631      	mov	r1, r6
 8008788:	4815      	ldr	r0, [pc, #84]	; (80087e0 <FF_Mount+0x53c>)
 800878a:	f00e f8e1 	bl	8016950 <lUDPLoggingPrintf>
		xError = prvDetermineFatType( pxIOManager );
 800878e:	2300      	movs	r3, #0
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	e793      	b.n	80086bc <FF_Mount+0x418>
				if( FF_GETERROR( xError ) == FF_ERR_IOMAN_NOT_ENOUGH_FREE_SPACE )
 8008794:	b29b      	uxth	r3, r3
 8008796:	2b16      	cmp	r3, #22
 8008798:	f47f ae11 	bne.w	80083be <FF_Mount+0x11a>
					pxPartition->ulLastFreeCluster = 0;
 800879c:	63a5      	str	r5, [r4, #56]	; 0x38
 800879e:	e7ac      	b.n	80086fa <FF_Mount+0x456>
			xError = FF_ERR_IOMAN_INVALID_PARTITION_NUM | FF_GETEFIPARTITIONENTRY;
 80087a0:	4810      	ldr	r0, [pc, #64]	; (80087e4 <FF_Mount+0x540>)
 80087a2:	e606      	b.n	80083b2 <FF_Mount+0x10e>
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_GETEFIPARTITIONENTRY;
 80087a4:	4810      	ldr	r0, [pc, #64]	; (80087e8 <FF_Mount+0x544>)
 80087a6:	e604      	b.n	80083b2 <FF_Mount+0x10e>
			xError = FF_ERR_IOMAN_GPT_HEADER_CORRUPT | FF_GETEFIPARTITIONENTRY;
 80087a8:	4810      	ldr	r0, [pc, #64]	; (80087ec <FF_Mount+0x548>)
 80087aa:	e602      	b.n	80083b2 <FF_Mount+0x10e>
				xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_GETEFIPARTITIONENTRY;
 80087ac:	480e      	ldr	r0, [pc, #56]	; (80087e8 <FF_Mount+0x544>)
 80087ae:	e600      	b.n	80083b2 <FF_Mount+0x10e>
				xError = FF_ERR_IOMAN_INVALID_PARTITION_NUM | FF_GETEFIPARTITIONENTRY;
 80087b0:	480c      	ldr	r0, [pc, #48]	; (80087e4 <FF_Mount+0x540>)
 80087b2:	e5fe      	b.n	80083b2 <FF_Mount+0x10e>
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_DETERMINEFATTYPE;
 80087b4:	480e      	ldr	r0, [pc, #56]	; (80087f0 <FF_Mount+0x54c>)
 80087b6:	e7da      	b.n	800876e <FF_Mount+0x4ca>
			xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 80087b8:	9005      	str	r0, [sp, #20]
 80087ba:	e600      	b.n	80083be <FF_Mount+0x11a>
	if( ( ucAssumeFATType == 0 ) && ( FF_isERR( xError ) == pdFALSE ) )
 80087bc:	4b03      	ldr	r3, [pc, #12]	; (80087cc <FF_Mount+0x528>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f7      	beq.n	80087b4 <FF_Mount+0x510>
			xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_DETERMINEFATTYPE;
 80087c4:	480a      	ldr	r0, [pc, #40]	; (80087f0 <FF_Mount+0x54c>)
 80087c6:	e775      	b.n	80086b4 <FF_Mount+0x410>
 80087c8:	8103000f 	.word	0x8103000f
 80087cc:	2000298c 	.word	0x2000298c
 80087d0:	0801914c 	.word	0x0801914c
 80087d4:	080190d0 	.word	0x080190d0
 80087d8:	8109000f 	.word	0x8109000f
 80087dc:	080190f4 	.word	0x080190f4
 80087e0:	08019124 	.word	0x08019124
 80087e4:	810a0010 	.word	0x810a0010
 80087e8:	810a0004 	.word	0x810a0004
 80087ec:	810a0015 	.word	0x810a0015
 80087f0:	81090004 	.word	0x81090004

080087f4 <FF_Unmount>:
 *	@param	pxIOManager	FF_IOManager_t Object.
 *
 *	@Return FF_ERR_NONE on success.
 **/
FF_Error_t FF_Unmount( FF_Disk_t *pxDisk )
{
 80087f4:	b538      	push	{r3, r4, r5, lr}
#if( ffconfigMIRROR_FATS_UMOUNT != 0 )
	UBaseType_t uxIndex, y;
	FF_Buffer_t	*pxBuffer;
#endif

	if( pxDisk->pxIOManager == NULL )
 80087f6:	6884      	ldr	r4, [r0, #8]
 80087f8:	b39c      	cbz	r4, 8008862 <FF_Unmount+0x6e>
	{
		xError = FF_ERR_NULL_POINTER | FF_UNMOUNT;
	}
	else if( pxDisk->pxIOManager->xPartition.ucPartitionMounted == 0 )
 80087fa:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 80087fe:	b913      	cbnz	r3, 8008806 <FF_Unmount+0x12>
	{
		xError = FF_ERR_NONE;
 8008800:	2500      	movs	r5, #0
		}
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
	}

	return xError;
}	/* FF_Unmount() */
 8008802:	4628      	mov	r0, r5
 8008804:	bd38      	pop	{r3, r4, r5, pc}
		FF_PendSemaphore( pxIOManager->pvSemaphore );		/* Ensure that there are no File Handles */
 8008806:	f8d4 06a0 	ldr.w	r0, [r4, #1696]	; 0x6a0
 800880a:	f000 f945 	bl	8008a98 <FF_PendSemaphore>
FF_Buffer_t *pxBuffer = pxIOManager->pxBuffers;
 800880e:	f8d4 369c 	ldr.w	r3, [r4, #1692]	; 0x69c
FF_Buffer_t *pxLastBuffer = pxBuffer + pxIOManager->usCacheSize;
 8008812:	f8b4 16b2 	ldrh.w	r1, [r4, #1714]	; 0x6b2
 8008816:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800881a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
		if( pxBuffer->usNumHandles )
 800881e:	89da      	ldrh	r2, [r3, #14]
 8008820:	b9ca      	cbnz	r2, 8008856 <FF_Unmount+0x62>
		pxBuffer++;
 8008822:	3314      	adds	r3, #20
		if( pxBuffer == pxLastBuffer )
 8008824:	4299      	cmp	r1, r3
 8008826:	d1fa      	bne.n	800881e <FF_Unmount+0x2a>
			else if( pxIOManager->FirstFile != NULL )
 8008828:	f8d4 36a4 	ldr.w	r3, [r4, #1700]	; 0x6a4
 800882c:	b10b      	cbz	r3, 8008832 <FF_Unmount+0x3e>
				xError = FF_ERR_IOMAN_ACTIVE_HANDLES | FF_UNMOUNT;
 800882e:	4d0e      	ldr	r5, [pc, #56]	; (8008868 <FF_Unmount+0x74>)
 8008830:	e012      	b.n	8008858 <FF_Unmount+0x64>
				FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8008832:	f8d4 06a0 	ldr.w	r0, [r4, #1696]	; 0x6a0
 8008836:	f000 f93f 	bl	8008ab8 <FF_ReleaseSemaphore>
				xError = FF_FlushCache( pxIOManager );
 800883a:	4620      	mov	r0, r4
 800883c:	f7ff f956 	bl	8007aec <FF_FlushCache>
 8008840:	4605      	mov	r5, r0
				FF_PendSemaphore( pxIOManager->pvSemaphore );
 8008842:	f8d4 06a0 	ldr.w	r0, [r4, #1696]	; 0x6a0
 8008846:	f000 f927 	bl	8008a98 <FF_PendSemaphore>
				if( FF_isERR( xError ) == pdFALSE )
 800884a:	2d00      	cmp	r5, #0
 800884c:	db04      	blt.n	8008858 <FF_Unmount+0x64>
					pxIOManager->xPartition.ucPartitionMounted = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8008854:	e000      	b.n	8008858 <FF_Unmount+0x64>
				xError = FF_ERR_IOMAN_ACTIVE_HANDLES | FF_UNMOUNT;
 8008856:	4d04      	ldr	r5, [pc, #16]	; (8008868 <FF_Unmount+0x74>)
		FF_ReleaseSemaphore( pxIOManager->pvSemaphore );
 8008858:	f8d4 06a0 	ldr.w	r0, [r4, #1696]	; 0x6a0
 800885c:	f000 f92c 	bl	8008ab8 <FF_ReleaseSemaphore>
 8008860:	e7cf      	b.n	8008802 <FF_Unmount+0xe>
		xError = FF_ERR_NULL_POINTER | FF_UNMOUNT;
 8008862:	4d02      	ldr	r5, [pc, #8]	; (800886c <FF_Unmount+0x78>)
 8008864:	e7cd      	b.n	8008802 <FF_Unmount+0xe>
 8008866:	bf00      	nop
 8008868:	81040014 	.word	0x81040014
 800886c:	81040002 	.word	0x81040002

08008870 <FF_IncreaseFreeClusters>:
/*-----------------------------------------------------------*/

FF_Error_t FF_IncreaseFreeClusters( FF_IOManager_t *pxIOManager, uint32_t Count )
{
 8008870:	b530      	push	{r4, r5, lr}
 8008872:	b083      	sub	sp, #12
 8008874:	4604      	mov	r4, r0
#endif

	do
	{
		/* Open a do {} while( pdFALSE ) loop to allow the use of break statements. */
		if( pxIOManager->xPartition.ulFreeClusterCount == 0ul )
 8008876:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008878:	b93b      	cbnz	r3, 800888a <FF_IncreaseFreeClusters+0x1a>
		{
			/* Apparently the number of free clusters has not been calculated yet,
			or no free cluster was available. Now check it. */
			pxIOManager->xPartition.ulFreeClusterCount = FF_CountFreeClusters( pxIOManager, &xError );
 800887a:	a901      	add	r1, sp, #4
 800887c:	f7fd fbd0 	bl	8006020 <FF_CountFreeClusters>
 8008880:	63e0      	str	r0, [r4, #60]	; 0x3c
			if( FF_isERR( xError ) )
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	da0a      	bge.n	800889e <FF_IncreaseFreeClusters+0x2e>
 8008888:	e00f      	b.n	80088aa <FF_IncreaseFreeClusters+0x3a>
 800888a:	460d      	mov	r5, r1
				break;
			}
		}
		else
		{
			xError = FF_ERR_NONE;
 800888c:	2300      	movs	r3, #0
 800888e:	9301      	str	r3, [sp, #4]
			taskENTER_CRITICAL();
 8008890:	f00a fcb0 	bl	80131f4 <vPortEnterCritical>
			{
				pxIOManager->xPartition.ulFreeClusterCount += Count;
 8008894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008896:	4429      	add	r1, r5
 8008898:	63e1      	str	r1, [r4, #60]	; 0x3c
			}
			taskEXIT_CRITICAL();
 800889a:	f00a fccd 	bl	8013238 <vPortExitCritical>
		}

		if( pxIOManager->xPartition.ulLastFreeCluster == 0 )
 800889e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088a0:	b133      	cbz	r3, 80088b0 <FF_IncreaseFreeClusters+0x40>
		}

		#if( ffconfigWRITE_FREE_COUNT != 0 )
		{
			/* FAT32 updates the FSINFO sector. */
			if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 80088a2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80088a6:	2b0c      	cmp	r3, #12
 80088a8:	d012      	beq.n	80088d0 <FF_IncreaseFreeClusters+0x60>
		#endif
	}
	while( pdFALSE );

	return xError;
}	/* FF_IncreaseFreeClusters() */
 80088aa:	9801      	ldr	r0, [sp, #4]
 80088ac:	b003      	add	sp, #12
 80088ae:	bd30      	pop	{r4, r5, pc}
			FF_LockFAT( pxIOManager );
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 f977 	bl	8008ba4 <FF_LockFAT>
				pxIOManager->xPartition.ulLastFreeCluster = FF_FindFreeCluster( pxIOManager, &xError, pdFALSE );
 80088b6:	2200      	movs	r2, #0
 80088b8:	a901      	add	r1, sp, #4
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7fd f9bc 	bl	8005c38 <FF_FindFreeCluster>
 80088c0:	63a0      	str	r0, [r4, #56]	; 0x38
			FF_UnlockFAT( pxIOManager );
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f996 	bl	8008bf4 <FF_UnlockFAT>
			if( FF_isERR( xError ) )
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dae9      	bge.n	80088a2 <FF_IncreaseFreeClusters+0x32>
 80088ce:	e7ec      	b.n	80088aa <FF_IncreaseFreeClusters+0x3a>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFSInfoLBA, FF_MODE_WRITE );
 80088d0:	2202      	movs	r2, #2
 80088d2:	6a21      	ldr	r1, [r4, #32]
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff f96b 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 80088da:	4601      	mov	r1, r0
 80088dc:	b330      	cbz	r0, 800892c <FF_IncreaseFreeClusters+0xbc>
					ulSignature1 = FF_getLong( pxBuffer->pucBuffer, FS_INFO_OFFSET_SIGNATURE1_000 );
 80088de:	6883      	ldr	r3, [r0, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80088e0:	78d8      	ldrb	r0, [r3, #3]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80088e8:	7898      	ldrb	r0, [r3, #2]
 80088ea:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 80088ee:	7858      	ldrb	r0, [r3, #1]
 80088f0:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 80088f4:	7818      	ldrb	r0, [r3, #0]
 80088f6:	f360 0207 	bfi	r2, r0, #0, #8
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80088fa:	f893 51e7 	ldrb.w	r5, [r3, #487]	; 0x1e7
 80088fe:	2000      	movs	r0, #0
 8008900:	f365 601f 	bfi	r0, r5, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8008904:	f893 51e6 	ldrb.w	r5, [r3, #486]	; 0x1e6
 8008908:	f365 4017 	bfi	r0, r5, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 800890c:	f893 51e5 	ldrb.w	r5, [r3, #485]	; 0x1e5
 8008910:	f365 200f 	bfi	r0, r5, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008914:	f893 51e4 	ldrb.w	r5, [r3, #484]	; 0x1e4
 8008918:	f365 0007 	bfi	r0, r5, #0, #8
					if( ( ulSignature1 == FS_INFO_SIGNATURE1_0x41615252 ) &&
 800891c:	4d16      	ldr	r5, [pc, #88]	; (8008978 <FF_IncreaseFreeClusters+0x108>)
 800891e:	42aa      	cmp	r2, r5
 8008920:	d007      	beq.n	8008932 <FF_IncreaseFreeClusters+0xc2>
					xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008922:	4620      	mov	r0, r4
 8008924:	f7ff fa0e 	bl	8007d44 <FF_ReleaseBuffer>
 8008928:	9001      	str	r0, [sp, #4]
 800892a:	e7be      	b.n	80088aa <FF_IncreaseFreeClusters+0x3a>
					xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_INCREASEFREECLUSTERS;
 800892c:	4b13      	ldr	r3, [pc, #76]	; (800897c <FF_IncreaseFreeClusters+0x10c>)
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	e7bb      	b.n	80088aa <FF_IncreaseFreeClusters+0x3a>
					if( ( ulSignature1 == FS_INFO_SIGNATURE1_0x41615252 ) &&
 8008932:	4a13      	ldr	r2, [pc, #76]	; (8008980 <FF_IncreaseFreeClusters+0x110>)
 8008934:	4290      	cmp	r0, r2
 8008936:	d1f4      	bne.n	8008922 <FF_IncreaseFreeClusters+0xb2>
		u32.u32 = Value;
 8008938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		pBuffer[ 0 ] = u32.bytes.u8_0;
 800893a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
		pBuffer[ 1 ] = u32.bytes.u8_1;
 800893e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8008942:	f883 01e9 	strb.w	r0, [r3, #489]	; 0x1e9
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008946:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800894a:	f883 01ea 	strb.w	r0, [r3, #490]	; 0x1ea
		pBuffer[ 3 ] = u32.bytes.u8_3;
 800894e:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8008952:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
						FF_putLong( pxBuffer->pucBuffer, FS_INFO_OFFSET_FREE_CLUSTER_492, pxIOManager->xPartition.ulLastFreeCluster );
 8008956:	688a      	ldr	r2, [r1, #8]
		u32.u32 = Value;
 8008958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pBuffer[ 0 ] = u32.bytes.u8_0;
 800895a:	f882 31ec 	strb.w	r3, [r2, #492]	; 0x1ec
		pBuffer[ 1 ] = u32.bytes.u8_1;
 800895e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008962:	f882 01ed 	strb.w	r0, [r2, #493]	; 0x1ed
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008966:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800896a:	f882 01ee 	strb.w	r0, [r2, #494]	; 0x1ee
		pBuffer[ 3 ] = u32.bytes.u8_3;
 800896e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008972:	f882 31ef 	strb.w	r3, [r2, #495]	; 0x1ef
 8008976:	e7d4      	b.n	8008922 <FF_IncreaseFreeClusters+0xb2>
 8008978:	41615252 	.word	0x41615252
 800897c:	810d0004 	.word	0x810d0004
 8008980:	61417272 	.word	0x61417272

08008984 <FF_DecreaseFreeClusters>:
/*-----------------------------------------------------------*/

FF_Error_t FF_DecreaseFreeClusters( FF_IOManager_t *pxIOManager, uint32_t Count )
{
 8008984:	b530      	push	{r4, r5, lr}
 8008986:	b083      	sub	sp, #12
 8008988:	4604      	mov	r4, r0
FF_Error_t	xError = FF_ERR_NONE;
 800898a:	2300      	movs	r3, #0
 800898c:	9301      	str	r3, [sp, #4]
#if( ffconfigWRITE_FREE_COUNT != 0 )
	FF_Buffer_t	*pxBuffer;
#endif

	if( pxIOManager->xPartition.ulFreeClusterCount == 0ul )
 800898e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008990:	b97b      	cbnz	r3, 80089b2 <FF_DecreaseFreeClusters+0x2e>
	{
		pxIOManager->xPartition.ulFreeClusterCount = FF_CountFreeClusters( pxIOManager, &xError );
 8008992:	a901      	add	r1, sp, #4
 8008994:	f7fd fb44 	bl	8006020 <FF_CountFreeClusters>
 8008998:	63e0      	str	r0, [r4, #60]	; 0x3c
		taskENTER_CRITICAL();
		pxIOManager->xPartition.ulFreeClusterCount -= Count;
		taskEXIT_CRITICAL();
	}

	if( FF_isERR( xError ) == pdFALSE )
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	db05      	blt.n	80089ac <FF_DecreaseFreeClusters+0x28>
	{
		if( pxIOManager->xPartition.ulLastFreeCluster == 0 )
 80089a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089a2:	b17b      	cbz	r3, 80089c4 <FF_DecreaseFreeClusters+0x40>
	if( FF_isERR( xError ) == pdFALSE )
	{
		#if( ffconfigWRITE_FREE_COUNT != 0 )
		{
			/* FAT32 update the FSINFO sector. */
			if( pxIOManager->xPartition.ucType == FF_T_FAT32 )
 80089a4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80089a8:	2b0c      	cmp	r3, #12
 80089aa:	d01b      	beq.n	80089e4 <FF_DecreaseFreeClusters+0x60>
		}
		#endif
	}

	return xError;
}	/* FF_DecreaseFreeClusters() */
 80089ac:	9801      	ldr	r0, [sp, #4]
 80089ae:	b003      	add	sp, #12
 80089b0:	bd30      	pop	{r4, r5, pc}
 80089b2:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80089b4:	f00a fc1e 	bl	80131f4 <vPortEnterCritical>
		pxIOManager->xPartition.ulFreeClusterCount -= Count;
 80089b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089ba:	1b49      	subs	r1, r1, r5
 80089bc:	63e1      	str	r1, [r4, #60]	; 0x3c
		taskEXIT_CRITICAL();
 80089be:	f00a fc3b 	bl	8013238 <vPortExitCritical>
 80089c2:	e7ea      	b.n	800899a <FF_DecreaseFreeClusters+0x16>
			FF_LockFAT( pxIOManager );
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 f8ed 	bl	8008ba4 <FF_LockFAT>
				pxIOManager->xPartition.ulLastFreeCluster = FF_FindFreeCluster( pxIOManager, &xError, pdFALSE );
 80089ca:	2200      	movs	r2, #0
 80089cc:	a901      	add	r1, sp, #4
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7fd f932 	bl	8005c38 <FF_FindFreeCluster>
 80089d4:	63a0      	str	r0, [r4, #56]	; 0x38
			FF_UnlockFAT( pxIOManager );
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f90c 	bl	8008bf4 <FF_UnlockFAT>
	if( FF_isERR( xError ) == pdFALSE )
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dae0      	bge.n	80089a4 <FF_DecreaseFreeClusters+0x20>
 80089e2:	e7e3      	b.n	80089ac <FF_DecreaseFreeClusters+0x28>
				pxBuffer = FF_GetBuffer( pxIOManager, pxIOManager->xPartition.ulFSInfoLBA, FF_MODE_WRITE );
 80089e4:	2202      	movs	r2, #2
 80089e6:	6a21      	ldr	r1, [r4, #32]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7ff f8e1 	bl	8007bb0 <FF_GetBuffer>
				if( pxBuffer == NULL )
 80089ee:	4601      	mov	r1, r0
 80089f0:	b1a8      	cbz	r0, 8008a1e <FF_DecreaseFreeClusters+0x9a>
					if( ( FF_getLong( pxBuffer->pucBuffer, FS_INFO_OFFSET_SIGNATURE1_000 ) == FS_INFO_SIGNATURE1_0x41615252 ) &&
 80089f2:	6883      	ldr	r3, [r0, #8]
		u32.bytes.u8_3 = pBuffer[ 3 ];
 80089f4:	78d8      	ldrb	r0, [r3, #3]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 80089fc:	7898      	ldrb	r0, [r3, #2]
 80089fe:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8008a02:	7858      	ldrb	r0, [r3, #1]
 8008a04:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008a08:	7818      	ldrb	r0, [r3, #0]
 8008a0a:	f360 0207 	bfi	r2, r0, #0, #8
 8008a0e:	481f      	ldr	r0, [pc, #124]	; (8008a8c <FF_DecreaseFreeClusters+0x108>)
 8008a10:	4282      	cmp	r2, r0
 8008a12:	d007      	beq.n	8008a24 <FF_DecreaseFreeClusters+0xa0>
					xError = FF_ReleaseBuffer( pxIOManager, pxBuffer );
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7ff f995 	bl	8007d44 <FF_ReleaseBuffer>
 8008a1a:	9001      	str	r0, [sp, #4]
 8008a1c:	e7c6      	b.n	80089ac <FF_DecreaseFreeClusters+0x28>
					xError = FF_ERR_DEVICE_DRIVER_FAILED | FF_DECREASEFREECLUSTERS;
 8008a1e:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <FF_DecreaseFreeClusters+0x10c>)
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	e7c3      	b.n	80089ac <FF_DecreaseFreeClusters+0x28>
		u32.bytes.u8_3 = pBuffer[ 3 ];
 8008a24:	f893 01e7 	ldrb.w	r0, [r3, #487]	; 0x1e7
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f360 621f 	bfi	r2, r0, #24, #8
		u32.bytes.u8_2 = pBuffer[ 2 ];
 8008a2e:	f893 01e6 	ldrb.w	r0, [r3, #486]	; 0x1e6
 8008a32:	f360 4217 	bfi	r2, r0, #16, #8
		u32.bytes.u8_1 = pBuffer[ 1 ];
 8008a36:	f893 01e5 	ldrb.w	r0, [r3, #485]	; 0x1e5
 8008a3a:	f360 220f 	bfi	r2, r0, #8, #8
		u32.bytes.u8_0 = pBuffer[ 0 ];
 8008a3e:	f893 01e4 	ldrb.w	r0, [r3, #484]	; 0x1e4
 8008a42:	f360 0207 	bfi	r2, r0, #0, #8
					if( ( FF_getLong( pxBuffer->pucBuffer, FS_INFO_OFFSET_SIGNATURE1_000 ) == FS_INFO_SIGNATURE1_0x41615252 ) &&
 8008a46:	4813      	ldr	r0, [pc, #76]	; (8008a94 <FF_DecreaseFreeClusters+0x110>)
 8008a48:	4282      	cmp	r2, r0
 8008a4a:	d1e3      	bne.n	8008a14 <FF_DecreaseFreeClusters+0x90>
		u32.u32 = Value;
 8008a4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		pBuffer[ 0 ] = u32.bytes.u8_0;
 8008a4e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8008a52:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8008a56:	f883 01e9 	strb.w	r0, [r3, #489]	; 0x1e9
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008a5a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008a5e:	f883 01ea 	strb.w	r0, [r3, #490]	; 0x1ea
		pBuffer[ 3 ] = u32.bytes.u8_3;
 8008a62:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8008a66:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
						FF_putLong( pxBuffer->pucBuffer, FS_INFO_OFFSET_FREE_CLUSTER_492, pxIOManager->xPartition.ulLastFreeCluster );
 8008a6a:	688a      	ldr	r2, [r1, #8]
		u32.u32 = Value;
 8008a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pBuffer[ 0 ] = u32.bytes.u8_0;
 8008a6e:	f882 31ec 	strb.w	r3, [r2, #492]	; 0x1ec
		pBuffer[ 1 ] = u32.bytes.u8_1;
 8008a72:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008a76:	f882 01ed 	strb.w	r0, [r2, #493]	; 0x1ed
		pBuffer[ 2 ] = u32.bytes.u8_2;
 8008a7a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008a7e:	f882 01ee 	strb.w	r0, [r2, #494]	; 0x1ee
		pBuffer[ 3 ] = u32.bytes.u8_3;
 8008a82:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008a86:	f882 31ef 	strb.w	r3, [r2, #495]	; 0x1ef
 8008a8a:	e7c3      	b.n	8008a14 <FF_DecreaseFreeClusters+0x90>
 8008a8c:	41615252 	.word	0x41615252
 8008a90:	810c0004 	.word	0x810c0004
 8008a94:	61417272 	.word	0x61417272

08008a98 <FF_PendSemaphore>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void FF_PendSemaphore( void *pxSemaphore )
{
 8008a98:	b510      	push	{r4, lr}
	configASSERT( pxSemaphore );
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	b128      	cbz	r0, 8008aaa <FF_PendSemaphore+0x12>
	xSemaphoreTakeRecursive( ( SemaphoreHandle_t ) pxSemaphore, portMAX_DELAY );
 8008a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f00b f9f0 	bl	8013e88 <xQueueTakeMutexRecursive>
 8008aa8:	bd10      	pop	{r4, pc}
	configASSERT( pxSemaphore );
 8008aaa:	2165      	movs	r1, #101	; 0x65
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <FF_PendSemaphore+0x1c>)
 8008aae:	f00e fbf7 	bl	80172a0 <vAssertCalled>
 8008ab2:	e7f4      	b.n	8008a9e <FF_PendSemaphore+0x6>
 8008ab4:	080192e4 	.word	0x080192e4

08008ab8 <FF_ReleaseSemaphore>:
}
/*-----------------------------------------------------------*/

void FF_ReleaseSemaphore( void *pxSemaphore )
{
 8008ab8:	b510      	push	{r4, lr}
	configASSERT( pxSemaphore );
 8008aba:	4604      	mov	r4, r0
 8008abc:	b118      	cbz	r0, 8008ac6 <FF_ReleaseSemaphore+0xe>
	xSemaphoreGiveRecursive( ( SemaphoreHandle_t ) pxSemaphore );
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f00b f83c 	bl	8013b3c <xQueueGiveMutexRecursive>
 8008ac4:	bd10      	pop	{r4, pc}
	configASSERT( pxSemaphore );
 8008ac6:	216c      	movs	r1, #108	; 0x6c
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <FF_ReleaseSemaphore+0x18>)
 8008aca:	f00e fbe9 	bl	80172a0 <vAssertCalled>
 8008ace:	e7f6      	b.n	8008abe <FF_ReleaseSemaphore+0x6>
 8008ad0:	080192e4 	.word	0x080192e4

08008ad4 <FF_CreateEvents>:
	vTaskDelay( pdMS_TO_TICKS( ulTime_ms ) );
}
/*-----------------------------------------------------------*/

BaseType_t FF_CreateEvents( FF_IOManager_t *pxIOManager )
{
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4604      	mov	r4, r0
BaseType_t xResult;

	pxIOManager->xEventGroup = xEventGroupCreate();
 8008ad8:	f00a f9dc 	bl	8012e94 <xEventGroupCreate>
 8008adc:	f8c4 06a8 	str.w	r0, [r4, #1704]	; 0x6a8
	if( pxIOManager->xEventGroup != NULL )
 8008ae0:	b120      	cbz	r0, 8008aec <FF_CreateEvents+0x18>
	{
		xEventGroupSetBits( pxIOManager->xEventGroup,
 8008ae2:	2107      	movs	r1, #7
 8008ae4:	f00a fa88 	bl	8012ff8 <xEventGroupSetBits>
			FF_FAT_LOCK_EVENT_BITS | FF_DIR_LOCK_EVENT_BITS | FF_BUF_LOCK_EVENT_BITS );
		xResult = pdTRUE;
 8008ae8:	2001      	movs	r0, #1
 8008aea:	bd10      	pop	{r4, pc}
	}
	else
	{
		xResult = pdFALSE;
 8008aec:	2000      	movs	r0, #0
	}

	return xResult;
}
 8008aee:	bd10      	pop	{r4, pc}

08008af0 <FF_LockDirectory>:
/*-----------------------------------------------------------*/

void FF_LockDirectory( FF_IOManager_t *pxIOManager )
{
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	b083      	sub	sp, #12
 8008af4:	4605      	mov	r5, r0

	for( ;; )
	{
		/* Called when a task want to make changes to a directory.
		First it waits for the desired bit to come high. */
		xEventGroupWaitBits( pxIOManager->xEventGroup,
 8008af6:	f242 7710 	movw	r7, #10000	; 0x2710
 8008afa:	2600      	movs	r6, #0
 8008afc:	2402      	movs	r4, #2
 8008afe:	9700      	str	r7, [sp, #0]
 8008b00:	4633      	mov	r3, r6
 8008b02:	4632      	mov	r2, r6
 8008b04:	4621      	mov	r1, r4
 8008b06:	f8d5 06a8 	ldr.w	r0, [r5, #1704]	; 0x6a8
 8008b0a:	f00a f9d1 	bl	8012eb0 <xEventGroupWaitBits>
			pdFALSE,                /* xWaitForAllBits n.a. */
			pdMS_TO_TICKS( 10000UL ) );

		/* The next operation will only succeed for 1 task at a time,
		because it is an atomary test & set operation: */
		xBits = xEventGroupClearBits( pxIOManager->xEventGroup, FF_DIR_LOCK_EVENT_BITS );
 8008b0e:	4621      	mov	r1, r4
 8008b10:	f8d5 06a8 	ldr.w	r0, [r5, #1704]	; 0x6a8
 8008b14:	f00a fa50 	bl	8012fb8 <xEventGroupClearBits>

		if( ( xBits & FF_DIR_LOCK_EVENT_BITS ) != 0 )
 8008b18:	f010 0f02 	tst.w	r0, #2
 8008b1c:	d0ef      	beq.n	8008afe <FF_LockDirectory+0xe>
			/* This task has cleared the desired bit.
			It now 'owns' the resource. */
			break;
		}
	}
}
 8008b1e:	b003      	add	sp, #12
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008b24 <FF_UnlockDirectory>:
/*-----------------------------------------------------------*/

void FF_UnlockDirectory( FF_IOManager_t *pxIOManager )
{
 8008b24:	b510      	push	{r4, lr}
 8008b26:	4604      	mov	r4, r0
	configASSERT( ( xEventGroupGetBits( pxIOManager->xEventGroup ) & FF_DIR_LOCK_EVENT_BITS ) == 0 );
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
 8008b2e:	f00a fa43 	bl	8012fb8 <xEventGroupClearBits>
 8008b32:	f010 0f02 	tst.w	r0, #2
 8008b36:	d105      	bne.n	8008b44 <FF_UnlockDirectory+0x20>
	xEventGroupSetBits( pxIOManager->xEventGroup, FF_DIR_LOCK_EVENT_BITS );
 8008b38:	2102      	movs	r1, #2
 8008b3a:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
 8008b3e:	f00a fa5b 	bl	8012ff8 <xEventGroupSetBits>
 8008b42:	bd10      	pop	{r4, pc}
	configASSERT( ( xEventGroupGetBits( pxIOManager->xEventGroup ) & FF_DIR_LOCK_EVENT_BITS ) == 0 );
 8008b44:	21a9      	movs	r1, #169	; 0xa9
 8008b46:	4802      	ldr	r0, [pc, #8]	; (8008b50 <FF_UnlockDirectory+0x2c>)
 8008b48:	f00e fbaa 	bl	80172a0 <vAssertCalled>
 8008b4c:	e7f4      	b.n	8008b38 <FF_UnlockDirectory+0x14>
 8008b4e:	bf00      	nop
 8008b50:	080192e4 	.word	0x080192e4

08008b54 <FF_Has_Lock>:
}
/*-----------------------------------------------------------*/

int FF_Has_Lock( FF_IOManager_t *pxIOManager, uint32_t aBits )
{
 8008b54:	b538      	push	{r3, r4, r5, lr}
 8008b56:	4605      	mov	r5, r0
 8008b58:	460c      	mov	r4, r1
int iReturn;

	void *handle = xTaskGetCurrentTaskHandle();
 8008b5a:	f00c f90b 	bl	8014d74 <xTaskGetCurrentTaskHandle>
	if( ( aBits & FF_FAT_LOCK_EVENT_BITS ) != 0 )
 8008b5e:	f014 0f01 	tst.w	r4, #1
 8008b62:	d007      	beq.n	8008b74 <FF_Has_Lock+0x20>
	{
		if( ( pxIOManager->pvFATLockHandle != NULL ) && ( pxIOManager->pvFATLockHandle == handle ) )
 8008b64:	f8d5 36b8 	ldr.w	r3, [r5, #1720]	; 0x6b8
 8008b68:	b133      	cbz	r3, 8008b78 <FF_Has_Lock+0x24>
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	bf14      	ite	ne
 8008b6e:	2000      	movne	r0, #0
 8008b70:	2001      	moveq	r0, #1
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
			iReturn = pdFALSE;
		}
	}
	else
	{
		iReturn = pdFALSE;
 8008b74:	2000      	movs	r0, #0
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
			iReturn = pdFALSE;
 8008b78:	2000      	movs	r0, #0
	}
	return iReturn;
}
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}

08008b7c <FF_Assert_Lock>:

void FF_Assert_Lock( FF_IOManager_t *pxIOManager, uint32_t aBits )
{
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	460c      	mov	r4, r1
	void *handle = xTaskGetCurrentTaskHandle();
 8008b82:	f00c f8f7 	bl	8014d74 <xTaskGetCurrentTaskHandle>

	if( ( aBits & FF_FAT_LOCK_EVENT_BITS ) != 0 )
 8008b86:	f014 0f01 	tst.w	r4, #1
 8008b8a:	d008      	beq.n	8008b9e <FF_Assert_Lock+0x22>
	{
		configASSERT( pxIOManager->pvFATLockHandle && pxIOManager->pvFATLockHandle == handle );
 8008b8c:	f8d5 36b8 	ldr.w	r3, [r5, #1720]	; 0x6b8
 8008b90:	b10b      	cbz	r3, 8008b96 <FF_Assert_Lock+0x1a>
 8008b92:	4298      	cmp	r0, r3
 8008b94:	d003      	beq.n	8008b9e <FF_Assert_Lock+0x22>
 8008b96:	21cb      	movs	r1, #203	; 0xcb
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <FF_Assert_Lock+0x24>)
 8008b9a:	f00e fb81 	bl	80172a0 <vAssertCalled>
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	080192e4 	.word	0x080192e4

08008ba4 <FF_LockFAT>:
		( void ) handle;
	}
}

void FF_LockFAT( FF_IOManager_t *pxIOManager )
{
 8008ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	4604      	mov	r4, r0
EventBits_t xBits;

	configASSERT( FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE );
 8008baa:	2101      	movs	r1, #1
 8008bac:	f7ff ffd2 	bl	8008b54 <FF_Has_Lock>
 8008bb0:	b9c8      	cbnz	r0, 8008be6 <FF_LockFAT+0x42>

	for( ;; )
	{
		/* Called when a task want to make changes to the FAT area.
		First it waits for the desired bit to come high. */
		xEventGroupWaitBits( pxIOManager->xEventGroup,
 8008bb2:	f242 7710 	movw	r7, #10000	; 0x2710
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	2501      	movs	r5, #1
 8008bba:	9700      	str	r7, [sp, #0]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
 8008bc6:	f00a f973 	bl	8012eb0 <xEventGroupWaitBits>
			pdFALSE,                /* xWaitForAllBits n.a. */
			pdMS_TO_TICKS( 10000UL ) );

		/* The next operation will only succeed for 1 task at a time,
		because it is an atomary test & set operation: */
		xBits = xEventGroupClearBits( pxIOManager->xEventGroup, FF_FAT_LOCK_EVENT_BITS );
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
 8008bd0:	f00a f9f2 	bl	8012fb8 <xEventGroupClearBits>

		if( ( xBits & FF_FAT_LOCK_EVENT_BITS ) != 0 )
 8008bd4:	f010 0f01 	tst.w	r0, #1
 8008bd8:	d0ef      	beq.n	8008bba <FF_LockFAT+0x16>
		{
			/* This task has cleared the desired bit.
			It now 'owns' the resource. */
			pxIOManager->pvFATLockHandle = xTaskGetCurrentTaskHandle();
 8008bda:	f00c f8cb 	bl	8014d74 <xTaskGetCurrentTaskHandle>
 8008bde:	f8c4 06b8 	str.w	r0, [r4, #1720]	; 0x6b8
			break;
		}
	}
}
 8008be2:	b003      	add	sp, #12
 8008be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( FF_Has_Lock( pxIOManager, FF_FAT_LOCK ) == pdFALSE );
 8008be6:	21d7      	movs	r1, #215	; 0xd7
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <FF_LockFAT+0x4c>)
 8008bea:	f00e fb59 	bl	80172a0 <vAssertCalled>
 8008bee:	e7e0      	b.n	8008bb2 <FF_LockFAT+0xe>
 8008bf0:	080192e4 	.word	0x080192e4

08008bf4 <FF_UnlockFAT>:
/*-----------------------------------------------------------*/

void FF_UnlockFAT( FF_IOManager_t *pxIOManager )
{
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
	configASSERT( ( xEventGroupGetBits( pxIOManager->xEventGroup ) & FF_FAT_LOCK_EVENT_BITS ) == 0 );
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
 8008bfe:	f00a f9db 	bl	8012fb8 <xEventGroupClearBits>
 8008c02:	f010 0f01 	tst.w	r0, #1
 8008c06:	d108      	bne.n	8008c1a <FF_UnlockFAT+0x26>
	pxIOManager->pvFATLockHandle = NULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f8c4 36b8 	str.w	r3, [r4, #1720]	; 0x6b8
	xEventGroupSetBits( pxIOManager->xEventGroup, FF_FAT_LOCK_EVENT_BITS );
 8008c0e:	2101      	movs	r1, #1
 8008c10:	f8d4 06a8 	ldr.w	r0, [r4, #1704]	; 0x6a8
 8008c14:	f00a f9f0 	bl	8012ff8 <xEventGroupSetBits>
 8008c18:	bd10      	pop	{r4, pc}
	configASSERT( ( xEventGroupGetBits( pxIOManager->xEventGroup ) & FF_FAT_LOCK_EVENT_BITS ) == 0 );
 8008c1a:	21f4      	movs	r1, #244	; 0xf4
 8008c1c:	4801      	ldr	r0, [pc, #4]	; (8008c24 <FF_UnlockFAT+0x30>)
 8008c1e:	f00e fb3f 	bl	80172a0 <vAssertCalled>
 8008c22:	e7f1      	b.n	8008c08 <FF_UnlockFAT+0x14>
 8008c24:	080192e4 	.word	0x080192e4

08008c28 <FF_BufferWait>:
}
/*-----------------------------------------------------------*/

BaseType_t FF_BufferWait( FF_IOManager_t *pxIOManager, uint32_t xWaitMS )
{
 8008c28:	b500      	push	{lr}
 8008c2a:	b083      	sub	sp, #12
EventBits_t xBits;
BaseType_t xReturn;

	/* This function is called when a task is waiting for a sector buffer
	to become available. */
	xBits = xEventGroupWaitBits( pxIOManager->xEventGroup,
 8008c2c:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
		FF_BUF_LOCK_EVENT_BITS, /* uxBitsToWaitFor */
		FF_BUF_LOCK_EVENT_BITS, /* xClearOnExit */
		pdFALSE,                /* xWaitForAllBits n.a. */
		pdMS_TO_TICKS( xWaitMS ) );
 8008c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c34:	fb03 f101 	mul.w	r1, r3, r1
	xBits = xEventGroupWaitBits( pxIOManager->xEventGroup,
 8008c38:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <FF_BufferWait+0x30>)
 8008c3a:	fba3 3101 	umull	r3, r1, r3, r1
 8008c3e:	0989      	lsrs	r1, r1, #6
 8008c40:	9100      	str	r1, [sp, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	2204      	movs	r2, #4
 8008c46:	4611      	mov	r1, r2
 8008c48:	f00a f932 	bl	8012eb0 <xEventGroupWaitBits>
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 8008c4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008c50:	b003      	add	sp, #12
 8008c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c56:	bf00      	nop
 8008c58:	10624dd3 	.word	0x10624dd3

08008c5c <FF_BufferProceed>:
/*-----------------------------------------------------------*/

void FF_BufferProceed( FF_IOManager_t *pxIOManager )
{
 8008c5c:	b508      	push	{r3, lr}
	/* Wake-up all tasks that are waiting for a sector buffer to become available. */
	xEventGroupSetBits( pxIOManager->xEventGroup, FF_BUF_LOCK_EVENT_BITS );
 8008c5e:	2104      	movs	r1, #4
 8008c60:	f8d0 06a8 	ldr.w	r0, [r0, #1704]	; 0x6a8
 8008c64:	f00a f9c8 	bl	8012ff8 <xEventGroupSetBits>
 8008c68:	bd08      	pop	{r3, pc}

08008c6a <pxFindCWD>:
/*-----------------------------------------------------------*/

#if( ffconfigHAS_CWD == 1 )

	static WorkingDirectory_t *pxFindCWD( void )
	{
 8008c6a:	b510      	push	{r4, lr}
	WorkingDirectory_t *pxReturn;

		/* Obtain the CWD used by the current task. */
		pxReturn = ( WorkingDirectory_t * ) pvTaskGetThreadLocalStoragePointer( NULL, stdioCWD_THREAD_LOCAL_OFFSET );
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f00b ffa6 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>

		if( pxReturn == NULL )
 8008c74:	4604      	mov	r4, r0
 8008c76:	b108      	cbz	r0, 8008c7c <pxFindCWD+0x12>
				vTaskSetThreadLocalStoragePointer( NULL, stdioCWD_THREAD_LOCAL_OFFSET, ( void * ) pxReturn );
			}
		}

		return pxReturn;
	}
 8008c78:	4620      	mov	r0, r4
 8008c7a:	bd10      	pop	{r4, pc}
			pxReturn = ( WorkingDirectory_t * ) ffconfigMALLOC( sizeof( WorkingDirectory_t ) );
 8008c7c:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8008c80:	f00a fc42 	bl	8013508 <pvPortMalloc>
			if( pxReturn != NULL )
 8008c84:	4604      	mov	r4, r0
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d0f6      	beq.n	8008c78 <pxFindCWD+0xe>
				pxReturn->pcCWD[ 0 ] = '\0';
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	7020      	strb	r0, [r4, #0]
				vTaskSetThreadLocalStoragePointer( NULL, stdioCWD_THREAD_LOCAL_OFFSET, ( void * ) pxReturn );
 8008c8e:	4622      	mov	r2, r4
 8008c90:	2101      	movs	r1, #1
 8008c92:	f00b ff89 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
		return pxReturn;
 8008c96:	e7ef      	b.n	8008c78 <pxFindCWD+0xe>

08008c98 <prvABSPath>:
/*-----------------------------------------------------------*/

#if( ffconfigHAS_CWD == 1 )

	static const char *prvABSPath( const char *pcPath )
	{
 8008c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	4604      	mov	r4, r0
	char *pcReturn;
	WorkingDirectory_t *pxWorkingDirectory = pxFindCWD();
 8008c9e:	f7ff ffe4 	bl	8008c6a <pxFindCWD>

		configASSERT( pxWorkingDirectory );
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	b190      	cbz	r0, 8008ccc <prvABSPath+0x34>

		if( ( pcPath[ 0 ] ) == '/' )
 8008ca6:	7823      	ldrb	r3, [r4, #0]
 8008ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8008caa:	d015      	beq.n	8008cd8 <prvABSPath+0x40>
			pcReturn = pxWorkingDirectory->pcFileName;
		}
		else
		{
			/* Insert the working directory into the front of the path. */
			if( pxWorkingDirectory->pcCWD[ 1 ] == 0x00 )
 8008cac:	786b      	ldrb	r3, [r5, #1]
 8008cae:	b9db      	cbnz	r3, 8008ce8 <prvABSPath+0x50>
			{
				/* In the root, so don't add a '/' between the CWD and the
				file name. */
				snprintf( pxWorkingDirectory->pcFileName, sizeof( pxWorkingDirectory->pcFileName ), "/%s", pcPath );
 8008cb0:	4623      	mov	r3, r4
 8008cb2:	4a2f      	ldr	r2, [pc, #188]	; (8008d70 <prvABSPath+0xd8>)
 8008cb4:	21c1      	movs	r1, #193	; 0xc1
 8008cb6:	1868      	adds	r0, r5, r1
 8008cb8:	f00e f98f 	bl	8016fda <snprintf>
			else
			{
				snprintf( pxWorkingDirectory->pcFileName, sizeof( pxWorkingDirectory->pcFileName ), "%s/%s", pxWorkingDirectory->pcCWD, pcPath );
			}

			pcReturn = pxWorkingDirectory->pcFileName;
 8008cbc:	35c1      	adds	r5, #193	; 0xc1
		configASSERT( pcPath );
 8008cbe:	b1dd      	cbz	r5, 8008cf8 <prvABSPath+0x60>
			cPreviousChar = *pcChar;
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	2400      	movs	r4, #0
 8008cc4:	4621      	mov	r1, r4
						pcTokenStart[ xByte ] = 0x00;
 8008cc6:	4627      	mov	r7, r4
						pcTokenStart = NULL;
 8008cc8:	46a6      	mov	lr, r4
 8008cca:	e022      	b.n	8008d12 <prvABSPath+0x7a>
		configASSERT( pxWorkingDirectory );
 8008ccc:	f240 71be 	movw	r1, #1982	; 0x7be
 8008cd0:	4828      	ldr	r0, [pc, #160]	; (8008d74 <prvABSPath+0xdc>)
 8008cd2:	f00e fae5 	bl	80172a0 <vAssertCalled>
 8008cd6:	e7e6      	b.n	8008ca6 <prvABSPath+0xe>
			snprintf( pxWorkingDirectory->pcFileName, sizeof( pxWorkingDirectory->pcFileName ), "%s", pcPath );
 8008cd8:	35c1      	adds	r5, #193	; 0xc1
 8008cda:	4623      	mov	r3, r4
 8008cdc:	4a26      	ldr	r2, [pc, #152]	; (8008d78 <prvABSPath+0xe0>)
 8008cde:	21c1      	movs	r1, #193	; 0xc1
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f00e f97a 	bl	8016fda <snprintf>
 8008ce6:	e7ea      	b.n	8008cbe <prvABSPath+0x26>
				snprintf( pxWorkingDirectory->pcFileName, sizeof( pxWorkingDirectory->pcFileName ), "%s/%s", pxWorkingDirectory->pcCWD, pcPath );
 8008ce8:	9400      	str	r4, [sp, #0]
 8008cea:	462b      	mov	r3, r5
 8008cec:	4a23      	ldr	r2, [pc, #140]	; (8008d7c <prvABSPath+0xe4>)
 8008cee:	21c1      	movs	r1, #193	; 0xc1
 8008cf0:	1868      	adds	r0, r5, r1
 8008cf2:	f00e f972 	bl	8016fda <snprintf>
 8008cf6:	e7e1      	b.n	8008cbc <prvABSPath+0x24>
		configASSERT( pcPath );
 8008cf8:	f240 716e 	movw	r1, #1902	; 0x76e
 8008cfc:	481d      	ldr	r0, [pc, #116]	; (8008d74 <prvABSPath+0xdc>)
 8008cfe:	f00e facf 	bl	80172a0 <vAssertCalled>
 8008d02:	e7dd      	b.n	8008cc0 <prvABSPath+0x28>
						while( pcFollowingToken[ xByte ] != 0x00 )
 8008d04:	463e      	mov	r6, r7
 8008d06:	e01f      	b.n	8008d48 <prvABSPath+0xb0>
			if( cPreviousChar == '/' )
 8008d08:	2c2f      	cmp	r4, #47	; 0x2f
 8008d0a:	bf08      	it	eq
 8008d0c:	4619      	moveq	r1, r3
			pcChar++;
 8008d0e:	3301      	adds	r3, #1
			cPreviousChar = *pcChar;
 8008d10:	4614      	mov	r4, r2
		while( *pcChar != 0x00 )
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	b1ea      	cbz	r2, 8008d52 <prvABSPath+0xba>
			if( *pcChar == '.' )
 8008d16:	2a2e      	cmp	r2, #46	; 0x2e
 8008d18:	d1f6      	bne.n	8008d08 <prvABSPath+0x70>
				if( *( pcChar + 1 ) == '.' )
 8008d1a:	7858      	ldrb	r0, [r3, #1]
 8008d1c:	282e      	cmp	r0, #46	; 0x2e
 8008d1e:	d1f3      	bne.n	8008d08 <prvABSPath+0x70>
					if( pcTokenStart != NULL )
 8008d20:	2900      	cmp	r1, #0
 8008d22:	d0f1      	beq.n	8008d08 <prvABSPath+0x70>
						if( *pcFollowingToken == '/' )
 8008d24:	789a      	ldrb	r2, [r3, #2]
 8008d26:	2a2f      	cmp	r2, #47	; 0x2f
						pcFollowingToken = pcChar + 2;
 8008d28:	bf14      	ite	ne
 8008d2a:	3302      	addne	r3, #2
							pcFollowingToken += sizeof( char );
 8008d2c:	3303      	addeq	r3, #3
						while( pcFollowingToken[ xByte ] != 0x00 )
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d0e7      	beq.n	8008d04 <prvABSPath+0x6c>
 8008d34:	1e4c      	subs	r4, r1, #1
 8008d36:	2000      	movs	r0, #0
							pcTokenStart[ xByte ] = pcFollowingToken[ xByte ];
 8008d38:	f804 2f01 	strb.w	r2, [r4, #1]!
							xByte++;
 8008d3c:	3001      	adds	r0, #1
						while( pcFollowingToken[ xByte ] != 0x00 )
 8008d3e:	4606      	mov	r6, r0
 8008d40:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008d44:	2a00      	cmp	r2, #0
 8008d46:	d1f7      	bne.n	8008d38 <prvABSPath+0xa0>
						pcTokenStart[ xByte ] = 0x00;
 8008d48:	558f      	strb	r7, [r1, r6]
						pcChar = ( char * ) pcReturn;
 8008d4a:	462b      	mov	r3, r5
						cPreviousChar = 0x00;
 8008d4c:	4639      	mov	r1, r7
						pcTokenStart = NULL;
 8008d4e:	4674      	mov	r4, lr
 8008d50:	e7df      	b.n	8008d12 <prvABSPath+0x7a>
		if( *( pcChar - 1 ) == '/' )
 8008d52:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8008d56:	2a2f      	cmp	r2, #47	; 0x2f
 8008d58:	d002      	beq.n	8008d60 <prvABSPath+0xc8>

		/* Make any adjustments necessitated by relative paths. */
		prvProcessRelativePaths( pcReturn );

		return pcReturn;
	}
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	b003      	add	sp, #12
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( ( pcChar - 1 ) != pcReturn )
 8008d60:	1e5a      	subs	r2, r3, #1
 8008d62:	4295      	cmp	r5, r2
				*( pcChar - 1 ) = 0x00;
 8008d64:	bf1c      	itt	ne
 8008d66:	2200      	movne	r2, #0
 8008d68:	f803 2c01 	strbne.w	r2, [r3, #-1]
 8008d6c:	e7f5      	b.n	8008d5a <prvABSPath+0xc2>
 8008d6e:	bf00      	nop
 8008d70:	080193e4 	.word	0x080193e4
 8008d74:	080193b4 	.word	0x080193b4
 8008d78:	0801b620 	.word	0x0801b620
 8008d7c:	080193e8 	.word	0x080193e8

08008d80 <prvFFErrorToErrno>:
{
 8008d80:	b510      	push	{r4, lr}
	if( FF_isERR( xError ) == pdFALSE )
 8008d82:	1e04      	subs	r4, r0, #0
 8008d84:	db01      	blt.n	8008d8a <prvFFErrorToErrno+0xa>
		return 0;
 8008d86:	2000      	movs	r0, #0
 8008d88:	bd10      	pop	{r4, pc}
/*
 * Store the FreeRTOS+FAT error code, which provides more detail than errno.
 */
static portINLINE void stdioSET_FF_ERROR( FF_Error_t iFF_ERROR )
{
	vTaskSetThreadLocalStoragePointer( NULL, stdioFF_ERROR_THREAD_LOCAL_OFFSET, ( void * ) ( iFF_ERROR ) );
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f00b ff0a 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
	switch( FF_GETERROR( xError ) )
 8008d94:	b2a0      	uxth	r0, r4
 8008d96:	2867      	cmp	r0, #103	; 0x67
 8008d98:	f200 8096 	bhi.w	8008ec8 <prvFFErrorToErrno+0x148>
 8008d9c:	e8df f000 	tbb	[pc, r0]
 8008da0:	36349496 	.word	0x36349496
 8008da4:	94949438 	.word	0x94949438
 8008da8:	3e3c3a5a 	.word	0x3e3c3a5a
 8008dac:	46444240 	.word	0x46444240
 8008db0:	4e4c4a48 	.word	0x4e4c4a48
 8008db4:	56545250 	.word	0x56545250
 8008db8:	94949458 	.word	0x94949458
 8008dbc:	5e5c9494 	.word	0x5e5c9494
 8008dc0:	66646260 	.word	0x66646260
 8008dc4:	6e6c6a68 	.word	0x6e6c6a68
 8008dc8:	74347270 	.word	0x74347270
 8008dcc:	94767894 	.word	0x94767894
 8008dd0:	7c7a9494 	.word	0x7c7a9494
 8008dd4:	9482807e 	.word	0x9482807e
 8008dd8:	94888684 	.word	0x94888684
 8008ddc:	94949494 	.word	0x94949494
 8008de0:	94949494 	.word	0x94949494
 8008de4:	948a9494 	.word	0x948a9494
 8008de8:	94949494 	.word	0x94949494
 8008dec:	94949494 	.word	0x94949494
 8008df0:	94949494 	.word	0x94949494
 8008df4:	94949494 	.word	0x94949494
 8008df8:	94949494 	.word	0x94949494
 8008dfc:	94949494 	.word	0x94949494
 8008e00:	94949494 	.word	0x94949494
 8008e04:	92908e8c 	.word	0x92908e8c
	case FF_ERR_NULL_POINTER:					return pdFREERTOS_ERRNO_EBADF;		/* pxIOManager was NULL. */
 8008e08:	2009      	movs	r0, #9
 8008e0a:	bd10      	pop	{r4, pc}
	case FF_ERR_NOT_ENOUGH_MEMORY:				return pdFREERTOS_ERRNO_ENOMEM;		/* malloc() failed! - Could not allocate handle memory. */
 8008e0c:	200c      	movs	r0, #12
 8008e0e:	bd10      	pop	{r4, pc}
	case FF_ERR_DEVICE_DRIVER_FAILED:			return pdFREERTOS_ERRNO_EIO;		/* The Block Device driver reported a FATAL error, cannot continue. */
 8008e10:	2005      	movs	r0, #5
 8008e12:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_DRIVER_BUSY:				return pdFREERTOS_ERRNO_EBUSY;		/* 10. */
 8008e14:	2010      	movs	r0, #16
 8008e16:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_DRIVER_FATAL_ERROR:		return pdFREERTOS_ERRNO_EUNATCH;	/* Protocol driver not attached. */
 8008e18:	202a      	movs	r0, #42	; 0x2a
 8008e1a:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_BAD_BLKSIZE:				return pdFREERTOS_ERRNO_EINVAL;		/* The provided blocksize was not a multiple of 512. */
 8008e1c:	2016      	movs	r0, #22
 8008e1e:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_BAD_MEMSIZE:				return pdFREERTOS_ERRNO_EINVAL;		/* The memory size was not a multiple of the blocksize. */
 8008e20:	2016      	movs	r0, #22
 8008e22:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_DEV_ALREADY_REGD:			return pdFREERTOS_ERRNO_EADDRINUSE;	/* Device was already registered. Use FF_UnRegister() to re-use this IOMAN with another device. */
 8008e24:	2070      	movs	r0, #112	; 0x70
 8008e26:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_NO_MOUNTABLE_PARTITION:	return pdFREERTOS_ERRNO_ENOMEDIUM;	/* A mountable partition could not be found on the device. */
 8008e28:	2087      	movs	r0, #135	; 0x87
 8008e2a:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_INVALID_FORMAT:			return pdFREERTOS_ERRNO_EFTYPE;		/* The. */
 8008e2c:	204f      	movs	r0, #79	; 0x4f
 8008e2e:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_INVALID_PARTITION_NUM:	return pdFREERTOS_ERRNO_EINVAL;		/* The partition number provided was out of range. */
 8008e30:	2016      	movs	r0, #22
 8008e32:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_NOT_FAT_FORMATTED:		return pdFREERTOS_ERRNO_EFTYPE;		/* The partition did not look like a FAT partition. */
 8008e34:	204f      	movs	r0, #79	; 0x4f
 8008e36:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_DEV_INVALID_BLKSIZE:		return pdFREERTOS_ERRNO_EINVAL;		/* IOMAN object BlkSize is not compatible with the blocksize of this device driver. */
 8008e38:	2016      	movs	r0, #22
 8008e3a:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_PARTITION_MOUNTED:		return pdFREERTOS_ERRNO_EADDRINUSE;	/* Device is in use by an actively mounted partition. Unmount the partition first. */
 8008e3c:	2070      	movs	r0, #112	; 0x70
 8008e3e:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_ACTIVE_HANDLES:			return pdFREERTOS_ERRNO_EBUSY;		/* The partition cannot be unmounted until all active file handles are closed. (There may also be active handles on the cache). */
 8008e40:	2010      	movs	r0, #16
 8008e42:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_GPT_HEADER_CORRUPT:		return pdFREERTOS_ERRNO_EBADE;		/* The GPT partition table appears to be corrupt, refusing to mount. */
 8008e44:	2032      	movs	r0, #50	; 0x32
 8008e46:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_NOT_ENOUGH_FREE_SPACE:	return pdFREERTOS_ERRNO_ENOSPC;		/* 22. */
 8008e48:	201c      	movs	r0, #28
 8008e4a:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_OUT_OF_BOUNDS_READ:		return pdFREERTOS_ERRNO_ESPIPE;		/* 23, return 'Illegal seek'. */
 8008e4c:	201d      	movs	r0, #29
 8008e4e:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_OUT_OF_BOUNDS_WRITE:		return pdFREERTOS_ERRNO_ESPIPE;		/* 24. */
 8008e50:	201d      	movs	r0, #29
 8008e52:	bd10      	pop	{r4, pc}
	case FF_ERR_IOMAN_DRIVER_NOMEDIUM:			return pdFREERTOS_ERRNO_ENOMEDIUM;	/* The medium (e.g. SD-card) has been extracted. */
 8008e54:	2087      	movs	r0, #135	; 0x87
 8008e56:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_ALREADY_OPEN:				return pdFREERTOS_ERRNO_EALREADY;	/* File is in use. */
 8008e58:	2078      	movs	r0, #120	; 0x78
 8008e5a:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_NOT_FOUND:					return pdFREERTOS_ERRNO_ENOENT;		/* File was not found. */
 8008e5c:	2002      	movs	r0, #2
 8008e5e:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_OBJECT_IS_A_DIR:			return pdFREERTOS_ERRNO_EISDIR;		/* Tried to FF_Open() a Directory. */
 8008e60:	2015      	movs	r0, #21
 8008e62:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_IS_READ_ONLY:				return pdFREERTOS_ERRNO_EROFS;		/* Tried to FF_Open() a file marked read only. */
 8008e64:	201e      	movs	r0, #30
 8008e66:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_INVALID_PATH:				return pdFREERTOS_ERRNO_ENOTDIR;	/* The path of the file was not found. */
 8008e68:	2014      	movs	r0, #20
 8008e6a:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_NOT_OPENED_IN_WRITE_MODE:	return pdFREERTOS_ERRNO_EACCES;		/* 35. */
 8008e6c:	200d      	movs	r0, #13
 8008e6e:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_NOT_OPENED_IN_READ_MODE:	return pdFREERTOS_ERRNO_EACCES;		/* 36. */
 8008e70:	200d      	movs	r0, #13
 8008e72:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_EXTEND_FAILED:				return pdFREERTOS_ERRNO_ENOSPC;		/* Could not extend the file. */
 8008e74:	201c      	movs	r0, #28
 8008e76:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_DESTINATION_EXISTS:		return pdFREERTOS_ERRNO_EEXIST;		/* 38. */
 8008e78:	2011      	movs	r0, #17
 8008e7a:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_SOURCE_NOT_FOUND:			return pdFREERTOS_ERRNO_ENOENT;		/* 39. */
 8008e7c:	2002      	movs	r0, #2
 8008e7e:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_DIR_NOT_FOUND:				return pdFREERTOS_ERRNO_ENOENT;		/* 40. */
 8008e80:	2002      	movs	r0, #2
 8008e82:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_COULD_NOT_CREATE_DIRENT:	return pdFREERTOS_ERRNO_EIO;		/* 41. */
 8008e84:	2005      	movs	r0, #5
 8008e86:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_MEDIA_REMOVED:				return pdFREERTOS_ERRNO_ENODEV;		/* File handle got invalid because media was removed. */
 8008e88:	2013      	movs	r0, #19
 8008e8a:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_SEEK_INVALID_POSITION:		return pdFREERTOS_ERRNO_ESPIPE;		/* Illegal position, outside the file's space */
 8008e8c:	201d      	movs	r0, #29
 8008e8e:	bd10      	pop	{r4, pc}
	case FF_ERR_FILE_SEEK_INVALID_ORIGIN:		return pdFREERTOS_ERRNO_EINVAL;		/* Seeking beyond end of file. */
 8008e90:	2016      	movs	r0, #22
 8008e92:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_OBJECT_EXISTS:				return pdFREERTOS_ERRNO_EEXIST;		/* A file or folder of the same name already exists in the current directory. */
 8008e94:	2011      	movs	r0, #17
 8008e96:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_DIRECTORY_FULL:				return pdFREERTOS_ERRNO_ENOSPC;		/* No more items could be added to the directory. */
 8008e98:	201c      	movs	r0, #28
 8008e9a:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_END_OF_DIR:					return pdFREERTOS_ERRNO_ENMFILE;	/*/. */
 8008e9c:	2059      	movs	r0, #89	; 0x59
 8008e9e:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_NOT_EMPTY:					return pdFREERTOS_ERRNO_ENOTEMPTY;	/* Cannot delete a directory that contains files or folders. */
 8008ea0:	205a      	movs	r0, #90	; 0x5a
 8008ea2:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_INVALID_PATH:				return pdFREERTOS_ERRNO_EINVAL;		/* Could not find the directory specified by the path. */
 8008ea4:	2016      	movs	r0, #22
 8008ea6:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_CANT_EXTEND_ROOT_DIR:		return pdFREERTOS_ERRNO_ENOSPC;		/* Can't extend the root dir. */
 8008ea8:	201c      	movs	r0, #28
 8008eaa:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_EXTEND_FAILED:				return pdFREERTOS_ERRNO_ENOSPC;		/* Not enough space to extend the directory. */
 8008eac:	201c      	movs	r0, #28
 8008eae:	bd10      	pop	{r4, pc}
	case FF_ERR_DIR_NAME_TOO_LONG:				return pdFREERTOS_ERRNO_ENAMETOOLONG;/* Name exceeds the number of allowed characters for a filename. */
 8008eb0:	205b      	movs	r0, #91	; 0x5b
 8008eb2:	bd10      	pop	{r4, pc}
	case FF_ERR_FAT_NO_FREE_CLUSTERS:			return pdFREERTOS_ERRNO_ENOSPC;		/* No more free space is available on the disk. */
 8008eb4:	201c      	movs	r0, #28
 8008eb6:	bd10      	pop	{r4, pc}
	case FF_ERR_UNICODE_INVALID_CODE:			return pdFREERTOS_ERRNO_EBADE;		/* An invalid Unicode character was provided!. */
 8008eb8:	2032      	movs	r0, #50	; 0x32
 8008eba:	bd10      	pop	{r4, pc}
	case FF_ERR_UNICODE_DEST_TOO_SMALL:			return pdFREERTOS_ERRNO_ENOBUFS;	/* Not enough space in the UTF-16 buffer to encode the entire sequence as UTF-16. */
 8008ebc:	2069      	movs	r0, #105	; 0x69
 8008ebe:	bd10      	pop	{r4, pc}
	case FF_ERR_UNICODE_INVALID_SEQUENCE:		return pdFREERTOS_ERRNO_EILSEQ;		/* An invalid UTF-16 sequence was encountered. */
 8008ec0:	208a      	movs	r0, #138	; 0x8a
 8008ec2:	bd10      	pop	{r4, pc}
	case FF_ERR_UNICODE_CONVERSION_EXCEEDED:	return pdFREERTOS_ERRNO_ENAMETOOLONG;/* Filename exceeds MAX long-filename length when converted to UTF-16. */
 8008ec4:	205b      	movs	r0, #91	; 0x5b
 8008ec6:	bd10      	pop	{r4, pc}
	return pdFREERTOS_ERRNO_EFAULT;
 8008ec8:	200e      	movs	r0, #14
 8008eca:	bd10      	pop	{r4, pc}
	case FF_ERR_NONE:							return 0;			/* No Error. */
 8008ecc:	2000      	movs	r0, #0
}
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <prvFileTime>:
#endif /* ffconfigHAS_CWD */

#if( ffconfigTIME_SUPPORT == 1 )

	static uint32_t prvFileTime( FF_SystemTime_t *pxTime )
	{
 8008ed0:	b500      	push	{lr}
 8008ed2:	b08b      	sub	sp, #44	; 0x2c
	FF_TimeStruct_t xTime;
	time_t xReturn;

		xTime.tm_sec = pxTime->Second;
 8008ed4:	8943      	ldrh	r3, [r0, #10]
 8008ed6:	9301      	str	r3, [sp, #4]
		xTime.tm_min = pxTime->Minute;
 8008ed8:	8903      	ldrh	r3, [r0, #8]
 8008eda:	9302      	str	r3, [sp, #8]
		xTime.tm_hour = pxTime->Hour;
 8008edc:	88c3      	ldrh	r3, [r0, #6]
 8008ede:	9303      	str	r3, [sp, #12]
		xTime.tm_mday = pxTime->Day;
 8008ee0:	8883      	ldrh	r3, [r0, #4]
 8008ee2:	9304      	str	r3, [sp, #16]
		xTime.tm_mon = pxTime->Month - 1;
 8008ee4:	8843      	ldrh	r3, [r0, #2]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	9305      	str	r3, [sp, #20]
		xTime.tm_year = pxTime->Year - 1900;
 8008eea:	8803      	ldrh	r3, [r0, #0]
 8008eec:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8008ef0:	9306      	str	r3, [sp, #24]

		xReturn = FreeRTOS_mktime( &xTime );
 8008ef2:	a801      	add	r0, sp, #4
 8008ef4:	f000 ff16 	bl	8009d24 <FreeRTOS_mktime>

		return xReturn;
	}
 8008ef8:	b00b      	add	sp, #44	; 0x2c
 8008efa:	f85d fb04 	ldr.w	pc, [sp], #4

08008efe <ff_fopen>:
{
 8008efe:	b510      	push	{r4, lr}
 8008f00:	b086      	sub	sp, #24
 8008f02:	460c      	mov	r4, r1
	pcFile = prvABSPath( pcFile );
 8008f04:	f7ff fec8 	bl	8008c98 <prvABSPath>
	if( FF_FS_Find( pcFile, &xHandler ) == pdFALSE )
 8008f08:	a902      	add	r1, sp, #8
 8008f0a:	f000 fdd3 	bl	8009ab4 <FF_FS_Find>
 8008f0e:	b1a0      	cbz	r0, 8008f3a <ff_fopen+0x3c>
		ucMode = FF_GetModeBits( pcMode );
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7fd fbcb 	bl	80066ac <FF_GetModeBits>
		pxStream = FF_Open( xHandler.pxManager, xHandler.pcPath, ucMode, &xError );
 8008f16:	ab01      	add	r3, sp, #4
 8008f18:	4602      	mov	r2, r0
 8008f1a:	9903      	ldr	r1, [sp, #12]
 8008f1c:	9804      	ldr	r0, [sp, #16]
 8008f1e:	f7fd fc83 	bl	8006828 <FF_Open>
 8008f22:	4604      	mov	r4, r0
		stdioSET_ERRNO( prvFFErrorToErrno( xError ) );
 8008f24:	9801      	ldr	r0, [sp, #4]
 8008f26:	f7ff ff2b 	bl	8008d80 <prvFFErrorToErrno>
	vTaskSetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX, ( void * ) ( iErrno ) );
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4608      	mov	r0, r1
 8008f30:	f00b fe3a 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8008f34:	4620      	mov	r0, r4
 8008f36:	b006      	add	sp, #24
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	f00b fe32 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
FF_FILE *pxStream = NULL;
 8008f44:	2400      	movs	r4, #0
 8008f46:	e7f5      	b.n	8008f34 <ff_fopen+0x36>

08008f48 <ff_fclose>:
{
 8008f48:	b510      	push	{r4, lr}
	xError = FF_Close( pxStream );
 8008f4a:	f7fe f9c7 	bl	80072dc <FF_Close>
	ff_errno = prvFFErrorToErrno( xError );
 8008f4e:	f7ff ff17 	bl	8008d80 <prvFFErrorToErrno>
 8008f52:	4604      	mov	r4, r0
 8008f54:	4602      	mov	r2, r0
 8008f56:	2100      	movs	r1, #0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	f00b fe25 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
	if( ff_errno == 0 )
 8008f5e:	1c20      	adds	r0, r4, #0
 8008f60:	bf18      	it	ne
 8008f62:	2001      	movne	r0, #1
}
 8008f64:	4240      	negs	r0, r0
 8008f66:	bd10      	pop	{r4, pc}

08008f68 <ff_fseek>:
{
 8008f68:	b510      	push	{r4, lr}
		xError = FF_Seek( pxStream, lOffset, iWhence );
 8008f6a:	f7fd ffbd 	bl	8006ee8 <FF_Seek>
 8008f6e:	4604      	mov	r4, r0
	ff_errno = prvFFErrorToErrno( xError );
 8008f70:	f7ff ff06 	bl	8008d80 <prvFFErrorToErrno>
	if( ff_errno == 0 )
 8008f74:	4602      	mov	r2, r0
 8008f76:	b168      	cbz	r0, 8008f94 <ff_fseek+0x2c>
		if( xError == FF_ERR_FILE_SEEK_INVALID_POSITION )
 8008f78:	2c2e      	cmp	r4, #46	; 0x2e
 8008f7a:	d00d      	beq.n	8008f98 <ff_fseek+0x30>
			ff_errno = pdFREERTOS_ERRNO_EINVAL;
 8008f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f7e:	bf14      	ite	ne
 8008f80:	4602      	movne	r2, r0
 8008f82:	2216      	moveq	r2, #22
 8008f84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	f00b fe0c 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8008f90:	4620      	mov	r0, r4
 8008f92:	bd10      	pop	{r4, pc}
		iReturn = 0;
 8008f94:	4604      	mov	r4, r0
 8008f96:	e7f7      	b.n	8008f88 <ff_fseek+0x20>
			ff_errno = pdFREERTOS_ERRNO_ESPIPE;
 8008f98:	221d      	movs	r2, #29
		iReturn = -1;
 8008f9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f9e:	e7f3      	b.n	8008f88 <ff_fseek+0x20>

08008fa0 <ff_fread>:
{
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	461c      	mov	r4, r3
		iReturned = FF_Read( pxStream, xSize, xItems, (uint8_t *)pvBuffer );
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7fd fe2e 	bl	8006c08 <FF_Read>
 8008fac:	4604      	mov	r4, r0
	ff_errno = prvFFErrorToErrno( iReturned );
 8008fae:	f7ff fee7 	bl	8008d80 <prvFFErrorToErrno>
	if( ff_errno == pdFREERTOS_ERRNO_NONE )
 8008fb2:	1e02      	subs	r2, r0, #0
 8008fb4:	bf18      	it	ne
 8008fb6:	2400      	movne	r4, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4608      	mov	r0, r1
 8008fbc:	f00b fdf4 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <ff_fwrite>:
{
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	461c      	mov	r4, r3
		iReturned = FF_Write( pxStream, xSize, xItems, (uint8_t *)pvBuffer );
 8008fc8:	4603      	mov	r3, r0
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7fe f810 	bl	8006ff0 <FF_Write>
 8008fd0:	4604      	mov	r4, r0
	ff_errno = prvFFErrorToErrno( iReturned );
 8008fd2:	f7ff fed5 	bl	8008d80 <prvFFErrorToErrno>
	if( ff_errno == pdFREERTOS_ERRNO_NONE )
 8008fd6:	1e02      	subs	r2, r0, #0
 8008fd8:	bf18      	it	ne
 8008fda:	2400      	movne	r4, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	f00b fde2 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	bd10      	pop	{r4, pc}

08008fe8 <ff_fgetc>:
{
 8008fe8:	b510      	push	{r4, lr}
	iResult = FF_GetC( pxStream );
 8008fea:	f7fd fd7b 	bl	8006ae4 <FF_GetC>
 8008fee:	4604      	mov	r4, r0
	ff_errno = prvFFErrorToErrno( iResult );
 8008ff0:	f7ff fec6 	bl	8008d80 <prvFFErrorToErrno>
	if( ff_errno != 0 )
 8008ff4:	1e02      	subs	r2, r0, #0
		iResult = FF_EOF;
 8008ff6:	bf18      	it	ne
 8008ff8:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4608      	mov	r0, r1
 8009000:	f00b fdd2 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8009004:	4620      	mov	r0, r4
 8009006:	bd10      	pop	{r4, pc}

08009008 <ff_fputc>:
{
 8009008:	b510      	push	{r4, lr}
 800900a:	460b      	mov	r3, r1
	iResult = FF_PutC( pxStream, ( uint8_t ) iChar );
 800900c:	b2c1      	uxtb	r1, r0
 800900e:	4618      	mov	r0, r3
 8009010:	f7fd ff9e 	bl	8006f50 <FF_PutC>
 8009014:	4604      	mov	r4, r0
	ff_errno = prvFFErrorToErrno( iResult );
 8009016:	f7ff feb3 	bl	8008d80 <prvFFErrorToErrno>
	if( ff_errno != 0 )
 800901a:	1e02      	subs	r2, r0, #0
		iResult = FF_EOF;
 800901c:	bf18      	it	ne
 800901e:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8009022:	2100      	movs	r1, #0
 8009024:	4608      	mov	r0, r1
 8009026:	f00b fdbf 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 800902a:	4620      	mov	r0, r4
 800902c:	bd10      	pop	{r4, pc}

0800902e <ff_mkdir>:
	{
 800902e:	b510      	push	{r4, lr}
 8009030:	b084      	sub	sp, #16
		pcDirectory = prvABSPath( pcDirectory );
 8009032:	f7ff fe31 	bl	8008c98 <prvABSPath>
		if( FF_FS_Find( pcDirectory, &xHandler ) == pdFALSE )
 8009036:	4669      	mov	r1, sp
 8009038:	f000 fd3c 	bl	8009ab4 <FF_FS_Find>
 800903c:	b1a8      	cbz	r0, 800906a <ff_mkdir+0x3c>
			iResult = FF_MkDir( xHandler.pxManager, xHandler.pcPath );
 800903e:	9901      	ldr	r1, [sp, #4]
 8009040:	9802      	ldr	r0, [sp, #8]
 8009042:	f7fc fa0d 	bl	8005460 <FF_MkDir>
			if( FF_GETERROR( iResult ) == FF_ERR_DIR_OBJECT_EXISTS )
 8009046:	b283      	uxth	r3, r0
				iResult = FF_ERR_NONE;
 8009048:	2b32      	cmp	r3, #50	; 0x32
			ff_errno = prvFFErrorToErrno( iResult );
 800904a:	bf08      	it	eq
 800904c:	2000      	moveq	r0, #0
 800904e:	f7ff fe97 	bl	8008d80 <prvFFErrorToErrno>
 8009052:	4604      	mov	r4, r0
 8009054:	4602      	mov	r2, r0
 8009056:	2100      	movs	r1, #0
 8009058:	4608      	mov	r0, r1
 800905a:	f00b fda5 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
			if( ff_errno == pdFREERTOS_ERRNO_NONE )
 800905e:	1c20      	adds	r0, r4, #0
 8009060:	bf18      	it	ne
 8009062:	2001      	movne	r0, #1
 8009064:	4240      	negs	r0, r0
	}
 8009066:	b004      	add	sp, #16
 8009068:	bd10      	pop	{r4, pc}
 800906a:	2206      	movs	r2, #6
 800906c:	2100      	movs	r1, #0
 800906e:	4608      	mov	r0, r1
 8009070:	f00b fd9a 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
			iResult = -1;
 8009074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009078:	e7f5      	b.n	8009066 <ff_mkdir+0x38>

0800907a <ff_rmdir>:
{
 800907a:	b510      	push	{r4, lr}
 800907c:	b084      	sub	sp, #16
	pcDirectory = prvABSPath( pcDirectory );
 800907e:	f7ff fe0b 	bl	8008c98 <prvABSPath>
	if( FF_FS_Find( pcDirectory, &xHandler ) == pdFALSE )
 8009082:	4669      	mov	r1, sp
 8009084:	f000 fd16 	bl	8009ab4 <FF_FS_Find>
 8009088:	b188      	cbz	r0, 80090ae <ff_rmdir+0x34>
		lResult = FF_RmDir( xHandler.pxManager, xHandler.pcPath );
 800908a:	9901      	ldr	r1, [sp, #4]
 800908c:	9802      	ldr	r0, [sp, #8]
 800908e:	f7fe f9c7 	bl	8007420 <FF_RmDir>
		ff_errno = prvFFErrorToErrno( lResult );
 8009092:	f7ff fe75 	bl	8008d80 <prvFFErrorToErrno>
		if( ff_errno == 0 )
 8009096:	4602      	mov	r2, r0
 8009098:	3000      	adds	r0, #0
 800909a:	bf18      	it	ne
 800909c:	2001      	movne	r0, #1
 800909e:	4244      	negs	r4, r0
 80090a0:	2100      	movs	r1, #0
 80090a2:	4608      	mov	r0, r1
 80090a4:	f00b fd80 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 80090a8:	4620      	mov	r0, r4
 80090aa:	b004      	add	sp, #16
 80090ac:	bd10      	pop	{r4, pc}
		ff_errno = pdFREERTOS_ERRNO_ENXIO;	/* No such device or address */
 80090ae:	2206      	movs	r2, #6
		iReturn = -1;
 80090b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80090b4:	e7f4      	b.n	80090a0 <ff_rmdir+0x26>

080090b6 <ff_remove>:
{
 80090b6:	b510      	push	{r4, lr}
 80090b8:	b084      	sub	sp, #16
	pcPath = prvABSPath( pcPath );
 80090ba:	f7ff fded 	bl	8008c98 <prvABSPath>
	if( FF_FS_Find( pcPath, &xHandler ) == pdFALSE )
 80090be:	4669      	mov	r1, sp
 80090c0:	f000 fcf8 	bl	8009ab4 <FF_FS_Find>
 80090c4:	b188      	cbz	r0, 80090ea <ff_remove+0x34>
		xError = FF_RmFile( xHandler.pxManager, xHandler.pcPath );
 80090c6:	9901      	ldr	r1, [sp, #4]
 80090c8:	9802      	ldr	r0, [sp, #8]
 80090ca:	f7fe fa3b 	bl	8007544 <FF_RmFile>
		ff_errno = prvFFErrorToErrno( xError );
 80090ce:	f7ff fe57 	bl	8008d80 <prvFFErrorToErrno>
		if( ff_errno == 0 )
 80090d2:	4602      	mov	r2, r0
 80090d4:	3000      	adds	r0, #0
 80090d6:	bf18      	it	ne
 80090d8:	2001      	movne	r0, #1
 80090da:	4244      	negs	r4, r0
 80090dc:	2100      	movs	r1, #0
 80090de:	4608      	mov	r0, r1
 80090e0:	f00b fd62 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 80090e4:	4620      	mov	r0, r4
 80090e6:	b004      	add	sp, #16
 80090e8:	bd10      	pop	{r4, pc}
		ff_errno = pdFREERTOS_ERRNO_ENXIO;
 80090ea:	2206      	movs	r2, #6
		iReturn = -1;
 80090ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80090f0:	e7f4      	b.n	80090dc <ff_remove+0x26>

080090f2 <ff_rename>:
{
 80090f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f4:	b089      	sub	sp, #36	; 0x24
 80090f6:	460c      	mov	r4, r1
 80090f8:	4615      	mov	r5, r2
	pcOldName = prvABSPath( pcOldName );
 80090fa:	f7ff fdcd 	bl	8008c98 <prvABSPath>
	if( FF_FS_Find( pcOldName, &xHandlers[ 0 ] ) == pdFALSE )
 80090fe:	4669      	mov	r1, sp
 8009100:	f000 fcd8 	bl	8009ab4 <FF_FS_Find>
 8009104:	b958      	cbnz	r0, 800911e <ff_rename+0x2c>
		ff_errno = pdFREERTOS_ERRNO_ENXIO;	/* No such device or address */
 8009106:	2406      	movs	r4, #6
 8009108:	4622      	mov	r2, r4
 800910a:	2100      	movs	r1, #0
 800910c:	4608      	mov	r0, r1
 800910e:	f00b fd4b 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
	if( ff_errno == 0 )
 8009112:	1c20      	adds	r0, r4, #0
 8009114:	bf18      	it	ne
 8009116:	2001      	movne	r0, #1
}
 8009118:	4240      	negs	r0, r0
 800911a:	b009      	add	sp, #36	; 0x24
 800911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xSize = strlen( xHandlers[0].pcPath ) + 1;
 800911e:	9801      	ldr	r0, [sp, #4]
 8009120:	f7f7 f860 	bl	80001e4 <strlen>
 8009124:	1c47      	adds	r7, r0, #1
			pcOldCopy = ( char *)ffconfigMALLOC( xSize );
 8009126:	4638      	mov	r0, r7
 8009128:	f00a f9ee 	bl	8013508 <pvPortMalloc>
			if( pcOldCopy == NULL )
 800912c:	4606      	mov	r6, r0
 800912e:	b1f8      	cbz	r0, 8009170 <ff_rename+0x7e>
				memcpy( pcOldCopy, xHandlers[0].pcPath, xSize );
 8009130:	463a      	mov	r2, r7
 8009132:	9901      	ldr	r1, [sp, #4]
 8009134:	f00e fb25 	bl	8017782 <memcpy>
				xHandlers[0].pcPath = pcOldCopy;
 8009138:	9601      	str	r6, [sp, #4]
			pcNewName = prvABSPath( pcNewName );
 800913a:	4620      	mov	r0, r4
 800913c:	f7ff fdac 	bl	8008c98 <prvABSPath>
			if( FF_FS_Find( pcNewName, &( xHandlers[ 1 ] ) ) == pdFALSE )
 8009140:	a904      	add	r1, sp, #16
 8009142:	f000 fcb7 	bl	8009ab4 <FF_FS_Find>
 8009146:	b170      	cbz	r0, 8009166 <ff_rename+0x74>
			else if( xHandlers[ 0 ].pxManager != xHandlers[ 1 ].pxManager )
 8009148:	9802      	ldr	r0, [sp, #8]
 800914a:	9b06      	ldr	r3, [sp, #24]
 800914c:	4298      	cmp	r0, r3
				ff_errno = pdFREERTOS_ERRNO_EXDEV;
 800914e:	bf18      	it	ne
 8009150:	2412      	movne	r4, #18
			else if( xHandlers[ 0 ].pxManager != xHandlers[ 1 ].pxManager )
 8009152:	d109      	bne.n	8009168 <ff_rename+0x76>
				xError = FF_Move( xHandlers[ 0 ].pxManager, xHandlers[ 0 ].pcPath, xHandlers[ 1 ].pcPath, bDeleteIfExists );
 8009154:	462b      	mov	r3, r5
 8009156:	9a05      	ldr	r2, [sp, #20]
 8009158:	9901      	ldr	r1, [sp, #4]
 800915a:	f7fe fa69 	bl	8007630 <FF_Move>
				ff_errno = prvFFErrorToErrno( xError );
 800915e:	f7ff fe0f 	bl	8008d80 <prvFFErrorToErrno>
 8009162:	4604      	mov	r4, r0
 8009164:	e000      	b.n	8009168 <ff_rename+0x76>
				ff_errno = pdFREERTOS_ERRNO_ENXIO;	/* No such device or address */
 8009166:	2406      	movs	r4, #6
				ffconfigFREE( pcOldCopy );
 8009168:	4630      	mov	r0, r6
 800916a:	f00a fa33 	bl	80135d4 <vPortFree>
 800916e:	e7cb      	b.n	8009108 <ff_rename+0x16>
				ff_errno = pdFREERTOS_ERRNO_ENOMEM;
 8009170:	240c      	movs	r4, #12
 8009172:	e7c9      	b.n	8009108 <ff_rename+0x16>

08009174 <ff_stat>:
{
 8009174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009176:	b0d9      	sub	sp, #356	; 0x164
 8009178:	4604      	mov	r4, r0
 800917a:	460d      	mov	r5, r1
	memset( &xFindParams, '\0', sizeof( xFindParams ) );
 800917c:	2230      	movs	r2, #48	; 0x30
 800917e:	2100      	movs	r1, #0
 8009180:	a803      	add	r0, sp, #12
 8009182:	f00e fb23 	bl	80177cc <memset>
	pcName = prvABSPath( pcName );
 8009186:	4620      	mov	r0, r4
 8009188:	f7ff fd86 	bl	8008c98 <prvABSPath>
	if( FF_FS_Find( pcName, &xHandler ) == pdFALSE )
 800918c:	a90f      	add	r1, sp, #60	; 0x3c
 800918e:	f000 fc91 	bl	8009ab4 <FF_FS_Find>
 8009192:	b910      	cbnz	r0, 800919a <ff_stat+0x26>
		xError = ( FF_Error_t ) ( pdFREERTOS_ERRNO_ENXIO | FF_STAT_FUNC );
 8009194:	4b40      	ldr	r3, [pc, #256]	; (8009298 <ff_stat+0x124>)
 8009196:	9313      	str	r3, [sp, #76]	; 0x4c
 8009198:	e06e      	b.n	8009278 <ff_stat+0x104>
		xError = FF_ERR_NONE;
 800919a:	2300      	movs	r3, #0
 800919c:	9313      	str	r3, [sp, #76]	; 0x4c
		pcName = xHandler.pcPath;
 800919e:	9e10      	ldr	r6, [sp, #64]	; 0x40
		xIndex = ( BaseType_t ) STRLEN( pcName );
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7f7 f81f 	bl	80001e4 <strlen>
 80091a6:	4604      	mov	r4, r0
		while( xIndex != 0 )
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d071      	beq.n	8009290 <ff_stat+0x11c>
			if( ( pcName[ xIndex ] == '\\' ) || ( pcName[ xIndex ] == '/' ) )
 80091ac:	1832      	adds	r2, r6, r0
 80091ae:	5c33      	ldrb	r3, [r6, r0]
 80091b0:	2b5c      	cmp	r3, #92	; 0x5c
 80091b2:	d009      	beq.n	80091c8 <ff_stat+0x54>
 80091b4:	2b2f      	cmp	r3, #47	; 0x2f
 80091b6:	d007      	beq.n	80091c8 <ff_stat+0x54>
		while( xIndex != 0 )
 80091b8:	3c01      	subs	r4, #1
 80091ba:	d069      	beq.n	8009290 <ff_stat+0x11c>
			if( ( pcName[ xIndex ] == '\\' ) || ( pcName[ xIndex ] == '/' ) )
 80091bc:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80091c0:	2b5c      	cmp	r3, #92	; 0x5c
 80091c2:	d001      	beq.n	80091c8 <ff_stat+0x54>
 80091c4:	2b2f      	cmp	r3, #47	; 0x2f
 80091c6:	d1f7      	bne.n	80091b8 <ff_stat+0x44>
		pcFileName = pcName + xIndex + 1;
 80091c8:	1c67      	adds	r7, r4, #1
 80091ca:	4437      	add	r7, r6
		FF_CreateShortName( &xFindParams, pcFileName );
 80091cc:	4639      	mov	r1, r7
 80091ce:	a803      	add	r0, sp, #12
 80091d0:	f7fb fc7c 	bl	8004acc <FF_CreateShortName>
		xFindParams.ulDirCluster = FF_FindDir( xHandler.pxManager, pcName, xIndex, &xError );
 80091d4:	ab13      	add	r3, sp, #76	; 0x4c
 80091d6:	b2a2      	uxth	r2, r4
 80091d8:	4631      	mov	r1, r6
 80091da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80091dc:	f7fb f9e6 	bl	80045ac <FF_FindDir>
 80091e0:	9003      	str	r0, [sp, #12]
	if( FF_isERR( xError ) == pdFALSE )
 80091e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	db47      	blt.n	8009278 <ff_stat+0x104>
		ulFileCluster = FF_FindEntryInDir( xHandler.pxManager, &xFindParams, pcFileName, 0x00, &xDirEntry, &xError );
 80091e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80091ea:	ab13      	add	r3, sp, #76	; 0x4c
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	ab14      	add	r3, sp, #80	; 0x50
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	2300      	movs	r3, #0
 80091f4:	463a      	mov	r2, r7
 80091f6:	a903      	add	r1, sp, #12
 80091f8:	f7fb f86a 	bl	80042d0 <FF_FindEntryInDir>
		if( ulFileCluster == 0ul )
 80091fc:	b9c8      	cbnz	r0, 8009232 <ff_stat+0xbe>
			if( STRLEN( pcFileName ) == STRLEN( xDirEntry.pcFileName ) )
 80091fe:	4638      	mov	r0, r7
 8009200:	f7f6 fff0 	bl	80001e4 <strlen>
 8009204:	4604      	mov	r4, r0
 8009206:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
 800920a:	f7f6 ffeb 	bl	80001e4 <strlen>
 800920e:	4284      	cmp	r4, r0
 8009210:	d002      	beq.n	8009218 <ff_stat+0xa4>
			xError = FF_ERR_FILE_NOT_FOUND | FF_STAT_FUNC;
 8009212:	4b22      	ldr	r3, [pc, #136]	; (800929c <ff_stat+0x128>)
 8009214:	9313      	str	r3, [sp, #76]	; 0x4c
 8009216:	e02f      	b.n	8009278 <ff_stat+0x104>
				if( ( xDirEntry.ulFileSize == 0 ) && ( FF_strmatch( pcFileName, xDirEntry.pcFileName, ( BaseType_t ) STRLEN( pcFileName ) ) == pdTRUE ) )
 8009218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f9      	bne.n	8009212 <ff_stat+0x9e>
 800921e:	4622      	mov	r2, r4
 8009220:	f10d 018a 	add.w	r1, sp, #138	; 0x8a
 8009224:	4638      	mov	r0, r7
 8009226:	f000 fb42 	bl	80098ae <FF_strmatch>
 800922a:	2801      	cmp	r0, #1
 800922c:	d1f1      	bne.n	8009212 <ff_stat+0x9e>
					xError = FF_ERR_NONE;
 800922e:	2300      	movs	r3, #0
 8009230:	9313      	str	r3, [sp, #76]	; 0x4c
	if( ( pxStatBuffer != NULL ) && ( FF_isERR( xError ) == pdFALSE ) )
 8009232:	b30d      	cbz	r5, 8009278 <ff_stat+0x104>
 8009234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009236:	2b00      	cmp	r3, #0
 8009238:	db1e      	blt.n	8009278 <ff_stat+0x104>
		if( ( xDirEntry.ucAttrib & FF_FAT_ATTR_DIR ) != 0 )
 800923a:	f89d 314b 	ldrb.w	r3, [sp, #331]	; 0x14b
 800923e:	f013 0f10 	tst.w	r3, #16
			pxStatBuffer->st_mode = ( unsigned short ) FF_IFDIR;
 8009242:	bf14      	ite	ne
 8009244:	f44f 4380 	movne.w	r3, #16384	; 0x4000
			pxStatBuffer->st_mode = ( unsigned short ) FF_IFREG;
 8009248:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
 800924c:	816b      	strh	r3, [r5, #10]
		pxStatBuffer->st_size = xDirEntry.ulFileSize;
 800924e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009250:	606b      	str	r3, [r5, #4]
		pxStatBuffer->st_ino = xDirEntry.ulObjectCluster;
 8009252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009254:	602b      	str	r3, [r5, #0]
		pxStatBuffer->st_dev = ( short ) xHandler.xFSIndex;
 8009256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009258:	812b      	strh	r3, [r5, #8]
			pxStatBuffer->st_atime = ( unsigned long ) prvFileTime( &( xDirEntry.xAccessedTime ) );
 800925a:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 800925e:	f7ff fe37 	bl	8008ed0 <prvFileTime>
 8009262:	60e8      	str	r0, [r5, #12]
			pxStatBuffer->st_mtime = ( unsigned long ) prvFileTime( &( xDirEntry.xModifiedTime ) );
 8009264:	f10d 0072 	add.w	r0, sp, #114	; 0x72
 8009268:	f7ff fe32 	bl	8008ed0 <prvFileTime>
 800926c:	6128      	str	r0, [r5, #16]
			pxStatBuffer->st_ctime = ( unsigned long ) prvFileTime( &( xDirEntry.xCreateTime ) );
 800926e:	f10d 0066 	add.w	r0, sp, #102	; 0x66
 8009272:	f7ff fe2d 	bl	8008ed0 <prvFileTime>
 8009276:	6168      	str	r0, [r5, #20]
	stdioSET_ERRNO( prvFFErrorToErrno( xError ) );
 8009278:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800927a:	f7ff fd81 	bl	8008d80 <prvFFErrorToErrno>
 800927e:	4602      	mov	r2, r0
 8009280:	2100      	movs	r1, #0
 8009282:	4608      	mov	r0, r1
 8009284:	f00b fc90 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
	if( FF_isERR( xError ) == pdFALSE )
 8009288:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800928a:	17c0      	asrs	r0, r0, #31
}  /* ff_stat() */
 800928c:	b059      	add	sp, #356	; 0x164
 800928e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcFileName = pcName + xIndex + 1;
 8009290:	1c77      	adds	r7, r6, #1
			xIndex = 1;
 8009292:	2401      	movs	r4, #1
 8009294:	e79a      	b.n	80091cc <ff_stat+0x58>
 8009296:	bf00      	nop
 8009298:	8c020006 	.word	0x8c020006
 800929c:	8c02001f 	.word	0x8c02001f

080092a0 <ff_getcwd>:
	{
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4604      	mov	r4, r0
 80092a4:	460e      	mov	r6, r1
	WorkingDirectory_t *pxDir = pxFindCWD();
 80092a6:	f7ff fce0 	bl	8008c6a <pxFindCWD>
 80092aa:	4605      	mov	r5, r0
 80092ac:	2200      	movs	r2, #0
 80092ae:	4611      	mov	r1, r2
 80092b0:	4610      	mov	r0, r2
 80092b2:	f00b fc79 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
		if( ( pxDir == NULL ) || ( pxDir->pcCWD[0] == '\0' ) )
 80092b6:	b10d      	cbz	r5, 80092bc <ff_getcwd+0x1c>
 80092b8:	782b      	ldrb	r3, [r5, #0]
 80092ba:	b943      	cbnz	r3, 80092ce <ff_getcwd+0x2e>
			if( xBufferLength > strlen( "/" ) )
 80092bc:	2e01      	cmp	r6, #1
 80092be:	d912      	bls.n	80092e6 <ff_getcwd+0x46>
				strncpy( pcBuffer, "/", xBufferLength );
 80092c0:	4632      	mov	r2, r6
 80092c2:	490b      	ldr	r1, [pc, #44]	; (80092f0 <ff_getcwd+0x50>)
 80092c4:	4620      	mov	r0, r4
 80092c6:	f00e fd08 	bl	8017cda <strncpy>
 80092ca:	4620      	mov	r0, r4
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
			if( strlen( pxDir->pcCWD ) < xBufferLength )
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7f6 ff88 	bl	80001e4 <strlen>
 80092d4:	42b0      	cmp	r0, r6
 80092d6:	d208      	bcs.n	80092ea <ff_getcwd+0x4a>
				strncpy( pcBuffer, pxDir->pcCWD, xBufferLength );
 80092d8:	4632      	mov	r2, r6
 80092da:	4629      	mov	r1, r5
 80092dc:	4620      	mov	r0, r4
 80092de:	f00e fcfc 	bl	8017cda <strncpy>
 80092e2:	4620      	mov	r0, r4
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
				pcBuffer = NULL;
 80092e6:	2000      	movs	r0, #0
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
				pcBuffer = NULL;
 80092ea:	2000      	movs	r0, #0
	}
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
 80092ee:	bf00      	nop
 80092f0:	080193b0 	.word	0x080193b0

080092f4 <ff_findnext>:
{
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
	if( pxFindData->xDirectoryHandler.u.bits.bIsValid == pdFALSE )
 80092f8:	7903      	ldrb	r3, [r0, #4]
 80092fa:	f013 0f04 	tst.w	r3, #4
 80092fe:	d00f      	beq.n	8009320 <ff_findnext+0x2c>
 8009300:	4604      	mov	r4, r0
		if( pxFindData->xDirectoryHandler.pxManager != NULL )
 8009302:	68c0      	ldr	r0, [r0, #12]
 8009304:	2800      	cmp	r0, #0
 8009306:	d060      	beq.n	80093ca <ff_findnext+0xd6>
			if( pxFindData->xDirectoryHandler.u.bits.bFirstCalled == pdFALSE )
 8009308:	f013 0f02 	tst.w	r3, #2
 800930c:	d00d      	beq.n	800932a <ff_findnext+0x36>
			else if( pxFindData->xDirectoryHandler.u.bits.bEndOfDir == pdFALSE )
 800930e:	f013 0f01 	tst.w	r3, #1
 8009312:	d032      	beq.n	800937a <ff_findnext+0x86>
		xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FINDNEXT );
 8009314:	4d6d      	ldr	r5, [pc, #436]	; (80094cc <ff_findnext+0x1d8>)
				pxFindData->xDirectoryHandler.u.bits.bEndOfDir = pdTRUE;
 8009316:	7923      	ldrb	r3, [r4, #4]
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	7123      	strb	r3, [r4, #4]
 800931e:	e011      	b.n	8009344 <ff_findnext+0x50>
		FF_PRINTF("ff_findnext: xDirectoryHandler not valid\n" );
 8009320:	486b      	ldr	r0, [pc, #428]	; (80094d0 <ff_findnext+0x1dc>)
 8009322:	f00d fb15 	bl	8016950 <lUDPLoggingPrintf>
		xError = ( FF_Error_t ) ( FF_ERR_DIR_INVALID_PARAMETER | FF_FINDNEXT );
 8009326:	4d6b      	ldr	r5, [pc, #428]	; (80094d4 <ff_findnext+0x1e0>)
 8009328:	e01c      	b.n	8009364 <ff_findnext+0x70>
				pxFindData->xDirectoryHandler.u.bits.bFirstCalled = pdTRUE;
 800932a:	7923      	ldrb	r3, [r4, #4]
 800932c:	f043 0302 	orr.w	r3, r3, #2
 8009330:	7123      	strb	r3, [r4, #4]
				xError = FF_FindFirst( pxFindData->xDirectoryHandler.pxManager, &( pxFindData->xDirectoryEntry ),
 8009332:	68a2      	ldr	r2, [r4, #8]
 8009334:	f104 0114 	add.w	r1, r4, #20
 8009338:	f7fb fb08 	bl	800494c <FF_FindFirst>
 800933c:	4605      	mov	r5, r0
			if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 800933e:	b2ab      	uxth	r3, r5
 8009340:	2b34      	cmp	r3, #52	; 0x34
 8009342:	d0e8      	beq.n	8009316 <ff_findnext+0x22>
		if( FF_isERR( xError ) == pdFALSE )
 8009344:	2d00      	cmp	r5, #0
 8009346:	db03      	blt.n	8009350 <ff_findnext+0x5c>
			if( pxFindData->xDirectoryEntry.pcFileName[ 0 ] == '.' )
 8009348:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800934c:	2b2e      	cmp	r3, #46	; 0x2e
 800934e:	d01a      	beq.n	8009386 <ff_findnext+0x92>
		if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 8009350:	b2ab      	uxth	r3, r5
 8009352:	2b34      	cmp	r3, #52	; 0x34
 8009354:	d03c      	beq.n	80093d0 <ff_findnext+0xdc>
		pxFindData->ucAttributes = pxFindData->xDirectoryEntry.ucAttrib;
 8009356:	f894 310f 	ldrb.w	r3, [r4, #271]	; 0x10f
 800935a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
		pxFindData->ulFileSize = pxFindData->xDirectoryEntry.ulFileSize;
 800935e:	6963      	ldr	r3, [r4, #20]
 8009360:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	stdioSET_ERRNO( prvFFErrorToErrno( xError ) );
 8009364:	4628      	mov	r0, r5
 8009366:	f7ff fd0b 	bl	8008d80 <prvFFErrorToErrno>
 800936a:	4602      	mov	r2, r0
 800936c:	2100      	movs	r1, #0
 800936e:	4608      	mov	r0, r1
 8009370:	f00b fc1a 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8009374:	4628      	mov	r0, r5
 8009376:	b00a      	add	sp, #40	; 0x28
 8009378:	bd70      	pop	{r4, r5, r6, pc}
				xError = FF_FindNext( pxFindData->xDirectoryHandler.pxManager, &( pxFindData->xDirectoryEntry ) );
 800937a:	f104 0114 	add.w	r1, r4, #20
 800937e:	f7fb fa19 	bl	80047b4 <FF_FindNext>
 8009382:	4605      	mov	r5, r0
 8009384:	e7db      	b.n	800933e <ff_findnext+0x4a>
				if( ( pxFindData->xDirectoryEntry.pcFileName[ 1 ] == '.' ) &&
 8009386:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 800938a:	2b2e      	cmp	r3, #46	; 0x2e
 800938c:	d00e      	beq.n	80093ac <ff_findnext+0xb8>
				else if( pxFindData->xDirectoryEntry.pcFileName[ 1 ] == '\0' )
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1de      	bne.n	8009350 <ff_findnext+0x5c>
					pxFindData->xDirectoryHandler.u.bits.bAddDotEntries &= stdioDIR_ENTRY_DOT_2;
 8009392:	7923      	ldrb	r3, [r4, #4]
 8009394:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 8009398:	f002 0202 	and.w	r2, r2, #2
 800939c:	f362 03c4 	bfi	r3, r2, #3, #2
 80093a0:	7123      	strb	r3, [r4, #4]
		if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 80093a2:	b2ab      	uxth	r3, r5
 80093a4:	2b34      	cmp	r3, #52	; 0x34
 80093a6:	d136      	bne.n	8009416 <ff_findnext+0x122>
 80093a8:	2601      	movs	r6, #1
 80093aa:	e012      	b.n	80093d2 <ff_findnext+0xde>
				if( ( pxFindData->xDirectoryEntry.pcFileName[ 1 ] == '.' ) &&
 80093ac:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80093b0:	b933      	cbnz	r3, 80093c0 <ff_findnext+0xcc>
					pxFindData->xDirectoryHandler.u.bits.bAddDotEntries &= stdioDIR_ENTRY_DOT_1;
 80093b2:	7923      	ldrb	r3, [r4, #4]
 80093b4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80093b8:	f362 03c4 	bfi	r3, r2, #3, #2
 80093bc:	7123      	strb	r3, [r4, #4]
						xSetTime = pdTRUE;
 80093be:	e7f0      	b.n	80093a2 <ff_findnext+0xae>
		if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 80093c0:	b2ab      	uxth	r3, r5
 80093c2:	2b34      	cmp	r3, #52	; 0x34
 80093c4:	d152      	bne.n	800946c <ff_findnext+0x178>
 80093c6:	2600      	movs	r6, #0
 80093c8:	e003      	b.n	80093d2 <ff_findnext+0xde>
 80093ca:	2600      	movs	r6, #0
		xError = ( FF_Error_t ) ( FF_ERR_DIR_END_OF_DIR | FF_FINDNEXT );
 80093cc:	4d3f      	ldr	r5, [pc, #252]	; (80094cc <ff_findnext+0x1d8>)
 80093ce:	e000      	b.n	80093d2 <ff_findnext+0xde>
		if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 80093d0:	2600      	movs	r6, #0
			while( ( pxFindData->xDirectoryHandler.xFSIndex > 0 ) ||
 80093d2:	6920      	ldr	r0, [r4, #16]
 80093d4:	2800      	cmp	r0, #0
 80093d6:	dd5e      	ble.n	8009496 <ff_findnext+0x1a2>
					pxFindData->xDirectoryHandler.xFSIndex--;
 80093d8:	3801      	subs	r0, #1
 80093da:	6120      	str	r0, [r4, #16]
					found = FF_FS_Get( pxFindData->xDirectoryHandler.xFSIndex, &xSubSystem );
 80093dc:	a901      	add	r1, sp, #4
 80093de:	f000 fbbf 	bl	8009b60 <FF_FS_Get>
					if( ( found == pdFALSE ) || ( xSubSystem.pcPath[ 1 ] == '\0' ) )
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d0f5      	beq.n	80093d2 <ff_findnext+0xde>
 80093e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0f1      	beq.n	80093d2 <ff_findnext+0xde>
					snprintf( pxFindData->xDirectoryEntry.pcFileName, sizeof( pxFindData->xDirectoryEntry.pcFileName ), "%s", xSubSystem.pcPath + 1 );
 80093ee:	f10d 0305 	add.w	r3, sp, #5
 80093f2:	4a39      	ldr	r2, [pc, #228]	; (80094d8 <ff_findnext+0x1e4>)
 80093f4:	21c1      	movs	r1, #193	; 0xc1
 80093f6:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 80093fa:	f00d fdee 	bl	8016fda <snprintf>
					if( xSubSystem.pxManager != NULL )
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d03c      	beq.n	800947e <ff_findnext+0x18a>
						pxFindData->xDirectoryEntry.ulObjectCluster = xSubSystem.pxManager->xPartition.ulRootDirCluster;
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	61a3      	str	r3, [r4, #24]
				pxFindData->xDirectoryEntry.ucAttrib = FF_FAT_ATTR_READONLY | FF_FAT_ATTR_DIR;
 8009408:	2311      	movs	r3, #17
 800940a:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
				pxFindData->xDirectoryEntry.ulFileSize = stdioDOT_ENTRY_FILE_SIZE;
 800940e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009412:	6163      	str	r3, [r4, #20]
				xError = FF_ERR_NONE;
 8009414:	2500      	movs	r5, #0
				xSeconds = FreeRTOS_time( NULL );
 8009416:	2000      	movs	r0, #0
 8009418:	f00d fb58 	bl	8016acc <FreeRTOS_time>
 800941c:	9000      	str	r0, [sp, #0]
				FreeRTOS_gmtime_r( &xSeconds, &xTimeStruct );
 800941e:	a901      	add	r1, sp, #4
 8009420:	4668      	mov	r0, sp
 8009422:	f000 fbb9 	bl	8009b98 <FreeRTOS_gmtime_r>
				pxFindData->xDirectoryEntry.xCreateTime.Year   = ( uint16_t ) ( xTimeStruct.tm_year + 1900 );	/* Year (e.g. 2009). */
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800942c:	8563      	strh	r3, [r4, #42]	; 0x2a
				pxFindData->xDirectoryEntry.xCreateTime.Month  = ( uint16_t ) ( xTimeStruct.tm_mon + 1 );		/* Month (e.g. 1 = Jan, 12 = Dec). */
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	3301      	adds	r3, #1
 8009432:	85a3      	strh	r3, [r4, #44]	; 0x2c
				pxFindData->xDirectoryEntry.xCreateTime.Day    = ( uint16_t ) xTimeStruct.tm_mday;				/* Day (1 - 31). */
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	85e3      	strh	r3, [r4, #46]	; 0x2e
				pxFindData->xDirectoryEntry.xCreateTime.Hour   = ( uint16_t ) xTimeStruct.tm_hour;				/* Hour (0 - 23). */
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	8623      	strh	r3, [r4, #48]	; 0x30
				pxFindData->xDirectoryEntry.xCreateTime.Minute = ( uint16_t ) xTimeStruct.tm_min;				/* Min (0 - 59). */
 800943c:	9b02      	ldr	r3, [sp, #8]
 800943e:	8663      	strh	r3, [r4, #50]	; 0x32
				pxFindData->xDirectoryEntry.xCreateTime.Second = ( uint16_t ) xTimeStruct.tm_sec;				/* Second (0 - 59). */
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	86a3      	strh	r3, [r4, #52]	; 0x34
				pxFindData->xDirectoryEntry.xModifiedTime      = pxFindData->xDirectoryEntry.xCreateTime;		/* Date and Time Modified. */
 8009444:	4623      	mov	r3, r4
 8009446:	f853 6f2a 	ldr.w	r6, [r3, #42]!
 800944a:	6858      	ldr	r0, [r3, #4]
 800944c:	6899      	ldr	r1, [r3, #8]
 800944e:	f8c4 6036 	str.w	r6, [r4, #54]	; 0x36
 8009452:	f8c4 003a 	str.w	r0, [r4, #58]	; 0x3a
 8009456:	f8c4 103e 	str.w	r1, [r4, #62]	; 0x3e
				pxFindData->xDirectoryEntry.xAccessedTime      = pxFindData->xDirectoryEntry.xCreateTime;		/* Date of Last Access. */
 800945a:	f104 0242 	add.w	r2, r4, #66	; 0x42
 800945e:	681e      	ldr	r6, [r3, #0]
 8009460:	6858      	ldr	r0, [r3, #4]
 8009462:	6899      	ldr	r1, [r3, #8]
 8009464:	f8c4 6042 	str.w	r6, [r4, #66]	; 0x42
 8009468:	6050      	str	r0, [r2, #4]
 800946a:	6091      	str	r1, [r2, #8]
		if( FF_GETERROR( xError ) == FF_ERR_DIR_END_OF_DIR )
 800946c:	b2ab      	uxth	r3, r5
 800946e:	2b34      	cmp	r3, #52	; 0x34
 8009470:	f47f af71 	bne.w	8009356 <ff_findnext+0x62>
			pxFindData->xDirectoryHandler.u.bits.bIsValid = 0;
 8009474:	7923      	ldrb	r3, [r4, #4]
 8009476:	f36f 0382 	bfc	r3, #2, #1
 800947a:	7123      	strb	r3, [r4, #4]
 800947c:	e76b      	b.n	8009356 <ff_findnext+0x62>
						pxFindData->xDirectoryEntry.ulObjectCluster = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	61a3      	str	r3, [r4, #24]
 8009482:	e7c1      	b.n	8009408 <ff_findnext+0x114>
					strcpy( pxFindData->xDirectoryEntry.pcFileName, ".");
 8009484:	4b15      	ldr	r3, [pc, #84]	; (80094dc <ff_findnext+0x1e8>)
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
					pxFindData->xDirectoryHandler.u.bits.bAddDotEntries = 0;
 800948c:	7923      	ldrb	r3, [r4, #4]
 800948e:	f36f 03c4 	bfc	r3, #3, #2
 8009492:	7123      	strb	r3, [r4, #4]
 8009494:	e7b8      	b.n	8009408 <ff_findnext+0x114>
				   ( pxFindData->xDirectoryHandler.u.bits.bAddDotEntries != 0 ) )
 8009496:	7923      	ldrb	r3, [r4, #4]
			while( ( pxFindData->xDirectoryHandler.xFSIndex > 0 ) ||
 8009498:	f013 0f18 	tst.w	r3, #24
 800949c:	d013      	beq.n	80094c6 <ff_findnext+0x1d2>
				else if( ( pxFindData->xDirectoryHandler.u.bits.bAddDotEntries & stdioDIR_ENTRY_DOT_2 ) != 0 )
 800949e:	7923      	ldrb	r3, [r4, #4]
 80094a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80094a4:	f013 0f02 	tst.w	r3, #2
 80094a8:	d0ec      	beq.n	8009484 <ff_findnext+0x190>
					strcpy( pxFindData->xDirectoryEntry.pcFileName, "..");
 80094aa:	4a0d      	ldr	r2, [pc, #52]	; (80094e0 <ff_findnext+0x1ec>)
 80094ac:	8811      	ldrh	r1, [r2, #0]
 80094ae:	7892      	ldrb	r2, [r2, #2]
 80094b0:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 80094b4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
					pxFindData->xDirectoryHandler.u.bits.bAddDotEntries &= stdioDIR_ENTRY_DOT_1;
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	7922      	ldrb	r2, [r4, #4]
 80094be:	f363 02c4 	bfi	r2, r3, #3, #2
 80094c2:	7122      	strb	r2, [r4, #4]
 80094c4:	e7a0      	b.n	8009408 <ff_findnext+0x114>
			if( xSetTime != pdFALSE )
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	d0d0      	beq.n	800946c <ff_findnext+0x178>
 80094ca:	e7a4      	b.n	8009416 <ff_findnext+0x122>
 80094cc:	82050034 	.word	0x82050034
 80094d0:	08019384 	.word	0x08019384
 80094d4:	82050037 	.word	0x82050037
 80094d8:	0801b620 	.word	0x0801b620
 80094dc:	08026708 	.word	0x08026708
 80094e0:	08019098 	.word	0x08019098

080094e4 <ff_findfirst>:
{
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4605      	mov	r5, r0
 80094e8:	460c      	mov	r4, r1
	memset( pxFindData, '\0', sizeof( *pxFindData ) );
 80094ea:	f44f 7298 	mov.w	r2, #304	; 0x130
 80094ee:	2100      	movs	r1, #0
 80094f0:	4620      	mov	r0, r4
 80094f2:	f00e f96b 	bl	80177cc <memset>
	pxFindData->pcFileName = pxFindData->xDirectoryEntry.pcFileName;
 80094f6:	f104 034e 	add.w	r3, r4, #78	; 0x4e
 80094fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	pcDirectory = prvABSPath( pcPath );
 80094fe:	4628      	mov	r0, r5
 8009500:	f7ff fbca 	bl	8008c98 <prvABSPath>
	if( ( pcDirectory[ 0 ] == '/' ) && ( pcDirectory[ 1 ] == 0x00 ) )
 8009504:	7803      	ldrb	r3, [r0, #0]
 8009506:	2b2f      	cmp	r3, #47	; 0x2f
 8009508:	d00f      	beq.n	800952a <ff_findfirst+0x46>
	if( FF_FS_Find( pcDirectory, &( pxFindData->xDirectoryHandler ) ) == pdFALSE )
 800950a:	1d21      	adds	r1, r4, #4
 800950c:	f000 fad2 	bl	8009ab4 <FF_FS_Find>
 8009510:	b1a8      	cbz	r0, 800953e <ff_findfirst+0x5a>
			pxFindData->xDirectoryHandler.u.bits.bAddDotEntries = stdioDIR_ENTRY_DOT_1 | stdioDIR_ENTRY_DOT_2;
 8009512:	7923      	ldrb	r3, [r4, #4]
 8009514:	f043 0318 	orr.w	r3, r3, #24
 8009518:	7123      	strb	r3, [r4, #4]
		pxFindData->xDirectoryHandler.u.bits.bIsValid = pdTRUE;
 800951a:	7923      	ldrb	r3, [r4, #4]
 800951c:	f043 0304 	orr.w	r3, r3, #4
 8009520:	7123      	strb	r3, [r4, #4]
		iReturn = ff_findnext( pxFindData );
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff fee6 	bl	80092f4 <ff_findnext>
	return iReturn;
 8009528:	bd38      	pop	{r3, r4, r5, pc}
	if( ( pcDirectory[ 0 ] == '/' ) && ( pcDirectory[ 1 ] == 0x00 ) )
 800952a:	7843      	ldrb	r3, [r0, #1]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1ec      	bne.n	800950a <ff_findfirst+0x26>
	if( FF_FS_Find( pcDirectory, &( pxFindData->xDirectoryHandler ) ) == pdFALSE )
 8009530:	1d21      	adds	r1, r4, #4
 8009532:	f000 fabf 	bl	8009ab4 <FF_FS_Find>
 8009536:	b968      	cbnz	r0, 8009554 <ff_findfirst+0x70>
		if( ( iIsRootDir == pdFALSE ) || ( FF_FS_Count() == 0 ) )
 8009538:	f000 fa38 	bl	80099ac <FF_FS_Count>
 800953c:	b950      	cbnz	r0, 8009554 <ff_findfirst+0x70>
			stdioSET_ERRNO( prvFFErrorToErrno( ( FF_Error_t ) ( FF_ERR_NULL_POINTER | FF_FINDFIRST ) ) );
 800953e:	480a      	ldr	r0, [pc, #40]	; (8009568 <ff_findfirst+0x84>)
 8009540:	f7ff fc1e 	bl	8008d80 <prvFFErrorToErrno>
 8009544:	4602      	mov	r2, r0
 8009546:	2100      	movs	r1, #0
 8009548:	4608      	mov	r0, r1
 800954a:	f00b fb2d 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
			iReturn = -1;
 800954e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009552:	bd38      	pop	{r3, r4, r5, pc}
			pxFindData->xDirectoryHandler.xFSIndex = FF_FS_Count();
 8009554:	f000 fa2a 	bl	80099ac <FF_FS_Count>
 8009558:	6120      	str	r0, [r4, #16]
			pxFindData->xDirectoryHandler.u.bits.bAddDotEntries = stdioDIR_ENTRY_DOT_1;
 800955a:	7923      	ldrb	r3, [r4, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f362 03c4 	bfi	r3, r2, #3, #2
 8009562:	7123      	strb	r3, [r4, #4]
 8009564:	e7d9      	b.n	800951a <ff_findfirst+0x36>
 8009566:	bf00      	nop
 8009568:	82040002 	.word	0x82040002

0800956c <ff_deltree_recurse>:
	{
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	b085      	sub	sp, #20
 8009572:	4607      	mov	r7, r0
		pxFindData = ( FF_FindData_t * ) ffconfigMALLOC( sizeof( *pxFindData ) );
 8009574:	f44f 7098 	mov.w	r0, #304	; 0x130
 8009578:	f009 ffc6 	bl	8013508 <pvPortMalloc>
		if( pxFindData != NULL )
 800957c:	2800      	cmp	r0, #0
 800957e:	f000 80a7 	beq.w	80096d0 <ff_deltree_recurse+0x164>
 8009582:	4606      	mov	r6, r0
			iNameLength = ( int ) strlen( pcPath );
 8009584:	4638      	mov	r0, r7
 8009586:	f7f6 fe2d 	bl	80001e4 <strlen>
 800958a:	4680      	mov	r8, r0
 800958c:	9003      	str	r0, [sp, #12]
	int iResult, iNext, iNameLength, pass, iCount = 0;
 800958e:	f04f 0900 	mov.w	r9, #0
			for( pass = 0; pass < 2; pass++ )
 8009592:	464d      	mov	r5, r9
							snprintf( pcPath + iNameLength, ( size_t ) ( ffconfigMAX_FILENAME - iNameLength ) , "%s%s",
 8009594:	f8df a158 	ldr.w	sl, [pc, #344]	; 80096f0 <ff_deltree_recurse+0x184>
 8009598:	f8df b158 	ldr.w	fp, [pc, #344]	; 80096f4 <ff_deltree_recurse+0x188>
 800959c:	f8cd a008 	str.w	sl, [sp, #8]
 80095a0:	e070      	b.n	8009684 <ff_deltree_recurse+0x118>
					if( ( pass == 0 ) && ( xIsDir != pdFALSE ) )
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d07c      	beq.n	80096a0 <ff_deltree_recurse+0x134>
						if( pxFindData->pcFileName[ 0 ] == '.' )
 80095a6:	f8d6 2124 	ldr.w	r2, [r6, #292]	; 0x124
 80095aa:	7813      	ldrb	r3, [r2, #0]
 80095ac:	2b2e      	cmp	r3, #46	; 0x2e
 80095ae:	d10b      	bne.n	80095c8 <ff_deltree_recurse+0x5c>
							if( ( pxFindData->pcFileName[ 1 ] == '.' ) &&
 80095b0:	7853      	ldrb	r3, [r2, #1]
 80095b2:	2b2e      	cmp	r3, #46	; 0x2e
 80095b4:	d005      	beq.n	80095c2 <ff_deltree_recurse+0x56>
						if( xIsDotDir == 0 )
 80095b6:	b93b      	cbnz	r3, 80095c8 <ff_deltree_recurse+0x5c>
							iNext = ff_findnext( pxFindData );
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff fe9b 	bl	80092f4 <ff_findnext>
 80095be:	4604      	mov	r4, r0
 80095c0:	e072      	b.n	80096a8 <ff_deltree_recurse+0x13c>
							if( ( pxFindData->pcFileName[ 1 ] == '.' ) &&
 80095c2:	7893      	ldrb	r3, [r2, #2]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0f7      	beq.n	80095b8 <ff_deltree_recurse+0x4c>
							snprintf( pcPath + iNameLength, ( size_t ) ( ffconfigMAX_FILENAME - iNameLength ) , "%s%s",
 80095c8:	eb07 0008 	add.w	r0, r7, r8
 80095cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80095d0:	9200      	str	r2, [sp, #0]
 80095d2:	2b2f      	cmp	r3, #47	; 0x2f
 80095d4:	bf0c      	ite	eq
 80095d6:	4653      	moveq	r3, sl
 80095d8:	465b      	movne	r3, fp
 80095da:	4a41      	ldr	r2, [pc, #260]	; (80096e0 <ff_deltree_recurse+0x174>)
 80095dc:	9903      	ldr	r1, [sp, #12]
 80095de:	f1c1 01c1 	rsb	r1, r1, #193	; 0xc1
 80095e2:	f00d fcfa 	bl	8016fda <snprintf>
							iNext = ff_findnext( pxFindData );
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff fe84 	bl	80092f4 <ff_findnext>
 80095ec:	4604      	mov	r4, r0
							iResult = ff_deltree_recurse( pcPath );
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff ffbc 	bl	800956c <ff_deltree_recurse>
							if( iResult < 0 )
 80095f4:	2800      	cmp	r0, #0
 80095f6:	db39      	blt.n	800966c <ff_deltree_recurse+0x100>
							iCount += iResult;
 80095f8:	4481      	add	r9, r0
							xError = ff_rmdir( pcPath );
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7ff fd3d 	bl	800907a <ff_rmdir>
							if( xError != 0 )
 8009600:	b910      	cbnz	r0, 8009608 <ff_deltree_recurse+0x9c>
								iCount++;
 8009602:	f109 0901 	add.w	r9, r9, #1
 8009606:	e04f      	b.n	80096a8 <ff_deltree_recurse+0x13c>
	pvResult = pvTaskGetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX );
 8009608:	2100      	movs	r1, #0
 800960a:	4608      	mov	r0, r1
 800960c:	f00b fad8 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
								FF_PRINTF( "ff_rmdir( %s ): errno %d\n", pcPath, stdioGET_ERRNO() );
 8009610:	4602      	mov	r2, r0
 8009612:	4639      	mov	r1, r7
 8009614:	4833      	ldr	r0, [pc, #204]	; (80096e4 <ff_deltree_recurse+0x178>)
 8009616:	f00d f99b 	bl	8016950 <lUDPLoggingPrintf>
 800961a:	e045      	b.n	80096a8 <ff_deltree_recurse+0x13c>
					else if( ( pass == 1 ) && ( xIsDir == pdFALSE ) )
 800961c:	2b00      	cmp	r3, #0
 800961e:	d13f      	bne.n	80096a0 <ff_deltree_recurse+0x134>
						snprintf( pcPath + iNameLength, ( size_t ) ( ffconfigMAX_FILENAME - iNameLength ), "%s%s",
 8009620:	eb07 0008 	add.w	r0, r7, r8
 8009624:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8009628:	f8d6 2124 	ldr.w	r2, [r6, #292]	; 0x124
 800962c:	9200      	str	r2, [sp, #0]
 800962e:	2b2f      	cmp	r3, #47	; 0x2f
 8009630:	bf0c      	ite	eq
 8009632:	4653      	moveq	r3, sl
 8009634:	465b      	movne	r3, fp
 8009636:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <ff_deltree_recurse+0x174>)
 8009638:	9903      	ldr	r1, [sp, #12]
 800963a:	f1c1 01c1 	rsb	r1, r1, #193	; 0xc1
 800963e:	f00d fccc 	bl	8016fda <snprintf>
						iNext = ff_findnext( pxFindData );
 8009642:	4630      	mov	r0, r6
 8009644:	f7ff fe56 	bl	80092f4 <ff_findnext>
 8009648:	4604      	mov	r4, r0
						xError = ff_remove( pcPath );
 800964a:	4638      	mov	r0, r7
 800964c:	f7ff fd33 	bl	80090b6 <ff_remove>
						if( xError != 0 )
 8009650:	b148      	cbz	r0, 8009666 <ff_deltree_recurse+0xfa>
 8009652:	2100      	movs	r1, #0
 8009654:	4608      	mov	r0, r1
 8009656:	f00b fab3 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
							FF_PRINTF( "ff_remove( %s ): errno %d\n", pcPath, stdioGET_ERRNO() );
 800965a:	4602      	mov	r2, r0
 800965c:	4639      	mov	r1, r7
 800965e:	4822      	ldr	r0, [pc, #136]	; (80096e8 <ff_deltree_recurse+0x17c>)
 8009660:	f00d f976 	bl	8016950 <lUDPLoggingPrintf>
 8009664:	e020      	b.n	80096a8 <ff_deltree_recurse+0x13c>
							iCount++;
 8009666:	f109 0901 	add.w	r9, r9, #1
 800966a:	e01d      	b.n	80096a8 <ff_deltree_recurse+0x13c>
							iResult = ff_deltree_recurse( pcPath );
 800966c:	4604      	mov	r4, r0
								iCount = -1;
 800966e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009672:	e01e      	b.n	80096b2 <ff_deltree_recurse+0x146>
					FF_PRINTF( "ff_deltree_recurse[%s]: %s\n", pcPath, ( const char * ) FF_GetErrMessage( iResult ) );
 8009674:	9a02      	ldr	r2, [sp, #8]
 8009676:	4639      	mov	r1, r7
 8009678:	481c      	ldr	r0, [pc, #112]	; (80096ec <ff_deltree_recurse+0x180>)
 800967a:	f00d f969 	bl	8016950 <lUDPLoggingPrintf>
			for( pass = 0; pass < 2; pass++ )
 800967e:	3501      	adds	r5, #1
 8009680:	2d02      	cmp	r5, #2
 8009682:	d01e      	beq.n	80096c2 <ff_deltree_recurse+0x156>
				for( iResult = ff_findfirst( pcPath, pxFindData );
 8009684:	4631      	mov	r1, r6
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ff2c 	bl	80094e4 <ff_findfirst>
 800968c:	4604      	mov	r4, r0
 800968e:	b980      	cbnz	r0, 80096b2 <ff_deltree_recurse+0x146>
					xIsDir = ( pxFindData->xDirectoryEntry.ucAttrib & FF_FAT_ATTR_DIR ) != 0;
 8009690:	f896 310f 	ldrb.w	r3, [r6, #271]	; 0x10f
 8009694:	f003 0310 	and.w	r3, r3, #16
					if( ( pass == 0 ) && ( xIsDir != pdFALSE ) )
 8009698:	2d00      	cmp	r5, #0
 800969a:	d082      	beq.n	80095a2 <ff_deltree_recurse+0x36>
					else if( ( pass == 1 ) && ( xIsDir == pdFALSE ) )
 800969c:	2d01      	cmp	r5, #1
 800969e:	d0bd      	beq.n	800961c <ff_deltree_recurse+0xb0>
						iNext = ff_findnext( pxFindData );
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff fe27 	bl	80092f4 <ff_findnext>
 80096a6:	4604      	mov	r4, r0
					pcPath[ iNameLength ] = '\0';
 80096a8:	2300      	movs	r3, #0
 80096aa:	f807 3008 	strb.w	r3, [r7, r8]
				for( iResult = ff_findfirst( pcPath, pxFindData );
 80096ae:	2c00      	cmp	r4, #0
 80096b0:	d0ee      	beq.n	8009690 <ff_deltree_recurse+0x124>
				if( FF_GETERROR( iResult ) == FF_ERR_DIR_INVALID_PATH )
 80096b2:	b2a4      	uxth	r4, r4
 80096b4:	2c36      	cmp	r4, #54	; 0x36
 80096b6:	d004      	beq.n	80096c2 <ff_deltree_recurse+0x156>
				if( ( FF_GETERROR( iResult ) != FF_ERR_DIR_END_OF_DIR ) && ( FF_GETERROR( iResult ) != FF_ERR_FILE_INVALID_PATH ) )
 80096b8:	2c34      	cmp	r4, #52	; 0x34
 80096ba:	d0e0      	beq.n	800967e <ff_deltree_recurse+0x112>
 80096bc:	2c22      	cmp	r4, #34	; 0x22
 80096be:	d1d9      	bne.n	8009674 <ff_deltree_recurse+0x108>
 80096c0:	e7dd      	b.n	800967e <ff_deltree_recurse+0x112>
			ffconfigFREE( pxFindData );
 80096c2:	4630      	mov	r0, r6
 80096c4:	f009 ff86 	bl	80135d4 <vPortFree>
	}
 80096c8:	4648      	mov	r0, r9
 80096ca:	b005      	add	sp, #20
 80096cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	vTaskSetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX, ( void * ) ( iErrno ) );
 80096d0:	220c      	movs	r2, #12
 80096d2:	2100      	movs	r1, #0
 80096d4:	4608      	mov	r0, r1
 80096d6:	f00b fa67 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
			iCount = -1;
 80096da:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
		return iCount;
 80096de:	e7f3      	b.n	80096c8 <ff_deltree_recurse+0x15c>
 80096e0:	08019328 	.word	0x08019328
 80096e4:	08019330 	.word	0x08019330
 80096e8:	0801934c 	.word	0x0801934c
 80096ec:	08019368 	.word	0x08019368
 80096f0:	0801b914 	.word	0x0801b914
 80096f4:	080193b0 	.word	0x080193b0

080096f8 <ff_diskfree>:
{
 80096f8:	b530      	push	{r4, r5, lr}
 80096fa:	b087      	sub	sp, #28
 80096fc:	460c      	mov	r4, r1
	if( FF_FS_Find( pcPath, &xHandler ) == pdFALSE )
 80096fe:	a902      	add	r1, sp, #8
 8009700:	f000 f9d8 	bl	8009ab4 <FF_FS_Find>
 8009704:	b1d8      	cbz	r0, 800973e <ff_diskfree+0x46>
		if (pxSectorCount != NULL )
 8009706:	b114      	cbz	r4, 800970e <ff_diskfree+0x16>
			*pxSectorCount = xHandler.pxManager->xPartition.ulDataSectors;
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	6023      	str	r3, [r4, #0]
		lReturn = ( DISKFREE_RETURN_TYPE ) FF_GetFreeSize( xHandler.pxManager, &xError ) / 512;
 800970e:	a901      	add	r1, sp, #4
 8009710:	9804      	ldr	r0, [sp, #16]
 8009712:	f7fc fd7f 	bl	8006214 <FF_GetFreeSize>
 8009716:	2800      	cmp	r0, #0
 8009718:	f171 0300 	sbcs.w	r3, r1, #0
 800971c:	db17      	blt.n	800974e <ff_diskfree+0x56>
 800971e:	0a44      	lsrs	r4, r0, #9
 8009720:	ea44 54c1 	orr.w	r4, r4, r1, lsl #23
 8009724:	124d      	asrs	r5, r1, #9
		stdioSET_ERRNO( prvFFErrorToErrno( xError ) );
 8009726:	9801      	ldr	r0, [sp, #4]
 8009728:	f7ff fb2a 	bl	8008d80 <prvFFErrorToErrno>
 800972c:	4602      	mov	r2, r0
 800972e:	2100      	movs	r1, #0
 8009730:	4608      	mov	r0, r1
 8009732:	f00b fa39 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
}
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	b007      	add	sp, #28
 800973c:	bd30      	pop	{r4, r5, pc}
 800973e:	2206      	movs	r2, #6
 8009740:	2100      	movs	r1, #0
 8009742:	4608      	mov	r0, r1
 8009744:	f00b fa30 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
		lReturn = 0ul;
 8009748:	2400      	movs	r4, #0
 800974a:	4625      	mov	r5, r4
 800974c:	e7f3      	b.n	8009736 <ff_diskfree+0x3e>
		lReturn = ( DISKFREE_RETURN_TYPE ) FF_GetFreeSize( xHandler.pxManager, &xError ) / 512;
 800974e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009752:	2300      	movs	r3, #0
 8009754:	1880      	adds	r0, r0, r2
 8009756:	4159      	adcs	r1, r3
 8009758:	e7e1      	b.n	800971e <ff_diskfree+0x26>

0800975a <ff_finddir>:
{
 800975a:	b510      	push	{r4, lr}
 800975c:	b086      	sub	sp, #24
	if( FF_FS_Find( pcPath, &xHandler ) == pdFALSE )
 800975e:	a902      	add	r1, sp, #8
 8009760:	f000 f9a8 	bl	8009ab4 <FF_FS_Find>
 8009764:	4603      	mov	r3, r0
 8009766:	b910      	cbnz	r0, 800976e <ff_finddir+0x14>
}
 8009768:	4618      	mov	r0, r3
 800976a:	b006      	add	sp, #24
 800976c:	bd10      	pop	{r4, pc}
		iResult = ( int ) FF_FindDir( xHandler.pxManager, xHandler.pcPath, ( uint16_t ) strlen( xHandler.pcPath ), &errCode );
 800976e:	9c03      	ldr	r4, [sp, #12]
 8009770:	4620      	mov	r0, r4
 8009772:	f7f6 fd37 	bl	80001e4 <strlen>
 8009776:	ab01      	add	r3, sp, #4
 8009778:	b282      	uxth	r2, r0
 800977a:	4621      	mov	r1, r4
 800977c:	9804      	ldr	r0, [sp, #16]
 800977e:	f7fa ff15 	bl	80045ac <FF_FindDir>
 8009782:	4603      	mov	r3, r0
	return iResult;
 8009784:	e7f0      	b.n	8009768 <ff_finddir+0xe>
	...

08009788 <ff_chdir>:
	{
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4604      	mov	r4, r0
 800978c:	2200      	movs	r2, #0
 800978e:	4611      	mov	r1, r2
 8009790:	4610      	mov	r0, r2
 8009792:	f00b fa09 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
		if( FF_FS_Count() != 0 )
 8009796:	f000 f909 	bl	80099ac <FF_FS_Count>
 800979a:	b910      	cbnz	r0, 80097a2 <ff_chdir+0x1a>
			iResult = -1;
 800979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80097a0:	bd38      	pop	{r3, r4, r5, pc}
			pcDirectoryName = prvABSPath( pcDirectoryName );
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff fa78 	bl	8008c98 <prvABSPath>
 80097a8:	4605      	mov	r5, r0
			pxDir = pxFindCWD();
 80097aa:	f7ff fa5e 	bl	8008c6a <pxFindCWD>
			if( pxDir == NULL )
 80097ae:	4604      	mov	r4, r0
 80097b0:	b1d8      	cbz	r0, 80097ea <ff_chdir+0x62>
				iLength = strlen( pcDirectoryName );
 80097b2:	4628      	mov	r0, r5
 80097b4:	f7f6 fd16 	bl	80001e4 <strlen>
				if( ( iLength > 1 ) && ( pxDir->pcFileName[ iLength - 1 ] == '/' ) )
 80097b8:	2801      	cmp	r0, #1
 80097ba:	dd05      	ble.n	80097c8 <ff_chdir+0x40>
 80097bc:	3801      	subs	r0, #1
 80097be:	1823      	adds	r3, r4, r0
 80097c0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80097c4:	2b2f      	cmp	r3, #47	; 0x2f
 80097c6:	d016      	beq.n	80097f6 <ff_chdir+0x6e>
 80097c8:	2202      	movs	r2, #2
 80097ca:	2100      	movs	r1, #0
 80097cc:	4608      	mov	r0, r1
 80097ce:	f00b f9eb 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
				if( strcmp( pcDirectoryName, "/" ) == 0 )
 80097d2:	4910      	ldr	r1, [pc, #64]	; (8009814 <ff_chdir+0x8c>)
 80097d4:	4628      	mov	r0, r5
 80097d6:	f7f6 fcfb 	bl	80001d0 <strcmp>
 80097da:	b988      	cbnz	r0, 8009800 <ff_chdir+0x78>
			strcpy( pxDir->pcCWD, pxDir->pcFileName );
 80097dc:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
 80097e0:	4620      	mov	r0, r4
 80097e2:	f00e f835 	bl	8017850 <strcpy>
			iResult = FF_ERR_NONE;
 80097e6:	2000      	movs	r0, #0
 80097e8:	bd38      	pop	{r3, r4, r5, pc}
 80097ea:	220c      	movs	r2, #12
 80097ec:	2100      	movs	r1, #0
 80097ee:	4608      	mov	r0, r1
 80097f0:	f00b f9da 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
 80097f4:	e7d2      	b.n	800979c <ff_chdir+0x14>
					pxDir->pcFileName[ iLength - 1 ] = '\0';
 80097f6:	4420      	add	r0, r4
 80097f8:	2300      	movs	r3, #0
 80097fa:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
 80097fe:	e7e3      	b.n	80097c8 <ff_chdir+0x40>
				else if( ff_finddir( pxDir->pcFileName ) != pdFALSE )
 8009800:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8009804:	f7ff ffa9 	bl	800975a <ff_finddir>
		if( iValid == pdTRUE )
 8009808:	2800      	cmp	r0, #0
 800980a:	d1e7      	bne.n	80097dc <ff_chdir+0x54>
			iResult = -1;
 800980c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return iResult;
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	080193b0 	.word	0x080193b0

08009818 <ff_deltree>:
	{
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4605      	mov	r5, r0
		pcPath = ( char * ) ffconfigMALLOC( ffconfigMAX_FILENAME );
 800981c:	20c1      	movs	r0, #193	; 0xc1
 800981e:	f009 fe73 	bl	8013508 <pvPortMalloc>
		if( pcPath != NULL )
 8009822:	b320      	cbz	r0, 800986e <ff_deltree+0x56>
 8009824:	4604      	mov	r4, r0
			pcDirectory = prvABSPath( pcDirectory );
 8009826:	4628      	mov	r0, r5
 8009828:	f7ff fa36 	bl	8008c98 <prvABSPath>
			snprintf (pcPath, ffconfigMAX_FILENAME, "%s", pcDirectory);
 800982c:	4603      	mov	r3, r0
 800982e:	4a14      	ldr	r2, [pc, #80]	; (8009880 <ff_deltree+0x68>)
 8009830:	21c1      	movs	r1, #193	; 0xc1
 8009832:	4620      	mov	r0, r4
 8009834:	f00d fbd1 	bl	8016fda <snprintf>
			iResult = ff_deltree_recurse (pcPath);
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff fe97 	bl	800956c <ff_deltree_recurse>
			if( iResult >= 0 )
 800983e:	1e05      	subs	r5, r0, #0
 8009840:	db04      	blt.n	800984c <ff_deltree+0x34>
				iResult = ff_rmdir( pcPath );
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fc19 	bl	800907a <ff_rmdir>
				if( iResult )
 8009848:	4605      	mov	r5, r0
 800984a:	b920      	cbnz	r0, 8009856 <ff_deltree+0x3e>
			ffconfigFREE( pcPath );
 800984c:	4620      	mov	r0, r4
 800984e:	f009 fec1 	bl	80135d4 <vPortFree>
	}
 8009852:	4628      	mov	r0, r5
 8009854:	bd38      	pop	{r3, r4, r5, pc}
	pvResult = pvTaskGetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX );
 8009856:	2100      	movs	r1, #0
 8009858:	4608      	mov	r0, r1
 800985a:	f00b f9b1 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
					FF_PRINTF("ff_deltree(%s): %s\n", pcPath, strerror( stdioGET_ERRNO( ) ) );
 800985e:	f00e f9e5 	bl	8017c2c <strerror>
 8009862:	4602      	mov	r2, r0
 8009864:	4621      	mov	r1, r4
 8009866:	4807      	ldr	r0, [pc, #28]	; (8009884 <ff_deltree+0x6c>)
 8009868:	f00d f872 	bl	8016950 <lUDPLoggingPrintf>
 800986c:	e7ee      	b.n	800984c <ff_deltree+0x34>
	vTaskSetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX, ( void * ) ( iErrno ) );
 800986e:	220c      	movs	r2, #12
 8009870:	2100      	movs	r1, #0
 8009872:	4608      	mov	r0, r1
 8009874:	f00b f998 	bl	8014ba8 <vTaskSetThreadLocalStoragePointer>
			iResult = -1;
 8009878:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return iResult;
 800987c:	e7e9      	b.n	8009852 <ff_deltree+0x3a>
 800987e:	bf00      	nop
 8009880:	0801b620 	.word	0x0801b620
 8009884:	08019314 	.word	0x08019314

08009888 <FF_tolower>:

	void FF_tolower( char *string, uint32_t ulLength )
	{
	uint32_t i;

		for( i = 0; i < ulLength; i++ )
 8009888:	b181      	cbz	r1, 80098ac <FF_tolower+0x24>
	{
 800988a:	b430      	push	{r4, r5}
 800988c:	4603      	mov	r3, r0
 800988e:	4408      	add	r0, r1
		{
			if( ( string[ i ] >= 'A' ) && ( string[ i ] <= 'Z' ) )
 8009890:	781c      	ldrb	r4, [r3, #0]
 8009892:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	2a19      	cmp	r2, #25
			{
				string[ i ] += 32;
 800989a:	bf9c      	itt	ls
 800989c:	3420      	addls	r4, #32
 800989e:	701c      	strbls	r4, [r3, #0]
			}
			if( string[ i ] == '\0' )
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	b112      	cbz	r2, 80098aa <FF_tolower+0x22>
 80098a4:	3301      	adds	r3, #1
		for( i = 0; i < ulLength; i++ )
 80098a6:	4283      	cmp	r3, r0
 80098a8:	d1f2      	bne.n	8009890 <FF_tolower+0x8>
			{
				break;
			}
		}
	}
 80098aa:	bc30      	pop	{r4, r5}
 80098ac:	4770      	bx	lr

080098ae <FF_strmatch>:
 *
 **/

#if( ffconfigUNICODE_UTF16_SUPPORT == 0 )
	BaseType_t FF_strmatch( const char *str1, const char *str2, BaseType_t xLength )
	{
 80098ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
		register BaseType_t i;
		register char	char1, char2;

		if( xLength == 0 )
 80098b4:	4617      	mov	r7, r2
 80098b6:	b952      	cbnz	r2, 80098ce <FF_strmatch+0x20>
		{
			xLength = strlen( str1 );
 80098b8:	f7f6 fc94 	bl	80001e4 <strlen>
 80098bc:	4606      	mov	r6, r0
			if( xLength != ( BaseType_t )strlen( str2 ) )
 80098be:	4620      	mov	r0, r4
 80098c0:	f7f6 fc90 	bl	80001e4 <strlen>
 80098c4:	4286      	cmp	r6, r0
 80098c6:	d001      	beq.n	80098cc <FF_strmatch+0x1e>
			{
				return pdFALSE;
 80098c8:	4638      	mov	r0, r7
 80098ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xLength != ( BaseType_t )strlen( str2 ) )
 80098cc:	4637      	mov	r7, r6
			}
		}

		for( i = 0; i < xLength; i++ )
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	dd1a      	ble.n	8009908 <FF_strmatch+0x5a>
 80098d2:	462e      	mov	r6, r5
 80098d4:	1e61      	subs	r1, r4, #1
 80098d6:	19e8      	adds	r0, r5, r7
		{
			char1 = str1[ i ];
 80098d8:	f816 4b01 	ldrb.w	r4, [r6], #1
			char2 = str2[ i ];
 80098dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			if( ( char1 >= 'A' ) && ( char1 <= 'Z' ) )
 80098e0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80098e4:	b2ed      	uxtb	r5, r5
 80098e6:	2d19      	cmp	r5, #25
			{
				char1 += 32;
 80098e8:	bf9c      	itt	ls
 80098ea:	3420      	addls	r4, #32
 80098ec:	b2e4      	uxtbls	r4, r4
			}
			if( ( char2 >= 'A' ) && ( char2 <= 'Z' ) )
 80098ee:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 80098f2:	b2ed      	uxtb	r5, r5
 80098f4:	2d19      	cmp	r5, #25
			{
				char2 += 32;
 80098f6:	bf9c      	itt	ls
 80098f8:	3320      	addls	r3, #32
 80098fa:	b2db      	uxtbls	r3, r3
			}

			if( char1 != char2 )
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d105      	bne.n	800990c <FF_strmatch+0x5e>
		for( i = 0; i < xLength; i++ )
 8009900:	4286      	cmp	r6, r0
 8009902:	d1e9      	bne.n	80098d8 <FF_strmatch+0x2a>
			{
				return pdFALSE;
			}
		}

		return pdTRUE;
 8009904:	2001      	movs	r0, #1
 8009906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009908:	2001      	movs	r0, #1
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return pdFALSE;
 800990c:	2000      	movs	r0, #0
	}
 800990e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009910 <FF_strtok>:
 *			Use at your own risk. (This is for FreeRTOS+FAT's use only).
 **/

#if( ffconfigUNICODE_UTF16_SUPPORT == 0 )
	char *FF_strtok( const char *string, char *token, uint16_t *tokenNumber, BaseType_t *last, BaseType_t xLength )
	{
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	9f06      	ldr	r7, [sp, #24]
		uint16_t i,y, tokenStart, tokenEnd = 0;

		i = 0;
		y = 0;

		if( ( string[ i ] == '\\' ) || ( string[ i ] == '/' ) )
 8009914:	7804      	ldrb	r4, [r0, #0]
 8009916:	2c5c      	cmp	r4, #92	; 0x5c
 8009918:	d009      	beq.n	800992e <FF_strtok+0x1e>
 800991a:	2c2f      	cmp	r4, #47	; 0x2f
 800991c:	bf14      	ite	ne
 800991e:	2400      	movne	r4, #0
 8009920:	2401      	moveq	r4, #1
 8009922:	b2a4      	uxth	r4, r4
			i++;
		}

		tokenStart = i;

		while( i < xLength )
 8009924:	42a7      	cmp	r7, r4
 8009926:	dd28      	ble.n	800997a <FF_strtok+0x6a>
 8009928:	46a6      	mov	lr, r4
 800992a:	2500      	movs	r5, #0
 800992c:	e011      	b.n	8009952 <FF_strtok+0x42>
 800992e:	2401      	movs	r4, #1
 8009930:	e7f7      	b.n	8009922 <FF_strtok+0x12>
		{
			if( ( string[ i ] == '\\' ) || ( string[ i ] == '/' ) )
			{
				y++;
 8009932:	3501      	adds	r5, #1
 8009934:	b2ad      	uxth	r5, r5
				if( y == *tokenNumber )
 8009936:	8816      	ldrh	r6, [r2, #0]
 8009938:	42b5      	cmp	r5, r6
				{
					tokenStart = ( uint16_t )( i + 1 );
 800993a:	bf04      	itt	eq
 800993c:	f104 0e01 	addeq.w	lr, r4, #1
 8009940:	fa1f fe8e 	uxtheq.w	lr, lr
				}
				if( y == ( *tokenNumber + 1 ) )
 8009944:	3601      	adds	r6, #1
 8009946:	42b5      	cmp	r5, r6
 8009948:	d009      	beq.n	800995e <FF_strtok+0x4e>
				{
					tokenEnd = i;
					break;
				}
			}
			i++;
 800994a:	3401      	adds	r4, #1
 800994c:	b2a4      	uxth	r4, r4
		while( i < xLength )
 800994e:	42bc      	cmp	r4, r7
 8009950:	da14      	bge.n	800997c <FF_strtok+0x6c>
			if( ( string[ i ] == '\\' ) || ( string[ i ] == '/' ) )
 8009952:	5d06      	ldrb	r6, [r0, r4]
 8009954:	2e5c      	cmp	r6, #92	; 0x5c
 8009956:	d0ec      	beq.n	8009932 <FF_strtok+0x22>
 8009958:	2e2f      	cmp	r6, #47	; 0x2f
 800995a:	d1f6      	bne.n	800994a <FF_strtok+0x3a>
 800995c:	e7e9      	b.n	8009932 <FF_strtok+0x22>
		}

		if( tokenEnd == 0 )
 800995e:	b994      	cbnz	r4, 8009986 <FF_strtok+0x76>
 8009960:	e00c      	b.n	800997c <FF_strtok+0x6c>
			memcpy( token, ( string + tokenStart ), ( uint32_t )( tokenEnd - tokenStart ) );
			token[ tokenEnd - tokenStart ] = '\0';
		}
		else
		{
			memcpy( token, ( string + tokenStart ), ( uint32_t )( ffconfigMAX_FILENAME ) );
 8009962:	22c1      	movs	r2, #193	; 0xc1
 8009964:	eb00 010e 	add.w	r1, r0, lr
 8009968:	4628      	mov	r0, r5
 800996a:	f00d ff0a 	bl	8017782 <memcpy>
			token[ ffconfigMAX_FILENAME - 1 ] = '\0';
 800996e:	2300      	movs	r3, #0
 8009970:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
 8009974:	e015      	b.n	80099a2 <FF_strtok+0x92>
				return NULL;
 8009976:	2000      	movs	r0, #0
 8009978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tokenStart = i;
 800997a:	46a6      	mov	lr, r4
			if( *last == pdTRUE )
 800997c:	681d      	ldr	r5, [r3, #0]
 800997e:	2d01      	cmp	r5, #1
 8009980:	d0f9      	beq.n	8009976 <FF_strtok+0x66>
				*last = pdTRUE;
 8009982:	2501      	movs	r5, #1
 8009984:	601d      	str	r5, [r3, #0]
 8009986:	4616      	mov	r6, r2
 8009988:	460d      	mov	r5, r1
		if( ( tokenEnd - tokenStart ) < ffconfigMAX_FILENAME )
 800998a:	eba4 040e 	sub.w	r4, r4, lr
 800998e:	2cc0      	cmp	r4, #192	; 0xc0
 8009990:	dce7      	bgt.n	8009962 <FF_strtok+0x52>
			memcpy( token, ( string + tokenStart ), ( uint32_t )( tokenEnd - tokenStart ) );
 8009992:	4622      	mov	r2, r4
 8009994:	eb00 010e 	add.w	r1, r0, lr
 8009998:	4628      	mov	r0, r5
 800999a:	f00d fef2 	bl	8017782 <memcpy>
			token[ tokenEnd - tokenStart ] = '\0';
 800999e:	2300      	movs	r3, #0
 80099a0:	552b      	strb	r3, [r5, r4]
		}
		/*token[tokenEnd - tokenStart] = '\0'; */
		*tokenNumber += 1;
 80099a2:	8833      	ldrh	r3, [r6, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	8033      	strh	r3, [r6, #0]

		return token;
 80099a8:	4628      	mov	r0, r5
 80099aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099ac <FF_FS_Count>:
static const char rootDir[] = "/";

int FF_FS_Count( void )
{
	return file_systems.fsCount;
}
 80099ac:	4b01      	ldr	r3, [pc, #4]	; (80099b4 <FF_FS_Count+0x8>)
 80099ae:	6998      	ldr	r0, [r3, #24]
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000378 	.word	0x20000378

080099b8 <FF_FS_Init>:
/*-----------------------------------------------------------*/

void FF_FS_Init( void )
{
	memset( &file_systems, '\0', sizeof( file_systems ) );
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <FF_FS_Init+0x1c>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	609a      	str	r2, [r3, #8]
 80099c2:	60da      	str	r2, [r3, #12]
 80099c4:	615a      	str	r2, [r3, #20]

	/* There is always a root file system, even if it doesn't have a
	IO manager. */
	file_systems.fsCount = 1;
 80099c6:	2201      	movs	r2, #1
 80099c8:	619a      	str	r2, [r3, #24]
	/* Can safely use strcpy because 'rootDir' has a fixed length of 1 byte. */
	strcpy( file_systems.systems[0].pcPath, rootDir );
 80099ca:	212f      	movs	r1, #47	; 0x2f
 80099cc:	8019      	strh	r1, [r3, #0]
	file_systems.systems[0].xPathlen = 1;
 80099ce:	611a      	str	r2, [r3, #16]
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000378 	.word	0x20000378

080099d8 <FF_FS_Add>:
}
/*-----------------------------------------------------------*/

int FF_FS_Add( const char *pcPath, FF_Disk_t *pxDisk )
{
 80099d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	4680      	mov	r8, r0
	int ret = 0;

	configASSERT( pxDisk );
 80099de:	468a      	mov	sl, r1
 80099e0:	b1b1      	cbz	r1, 8009a10 <FF_FS_Add+0x38>

	if (*pcPath != '/')
 80099e2:	f898 3000 	ldrb.w	r3, [r8]
 80099e6:	2b2f      	cmp	r3, #47	; 0x2f
 80099e8:	d117      	bne.n	8009a1a <FF_FS_Add+0x42>
		FF_PRINTF( "FF_FS_Add: Need a \"/\": '%s'\n", pcPath );
	}
	else
	{
		int index = -1;
		int len = ( int ) strlen (pcPath);
 80099ea:	4640      	mov	r0, r8
 80099ec:	f7f6 fbfa 	bl	80001e4 <strlen>
 80099f0:	4681      	mov	r9, r0
 80099f2:	4607      	mov	r7, r0

		if( file_systems.fsCount == 0 )
 80099f4:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <FF_FS_Add+0xcc>)
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	b1b3      	cbz	r3, 8009a28 <FF_FS_Add+0x50>
		{
			FF_FS_Init();
		}

		if( len == 1 )
 80099fa:	f1b9 0f01 	cmp.w	r9, #1
 80099fe:	d03a      	beq.n	8009a76 <FF_FS_Add+0x9e>
		}
		else
		{
			int i;
			FF_SubSystem_t *pxSubSystem = file_systems.systems + 1;	/* Skip the root entry */
			for( i = 1; i < file_systems.fsCount; i++, pxSubSystem++ )
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <FF_FS_Add+0xcc>)
 8009a02:	699e      	ldr	r6, [r3, #24]
 8009a04:	2e01      	cmp	r6, #1
 8009a06:	dd25      	ble.n	8009a54 <FF_FS_Add+0x7c>
 8009a08:	f103 0418 	add.w	r4, r3, #24
 8009a0c:	2501      	movs	r5, #1
 8009a0e:	e012      	b.n	8009a36 <FF_FS_Add+0x5e>
	configASSERT( pxDisk );
 8009a10:	216b      	movs	r1, #107	; 0x6b
 8009a12:	4825      	ldr	r0, [pc, #148]	; (8009aa8 <FF_FS_Add+0xd0>)
 8009a14:	f00d fc44 	bl	80172a0 <vAssertCalled>
 8009a18:	e7e3      	b.n	80099e2 <FF_FS_Add+0xa>
		FF_PRINTF( "FF_FS_Add: Need a \"/\": '%s'\n", pcPath );
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	4823      	ldr	r0, [pc, #140]	; (8009aac <FF_FS_Add+0xd4>)
 8009a1e:	f00c ff97 	bl	8016950 <lUDPLoggingPrintf>
	int ret = 0;
 8009a22:	2000      	movs	r0, #0
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			FF_FS_Init();
 8009a28:	f7ff ffc6 	bl	80099b8 <FF_FS_Init>
 8009a2c:	e7e5      	b.n	80099fa <FF_FS_Add+0x22>
			for( i = 1; i < file_systems.fsCount; i++, pxSubSystem++ )
 8009a2e:	3501      	adds	r5, #1
 8009a30:	3418      	adds	r4, #24
 8009a32:	42b5      	cmp	r5, r6
 8009a34:	d00e      	beq.n	8009a54 <FF_FS_Add+0x7c>
			{
				if( ( pxSubSystem->xPathlen == len ) &&
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	429f      	cmp	r7, r3
 8009a3a:	d1f8      	bne.n	8009a2e <FF_FS_Add+0x56>
					( memcmp( pxSubSystem->pcPath, pcPath, ( size_t )len ) == 0 ) )
 8009a3c:	464a      	mov	r2, r9
 8009a3e:	4641      	mov	r1, r8
 8009a40:	4620      	mov	r0, r4
 8009a42:	f00d fe8f 	bl	8017764 <memcmp>
				if( ( pxSubSystem->xPathlen == len ) &&
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1f1      	bne.n	8009a2e <FF_FS_Add+0x56>
					index = i;	/* A system is updated with a new handler. */
					break;
				}
			}
		}
		if( ( index < 0 ) && ( file_systems.fsCount >= ARRAY_SIZE( file_systems.systems ) ) )
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	db02      	blt.n	8009a54 <FF_FS_Add+0x7c>
		{
			FF_PRINTF( "FF_FS_Add: Table full '%s' (max = %d)\n", pcPath, (int)ARRAY_SIZE( file_systems.systems ) );
		}
		else
		{
			vTaskSuspendAll();
 8009a4e:	f00a fd57 	bl	8014500 <vTaskSuspendAll>
 8009a52:	e013      	b.n	8009a7c <FF_FS_Add+0xa4>
		if( ( index < 0 ) && ( file_systems.fsCount >= ARRAY_SIZE( file_systems.systems ) ) )
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	dc06      	bgt.n	8009a66 <FF_FS_Add+0x8e>
			vTaskSuspendAll();
 8009a58:	f00a fd52 	bl	8014500 <vTaskSuspendAll>
			{
				if( index < 0 )
				{
					index = file_systems.fsCount++;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <FF_FS_Add+0xcc>)
 8009a5e:	699d      	ldr	r5, [r3, #24]
 8009a60:	1c6a      	adds	r2, r5, #1
 8009a62:	619a      	str	r2, [r3, #24]
 8009a64:	e00a      	b.n	8009a7c <FF_FS_Add+0xa4>
			FF_PRINTF( "FF_FS_Add: Table full '%s' (max = %d)\n", pcPath, (int)ARRAY_SIZE( file_systems.systems ) );
 8009a66:	2201      	movs	r2, #1
 8009a68:	4641      	mov	r1, r8
 8009a6a:	4811      	ldr	r0, [pc, #68]	; (8009ab0 <FF_FS_Add+0xd8>)
 8009a6c:	f00c ff70 	bl	8016950 <lUDPLoggingPrintf>
	int ret = 0;
 8009a70:	2000      	movs	r0, #0
			FF_PRINTF( "FF_FS_Add: Table full '%s' (max = %d)\n", pcPath, (int)ARRAY_SIZE( file_systems.systems ) );
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			vTaskSuspendAll();
 8009a76:	f00a fd43 	bl	8014500 <vTaskSuspendAll>
			index = 0;
 8009a7a:	2500      	movs	r5, #0
				}

				strncpy( file_systems.systems[ index ].pcPath, pcPath, sizeof( file_systems.systems[ index ].pcPath ) );
 8009a7c:	4c09      	ldr	r4, [pc, #36]	; (8009aa4 <FF_FS_Add+0xcc>)
 8009a7e:	006e      	lsls	r6, r5, #1
 8009a80:	1977      	adds	r7, r6, r5
 8009a82:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8009a86:	2210      	movs	r2, #16
 8009a88:	4641      	mov	r1, r8
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	f00e f925 	bl	8017cda <strncpy>
				file_systems.systems[ index ].xPathlen = len;
 8009a90:	f8c7 9010 	str.w	r9, [r7, #16]
				file_systems.systems[ index ].pxManager = pxDisk->pxIOManager;
 8009a94:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009a98:	617b      	str	r3, [r7, #20]
			}
			xTaskResumeAll( );
 8009a9a:	f00a fe0b 	bl	80146b4 <xTaskResumeAll>
			ret = 1;
 8009a9e:	2001      	movs	r0, #1
		}
	}

	return ret;
 8009aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa4:	20000378 	.word	0x20000378
 8009aa8:	080193f0 	.word	0x080193f0
 8009aac:	0801941c 	.word	0x0801941c
 8009ab0:	0801943c 	.word	0x0801943c

08009ab4 <FF_FS_Find>:
	}
}
/*-----------------------------------------------------------*/

int FF_FS_Find( const char *pcPath, FF_DirHandler_t *pxHandler )
{
 8009ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab8:	4680      	mov	r8, r0
 8009aba:	468a      	mov	sl, r1
int len;
int index;
int iReturn;

	pxSubSystem = file_systems.systems + 1;
	len = ( int ) strlen( pcPath );
 8009abc:	f7f6 fb92 	bl	80001e4 <strlen>

	memset( pxHandler, '\0', sizeof( *pxHandler ) );
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8ca 3000 	str.w	r3, [sl]
 8009ac6:	f8ca 3004 	str.w	r3, [sl, #4]
 8009aca:	f8ca 3008 	str.w	r3, [sl, #8]
 8009ace:	f8ca 300c 	str.w	r3, [sl, #12]
	for( index = 1; index < file_systems.fsCount; index++, pxSubSystem++ )
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <FF_FS_Find+0xa4>)
 8009ad4:	699f      	ldr	r7, [r3, #24]
 8009ad6:	2f01      	cmp	r7, #1
 8009ad8:	dd31      	ble.n	8009b3e <FF_FS_Find+0x8a>
 8009ada:	4681      	mov	r9, r0
 8009adc:	2501      	movs	r5, #1
 8009ade:	f103 0418 	add.w	r4, r3, #24
 8009ae2:	e017      	b.n	8009b14 <FF_FS_Find+0x60>
			( memcmp( pxSubSystem->pcPath, pcPath, ( size_t ) pxSubSystem->xPathlen ) == 0 ) &&
			( ( pcPath[pxSubSystem->xPathlen] == '\0' ) || ( pcPath[pxSubSystem->xPathlen] == '/') ) )	/* System "/ram" should not match with "/ramc/etc". */
		{
			if( pcPath[pxSubSystem->xPathlen] == '\0')
			{
				pxHandler->pcPath = rootDir;
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <FF_FS_Find+0xa8>)
 8009ae6:	f8ca 3004 	str.w	r3, [sl, #4]
			else
			{
				pxHandler->pcPath = pcPath + pxSubSystem->xPathlen;
			}

			pxHandler->pxManager = pxSubSystem->pxManager;
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	f8ca 3008 	str.w	r3, [sl, #8]
			break;
		}
	}

	if( index == file_systems.fsCount )
 8009af0:	4b19      	ldr	r3, [pc, #100]	; (8009b58 <FF_FS_Find+0xa4>)
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	d024      	beq.n	8009b42 <FF_FS_Find+0x8e>
	{
		pxHandler->pcPath = pcPath;
		pxHandler->pxManager = file_systems.systems[0].pxManager;
	}

	if( FF_Mounted( pxHandler->pxManager ) )
 8009af8:	f8da 3008 	ldr.w	r3, [sl, #8]
FF_Error_t FF_Mount( FF_Disk_t *pxDisk, BaseType_t xPartitionNumber );
FF_Error_t FF_Unmount( FF_Disk_t *pxDisk );
FF_Error_t FF_FlushCache( FF_IOManager_t *pxIOManager );
static portINLINE BaseType_t FF_Mounted( FF_IOManager_t *pxIOManager )
{
	return pxIOManager && pxIOManager->xPartition.ucPartitionMounted;
 8009afc:	b343      	cbz	r3, 8009b50 <FF_FS_Find+0x9c>
 8009afe:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 8009b02:	3000      	adds	r0, #0
 8009b04:	bf18      	it	ne
 8009b06:	2001      	movne	r0, #1
 8009b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for( index = 1; index < file_systems.fsCount; index++, pxSubSystem++ )
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	3418      	adds	r4, #24
 8009b10:	42bd      	cmp	r5, r7
 8009b12:	d016      	beq.n	8009b42 <FF_FS_Find+0x8e>
		if( ( len >= pxSubSystem->xPathlen ) &&
 8009b14:	6926      	ldr	r6, [r4, #16]
 8009b16:	45b1      	cmp	r9, r6
 8009b18:	dbf8      	blt.n	8009b0c <FF_FS_Find+0x58>
			( memcmp( pxSubSystem->pcPath, pcPath, ( size_t ) pxSubSystem->xPathlen ) == 0 ) &&
 8009b1a:	4632      	mov	r2, r6
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f00d fe20 	bl	8017764 <memcmp>
		if( ( len >= pxSubSystem->xPathlen ) &&
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1f1      	bne.n	8009b0c <FF_FS_Find+0x58>
			( ( pcPath[pxSubSystem->xPathlen] == '\0' ) || ( pcPath[pxSubSystem->xPathlen] == '/') ) )	/* System "/ram" should not match with "/ramc/etc". */
 8009b28:	eb08 0206 	add.w	r2, r8, r6
 8009b2c:	f818 3006 	ldrb.w	r3, [r8, r6]
			( memcmp( pxSubSystem->pcPath, pcPath, ( size_t ) pxSubSystem->xPathlen ) == 0 ) &&
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0d7      	beq.n	8009ae4 <FF_FS_Find+0x30>
			( ( pcPath[pxSubSystem->xPathlen] == '\0' ) || ( pcPath[pxSubSystem->xPathlen] == '/') ) )	/* System "/ram" should not match with "/ramc/etc". */
 8009b34:	2b2f      	cmp	r3, #47	; 0x2f
 8009b36:	d1e9      	bne.n	8009b0c <FF_FS_Find+0x58>
				pxHandler->pcPath = pcPath + pxSubSystem->xPathlen;
 8009b38:	f8ca 2004 	str.w	r2, [sl, #4]
 8009b3c:	e7d5      	b.n	8009aea <FF_FS_Find+0x36>
	for( index = 1; index < file_systems.fsCount; index++, pxSubSystem++ )
 8009b3e:	2501      	movs	r5, #1
 8009b40:	e7d6      	b.n	8009af0 <FF_FS_Find+0x3c>
		pxHandler->pcPath = pcPath;
 8009b42:	f8ca 8004 	str.w	r8, [sl, #4]
		pxHandler->pxManager = file_systems.systems[0].pxManager;
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <FF_FS_Find+0xa4>)
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	f8ca 3008 	str.w	r3, [sl, #8]
 8009b4e:	e7d3      	b.n	8009af8 <FF_FS_Find+0x44>
 8009b50:	2000      	movs	r0, #0
	{
		iReturn = pdFALSE;
	}

	return iReturn;
}
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	bf00      	nop
 8009b58:	20000378 	.word	0x20000378
 8009b5c:	08019464 	.word	0x08019464

08009b60 <FF_FS_Get>:
int FF_FS_Get( int iIndex, FF_SubSystem_t *pxSystem )
{
int iReturn;

	/* Get a copy of a fs info. */
	if( ( iIndex < 0 ) || ( iIndex >= file_systems.fsCount ) )
 8009b60:	2800      	cmp	r0, #0
 8009b62:	db13      	blt.n	8009b8c <FF_FS_Get+0x2c>
 8009b64:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <FF_FS_Get+0x34>)
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	4298      	cmp	r0, r3
 8009b6a:	da11      	bge.n	8009b90 <FF_FS_Get+0x30>
{
 8009b6c:	b430      	push	{r4, r5}
	{
		iReturn = 0;
	}
	else
	{
		*pxSystem = file_systems.systems[ iIndex ];
 8009b6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009b72:	460c      	mov	r4, r1
 8009b74:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <FF_FS_Get+0x34>)
 8009b76:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 8009b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b82:	e884 0003 	stmia.w	r4, {r0, r1}
		iReturn = 1;
 8009b86:	2001      	movs	r0, #1
	}

	return iReturn;
}
 8009b88:	bc30      	pop	{r4, r5}
 8009b8a:	4770      	bx	lr
		iReturn = 0;
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	4770      	bx	lr
 8009b90:	2000      	movs	r0, #0
	return iReturn;
 8009b92:	4770      	bx	lr
 8009b94:	20000378 	.word	0x20000378

08009b98 <FreeRTOS_gmtime_r>:
	}
	return iDays;
}

FF_TimeStruct_t *FreeRTOS_gmtime_r( const time_t *pxTime, FF_TimeStruct_t *pxTimeBuf )
{
 8009b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	460c      	mov	r4, r1
time_t xTime = *pxTime;
 8009b9e:	6805      	ldr	r5, [r0, #0]
unsigned long ulDaySeconds, ulDayNumber;
int iYear = GMTIME_FIRST_YEAR;
int iMonth;

	/* Clear all fields, some might not get set here. */
	memset( ( void * )pxTimeBuf, '\0', sizeof( *pxTimeBuf ) );
 8009ba0:	2224      	movs	r2, #36	; 0x24
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f00d fe11 	bl	80177cc <memset>

	/* Seconds since last midnight. */
	ulDaySeconds = ( unsigned long ) ( xTime % SECONDS_PER_DAY ) ;
 8009baa:	4b49      	ldr	r3, [pc, #292]	; (8009cd0 <FreeRTOS_gmtime_r+0x138>)
 8009bac:	fb83 2305 	smull	r2, r3, r3, r5
 8009bb0:	442b      	add	r3, r5
 8009bb2:	141b      	asrs	r3, r3, #16
 8009bb4:	17ea      	asrs	r2, r5, #31
 8009bb6:	1a98      	subs	r0, r3, r2
 8009bb8:	4946      	ldr	r1, [pc, #280]	; (8009cd4 <FreeRTOS_gmtime_r+0x13c>)
 8009bba:	fb01 5010 	mls	r0, r1, r0, r5

	/* Days since 1 Jan 1970. */
	ulDayNumber = ( unsigned long ) ( xTime / SECONDS_PER_DAY ) ;
 8009bbe:	1a9b      	subs	r3, r3, r2

	/* Today's HH:MM:SS */
	pxTimeBuf->tm_hour = ulDaySeconds / SECONDS_PER_HOUR;
 8009bc0:	4a45      	ldr	r2, [pc, #276]	; (8009cd8 <FreeRTOS_gmtime_r+0x140>)
 8009bc2:	fba2 1200 	umull	r1, r2, r2, r0
 8009bc6:	0ad2      	lsrs	r2, r2, #11
 8009bc8:	60a2      	str	r2, [r4, #8]
	pxTimeBuf->tm_min = ( ulDaySeconds % SECONDS_PER_HOUR ) / 60;
 8009bca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009bce:	fb01 0212 	mls	r2, r1, r2, r0
 8009bd2:	4942      	ldr	r1, [pc, #264]	; (8009cdc <FreeRTOS_gmtime_r+0x144>)
 8009bd4:	fba1 5202 	umull	r5, r2, r1, r2
 8009bd8:	0952      	lsrs	r2, r2, #5
 8009bda:	6062      	str	r2, [r4, #4]
	pxTimeBuf->tm_sec = ulDaySeconds % 60;
 8009bdc:	fba1 2100 	umull	r2, r1, r1, r0
 8009be0:	094a      	lsrs	r2, r1, #5
 8009be2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8009be6:	eba0 0282 	sub.w	r2, r0, r2, lsl #2
 8009bea:	6022      	str	r2, [r4, #0]

	/* Today's week day, knowing that 1-1-1970 was a THursday. */
	pxTimeBuf->tm_wday = ( ulDayNumber + WEEK_DAY_THURSDAY ) % 7;
 8009bec:	1d19      	adds	r1, r3, #4
 8009bee:	4a3c      	ldr	r2, [pc, #240]	; (8009ce0 <FreeRTOS_gmtime_r+0x148>)
 8009bf0:	fba2 0201 	umull	r0, r2, r2, r1
 8009bf4:	1a88      	subs	r0, r1, r2
 8009bf6:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8009bfa:	0892      	lsrs	r2, r2, #2
 8009bfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009c00:	1a8a      	subs	r2, r1, r2
 8009c02:	61a2      	str	r2, [r4, #24]
int iYear = GMTIME_FIRST_YEAR;
 8009c04:	f240 72b2 	movw	r2, #1970	; 0x7b2
		iDays = 365;
 8009c08:	f240 176d 	movw	r7, #365	; 0x16d
	else if( ( iYear % 400 ) == 0 )
 8009c0c:	4e35      	ldr	r6, [pc, #212]	; (8009ce4 <FreeRTOS_gmtime_r+0x14c>)
 8009c0e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
		iDays = 366;
 8009c12:	f44f 78b7 	mov.w	r8, #366	; 0x16e
	else if( ( iYear % 100 ) == 0 )
 8009c16:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009c1a:	e004      	b.n	8009c26 <FreeRTOS_gmtime_r+0x8e>
		iDays = 365;
 8009c1c:	4639      	mov	r1, r7

	for( ; ; )
	{
		/* Keep subtracting 365 (or 366) days while possible. */
		unsigned long ulDays = ulDaysPerYear( iYear );
		if( ulDayNumber < ulDays )
 8009c1e:	428b      	cmp	r3, r1
 8009c20:	d31b      	bcc.n	8009c5a <FreeRTOS_gmtime_r+0xc2>
		{
			break;
		}
		ulDayNumber -= ulDays;
 8009c22:	1a5b      	subs	r3, r3, r1
		iYear++;
 8009c24:	3201      	adds	r2, #1
	if( ( iYear % 4 ) != 0 )
 8009c26:	f012 0503 	ands.w	r5, r2, #3
 8009c2a:	d1f7      	bne.n	8009c1c <FreeRTOS_gmtime_r+0x84>
	else if( ( iYear % 400 ) == 0 )
 8009c2c:	fb86 0102 	smull	r0, r1, r6, r2
 8009c30:	17d0      	asrs	r0, r2, #31
 8009c32:	ebc0 11e1 	rsb	r1, r0, r1, asr #7
 8009c36:	fb0e 2111 	mls	r1, lr, r1, r2
 8009c3a:	b161      	cbz	r1, 8009c56 <FreeRTOS_gmtime_r+0xbe>
	else if( ( iYear % 100 ) == 0 )
 8009c3c:	fb86 0102 	smull	r0, r1, r6, r2
 8009c40:	17d0      	asrs	r0, r2, #31
 8009c42:	ebc0 1161 	rsb	r1, r0, r1, asr #5
 8009c46:	fb0c 2111 	mls	r1, ip, r1, r2
		iDays = 365;
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	bf14      	ite	ne
 8009c4e:	f44f 71b7 	movne.w	r1, #366	; 0x16e
 8009c52:	4639      	moveq	r1, r7
 8009c54:	e7e3      	b.n	8009c1e <FreeRTOS_gmtime_r+0x86>
		iDays = 366;
 8009c56:	4641      	mov	r1, r8
 8009c58:	e7e1      	b.n	8009c1e <FreeRTOS_gmtime_r+0x86>
	}
	/* Subtract 1900. */
	pxTimeBuf->tm_year = iYear - TM_STRUCT_FIRST_YEAR;
 8009c5a:	f2a2 716c 	subw	r1, r2, #1900	; 0x76c
 8009c5e:	6161      	str	r1, [r4, #20]

	/* The day within this year. */
	pxTimeBuf->tm_yday = ulDayNumber;
 8009c60:	61e3      	str	r3, [r4, #28]
	else if( ( iYear % 400 ) == 0 )
 8009c62:	4920      	ldr	r1, [pc, #128]	; (8009ce4 <FreeRTOS_gmtime_r+0x14c>)
 8009c64:	fb81 0102 	smull	r0, r1, r1, r2
 8009c68:	17d6      	asrs	r6, r2, #31
 8009c6a:	ebc6 17e1 	rsb	r7, r6, r1, asr #7
 8009c6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009c72:	fb00 2717 	mls	r7, r0, r7, r2
	else if( ( iYear % 100 ) == 0 )
 8009c76:	ebc6 1661 	rsb	r6, r6, r1, asr #5
 8009c7a:	2164      	movs	r1, #100	; 0x64
 8009c7c:	fb01 2616 	mls	r6, r1, r6, r2

	/* Month are counted as 0..11 */
	iMonth = 0;
 8009c80:	2200      	movs	r2, #0
		iDays = 28;
 8009c82:	f04f 0e1c 	mov.w	lr, #28
		iDays = 29;
 8009c86:	f04f 0c1d 	mov.w	ip, #29
		if(  ( MASK_LONG_MONTHS & ( 1u << iMonth ) ) != 0 )
 8009c8a:	f640 20d5 	movw	r0, #2773	; 0xad5
 8009c8e:	e00b      	b.n	8009ca8 <FreeRTOS_gmtime_r+0x110>
	if( ( iYear % 4 ) != 0 )
 8009c90:	b92d      	cbnz	r5, 8009c9e <FreeRTOS_gmtime_r+0x106>
	else if( ( iYear % 400 ) == 0 )
 8009c92:	b1a7      	cbz	r7, 8009cbe <FreeRTOS_gmtime_r+0x126>
		iDays = 29;
 8009c94:	2e00      	cmp	r6, #0
 8009c96:	bf0c      	ite	eq
 8009c98:	211c      	moveq	r1, #28
 8009c9a:	211d      	movne	r1, #29
 8009c9c:	e000      	b.n	8009ca0 <FreeRTOS_gmtime_r+0x108>
		iDays = 28;
 8009c9e:	4671      	mov	r1, lr
	for( ; ; )
	{
		unsigned long ulDays = iDaysPerMonth( iYear, iMonth );
		/* Keep subtracting 30 (or 28, 29, or 31) days while possible. */
		if( ulDayNumber < ulDays )
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	d30e      	bcc.n	8009cc2 <FreeRTOS_gmtime_r+0x12a>
		{
			break;
		}
		ulDayNumber -= ulDays;
 8009ca4:	1a5b      	subs	r3, r3, r1
		iMonth++;
 8009ca6:	3201      	adds	r2, #1
	if (iMonth != 1 )
 8009ca8:	2a01      	cmp	r2, #1
 8009caa:	d0f1      	beq.n	8009c90 <FreeRTOS_gmtime_r+0xf8>
		if(  ( MASK_LONG_MONTHS & ( 1u << iMonth ) ) != 0 )
 8009cac:	fa20 f102 	lsr.w	r1, r0, r2
 8009cb0:	f001 0101 	and.w	r1, r1, #1
			iDays = 30;
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	bf14      	ite	ne
 8009cb8:	211f      	movne	r1, #31
 8009cba:	211e      	moveq	r1, #30
 8009cbc:	e7f0      	b.n	8009ca0 <FreeRTOS_gmtime_r+0x108>
		iDays = 29;
 8009cbe:	4661      	mov	r1, ip
 8009cc0:	e7ee      	b.n	8009ca0 <FreeRTOS_gmtime_r+0x108>
	}
	pxTimeBuf->tm_mon = iMonth;
 8009cc2:	6122      	str	r2, [r4, #16]

	/* Month days are counted as 1..31 */
	pxTimeBuf->tm_mday = ulDayNumber + 1;
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	60e3      	str	r3, [r4, #12]

	return pxTimeBuf;
}
 8009cc8:	4620      	mov	r0, r4
 8009cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cce:	bf00      	nop
 8009cd0:	c22e4507 	.word	0xc22e4507
 8009cd4:	00015180 	.word	0x00015180
 8009cd8:	91a2b3c5 	.word	0x91a2b3c5
 8009cdc:	88888889 	.word	0x88888889
 8009ce0:	24924925 	.word	0x24924925
 8009ce4:	51eb851f 	.word	0x51eb851f

08009ce8 <FF_GetSystemTime>:
{
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	4604      	mov	r4, r0
	time_t secs = FreeRTOS_time( NULL );
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f00c feec 	bl	8016acc <FreeRTOS_time>
 8009cf4:	9000      	str	r0, [sp, #0]
	FreeRTOS_gmtime_r( &secs, &xTimeStruct );
 8009cf6:	a901      	add	r1, sp, #4
 8009cf8:	4668      	mov	r0, sp
 8009cfa:	f7ff ff4d 	bl	8009b98 <FreeRTOS_gmtime_r>
	pxTime->Hour = xTimeStruct.tm_hour;
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	80e3      	strh	r3, [r4, #6]
	pxTime->Minute = xTimeStruct.tm_min;
 8009d02:	9b02      	ldr	r3, [sp, #8]
 8009d04:	8123      	strh	r3, [r4, #8]
	pxTime->Second = xTimeStruct.tm_sec;
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	8163      	strh	r3, [r4, #10]
	pxTime->Day = xTimeStruct.tm_mday;
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	80a3      	strh	r3, [r4, #4]
	pxTime->Month = xTimeStruct.tm_mon + 1;
 8009d0e:	9b05      	ldr	r3, [sp, #20]
 8009d10:	3301      	adds	r3, #1
 8009d12:	8063      	strh	r3, [r4, #2]
	pxTime->Year = xTimeStruct.tm_year + 1900;
 8009d14:	9b06      	ldr	r3, [sp, #24]
 8009d16:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8009d1a:	8023      	strh	r3, [r4, #0]
}	/* FF_GetSystemTime() */
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	b00a      	add	sp, #40	; 0x28
 8009d20:	bd10      	pop	{r4, pc}
	...

08009d24 <FreeRTOS_mktime>:

time_t FreeRTOS_mktime( const FF_TimeStruct_t *pxTimeBuf )
{
 8009d24:	b430      	push	{r4, r5}
/* Get year AD. */
int iYear = 1900 + pxTimeBuf->tm_year;	/* 20xx */
 8009d26:	6943      	ldr	r3, [r0, #20]
/* Get month zero-based. */
int iMonth = pxTimeBuf->tm_mon;			/* 0..11 */
 8009d28:	6904      	ldr	r4, [r0, #16]
uint32_t ulDays;
uint32_t ulResult;

	ulDays = pxTimeBuf->tm_mday - 1;	/* 1..31 */
 8009d2a:	68c2      	ldr	r2, [r0, #12]
 8009d2c:	1e51      	subs	r1, r2, #1

	/* Make March the first month. */
	iMonth -= 2;
	if( iMonth < 0 )
 8009d2e:	1ea5      	subs	r5, r4, #2
int iYear = 1900 + pxTimeBuf->tm_year;	/* 20xx */
 8009d30:	bf52      	itee	pl
 8009d32:	f203 736c 	addwpl	r3, r3, #1900	; 0x76c
	{
		/* January or February: leap day has yet to come for this year. */
		iYear--;
 8009d36:	f203 736b 	addwmi	r3, r3, #1899	; 0x76b
		iMonth += 12;
 8009d3a:	f104 050a 	addmi.w	r5, r4, #10
	}

	/* Add the number of days past until this month. */
	ulDays += ( ( 306 * iMonth ) + 5 ) / 10;
 8009d3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009d42:	fb02 f205 	mul.w	r2, r2, r5
 8009d46:	3205      	adds	r2, #5
 8009d48:	4c17      	ldr	r4, [pc, #92]	; (8009da8 <FreeRTOS_mktime+0x84>)
 8009d4a:	fb84 5402 	smull	r5, r4, r4, r2
 8009d4e:	17d2      	asrs	r2, r2, #31
 8009d50:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8009d54:	f5a1 212f 	sub.w	r1, r1, #716800	; 0xaf000
 8009d58:	f6a1 216c 	subw	r1, r1, #2668	; 0xa6c
 8009d5c:	440a      	add	r2, r1

	/* Add days past before this year: */
	ulDays +=
		+ ( iYear * 365 )		/* Every normal year. */
 8009d5e:	f240 116d 	movw	r1, #365	; 0x16d
 8009d62:	fb01 f103 	mul.w	r1, r1, r3
		+ ( iYear / 4 )			/* Plus a day for every leap year. */
 8009d66:	461c      	mov	r4, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfb8      	it	lt
 8009d6c:	1cdc      	addlt	r4, r3, #3
 8009d6e:	eb01 01a4 	add.w	r1, r1, r4, asr #2
		- ( iYear / 100 )		/* Minus the centuries. */
 8009d72:	4c0e      	ldr	r4, [pc, #56]	; (8009dac <FreeRTOS_mktime+0x88>)
 8009d74:	fb84 5403 	smull	r5, r4, r4, r3
 8009d78:	17db      	asrs	r3, r3, #31
 8009d7a:	eba3 1564 	sub.w	r5, r3, r4, asr #5
 8009d7e:	4429      	add	r1, r5
		+ ( iYear / 400 )		/* Except every fourth century. */
 8009d80:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
 8009d84:	440b      	add	r3, r1
	ulDays +=
 8009d86:	441a      	add	r2, r3
		- ( DAYS_UNTIL_1970 )	/* Minus the days before 1-1-1970 */
		+ ( DAYS_BEFORE_MARCH );/* Because 2 months were subtracted. */

	ulResult =
		( ulDays * SECONDS_PER_DAY ) +
		( pxTimeBuf->tm_hour * SECONDS_PER_HOUR ) +
 8009d88:	6881      	ldr	r1, [r0, #8]
		( pxTimeBuf->tm_min * SECONDS_PER_MINUTE ) +
 8009d8a:	6843      	ldr	r3, [r0, #4]
 8009d8c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8009d90:	009b      	lsls	r3, r3, #2
	ulResult =
 8009d92:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8009d96:	fb04 3301 	mla	r3, r4, r1, r3
 8009d9a:	6801      	ldr	r1, [r0, #0]
 8009d9c:	440b      	add	r3, r1
		pxTimeBuf->tm_sec;

	return ulResult;
}
 8009d9e:	4804      	ldr	r0, [pc, #16]	; (8009db0 <FreeRTOS_mktime+0x8c>)
 8009da0:	fb00 3002 	mla	r0, r0, r2, r3
 8009da4:	bc30      	pop	{r4, r5}
 8009da6:	4770      	bx	lr
 8009da8:	66666667 	.word	0x66666667
 8009dac:	51eb851f 	.word	0x51eb851f
 8009db0:	00015180 	.word	0x00015180

08009db4 <prvSDCodePrintable>:
static char retString[32];
const struct xCODE_NAME *pxCode;

	for( pxCode = xSD_CODES; pxCode <= xSD_CODES + sdARRAY_SIZE( xSD_CODES ) - 1; pxCode++ )
	{
		if( pxCode->ulValue == ulCode )
 8009db4:	2801      	cmp	r0, #1
 8009db6:	d012      	beq.n	8009dde <prvSDCodePrintable+0x2a>
 8009db8:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <prvSDCodePrintable+0x30>)
	for( pxCode = xSD_CODES; pxCode <= xSD_CODES + sdARRAY_SIZE( xSD_CODES ) - 1; pxCode++ )
 8009dba:	f502 73a0 	add.w	r3, r2, #320	; 0x140
		if( pxCode->ulValue == ulCode )
 8009dbe:	6811      	ldr	r1, [r2, #0]
 8009dc0:	4281      	cmp	r1, r0
 8009dc2:	d00d      	beq.n	8009de0 <prvSDCodePrintable+0x2c>
	for( pxCode = xSD_CODES; pxCode <= xSD_CODES + sdARRAY_SIZE( xSD_CODES ) - 1; pxCode++ )
 8009dc4:	3208      	adds	r2, #8
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d9f9      	bls.n	8009dbe <prvSDCodePrintable+0xa>
{
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	4603      	mov	r3, r0
		{
			return pxCode->pcName;
		}
	}
	snprintf( retString, sizeof( retString ), "SD code %lu\n", ulCode );
 8009dce:	4c06      	ldr	r4, [pc, #24]	; (8009de8 <prvSDCodePrintable+0x34>)
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <prvSDCodePrintable+0x38>)
 8009dd2:	2120      	movs	r1, #32
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f00d f900 	bl	8016fda <snprintf>
	return retString;
 8009dda:	4620      	mov	r0, r4
}
 8009ddc:	bd10      	pop	{r4, pc}
	for( pxCode = xSD_CODES; pxCode <= xSD_CODES + sdARRAY_SIZE( xSD_CODES ) - 1; pxCode++ )
 8009dde:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <prvSDCodePrintable+0x3c>)
			return pxCode->pcName;
 8009de0:	6850      	ldr	r0, [r2, #4]
 8009de2:	4770      	bx	lr
 8009de4:	08019f40 	.word	0x08019f40
 8009de8:	20000394 	.word	0x20000394
 8009dec:	08019708 	.word	0x08019708
 8009df0:	08019f38 	.word	0x08019f38

08009df4 <prvFFRead>:
{
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	b085      	sub	sp, #20
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	4692      	mov	sl, r2
	if( ( pxDisk != NULL ) &&
 8009e00:	461e      	mov	r6, r3
 8009e02:	b11b      	cbz	r3, 8009e0c <prvFFRead+0x18>
		( xSDCardStatus == pdPASS ) &&
 8009e04:	4b51      	ldr	r3, [pc, #324]	; (8009f4c <prvFFRead+0x158>)
	if( ( pxDisk != NULL ) &&
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d00e      	beq.n	8009e2a <prvFFRead+0x36>
		memset( ( void * ) pucBuffer, '\0', ulSectorCount * 512UL );
 8009e0c:	ea4f 224a 	mov.w	r2, sl, lsl #9
 8009e10:	2100      	movs	r1, #0
 8009e12:	4620      	mov	r0, r4
 8009e14:	f00d fcda 	bl	80177cc <memset>
		if( pxDisk->xStatus.bIsInitialised != pdFALSE )
 8009e18:	7833      	ldrb	r3, [r6, #0]
 8009e1a:	f013 0f01 	tst.w	r3, #1
 8009e1e:	f040 808a 	bne.w	8009f36 <prvFFRead+0x142>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 8009e22:	484b      	ldr	r0, [pc, #300]	; (8009f50 <prvFFRead+0x15c>)
}
 8009e24:	b005      	add	sp, #20
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( xSDCardStatus == pdPASS ) &&
 8009e2a:	6932      	ldr	r2, [r6, #16]
 8009e2c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8009e30:	f1a3 13bf 	sub.w	r3, r3, #12517567	; 0xbf00bf
 8009e34:	f5a3 433c 	sub.w	r3, r3, #48128	; 0xbc00
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d1e7      	bne.n	8009e0c <prvFFRead+0x18>
		( pxDisk->xStatus.bIsInitialised != pdFALSE ) &&
 8009e3c:	7833      	ldrb	r3, [r6, #0]
		( pxDisk->ulSignature == sdSIGNATURE ) &&
 8009e3e:	f013 0f01 	tst.w	r3, #1
 8009e42:	d0e3      	beq.n	8009e0c <prvFFRead+0x18>
		( ulSectorNumber < pxDisk->ulNumberOfSectors ) &&
 8009e44:	68f3      	ldr	r3, [r6, #12]
		( pxDisk->xStatus.bIsInitialised != pdFALSE ) &&
 8009e46:	428b      	cmp	r3, r1
 8009e48:	d9e0      	bls.n	8009e0c <prvFFRead+0x18>
		( ( pxDisk->ulNumberOfSectors - ulSectorNumber ) >= ulSectorCount ) )
 8009e4a:	1a5b      	subs	r3, r3, r1
		( ulSectorNumber < pxDisk->ulNumberOfSectors ) &&
 8009e4c:	4553      	cmp	r3, sl
 8009e4e:	d3dd      	bcc.n	8009e0c <prvFFRead+0x18>
		ullReadAddr = 512ull * ( uint64_t ) ulSectorNumber;
 8009e50:	f04f 0900 	mov.w	r9, #0
			if( ( ( ( size_t )pucBuffer ) & ( sizeof( size_t ) - 1 ) ) == 0 )
 8009e54:	f010 0f03 	tst.w	r0, #3
 8009e58:	d11e      	bne.n	8009e98 <prvFFRead+0xa4>
				sd_result = HAL_SD_ReadBlocks_DMA( &xSDHandle, (uint32_t *) pucBuffer, ullReadAddr, 512ul, ulSectorCount);
 8009e5a:	f8cd a004 	str.w	sl, [sp, #4]
 8009e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	024a      	lsls	r2, r1, #9
 8009e66:	0dcb      	lsrs	r3, r1, #23
 8009e68:	4601      	mov	r1, r0
 8009e6a:	483a      	ldr	r0, [pc, #232]	; (8009f54 <prvFFRead+0x160>)
 8009e6c:	f000 fdf6 	bl	800aa5c <HAL_SD_ReadBlocks_DMA>
				if( sd_result == SD_OK )
 8009e70:	4680      	mov	r8, r0
 8009e72:	b150      	cbz	r0, 8009e8a <prvFFRead+0x96>
			FF_PRINTF( "prvFFRead: %lu: %lu (%s)\n", ulSectorNumber, sd_result, prvSDCodePrintable( sd_result ) );
 8009e74:	4640      	mov	r0, r8
 8009e76:	f7ff ff9d 	bl	8009db4 <prvSDCodePrintable>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	4629      	mov	r1, r5
 8009e80:	4835      	ldr	r0, [pc, #212]	; (8009f58 <prvFFRead+0x164>)
 8009e82:	f00c fd65 	bl	8016950 <lUDPLoggingPrintf>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 8009e86:	4832      	ldr	r0, [pc, #200]	; (8009f50 <prvFFRead+0x15c>)
 8009e88:	e7cc      	b.n	8009e24 <prvFFRead+0x30>
					sd_result = HAL_SD_CheckReadOperation( &xSDHandle, sdMAX_TIME_TICKS );
 8009e8a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e8e:	4831      	ldr	r0, [pc, #196]	; (8009f54 <prvFFRead+0x160>)
 8009e90:	f001 fb88 	bl	800b5a4 <HAL_SD_CheckReadOperation>
 8009e94:	4680      	mov	r8, r0
 8009e96:	e048      	b.n	8009f2a <prvFFRead+0x136>
			uint8_t *pucDMABuffer = ffconfigMALLOC( 512ul );
 8009e98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009e9c:	f009 fb34 	bl	8013508 <pvPortMalloc>
				if( pucDMABuffer != NULL )
 8009ea0:	9003      	str	r0, [sp, #12]
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d04f      	beq.n	8009f46 <prvFFRead+0x152>
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 8009ea6:	f1ba 0f00 	cmp.w	sl, #0
 8009eaa:	d039      	beq.n	8009f20 <prvFFRead+0x12c>
 8009eac:	2700      	movs	r7, #0
 8009eae:	ea47 57d5 	orr.w	r7, r7, r5, lsr #23
 8009eb2:	026e      	lsls	r6, r5, #9
 8009eb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009eb8:	eb15 020a 	adds.w	r2, r5, sl
 8009ebc:	f149 0300 	adc.w	r3, r9, #0
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	f143 0300 	adc.w	r3, r3, #0
 8009ec6:	ea4f 2b43 	mov.w	fp, r3, lsl #9
 8009eca:	ea4b 5bd2 	orr.w	fp, fp, r2, lsr #23
 8009ece:	ea4f 2a42 	mov.w	sl, r2, lsl #9
						sd_result = HAL_SD_ReadBlocks_DMA( &xSDHandle, ( uint32_t * )pucDMABuffer, ullReadAddr, 512ul, 1 );
 8009ed2:	f44f 7900 	mov.w	r9, #512	; 0x200
 8009ed6:	e009      	b.n	8009eec <prvFFRead+0xf8>
 8009ed8:	f516 7600 	adds.w	r6, r6, #512	; 0x200
 8009edc:	f147 0700 	adc.w	r7, r7, #0
 8009ee0:	f504 7400 	add.w	r4, r4, #512	; 0x200
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 8009ee4:	455f      	cmp	r7, fp
 8009ee6:	bf08      	it	eq
 8009ee8:	4556      	cmpeq	r6, sl
 8009eea:	d01b      	beq.n	8009f24 <prvFFRead+0x130>
						sd_result = HAL_SD_ReadBlocks_DMA( &xSDHandle, ( uint32_t * )pucDMABuffer, ullReadAddr, 512ul, 1 );
 8009eec:	2301      	movs	r3, #1
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f8cd 9000 	str.w	r9, [sp]
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	463b      	mov	r3, r7
 8009ef8:	9903      	ldr	r1, [sp, #12]
 8009efa:	4816      	ldr	r0, [pc, #88]	; (8009f54 <prvFFRead+0x160>)
 8009efc:	f000 fdae 	bl	800aa5c <HAL_SD_ReadBlocks_DMA>
						if( sd_result == SD_OK )
 8009f00:	4680      	mov	r8, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1e8      	bne.n	8009ed8 <prvFFRead+0xe4>
							sd_result = HAL_SD_CheckReadOperation( &xSDHandle, sdMAX_TIME_TICKS );
 8009f06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009f0a:	4812      	ldr	r0, [pc, #72]	; (8009f54 <prvFFRead+0x160>)
 8009f0c:	f001 fb4a 	bl	800b5a4 <HAL_SD_CheckReadOperation>
							if( sd_result != SD_OK )
 8009f10:	4680      	mov	r8, r0
 8009f12:	b938      	cbnz	r0, 8009f24 <prvFFRead+0x130>
							memcpy( pucBuffer + 512ul * ulSector, pucDMABuffer, 512ul );
 8009f14:	464a      	mov	r2, r9
 8009f16:	9903      	ldr	r1, [sp, #12]
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f00d fc32 	bl	8017782 <memcpy>
 8009f1e:	e7db      	b.n	8009ed8 <prvFFRead+0xe4>
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 8009f20:	f04f 0800 	mov.w	r8, #0
					ffconfigFREE( pucDMABuffer );
 8009f24:	9803      	ldr	r0, [sp, #12]
 8009f26:	f009 fb55 	bl	80135d4 <vPortFree>
			lReturnCode = 0L;
 8009f2a:	2000      	movs	r0, #0
		if( sd_result == SD_OK )
 8009f2c:	f1b8 0f00 	cmp.w	r8, #0
 8009f30:	f43f af78 	beq.w	8009e24 <prvFFRead+0x30>
 8009f34:	e79e      	b.n	8009e74 <prvFFRead+0x80>
			FF_PRINTF( "prvFFRead: warning: %lu + %lu > %lu\n", ulSectorNumber, ulSectorCount, pxDisk->ulNumberOfSectors );
 8009f36:	68f3      	ldr	r3, [r6, #12]
 8009f38:	4652      	mov	r2, sl
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	4807      	ldr	r0, [pc, #28]	; (8009f5c <prvFFRead+0x168>)
 8009f3e:	f00c fd07 	bl	8016950 <lUDPLoggingPrintf>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 8009f42:	4803      	ldr	r0, [pc, #12]	; (8009f50 <prvFFRead+0x15c>)
 8009f44:	e76e      	b.n	8009e24 <prvFFRead+0x30>
					sd_result = SD_INVALID_PARAMETER;
 8009f46:	f04f 0826 	mov.w	r8, #38	; 0x26
 8009f4a:	e793      	b.n	8009e74 <prvFFRead+0x80>
 8009f4c:	20000484 	.word	0x20000484
 8009f50:	80000017 	.word	0x80000017
 8009f54:	20000488 	.word	0x20000488
 8009f58:	08019680 	.word	0x08019680
 8009f5c:	0801969c 	.word	0x0801969c

08009f60 <prvFFWrite>:
{
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	b083      	sub	sp, #12
 8009f66:	460d      	mov	r5, r1
 8009f68:	4614      	mov	r4, r2
	if( ( pxDisk != NULL ) &&
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	b123      	cbz	r3, 8009f78 <prvFFWrite+0x18>
 8009f6e:	4606      	mov	r6, r0
		( xSDCardStatus == pdPASS ) &&
 8009f70:	4b42      	ldr	r3, [pc, #264]	; (800a07c <prvFFWrite+0x11c>)
	if( ( pxDisk != NULL ) &&
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d007      	beq.n	8009f88 <prvFFWrite+0x28>
		if( pxDisk->xStatus.bIsInitialised != pdFALSE )
 8009f78:	7813      	ldrb	r3, [r2, #0]
 8009f7a:	f013 0f01 	tst.w	r3, #1
 8009f7e:	d170      	bne.n	800a062 <prvFFWrite+0x102>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 8009f80:	483f      	ldr	r0, [pc, #252]	; (800a080 <prvFFWrite+0x120>)
}
 8009f82:	b003      	add	sp, #12
 8009f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( xSDCardStatus == pdPASS ) &&
 8009f88:	6911      	ldr	r1, [r2, #16]
 8009f8a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8009f8e:	f1a3 13bf 	sub.w	r3, r3, #12517567	; 0xbf00bf
 8009f92:	f5a3 433c 	sub.w	r3, r3, #48128	; 0xbc00
 8009f96:	4299      	cmp	r1, r3
 8009f98:	d1ee      	bne.n	8009f78 <prvFFWrite+0x18>
		( pxDisk->xStatus.bIsInitialised != pdFALSE ) &&
 8009f9a:	7813      	ldrb	r3, [r2, #0]
		( pxDisk->ulSignature == sdSIGNATURE ) &&
 8009f9c:	f013 0f01 	tst.w	r3, #1
 8009fa0:	d067      	beq.n	800a072 <prvFFWrite+0x112>
		( ulSectorNumber < pxDisk->ulNumberOfSectors ) &&
 8009fa2:	68d3      	ldr	r3, [r2, #12]
		( pxDisk->xStatus.bIsInitialised != pdFALSE ) &&
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	d95c      	bls.n	800a062 <prvFFWrite+0x102>
		( ( pxDisk->ulNumberOfSectors - ulSectorNumber ) >= ulSectorCount ) )
 8009fa8:	1b5b      	subs	r3, r3, r5
		( ulSectorNumber < pxDisk->ulNumberOfSectors ) &&
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	d359      	bcc.n	800a062 <prvFFWrite+0x102>
			if( ( ( ( size_t )pucBuffer ) & ( sizeof( size_t ) - 1 ) ) == 0 )
 8009fae:	f010 0f03 	tst.w	r0, #3
 8009fb2:	d11d      	bne.n	8009ff0 <prvFFWrite+0x90>
				sd_result = HAL_SD_WriteBlocks_DMA( &xSDHandle, ( uint32_t * )pucBuffer, ullWriteAddr, 512ul, ulSectorCount );
 8009fb4:	9401      	str	r4, [sp, #4]
 8009fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	026a      	lsls	r2, r5, #9
 8009fbe:	0deb      	lsrs	r3, r5, #23
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	4830      	ldr	r0, [pc, #192]	; (800a084 <prvFFWrite+0x124>)
 8009fc4:	f000 fdc8 	bl	800ab58 <HAL_SD_WriteBlocks_DMA>
				if( sd_result == SD_OK )
 8009fc8:	4682      	mov	sl, r0
 8009fca:	b150      	cbz	r0, 8009fe2 <prvFFWrite+0x82>
			FF_PRINTF( "prvFFWrite: %lu: %lu (%s)\n", ulSectorNumber, sd_result, prvSDCodePrintable( sd_result ) );
 8009fcc:	4650      	mov	r0, sl
 8009fce:	f7ff fef1 	bl	8009db4 <prvSDCodePrintable>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	482b      	ldr	r0, [pc, #172]	; (800a088 <prvFFWrite+0x128>)
 8009fda:	f00c fcb9 	bl	8016950 <lUDPLoggingPrintf>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 8009fde:	4828      	ldr	r0, [pc, #160]	; (800a080 <prvFFWrite+0x120>)
 8009fe0:	e7cf      	b.n	8009f82 <prvFFWrite+0x22>
					sd_result = HAL_SD_CheckWriteOperation( &xSDHandle, sdMAX_TIME_TICKS );
 8009fe2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009fe6:	4827      	ldr	r0, [pc, #156]	; (800a084 <prvFFWrite+0x124>)
 8009fe8:	f001 fb4e 	bl	800b688 <HAL_SD_CheckWriteOperation>
 8009fec:	4682      	mov	sl, r0
 8009fee:	e030      	b.n	800a052 <prvFFWrite+0xf2>
			uint8_t *pucDMABuffer = ffconfigMALLOC( 512ul );
 8009ff0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ff4:	f009 fa88 	bl	8013508 <pvPortMalloc>
				if( pucDMABuffer != NULL )
 8009ff8:	4680      	mov	r8, r0
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d03b      	beq.n	800a076 <prvFFWrite+0x116>
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 8009ffe:	b36c      	cbz	r4, 800a05c <prvFFWrite+0xfc>
 800a000:	442c      	add	r4, r5
 800a002:	462f      	mov	r7, r5
						memcpy( pucDMABuffer, pucBuffer + 512ul * ulSector, 512ul );
 800a004:	f44f 7900 	mov.w	r9, #512	; 0x200
						sd_result = HAL_SD_WriteBlocks_DMA( &xSDHandle, ( uint32_t * )pucDMABuffer, ullWriteAddr, 512ul, 1 );
 800a008:	f04f 0b01 	mov.w	fp, #1
 800a00c:	e004      	b.n	800a018 <prvFFWrite+0xb8>
 800a00e:	f506 7600 	add.w	r6, r6, #512	; 0x200
 800a012:	3701      	adds	r7, #1
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 800a014:	42bc      	cmp	r4, r7
 800a016:	d019      	beq.n	800a04c <prvFFWrite+0xec>
						memcpy( pucDMABuffer, pucBuffer + 512ul * ulSector, 512ul );
 800a018:	464a      	mov	r2, r9
 800a01a:	4631      	mov	r1, r6
 800a01c:	4640      	mov	r0, r8
 800a01e:	f00d fbb0 	bl	8017782 <memcpy>
						sd_result = HAL_SD_WriteBlocks_DMA( &xSDHandle, ( uint32_t * )pucDMABuffer, ullWriteAddr, 512ul, 1 );
 800a022:	f8cd b004 	str.w	fp, [sp, #4]
 800a026:	f8cd 9000 	str.w	r9, [sp]
 800a02a:	027a      	lsls	r2, r7, #9
 800a02c:	0dfb      	lsrs	r3, r7, #23
 800a02e:	4641      	mov	r1, r8
 800a030:	4814      	ldr	r0, [pc, #80]	; (800a084 <prvFFWrite+0x124>)
 800a032:	f000 fd91 	bl	800ab58 <HAL_SD_WriteBlocks_DMA>
						if( sd_result == SD_OK )
 800a036:	4682      	mov	sl, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1e8      	bne.n	800a00e <prvFFWrite+0xae>
							sd_result = HAL_SD_CheckWriteOperation( &xSDHandle, sdMAX_TIME_TICKS );
 800a03c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a040:	4810      	ldr	r0, [pc, #64]	; (800a084 <prvFFWrite+0x124>)
 800a042:	f001 fb21 	bl	800b688 <HAL_SD_CheckWriteOperation>
							if( sd_result != SD_OK )
 800a046:	4682      	mov	sl, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d0e0      	beq.n	800a00e <prvFFWrite+0xae>
					ffconfigFREE( pucDMABuffer );
 800a04c:	4640      	mov	r0, r8
 800a04e:	f009 fac1 	bl	80135d4 <vPortFree>
			lReturnCode = 0L;
 800a052:	2000      	movs	r0, #0
		if( sd_result == SD_OK )
 800a054:	f1ba 0f00 	cmp.w	sl, #0
 800a058:	d093      	beq.n	8009f82 <prvFFWrite+0x22>
 800a05a:	e7b7      	b.n	8009fcc <prvFFWrite+0x6c>
					for( ulSector = 0; ulSector < ulSectorCount; ulSector++ )
 800a05c:	f04f 0a00 	mov.w	sl, #0
 800a060:	e7f4      	b.n	800a04c <prvFFWrite+0xec>
			FF_PRINTF( "prvFFWrite: warning: %lu + %lu > %lu\n", ulSectorNumber, ulSectorCount, pxDisk->ulNumberOfSectors );
 800a062:	68d3      	ldr	r3, [r2, #12]
 800a064:	4622      	mov	r2, r4
 800a066:	4629      	mov	r1, r5
 800a068:	4808      	ldr	r0, [pc, #32]	; (800a08c <prvFFWrite+0x12c>)
 800a06a:	f00c fc71 	bl	8016950 <lUDPLoggingPrintf>
int32_t lReturnCode = FF_ERR_IOMAN_OUT_OF_BOUNDS_READ | FF_ERRFLAG;
 800a06e:	4804      	ldr	r0, [pc, #16]	; (800a080 <prvFFWrite+0x120>)
 800a070:	e787      	b.n	8009f82 <prvFFWrite+0x22>
 800a072:	4803      	ldr	r0, [pc, #12]	; (800a080 <prvFFWrite+0x120>)
 800a074:	e785      	b.n	8009f82 <prvFFWrite+0x22>
					sd_result = SD_INVALID_PARAMETER;
 800a076:	f04f 0a26 	mov.w	sl, #38	; 0x26
 800a07a:	e7a7      	b.n	8009fcc <prvFFWrite+0x6c>
 800a07c:	20000484 	.word	0x20000484
 800a080:	80000017 	.word	0x80000017
 800a084:	20000488 	.word	0x20000488
 800a088:	080196c4 	.word	0x080196c4
 800a08c:	080196e0 	.word	0x080196e0

0800a090 <prvEventWaitFunction>:
/*-----------------------------------------------------------*/

#if( SDIO_USES_DMA != 0 )

	static uint32_t prvEventWaitFunction( struct xSD_Handle *pxHandle )
	{
 800a090:	b510      	push	{r4, lr}
		 * <= 3 ms :   99
		 * <= 4 ms :   79
		 * >= 5 ms :    0 times
		 */

		if( xTaskCheckForTimeOut( &xDMATimeOut, &xDMARemainingTime ) != pdFALSE )
 800a092:	490b      	ldr	r1, [pc, #44]	; (800a0c0 <prvEventWaitFunction+0x30>)
 800a094:	480b      	ldr	r0, [pc, #44]	; (800a0c4 <prvEventWaitFunction+0x34>)
 800a096:	f00a fd45 	bl	8014b24 <xTaskCheckForTimeOut>
 800a09a:	b108      	cbz	r0, 800a0a0 <prvEventWaitFunction+0x10>
		{
			/* The timeout has been reached, no need to block. */
			ulReturn = 1UL;
 800a09c:	2001      	movs	r0, #1
				ulReturn = 0UL;
			}
		}

		return ulReturn;
	}
 800a09e:	bd10      	pop	{r4, pc}
			xSemaphoreTake( xSDCardSemaphore, xDMARemainingTime );
 800a0a0:	4c07      	ldr	r4, [pc, #28]	; (800a0c0 <prvEventWaitFunction+0x30>)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6822      	ldr	r2, [r4, #0]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4807      	ldr	r0, [pc, #28]	; (800a0c8 <prvEventWaitFunction+0x38>)
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	f009 fe18 	bl	8013ce0 <xQueueGenericReceive>
			if( xTaskCheckForTimeOut( &xDMATimeOut, &xDMARemainingTime ) != pdFALSE )
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4804      	ldr	r0, [pc, #16]	; (800a0c4 <prvEventWaitFunction+0x34>)
 800a0b4:	f00a fd36 	bl	8014b24 <xTaskCheckForTimeOut>
 800a0b8:	3000      	adds	r0, #0
 800a0ba:	bf18      	it	ne
 800a0bc:	2001      	movne	r0, #1
 800a0be:	bd10      	pop	{r4, pc}
 800a0c0:	200003c4 	.word	0x200003c4
 800a0c4:	200003c8 	.word	0x200003c8
 800a0c8:	20000480 	.word	0x20000480

0800a0cc <prvEventSetupFunction>:
	{
 800a0cc:	b508      	push	{r3, lr}
		xDMARemainingTime = sdMAX_TIME_TICKS;
 800a0ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a0d2:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <prvEventSetupFunction+0x14>)
 800a0d4:	601a      	str	r2, [r3, #0]
		vTaskSetTimeOutState( &xDMATimeOut );
 800a0d6:	4803      	ldr	r0, [pc, #12]	; (800a0e4 <prvEventSetupFunction+0x18>)
 800a0d8:	f00a fd0e 	bl	8014af8 <vTaskSetTimeOutState>
 800a0dc:	bd08      	pop	{r3, pc}
 800a0de:	bf00      	nop
 800a0e0:	200003c4 	.word	0x200003c4
 800a0e4:	200003c8 	.word	0x200003c8

0800a0e8 <prvSDMMCInit>:
{
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	b089      	sub	sp, #36	; 0x24
	if( xSDCardSemaphore == NULL )
 800a0ee:	4b7f      	ldr	r3, [pc, #508]	; (800a2ec <prvSDMMCInit+0x204>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80db 	beq.w	800a2ae <prvSDMMCInit+0x1c6>
	xSDHandle.Instance = SDIO;
 800a0f8:	4e7d      	ldr	r6, [pc, #500]	; (800a2f0 <prvSDMMCInit+0x208>)
 800a0fa:	4b7e      	ldr	r3, [pc, #504]	; (800a2f4 <prvSDMMCInit+0x20c>)
 800a0fc:	6033      	str	r3, [r6, #0]
	xSDHandle.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a0fe:	2500      	movs	r5, #0
 800a100:	6075      	str	r5, [r6, #4]
	xSDHandle.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a102:	60b5      	str	r5, [r6, #8]
	xSDHandle.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a104:	60f5      	str	r5, [r6, #12]
	xSDHandle.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a106:	6135      	str	r5, [r6, #16]
	xSDHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a108:	6175      	str	r5, [r6, #20]
	xSDHandle.Init.ClockDiv = 32;
 800a10a:	f04f 0820 	mov.w	r8, #32
 800a10e:	f8c6 8018 	str.w	r8, [r6, #24]
		xSDHandle.EventSetupFunction = prvEventSetupFunction;
 800a112:	4b79      	ldr	r3, [pc, #484]	; (800a2f8 <prvSDMMCInit+0x210>)
 800a114:	6633      	str	r3, [r6, #96]	; 0x60
		xSDHandle.EventWaitFunction = prvEventWaitFunction;
 800a116:	4b79      	ldr	r3, [pc, #484]	; (800a2fc <prvSDMMCInit+0x214>)
 800a118:	6673      	str	r3, [r6, #100]	; 0x64
	__HAL_RCC_SDIO_CLK_ENABLE( );
 800a11a:	4c79      	ldr	r4, [pc, #484]	; (800a300 <prvSDMMCInit+0x218>)
 800a11c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a11e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a122:	6463      	str	r3, [r4, #68]	; 0x44
		__SDIO_CLK_ENABLE();
 800a124:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a12a:	6463      	str	r3, [r4, #68]	; 0x44
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800a12c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a12e:	f043 0304 	orr.w	r3, r3, #4
 800a132:	6323      	str	r3, [r4, #48]	; 0x30
			GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800a134:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a138:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a13a:	f04f 0902 	mov.w	r9, #2
 800a13e:	f8cd 9010 	str.w	r9, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a142:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800a144:	f8cd 9018 	str.w	r9, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a148:	f04f 0a0c 	mov.w	sl, #12
 800a14c:	f8cd a01c 	str.w	sl, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a150:	eb0d 010a 	add.w	r1, sp, sl
 800a154:	486b      	ldr	r0, [pc, #428]	; (800a304 <prvSDMMCInit+0x21c>)
 800a156:	f7f8 fd7f 	bl	8002c58 <HAL_GPIO_Init>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800a15a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a15c:	f043 0308 	orr.w	r3, r3, #8
 800a160:	6323      	str	r3, [r4, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a162:	2704      	movs	r7, #4
 800a164:	9703      	str	r7, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a166:	f8cd 9010 	str.w	r9, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a16a:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800a16c:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a16e:	f8cd a01c 	str.w	sl, [sp, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a172:	eb0d 010a 	add.w	r1, sp, sl
 800a176:	4864      	ldr	r0, [pc, #400]	; (800a308 <prvSDMMCInit+0x220>)
 800a178:	f7f8 fd6e 	bl	8002c58 <HAL_GPIO_Init>
		__DMAx_TxRx_CLK_ENABLE();
 800a17c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a17e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a182:	6323      	str	r3, [r4, #48]	; 0x30
		HAL_NVIC_SetPriority(SDIO_IRQn, configSDIO_DMA_INTERRUPT_PRIORITY, 0);
 800a184:	462a      	mov	r2, r5
 800a186:	2105      	movs	r1, #5
 800a188:	2031      	movs	r0, #49	; 0x31
 800a18a:	f7f6 facf 	bl	800072c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a18e:	2031      	movs	r0, #49	; 0x31
 800a190:	f7f6 fafc 	bl	800078c <HAL_NVIC_EnableIRQ>
		xRxDMAHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800a194:	4c5d      	ldr	r4, [pc, #372]	; (800a30c <prvSDMMCInit+0x224>)
 800a196:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
 800a19a:	f8c4 b004 	str.w	fp, [r4, #4]
		xRxDMAHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800a19e:	60a5      	str	r5, [r4, #8]
		xRxDMAHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a1a0:	60e5      	str	r5, [r4, #12]
		xRxDMAHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800a1a2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800a1a6:	f8c4 a010 	str.w	sl, [r4, #16]
		xRxDMAHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a1aa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800a1ae:	f8c4 9014 	str.w	r9, [r4, #20]
		xRxDMAHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a1b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1b6:	61a3      	str	r3, [r4, #24]
		xRxDMAHandle.Init.Mode                = DMA_PFCTRL;
 800a1b8:	f8c4 801c 	str.w	r8, [r4, #28]
		xRxDMAHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800a1bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a1c0:	6223      	str	r3, [r4, #32]
		xRxDMAHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800a1c2:	6267      	str	r7, [r4, #36]	; 0x24
		xRxDMAHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	62a3      	str	r3, [r4, #40]	; 0x28
		xRxDMAHandle.Init.MemBurst            = DMA_MBURST_INC4;
 800a1c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1cc:	62e3      	str	r3, [r4, #44]	; 0x2c
		xRxDMAHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800a1ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1d2:	6323      	str	r3, [r4, #48]	; 0x30
		xRxDMAHandle.Instance = SD_DMAx_Rx_STREAM;
 800a1d4:	4b4e      	ldr	r3, [pc, #312]	; (800a310 <prvSDMMCInit+0x228>)
 800a1d6:	6023      	str	r3, [r4, #0]
		__HAL_LINKDMA(&xSDHandle, hdmarx, xRxDMAHandle);
 800a1d8:	65b4      	str	r4, [r6, #88]	; 0x58
 800a1da:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_DMA_DeInit(&xRxDMAHandle);
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7f6 fb31 	bl	8000844 <HAL_DMA_DeInit>
		HAL_DMA_Init(&xRxDMAHandle);
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7f6 faf4 	bl	80007d0 <HAL_DMA_Init>
		xTxDMAHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800a1e8:	4c4a      	ldr	r4, [pc, #296]	; (800a314 <prvSDMMCInit+0x22c>)
 800a1ea:	f8c4 b004 	str.w	fp, [r4, #4]
		xTxDMAHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800a1ee:	2340      	movs	r3, #64	; 0x40
 800a1f0:	60a3      	str	r3, [r4, #8]
		xTxDMAHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a1f2:	60e5      	str	r5, [r4, #12]
		xTxDMAHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800a1f4:	f8c4 a010 	str.w	sl, [r4, #16]
		xTxDMAHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a1f8:	f8c4 9014 	str.w	r9, [r4, #20]
		xTxDMAHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a1fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a200:	61a3      	str	r3, [r4, #24]
		xTxDMAHandle.Init.Mode                = DMA_PFCTRL;
 800a202:	f8c4 801c 	str.w	r8, [r4, #28]
		xTxDMAHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800a206:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a20a:	6223      	str	r3, [r4, #32]
		xTxDMAHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800a20c:	6267      	str	r7, [r4, #36]	; 0x24
		xTxDMAHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a20e:	2303      	movs	r3, #3
 800a210:	62a3      	str	r3, [r4, #40]	; 0x28
		xTxDMAHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800a212:	62e5      	str	r5, [r4, #44]	; 0x2c
		xTxDMAHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800a214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a218:	6323      	str	r3, [r4, #48]	; 0x30
		xTxDMAHandle.Instance = SD_DMAx_Tx_STREAM;
 800a21a:	4b3f      	ldr	r3, [pc, #252]	; (800a318 <prvSDMMCInit+0x230>)
 800a21c:	6023      	str	r3, [r4, #0]
		__HAL_LINKDMA(&xSDHandle, hdmatx, xTxDMAHandle);
 800a21e:	65f4      	str	r4, [r6, #92]	; 0x5c
 800a220:	63a6      	str	r6, [r4, #56]	; 0x38
		HAL_DMA_DeInit(&xTxDMAHandle);
 800a222:	4620      	mov	r0, r4
 800a224:	f7f6 fb0e 	bl	8000844 <HAL_DMA_DeInit>
		HAL_DMA_Init(&xTxDMAHandle);
 800a228:	4620      	mov	r0, r4
 800a22a:	f7f6 fad1 	bl	80007d0 <HAL_DMA_Init>
		HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, configSDIO_DMA_INTERRUPT_PRIORITY + 2, 0);
 800a22e:	462a      	mov	r2, r5
 800a230:	2107      	movs	r1, #7
 800a232:	203b      	movs	r0, #59	; 0x3b
 800a234:	f7f6 fa7a 	bl	800072c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800a238:	203b      	movs	r0, #59	; 0x3b
 800a23a:	f7f6 faa7 	bl	800078c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, configSDIO_DMA_INTERRUPT_PRIORITY + 2, 0);
 800a23e:	462a      	mov	r2, r5
 800a240:	2107      	movs	r1, #7
 800a242:	2045      	movs	r0, #69	; 0x45
 800a244:	f7f6 fa72 	bl	800072c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800a248:	2045      	movs	r0, #69	; 0x45
 800a24a:	f7f6 fa9f 	bl	800078c <HAL_NVIC_EnableIRQ>
	if( HAL_GPIO_ReadPin( configSD_DETECT_GPIO_PORT, configSD_DETECT_PIN ) != 0 )
 800a24e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a252:	4832      	ldr	r0, [pc, #200]	; (800a31c <prvSDMMCInit+0x234>)
 800a254:	f7f8 fde2 	bl	8002e1c <HAL_GPIO_ReadPin>
	if( prvSDDetect() == pdFALSE )
 800a258:	2800      	cmp	r0, #0
 800a25a:	d130      	bne.n	800a2be <prvSDMMCInit+0x1d6>
	xCardDetect.bLastPresent = pdTRUE;
 800a25c:	4a30      	ldr	r2, [pc, #192]	; (800a320 <prvSDMMCInit+0x238>)
 800a25e:	7b13      	ldrb	r3, [r2, #12]
	xCardDetect.bStableSignal = pdTRUE;
 800a260:	f043 0303 	orr.w	r3, r3, #3
 800a264:	7313      	strb	r3, [r2, #12]
	SD_state = HAL_SD_Init( &xSDHandle, &xSDCardInfo );
 800a266:	492f      	ldr	r1, [pc, #188]	; (800a324 <prvSDMMCInit+0x23c>)
 800a268:	4821      	ldr	r0, [pc, #132]	; (800a2f0 <prvSDMMCInit+0x208>)
 800a26a:	f000 feab 	bl	800afc4 <HAL_SD_Init>
		if( SD_state == SD_OK )
 800a26e:	4604      	mov	r4, r0
 800a270:	b350      	cbz	r0, 800a2c8 <prvSDMMCInit+0x1e0>
	FF_PRINTF( "HAL_SD_Init: %d: %s type: %s Capacity: %lu MB\n",
 800a272:	4620      	mov	r0, r4
 800a274:	f7ff fd9e 	bl	8009db4 <prvSDCodePrintable>
		xSDHandle.CardType == HIGH_CAPACITY_SD_CARD ? "SDHC" : "SD",
 800a278:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <prvSDMMCInit+0x208>)
	FF_PRINTF( "HAL_SD_Init: %d: %s type: %s Capacity: %lu MB\n",
 800a27a:	6a1d      	ldr	r5, [r3, #32]
		xSDCardInfo.CardCapacity / ( 1024 * 1024 ) );
 800a27c:	4929      	ldr	r1, [pc, #164]	; (800a324 <prvSDMMCInit+0x23c>)
	FF_PRINTF( "HAL_SD_Init: %d: %s type: %s Capacity: %lu MB\n",
 800a27e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800a280:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800a282:	0d12      	lsrs	r2, r2, #20
 800a284:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800a288:	0d09      	lsrs	r1, r1, #20
 800a28a:	9200      	str	r2, [sp, #0]
 800a28c:	9101      	str	r1, [sp, #4]
 800a28e:	4a26      	ldr	r2, [pc, #152]	; (800a328 <prvSDMMCInit+0x240>)
 800a290:	4b26      	ldr	r3, [pc, #152]	; (800a32c <prvSDMMCInit+0x244>)
 800a292:	2d02      	cmp	r5, #2
 800a294:	bf18      	it	ne
 800a296:	4613      	movne	r3, r2
 800a298:	4602      	mov	r2, r0
 800a29a:	4621      	mov	r1, r4
 800a29c:	4824      	ldr	r0, [pc, #144]	; (800a330 <prvSDMMCInit+0x248>)
 800a29e:	f00c fb57 	bl	8016950 <lUDPLoggingPrintf>
	return SD_state == SD_OK ? 1 : 0;
 800a2a2:	fab4 f084 	clz	r0, r4
 800a2a6:	0940      	lsrs	r0, r0, #5
}
 800a2a8:	b009      	add	sp, #36	; 0x24
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xSDCardSemaphore = xSemaphoreCreateBinary();
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	f009 fb32 	bl	801391c <xQueueGenericCreate>
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <prvSDMMCInit+0x204>)
 800a2ba:	6018      	str	r0, [r3, #0]
 800a2bc:	e71c      	b.n	800a0f8 <prvSDMMCInit+0x10>
		FF_PRINTF( "No SD card detected\n" );
 800a2be:	481d      	ldr	r0, [pc, #116]	; (800a334 <prvSDMMCInit+0x24c>)
 800a2c0:	f00c fb46 	bl	8016950 <lUDPLoggingPrintf>
		return 0;
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	e7ef      	b.n	800a2a8 <prvSDMMCInit+0x1c0>
			xSDHandle.Init.BusWide = SDIO_BUS_WIDE_4B;
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <prvSDMMCInit+0x208>)
 800a2ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a2ce:	6101      	str	r1, [r0, #16]
			rc = HAL_SD_WideBusOperation_Config(&xSDHandle, SDIO_BUS_WIDE_4B);
 800a2d0:	f001 f8a4 	bl	800b41c <HAL_SD_WideBusOperation_Config>
			if( rc != SD_OK )
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d0cb      	beq.n	800a272 <prvSDMMCInit+0x18a>
				FF_PRINTF( "HAL_SD_WideBus: %d: %s\n", rc, prvSDCodePrintable( ( uint32_t )rc ) );
 800a2da:	f7ff fd6b 	bl	8009db4 <prvSDCodePrintable>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	4815      	ldr	r0, [pc, #84]	; (800a338 <prvSDMMCInit+0x250>)
 800a2e4:	f00c fb34 	bl	8016950 <lUDPLoggingPrintf>
 800a2e8:	e7c3      	b.n	800a272 <prvSDMMCInit+0x18a>
 800a2ea:	bf00      	nop
 800a2ec:	20000480 	.word	0x20000480
 800a2f0:	20000488 	.word	0x20000488
 800a2f4:	40012c00 	.word	0x40012c00
 800a2f8:	0800a0cd 	.word	0x0800a0cd
 800a2fc:	0800a091 	.word	0x0800a091
 800a300:	40023800 	.word	0x40023800
 800a304:	40020800 	.word	0x40020800
 800a308:	40020c00 	.word	0x40020c00
 800a30c:	200003d4 	.word	0x200003d4
 800a310:	40026458 	.word	0x40026458
 800a314:	200004f0 	.word	0x200004f0
 800a318:	400264a0 	.word	0x400264a0
 800a31c:	40021c00 	.word	0x40021c00
 800a320:	200003b4 	.word	0x200003b4
 800a324:	20000428 	.word	0x20000428
 800a328:	08019720 	.word	0x08019720
 800a32c:	08019718 	.word	0x08019718
 800a330:	08019754 	.word	0x08019754
 800a334:	08019724 	.word	0x08019724
 800a338:	0801973c 	.word	0x0801973c

0800a33c <FF_SDDiskUnmount>:
	if( ( pxDisk != NULL ) && ( pxDisk->xStatus.bIsMounted != pdFALSE ) )
 800a33c:	b1c0      	cbz	r0, 800a370 <FF_SDDiskUnmount+0x34>
{
 800a33e:	b508      	push	{r3, lr}
	if( ( pxDisk != NULL ) && ( pxDisk->xStatus.bIsMounted != pdFALSE ) )
 800a340:	7802      	ldrb	r2, [r0, #0]
 800a342:	f012 0f02 	tst.w	r2, #2
 800a346:	d101      	bne.n	800a34c <FF_SDDiskUnmount+0x10>
BaseType_t xReturn = pdPASS;
 800a348:	2001      	movs	r0, #1
}
 800a34a:	bd08      	pop	{r3, pc}
		pxDisk->xStatus.bIsMounted = pdFALSE;
 800a34c:	7803      	ldrb	r3, [r0, #0]
 800a34e:	f36f 0341 	bfc	r3, #1, #1
 800a352:	7003      	strb	r3, [r0, #0]
		xFFError = FF_Unmount( pxDisk );
 800a354:	f7fe fa4e 	bl	80087f4 <FF_Unmount>
		if( FF_isERR( xFFError ) )
 800a358:	1e01      	subs	r1, r0, #0
 800a35a:	db04      	blt.n	800a366 <FF_SDDiskUnmount+0x2a>
			FF_PRINTF( "Drive unmounted\n" );
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <FF_SDDiskUnmount+0x38>)
 800a35e:	f00c faf7 	bl	8016950 <lUDPLoggingPrintf>
BaseType_t xReturn = pdPASS;
 800a362:	2001      	movs	r0, #1
 800a364:	bd08      	pop	{r3, pc}
			FF_PRINTF( "FF_SDDiskUnmount: rc %08x\n", ( unsigned )xFFError );
 800a366:	4804      	ldr	r0, [pc, #16]	; (800a378 <FF_SDDiskUnmount+0x3c>)
 800a368:	f00c faf2 	bl	8016950 <lUDPLoggingPrintf>
			xReturn = pdFAIL;
 800a36c:	2000      	movs	r0, #0
 800a36e:	bd08      	pop	{r3, pc}
BaseType_t xReturn = pdPASS;
 800a370:	2001      	movs	r0, #1
 800a372:	4770      	bx	lr
 800a374:	0801966c 	.word	0x0801966c
 800a378:	08019650 	.word	0x08019650

0800a37c <FF_SDDiskMount>:
{
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4604      	mov	r4, r0
	xFFError = FF_Mount( pxDisk, pxDisk->xStatus.bPartitionNumber );
 800a380:	8801      	ldrh	r1, [r0, #0]
 800a382:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 800a386:	f7fd ff8d 	bl	80082a4 <FF_Mount>
	if( FF_isERR( xFFError ) )
 800a38a:	1e01      	subs	r1, r0, #0
 800a38c:	db0a      	blt.n	800a3a4 <FF_SDDiskMount+0x28>
		pxDisk->xStatus.bIsMounted = pdTRUE;
 800a38e:	7823      	ldrb	r3, [r4, #0]
 800a390:	f043 0302 	orr.w	r3, r3, #2
 800a394:	7023      	strb	r3, [r4, #0]
		FF_PRINTF( "****** FreeRTOS+FAT initialized %lu sectors\n", pxDisk->pxIOManager->xPartition.ulTotalSectors );
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	6999      	ldr	r1, [r3, #24]
 800a39a:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <FF_SDDiskMount+0x34>)
 800a39c:	f00c fad8 	bl	8016950 <lUDPLoggingPrintf>
		xReturn = pdPASS;
 800a3a0:	2001      	movs	r0, #1
}
 800a3a2:	bd10      	pop	{r4, pc}
		FF_PRINTF( "FF_SDDiskMount: %08lX\n", xFFError );
 800a3a4:	4803      	ldr	r0, [pc, #12]	; (800a3b4 <FF_SDDiskMount+0x38>)
 800a3a6:	f00c fad3 	bl	8016950 <lUDPLoggingPrintf>
		xReturn = pdFAIL;
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	bf00      	nop
 800a3b0:	0801951c 	.word	0x0801951c
 800a3b4:	08019504 	.word	0x08019504

0800a3b8 <sddisk_ioman>:
	if( ( pxDisk != NULL ) && ( pxDisk->xStatus.bIsInitialised != pdFALSE ) )
 800a3b8:	b128      	cbz	r0, 800a3c6 <sddisk_ioman+0xe>
 800a3ba:	7802      	ldrb	r2, [r0, #0]
 800a3bc:	f012 0f01 	tst.w	r2, #1
 800a3c0:	d003      	beq.n	800a3ca <sddisk_ioman+0x12>
		pxReturn = pxDisk->pxIOManager;
 800a3c2:	6880      	ldr	r0, [r0, #8]
 800a3c4:	4770      	bx	lr
		pxReturn = NULL;
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	4770      	bx	lr
 800a3ca:	2000      	movs	r0, #0
}
 800a3cc:	4770      	bx	lr

0800a3ce <FF_SDDiskDelete>:
	if( pxDisk != NULL )
 800a3ce:	b1b8      	cbz	r0, 800a400 <FF_SDDiskDelete+0x32>
{
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	4604      	mov	r4, r0
		pxDisk->ulSignature = 0;
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	6102      	str	r2, [r0, #16]
		pxDisk->xStatus.bIsInitialised = 0;
 800a3d8:	7803      	ldrb	r3, [r0, #0]
 800a3da:	f362 0300 	bfi	r3, r2, #0, #1
 800a3de:	7003      	strb	r3, [r0, #0]
		if( pxDisk->pxIOManager != NULL )
 800a3e0:	6883      	ldr	r3, [r0, #8]
 800a3e2:	b12b      	cbz	r3, 800a3f0 <FF_SDDiskDelete+0x22>
			if( FF_Mounted( pxDisk->pxIOManager ) != pdFALSE )
 800a3e4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a3e8:	b93b      	cbnz	r3, 800a3fa <FF_SDDiskDelete+0x2c>
			FF_DeleteIOManager( pxDisk->pxIOManager );
 800a3ea:	68a0      	ldr	r0, [r4, #8]
 800a3ec:	f7fd fa42 	bl	8007874 <FF_DeleteIOManager>
		vPortFree( pxDisk );
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f009 f8ef 	bl	80135d4 <vPortFree>
}
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	bd10      	pop	{r4, pc}
				FF_Unmount( pxDisk );
 800a3fa:	f7fe f9fb 	bl	80087f4 <FF_Unmount>
 800a3fe:	e7f4      	b.n	800a3ea <FF_SDDiskDelete+0x1c>
}
 800a400:	2001      	movs	r0, #1
 800a402:	4770      	bx	lr

0800a404 <FF_SDDiskShowPartition>:
	if( pxDisk == NULL )
 800a404:	2800      	cmp	r0, #0
 800a406:	d065      	beq.n	800a4d4 <FF_SDDiskShowPartition+0xd0>
{
 800a408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	4681      	mov	r9, r0
		pxIOManager = pxDisk->pxIOManager;
 800a410:	f8d0 8008 	ldr.w	r8, [r0, #8]
		FF_PRINTF( "Reading FAT and calculating Free Space\n" );
 800a414:	4830      	ldr	r0, [pc, #192]	; (800a4d8 <FF_SDDiskShowPartition+0xd4>)
 800a416:	f00c fa9b 	bl	8016950 <lUDPLoggingPrintf>
		switch( pxIOManager->xPartition.ucType )
 800a41a:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 800a41e:	2b0b      	cmp	r3, #11
 800a420:	d052      	beq.n	800a4c8 <FF_SDDiskShowPartition+0xc4>
 800a422:	2b0c      	cmp	r3, #12
 800a424:	d053      	beq.n	800a4ce <FF_SDDiskShowPartition+0xca>
				pcTypeName = "UNKOWN";
 800a426:	4a2d      	ldr	r2, [pc, #180]	; (800a4dc <FF_SDDiskShowPartition+0xd8>)
 800a428:	492d      	ldr	r1, [pc, #180]	; (800a4e0 <FF_SDDiskShowPartition+0xdc>)
 800a42a:	2b0a      	cmp	r3, #10
 800a42c:	bf0c      	ite	eq
 800a42e:	468a      	moveq	sl, r1
 800a430:	4692      	movne	sl, r2
		FF_GetFreeSize( pxIOManager, &xError );
 800a432:	a901      	add	r1, sp, #4
 800a434:	4640      	mov	r0, r8
 800a436:	f7fb feed 	bl	8006214 <FF_GetFreeSize>
		ullFreeSectors = pxIOManager->xPartition.ulFreeClusterCount * pxIOManager->xPartition.ulSectorsPerCluster;
 800a43a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a43e:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 800a442:	fb04 f403 	mul.w	r4, r4, r3
 800a446:	2700      	movs	r7, #0
		iPercentageFree = ( int ) ( ( sdHUNDRED_64_BIT * ullFreeSectors + pxIOManager->xPartition.ulDataSectors / 2 ) /
 800a448:	f8d8 501c 	ldr.w	r5, [r8, #28]
		FF_PRINTF( "Partition Nr   %8u\n", pxDisk->xStatus.bPartitionNumber );
 800a44c:	f8b9 1000 	ldrh.w	r1, [r9]
 800a450:	f3c1 11c7 	ubfx	r1, r1, #7, #8
 800a454:	4823      	ldr	r0, [pc, #140]	; (800a4e4 <FF_SDDiskShowPartition+0xe0>)
 800a456:	f00c fa7b 	bl	8016950 <lUDPLoggingPrintf>
		FF_PRINTF( "Type           %8u (%s)\n", pxIOManager->xPartition.ucType, pcTypeName );
 800a45a:	4652      	mov	r2, sl
 800a45c:	f898 1054 	ldrb.w	r1, [r8, #84]	; 0x54
 800a460:	4821      	ldr	r0, [pc, #132]	; (800a4e8 <FF_SDDiskShowPartition+0xe4>)
 800a462:	f00c fa75 	bl	8016950 <lUDPLoggingPrintf>
		FF_PRINTF( "VolLabel       '%8s' \n", pxIOManager->xPartition.pcVolumeLabel );
 800a466:	f108 0144 	add.w	r1, r8, #68	; 0x44
 800a46a:	4820      	ldr	r0, [pc, #128]	; (800a4ec <FF_SDDiskShowPartition+0xe8>)
 800a46c:	f00c fa70 	bl	8016950 <lUDPLoggingPrintf>
		FF_PRINTF( "TotalSectors   %8lu\n", pxIOManager->xPartition.ulTotalSectors );
 800a470:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a474:	481e      	ldr	r0, [pc, #120]	; (800a4f0 <FF_SDDiskShowPartition+0xec>)
 800a476:	f00c fa6b 	bl	8016950 <lUDPLoggingPrintf>
		FF_PRINTF( "SecsPerCluster %8lu\n", pxIOManager->xPartition.ulSectorsPerCluster );
 800a47a:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 800a47e:	481d      	ldr	r0, [pc, #116]	; (800a4f4 <FF_SDDiskShowPartition+0xf0>)
 800a480:	f00c fa66 	bl	8016950 <lUDPLoggingPrintf>
		FF_PRINTF( "Size           %8lu MB\n", ulTotalSizeMB );
 800a484:	0ae9      	lsrs	r1, r5, #11
 800a486:	481c      	ldr	r0, [pc, #112]	; (800a4f8 <FF_SDDiskShowPartition+0xf4>)
 800a488:	f00c fa62 	bl	8016950 <lUDPLoggingPrintf>
		iPercentageFree = ( int ) ( ( sdHUNDRED_64_BIT * ullFreeSectors + pxIOManager->xPartition.ulDataSectors / 2 ) /
 800a48c:	1920      	adds	r0, r4, r4
 800a48e:	eb47 0107 	adc.w	r1, r7, r7
 800a492:	1900      	adds	r0, r0, r4
 800a494:	4179      	adcs	r1, r7
 800a496:	014b      	lsls	r3, r1, #5
 800a498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a49c:	0142      	lsls	r2, r0, #5
 800a49e:	1880      	adds	r0, r0, r2
 800a4a0:	4159      	adcs	r1, r3
 800a4a2:	1900      	adds	r0, r0, r4
 800a4a4:	4179      	adcs	r1, r7
 800a4a6:	086e      	lsrs	r6, r5, #1
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	1980      	adds	r0, r0, r6
 800a4ae:	f141 0100 	adc.w	r1, r1, #0
 800a4b2:	f7f5 fef5 	bl	80002a0 <__aeabi_uldivmod>
		FF_PRINTF( "FreeSize       %8lu MB ( %d perc free )\n", ulFreeSizeMB, iPercentageFree );
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	0ae1      	lsrs	r1, r4, #11
 800a4ba:	4810      	ldr	r0, [pc, #64]	; (800a4fc <FF_SDDiskShowPartition+0xf8>)
 800a4bc:	f00c fa48 	bl	8016950 <lUDPLoggingPrintf>
BaseType_t xReturn = pdPASS;
 800a4c0:	2001      	movs	r0, #1
}
 800a4c2:	b002      	add	sp, #8
 800a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				pcTypeName = "FAT16";
 800a4c8:	f8df a034 	ldr.w	sl, [pc, #52]	; 800a500 <FF_SDDiskShowPartition+0xfc>
 800a4cc:	e7b1      	b.n	800a432 <FF_SDDiskShowPartition+0x2e>
				pcTypeName = "FAT32";
 800a4ce:	f8df a034 	ldr.w	sl, [pc, #52]	; 800a504 <FF_SDDiskShowPartition+0x100>
				break;
 800a4d2:	e7ae      	b.n	800a432 <FF_SDDiskShowPartition+0x2e>
		xReturn = pdFAIL;
 800a4d4:	2000      	movs	r0, #0
	return xReturn;
 800a4d6:	4770      	bx	lr
 800a4d8:	0801956c 	.word	0x0801956c
 800a4dc:	08019564 	.word	0x08019564
 800a4e0:	0801954c 	.word	0x0801954c
 800a4e4:	08019594 	.word	0x08019594
 800a4e8:	080195a8 	.word	0x080195a8
 800a4ec:	080195c4 	.word	0x080195c4
 800a4f0:	080195dc 	.word	0x080195dc
 800a4f4:	080195f4 	.word	0x080195f4
 800a4f8:	0801960c 	.word	0x0801960c
 800a4fc:	08019624 	.word	0x08019624
 800a500:	08019554 	.word	0x08019554
 800a504:	0801955c 	.word	0x0801955c

0800a508 <FF_SDDiskInit>:
{
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	b08a      	sub	sp, #40	; 0x28
 800a50c:	4605      	mov	r5, r0
	xSDCardStatus = prvSDMMCInit( 0 );
 800a50e:	2000      	movs	r0, #0
 800a510:	f7ff fdea 	bl	800a0e8 <prvSDMMCInit>
 800a514:	4b39      	ldr	r3, [pc, #228]	; (800a5fc <FF_SDDiskInit+0xf4>)
 800a516:	6018      	str	r0, [r3, #0]
	if( xSDCardStatus != pdPASS )
 800a518:	2801      	cmp	r0, #1
 800a51a:	d151      	bne.n	800a5c0 <FF_SDDiskInit+0xb8>
		pxDisk = (FF_Disk_t *)ffconfigMALLOC( sizeof( *pxDisk ) );
 800a51c:	2014      	movs	r0, #20
 800a51e:	f008 fff3 	bl	8013508 <pvPortMalloc>
		if( pxDisk == NULL )
 800a522:	4604      	mov	r4, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	d050      	beq.n	800a5ca <FF_SDDiskInit+0xc2>
			memset( pxDisk, '\0', sizeof( *pxDisk ) );
 800a528:	2300      	movs	r3, #0
 800a52a:	6003      	str	r3, [r0, #0]
 800a52c:	6043      	str	r3, [r0, #4]
 800a52e:	6083      	str	r3, [r0, #8]
 800a530:	60c3      	str	r3, [r0, #12]
 800a532:	6103      	str	r3, [r0, #16]
			pxDisk->ulNumberOfSectors = xSDCardInfo.CardCapacity / 512;
 800a534:	4a32      	ldr	r2, [pc, #200]	; (800a600 <FF_SDDiskInit+0xf8>)
 800a536:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800a538:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a53a:	0a5b      	lsrs	r3, r3, #9
 800a53c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a540:	60c3      	str	r3, [r0, #12]
			if( xPlusFATMutex == NULL )
 800a542:	4b30      	ldr	r3, [pc, #192]	; (800a604 <FF_SDDiskInit+0xfc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d043      	beq.n	800a5d2 <FF_SDDiskInit+0xca>
			pxDisk->ulSignature = sdSIGNATURE;
 800a54a:	4b2f      	ldr	r3, [pc, #188]	; (800a608 <FF_SDDiskInit+0x100>)
 800a54c:	6123      	str	r3, [r4, #16]
			if( xPlusFATMutex != NULL)
 800a54e:	4b2d      	ldr	r3, [pc, #180]	; (800a604 <FF_SDDiskInit+0xfc>)
 800a550:	681e      	ldr	r6, [r3, #0]
 800a552:	2e00      	cmp	r6, #0
 800a554:	d031      	beq.n	800a5ba <FF_SDDiskInit+0xb2>
				memset( &xParameters, '\0', sizeof( xParameters ) );
 800a556:	2220      	movs	r2, #32
 800a558:	2100      	movs	r1, #0
 800a55a:	a801      	add	r0, sp, #4
 800a55c:	f00d f936 	bl	80177cc <memset>
				xParameters.ulMemorySize = sdIOMAN_MEM_SIZE;
 800a560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a564:	9302      	str	r3, [sp, #8]
				xParameters.ulSectorSize = 512;
 800a566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a56a:	9303      	str	r3, [sp, #12]
				xParameters.fnWriteBlocks = prvFFWrite;
 800a56c:	4b27      	ldr	r3, [pc, #156]	; (800a60c <FF_SDDiskInit+0x104>)
 800a56e:	9304      	str	r3, [sp, #16]
				xParameters.fnReadBlocks = prvFFRead;
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <FF_SDDiskInit+0x108>)
 800a572:	9305      	str	r3, [sp, #20]
				xParameters.pxDisk = pxDisk;
 800a574:	9406      	str	r4, [sp, #24]
				xParameters.pvSemaphore = ( void * ) xPlusFATMutex;
 800a576:	9607      	str	r6, [sp, #28]
				pxDisk->pxIOManager = FF_CreateIOManger( &xParameters, &xFFError );
 800a578:	a909      	add	r1, sp, #36	; 0x24
 800a57a:	a801      	add	r0, sp, #4
 800a57c:	f7fd f9b4 	bl	80078e8 <FF_CreateIOManger>
 800a580:	60a0      	str	r0, [r4, #8]
				if( pxDisk->pxIOManager == NULL )
 800a582:	b360      	cbz	r0, 800a5de <FF_SDDiskInit+0xd6>
					pxDisk->xStatus.bIsInitialised = pdTRUE;
 800a584:	7823      	ldrb	r3, [r4, #0]
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	7023      	strb	r3, [r4, #0]
					pxDisk->xStatus.bPartitionNumber = xPartitionNumber;
 800a58c:	8823      	ldrh	r3, [r4, #0]
 800a58e:	f36f 13ce 	bfc	r3, #7, #8
 800a592:	8023      	strh	r3, [r4, #0]
					if( FF_SDDiskMount( pxDisk ) == 0 )
 800a594:	4620      	mov	r0, r4
 800a596:	f7ff fef1 	bl	800a37c <FF_SDDiskMount>
 800a59a:	b348      	cbz	r0, 800a5f0 <FF_SDDiskInit+0xe8>
							pcName = "/";
 800a59c:	4b1d      	ldr	r3, [pc, #116]	; (800a614 <FF_SDDiskInit+0x10c>)
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	bf08      	it	eq
 800a5a2:	461d      	moveq	r5, r3
						FF_FS_Add( pcName, pxDisk );
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f7ff fa16 	bl	80099d8 <FF_FS_Add>
						FF_PRINTF( "FF_SDDiskInit: Mounted SD-card as root \"%s\"\n", pcName );
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	481a      	ldr	r0, [pc, #104]	; (800a618 <FF_SDDiskInit+0x110>)
 800a5b0:	f00c f9ce 	bl	8016950 <lUDPLoggingPrintf>
						FF_SDDiskShowPartition( pxDisk );
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7ff ff25 	bl	800a404 <FF_SDDiskShowPartition>
}
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	b00a      	add	sp, #40	; 0x28
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
		FF_PRINTF( "FF_SDDiskInit: prvSDMMCInit failed\n" );
 800a5c0:	4816      	ldr	r0, [pc, #88]	; (800a61c <FF_SDDiskInit+0x114>)
 800a5c2:	f00c f9c5 	bl	8016950 <lUDPLoggingPrintf>
		pxDisk = NULL;
 800a5c6:	2400      	movs	r4, #0
 800a5c8:	e7f7      	b.n	800a5ba <FF_SDDiskInit+0xb2>
			FF_PRINTF( "FF_SDDiskInit: Malloc failed\n" );
 800a5ca:	4815      	ldr	r0, [pc, #84]	; (800a620 <FF_SDDiskInit+0x118>)
 800a5cc:	f00c f9c0 	bl	8016950 <lUDPLoggingPrintf>
 800a5d0:	e7f3      	b.n	800a5ba <FF_SDDiskInit+0xb2>
				xPlusFATMutex = xSemaphoreCreateRecursiveMutex();
 800a5d2:	2004      	movs	r0, #4
 800a5d4:	f009 faa0 	bl	8013b18 <xQueueCreateMutex>
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <FF_SDDiskInit+0xfc>)
 800a5da:	6018      	str	r0, [r3, #0]
 800a5dc:	e7b5      	b.n	800a54a <FF_SDDiskInit+0x42>
					FF_PRINTF( "FF_SDDiskInit: FF_CreateIOManger: %s\n", (const char*)FF_GetErrMessage( xFFError ) );
 800a5de:	4911      	ldr	r1, [pc, #68]	; (800a624 <FF_SDDiskInit+0x11c>)
 800a5e0:	4811      	ldr	r0, [pc, #68]	; (800a628 <FF_SDDiskInit+0x120>)
 800a5e2:	f00c f9b5 	bl	8016950 <lUDPLoggingPrintf>
					FF_SDDiskDelete( pxDisk );
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7ff fef1 	bl	800a3ce <FF_SDDiskDelete>
					pxDisk = NULL;
 800a5ec:	2400      	movs	r4, #0
 800a5ee:	e7e4      	b.n	800a5ba <FF_SDDiskInit+0xb2>
						FF_SDDiskDelete( pxDisk );
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7ff feec 	bl	800a3ce <FF_SDDiskDelete>
						pxDisk = NULL;
 800a5f6:	2400      	movs	r4, #0
 800a5f8:	e7df      	b.n	800a5ba <FF_SDDiskInit+0xb2>
 800a5fa:	bf00      	nop
 800a5fc:	20000484 	.word	0x20000484
 800a600:	20000428 	.word	0x20000428
 800a604:	200003d0 	.word	0x200003d0
 800a608:	41404342 	.word	0x41404342
 800a60c:	08009f61 	.word	0x08009f61
 800a610:	08009df5 	.word	0x08009df5
 800a614:	080193b0 	.word	0x080193b0
 800a618:	080194d4 	.word	0x080194d4
 800a61c:	08019468 	.word	0x08019468
 800a620:	0801948c 	.word	0x0801948c
 800a624:	0801b914 	.word	0x0801b914
 800a628:	080194ac 	.word	0x080194ac

0800a62c <FF_SDDiskDetect>:
{
 800a62c:	b508      	push	{r3, lr}
	if( HAL_GPIO_ReadPin( configSD_DETECT_GPIO_PORT, configSD_DETECT_PIN ) != 0 )
 800a62e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a632:	4818      	ldr	r0, [pc, #96]	; (800a694 <FF_SDDiskDetect+0x68>)
 800a634:	f7f8 fbf2 	bl	8002e1c <HAL_GPIO_ReadPin>
	if( xReturn != pdFALSE )
 800a638:	b9f8      	cbnz	r0, 800a67a <FF_SDDiskDetect+0x4e>
		if( xCardDetect.bStableSignal == pdFALSE )
 800a63a:	4b17      	ldr	r3, [pc, #92]	; (800a698 <FF_SDDiskDetect+0x6c>)
 800a63c:	7b1b      	ldrb	r3, [r3, #12]
 800a63e:	f013 0f02 	tst.w	r3, #2
 800a642:	d123      	bne.n	800a68c <FF_SDDiskDetect+0x60>
			if( xCardDetect.bLastPresent == pdFALSE )
 800a644:	f013 0f01 	tst.w	r3, #1
 800a648:	d00c      	beq.n	800a664 <FF_SDDiskDetect+0x38>
			if( xTaskCheckForTimeOut( &xCardDetect.xTimeOut, &xCardDetect.xRemainingTime ) != pdFALSE )
 800a64a:	4813      	ldr	r0, [pc, #76]	; (800a698 <FF_SDDiskDetect+0x6c>)
 800a64c:	4601      	mov	r1, r0
 800a64e:	3004      	adds	r0, #4
 800a650:	f00a fa68 	bl	8014b24 <xTaskCheckForTimeOut>
 800a654:	b1e0      	cbz	r0, 800a690 <FF_SDDiskDetect+0x64>
				xCardDetect.bStableSignal = pdTRUE;
 800a656:	4a10      	ldr	r2, [pc, #64]	; (800a698 <FF_SDDiskDetect+0x6c>)
 800a658:	7b13      	ldrb	r3, [r2, #12]
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	7313      	strb	r3, [r2, #12]
	xReturn = prvSDDetect();
 800a660:	2001      	movs	r0, #1
 800a662:	bd08      	pop	{r3, pc}
				xCardDetect.bLastPresent = pdTRUE;
 800a664:	480c      	ldr	r0, [pc, #48]	; (800a698 <FF_SDDiskDetect+0x6c>)
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	7303      	strb	r3, [r0, #12]
				xCardDetect.xRemainingTime = pdMS_TO_TICKS( ( TickType_t ) sdCARD_DETECT_DEBOUNCE_TIME_MS );
 800a66c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a670:	f840 3b04 	str.w	r3, [r0], #4
				vTaskSetTimeOutState( &xCardDetect.xTimeOut );
 800a674:	f00a fa40 	bl	8014af8 <vTaskSetTimeOutState>
 800a678:	e7e7      	b.n	800a64a <FF_SDDiskDetect+0x1e>
		xCardDetect.bLastPresent = pdFALSE;
 800a67a:	4a07      	ldr	r2, [pc, #28]	; (800a698 <FF_SDDiskDetect+0x6c>)
 800a67c:	7b13      	ldrb	r3, [r2, #12]
		xCardDetect.bStableSignal = pdFALSE;
 800a67e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a682:	f36f 0341 	bfc	r3, #1, #1
 800a686:	7313      	strb	r3, [r2, #12]
	xReturn = prvSDDetect();
 800a688:	2000      	movs	r0, #0
 800a68a:	bd08      	pop	{r3, pc}
 800a68c:	2001      	movs	r0, #1
 800a68e:	bd08      	pop	{r3, pc}
				xReturn = pdFALSE;
 800a690:	2000      	movs	r0, #0
}
 800a692:	bd08      	pop	{r3, pc}
 800a694:	40021c00 	.word	0x40021c00
 800a698:	200003b4 	.word	0x200003b4

0800a69c <SDIO_IRQHandler>:
	{
 800a69c:	b500      	push	{lr}
 800a69e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9301      	str	r3, [sp, #4]
		HAL_SD_IRQHandler( &xSDHandle );
 800a6a4:	480a      	ldr	r0, [pc, #40]	; (800a6d0 <SDIO_IRQHandler+0x34>)
 800a6a6:	f000 fad1 	bl	800ac4c <HAL_SD_IRQHandler>
		if( xSDCardSemaphore != NULL )
 800a6aa:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <SDIO_IRQHandler+0x38>)
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	b110      	cbz	r0, 800a6b6 <SDIO_IRQHandler+0x1a>
			xSemaphoreGiveFromISR( xSDCardSemaphore, &xHigherPriorityTaskWoken );
 800a6b0:	a901      	add	r1, sp, #4
 800a6b2:	f009 fac3 	bl	8013c3c <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	b13b      	cbz	r3, 800a6ca <SDIO_IRQHandler+0x2e>
 800a6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6be:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <SDIO_IRQHandler+0x3c>)
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	f3bf 8f6f 	isb	sy
	}
 800a6ca:	b003      	add	sp, #12
 800a6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6d0:	20000488 	.word	0x20000488
 800a6d4:	20000480 	.word	0x20000480
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <DMA2_Stream6_IRQHandler>:
	{
 800a6dc:	b500      	push	{lr}
 800a6de:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9301      	str	r3, [sp, #4]
		HAL_DMA_IRQHandler (xSDHandle.hdmatx);
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <DMA2_Stream6_IRQHandler+0x38>)
 800a6e6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a6e8:	f7f6 fcca 	bl	8001080 <HAL_DMA_IRQHandler>
		if( xSDCardSemaphore != NULL )
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <DMA2_Stream6_IRQHandler+0x3c>)
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	b110      	cbz	r0, 800a6f8 <DMA2_Stream6_IRQHandler+0x1c>
			xSemaphoreGiveFromISR( xSDCardSemaphore, &xHigherPriorityTaskWoken );
 800a6f2:	a901      	add	r1, sp, #4
 800a6f4:	f009 faa2 	bl	8013c3c <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	b13b      	cbz	r3, 800a70c <DMA2_Stream6_IRQHandler+0x30>
 800a6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a700:	4b06      	ldr	r3, [pc, #24]	; (800a71c <DMA2_Stream6_IRQHandler+0x40>)
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	f3bf 8f6f 	isb	sy
	}
 800a70c:	b003      	add	sp, #12
 800a70e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a712:	bf00      	nop
 800a714:	20000488 	.word	0x20000488
 800a718:	20000480 	.word	0x20000480
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <DMA2_Stream3_IRQHandler>:
	{
 800a720:	b500      	push	{lr}
 800a722:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	9301      	str	r3, [sp, #4]
		HAL_DMA_IRQHandler (xSDHandle.hdmarx);
 800a728:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <DMA2_Stream3_IRQHandler+0x38>)
 800a72a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a72c:	f7f6 fca8 	bl	8001080 <HAL_DMA_IRQHandler>
		if( xSDCardSemaphore != NULL )
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <DMA2_Stream3_IRQHandler+0x3c>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	b110      	cbz	r0, 800a73c <DMA2_Stream3_IRQHandler+0x1c>
			xSemaphoreGiveFromISR( xSDCardSemaphore, &xHigherPriorityTaskWoken );
 800a736:	a901      	add	r1, sp, #4
 800a738:	f009 fa80 	bl	8013c3c <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	b13b      	cbz	r3, 800a750 <DMA2_Stream3_IRQHandler+0x30>
 800a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a744:	4b06      	ldr	r3, [pc, #24]	; (800a760 <DMA2_Stream3_IRQHandler+0x40>)
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
	}
 800a750:	b003      	add	sp, #12
 800a752:	f85d fb04 	ldr.w	pc, [sp], #4
 800a756:	bf00      	nop
 800a758:	20000488 	.word	0x20000488
 800a75c:	20000480 	.word	0x20000480
 800a760:	e000ed04 	.word	0xe000ed04

0800a764 <HAL_GPIO_EXTI_Callback>:

#endif	/* SDIO_USES_DMA != 0 */
/*-----------------------------------------------------------*/

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800a764:	b500      	push	{lr}
 800a766:	b083      	sub	sp, #12
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	9301      	str	r3, [sp, #4]

	if( GPIO_Pin == configSD_DETECT_PIN )
 800a76c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a770:	d002      	beq.n	800a778 <HAL_GPIO_EXTI_Callback+0x14>
	{
		vApplicationCardDetectChangeHookFromISR( &xHigherPriorityTaskWoken );
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
	}
}
 800a772:	b003      	add	sp, #12
 800a774:	f85d fb04 	ldr.w	pc, [sp], #4
		vApplicationCardDetectChangeHookFromISR( &xHigherPriorityTaskWoken );
 800a778:	a801      	add	r0, sp, #4
 800a77a:	f00c fe55 	bl	8017428 <vApplicationCardDetectChangeHookFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a77e:	9b01      	ldr	r3, [sp, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0f6      	beq.n	800a772 <HAL_GPIO_EXTI_Callback+0xe>
 800a784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a788:	4b03      	ldr	r3, [pc, #12]	; (800a798 <HAL_GPIO_EXTI_Callback+0x34>)
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	f3bf 8f6f 	isb	sy
}
 800a794:	e7ed      	b.n	800a772 <HAL_GPIO_EXTI_Callback+0xe>
 800a796:	bf00      	nop
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <EXTI15_10_IRQHandler>:
/*-----------------------------------------------------------*/

void EXTI15_10_IRQHandler( void )
{
 800a79c:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler( configSD_DETECT_PIN );	/* GPIO PIN H.13 */
 800a79e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a7a2:	f7f8 fb45 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
 800a7a6:	bd08      	pop	{r3, pc}

0800a7a8 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;

  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800a7a8:	6802      	ldr	r2, [r0, #0]
 800a7aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a7ac:	f013 0f45 	tst.w	r3, #69	; 0x45
 800a7b0:	d0fb      	beq.n	800a7aa <SD_CmdResp2Error+0x2>
  {
  }

  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800a7b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a7b4:	f013 0f04 	tst.w	r3, #4
 800a7b8:	d003      	beq.n	800a7c2 <SD_CmdResp2Error+0x1a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;

    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	6393      	str	r3, [r2, #56]	; 0x38

    return errorstate;
 800a7be:	2003      	movs	r0, #3
 800a7c0:	4770      	bx	lr
  }
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 800a7c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a7c4:	f013 0f01 	tst.w	r3, #1
 800a7c8:	d104      	bne.n	800a7d4 <SD_CmdResp2Error+0x2c>
  {
    /* No error flag set */
  }

  /* Clear all the static flags */
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7ca:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800a7ce:	6393      	str	r3, [r2, #56]	; 0x38

  return errorstate;
 800a7d0:	2000      	movs	r0, #0
}
 800a7d2:	4770      	bx	lr
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	6390      	str	r0, [r2, #56]	; 0x38
    return errorstate;
 800a7d8:	4770      	bx	lr
	...

0800a7dc <SD_CmdResp1Error>:
{
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460d      	mov	r5, r1
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800a7e2:	6801      	ldr	r1, [r0, #0]
 800a7e4:	4b49      	ldr	r3, [pc, #292]	; (800a90c <SD_CmdResp1Error+0x130>)
 800a7e6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a7e8:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a7ec:	d104      	bne.n	800a7f8 <SD_CmdResp1Error+0x1c>
	  if( ( --remaining_loops ) == 0 )
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	d1f9      	bne.n	800a7e6 <SD_CmdResp1Error+0xa>
		  FF_PRINTF( "SD_CmdResp1Error: times out\n" );
 800a7f2:	4847      	ldr	r0, [pc, #284]	; (800a910 <SD_CmdResp1Error+0x134>)
 800a7f4:	f00c f8ac 	bl	8016950 <lUDPLoggingPrintf>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800a7f8:	6820      	ldr	r0, [r4, #0]
 800a7fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a7fc:	f013 0f04 	tst.w	r3, #4
 800a800:	d003      	beq.n	800a80a <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800a802:	2304      	movs	r3, #4
 800a804:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800a806:	2003      	movs	r0, #3
 800a808:	bd38      	pop	{r3, r4, r5, pc}
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 800a80a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a80c:	f013 0f01 	tst.w	r3, #1
 800a810:	d003      	beq.n	800a81a <SD_CmdResp1Error+0x3e>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 800a812:	2301      	movs	r3, #1
 800a814:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800a816:	4618      	mov	r0, r3
 800a818:	bd38      	pop	{r3, r4, r5, pc}
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 800a81a:	f7f9 f85e 	bl	80038da <SDIO_GetCommandResponse>
 800a81e:	42a8      	cmp	r0, r5
 800a820:	d007      	beq.n	800a832 <SD_CmdResp1Error+0x56>
	FF_PRINTF( "RESPCMD[1] = %08x cmd = %02x\n", hsd->Instance->RESPCMD, SD_CMD );
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	6919      	ldr	r1, [r3, #16]
 800a826:	462a      	mov	r2, r5
 800a828:	483a      	ldr	r0, [pc, #232]	; (800a914 <SD_CmdResp1Error+0x138>)
 800a82a:	f00c f891 	bl	8016950 <lUDPLoggingPrintf>
    return errorstate;
 800a82e:	2010      	movs	r0, #16
 800a830:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a838:	639a      	str	r2, [r3, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 800a83a:	2000      	movs	r0, #0
 800a83c:	f7f9 f850 	bl	80038e0 <SDIO_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 800a840:	4b35      	ldr	r3, [pc, #212]	; (800a918 <SD_CmdResp1Error+0x13c>)
 800a842:	4003      	ands	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d03f      	beq.n	800a8c8 <SD_CmdResp1Error+0xec>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 800a848:	2800      	cmp	r0, #0
 800a84a:	db3f      	blt.n	800a8cc <SD_CmdResp1Error+0xf0>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 800a84c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a850:	d001      	beq.n	800a856 <SD_CmdResp1Error+0x7a>
    return(SD_ADDR_MISALIGNED);
 800a852:	2009      	movs	r0, #9
 800a854:	bd38      	pop	{r3, r4, r5, pc}
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800a856:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800a85a:	d001      	beq.n	800a860 <SD_CmdResp1Error+0x84>
    return(SD_BLOCK_LEN_ERR);
 800a85c:	200a      	movs	r0, #10
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800a860:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800a864:	d134      	bne.n	800a8d0 <SD_CmdResp1Error+0xf4>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 800a866:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800a86a:	d133      	bne.n	800a8d4 <SD_CmdResp1Error+0xf8>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 800a86c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800a870:	d132      	bne.n	800a8d8 <SD_CmdResp1Error+0xfc>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 800a872:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800a876:	d131      	bne.n	800a8dc <SD_CmdResp1Error+0x100>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 800a878:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800a87c:	d130      	bne.n	800a8e0 <SD_CmdResp1Error+0x104>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 800a87e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800a882:	d12f      	bne.n	800a8e4 <SD_CmdResp1Error+0x108>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 800a884:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800a888:	d12e      	bne.n	800a8e8 <SD_CmdResp1Error+0x10c>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 800a88a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800a88e:	d12d      	bne.n	800a8ec <SD_CmdResp1Error+0x110>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 800a890:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800a894:	d12c      	bne.n	800a8f0 <SD_CmdResp1Error+0x114>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 800a896:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800a89a:	d12b      	bne.n	800a8f4 <SD_CmdResp1Error+0x118>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 800a89c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800a8a0:	d12a      	bne.n	800a8f8 <SD_CmdResp1Error+0x11c>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 800a8a2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800a8a6:	d129      	bne.n	800a8fc <SD_CmdResp1Error+0x120>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 800a8a8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800a8ac:	d128      	bne.n	800a900 <SD_CmdResp1Error+0x124>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 800a8ae:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800a8b2:	d127      	bne.n	800a904 <SD_CmdResp1Error+0x128>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 800a8b4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800a8b8:	d126      	bne.n	800a908 <SD_CmdResp1Error+0x12c>
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 800a8ba:	f000 0008 	and.w	r0, r0, #8
  return errorstate;
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	bf14      	ite	ne
 800a8c2:	201a      	movne	r0, #26
 800a8c4:	2000      	moveq	r0, #0
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
    return errorstate;
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 800a8cc:	201c      	movs	r0, #28
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ERASE_SEQ_ERR);
 800a8d0:	200b      	movs	r0, #11
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_BAD_ERASE_PARAM);
 800a8d4:	200c      	movs	r0, #12
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_WRITE_PROT_VIOLATION);
 800a8d8:	200d      	movs	r0, #13
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 800a8dc:	200e      	movs	r0, #14
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_COM_CRC_FAILED);
 800a8e0:	200f      	movs	r0, #15
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ILLEGAL_CMD);
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CARD_ECC_FAILED);
 800a8e8:	2011      	movs	r0, #17
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CC_ERROR);
 800a8ec:	2012      	movs	r0, #18
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 800a8f0:	2013      	movs	r0, #19
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_STREAM_READ_UNDERRUN);
 800a8f4:	2014      	movs	r0, #20
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 800a8f8:	2015      	movs	r0, #21
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CID_CSD_OVERWRITE);
 800a8fc:	2016      	movs	r0, #22
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_WP_ERASE_SKIP);
 800a900:	2017      	movs	r0, #23
 800a902:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_CARD_ECC_DISABLED);
 800a904:	2018      	movs	r0, #24
 800a906:	bd38      	pop	{r3, r4, r5, pc}
    return(SD_ERASE_RESET);
 800a908:	2019      	movs	r0, #25
}
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	00802c80 	.word	0x00802c80
 800a910:	0801a158 	.word	0x0801a158
 800a914:	0801a178 	.word	0x0801a178
 800a918:	fdffe008 	.word	0xfdffe008

0800a91c <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	b08e      	sub	sp, #56	; 0x38
 800a922:	4604      	mov	r4, r0
 800a924:	460e      	mov	r6, r1
  SDIO_CmdInitTypeDef  sdio_cmdinitstructure;
  SDIO_DataInitTypeDef sdio_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800a926:	2300      	movs	r3, #0
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	9302      	str	r3, [sp, #8]

  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdio_cmdinitstructure.Argument         = (uint32_t)8;
 800a92c:	2208      	movs	r2, #8
 800a92e:	9209      	str	r2, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800a930:	2510      	movs	r5, #16
 800a932:	950a      	str	r5, [sp, #40]	; 0x28
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800a934:	2240      	movs	r2, #64	; 0x40
 800a936:	920b      	str	r2, [sp, #44]	; 0x2c
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800a938:	930c      	str	r3, [sp, #48]	; 0x30
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800a93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93e:	930d      	str	r3, [sp, #52]	; 0x34
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800a940:	a909      	add	r1, sp, #36	; 0x24
 800a942:	6800      	ldr	r0, [r0, #0]
 800a944:	f7f8 ffb4 	bl	80038b0 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800a948:	4629      	mov	r1, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7ff ff46 	bl	800a7dc <SD_CmdResp1Error>

  if(errorstate != SD_OK)
 800a950:	4605      	mov	r5, r0
 800a952:	b118      	cbz	r0, 800a95c <SD_FindSCR+0x40>

  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);

  return errorstate;
}
 800a954:	4628      	mov	r0, r5
 800a956:	b00e      	add	sp, #56	; 0x38
 800a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sdio_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800a95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a95e:	041b      	lsls	r3, r3, #16
 800a960:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800a962:	2537      	movs	r5, #55	; 0x37
 800a964:	950a      	str	r5, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800a966:	a909      	add	r1, sp, #36	; 0x24
 800a968:	6820      	ldr	r0, [r4, #0]
 800a96a:	f7f8 ffa1 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800a96e:	4629      	mov	r1, r5
 800a970:	4620      	mov	r0, r4
 800a972:	f7ff ff33 	bl	800a7dc <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800a976:	4605      	mov	r5, r0
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1eb      	bne.n	800a954 <SD_FindSCR+0x38>
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a980:	9303      	str	r3, [sp, #12]
  sdio_datainitstructure.DataLength    = 8;
 800a982:	2308      	movs	r3, #8
 800a984:	9304      	str	r3, [sp, #16]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a986:	2330      	movs	r3, #48	; 0x30
 800a988:	9305      	str	r3, [sp, #20]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a98a:	2302      	movs	r3, #2
 800a98c:	9306      	str	r3, [sp, #24]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a98e:	2500      	movs	r5, #0
 800a990:	9507      	str	r5, [sp, #28]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 800a992:	2301      	movs	r3, #1
 800a994:	9308      	str	r3, [sp, #32]
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800a996:	a903      	add	r1, sp, #12
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	f7f8 ffad 	bl	80038f8 <SDIO_DataConfig>
  sdio_cmdinitstructure.Argument         = 0;
 800a99e:	9509      	str	r5, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800a9a0:	2533      	movs	r5, #51	; 0x33
 800a9a2:	950a      	str	r5, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800a9a4:	a909      	add	r1, sp, #36	; 0x24
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	f7f8 ff82 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7ff ff14 	bl	800a7dc <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d1cc      	bne.n	800a954 <SD_FindSCR+0x38>
 800a9ba:	f10d 0804 	add.w	r8, sp, #4
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR))
 800a9be:	f240 672a 	movw	r7, #1578	; 0x62a
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9c6:	423b      	tst	r3, r7
 800a9c8:	d108      	bne.n	800a9dc <SD_FindSCR+0xc0>
    if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a9ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9cc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a9d0:	d0f8      	beq.n	800a9c4 <SD_FindSCR+0xa8>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a9d2:	f7f8 ff62 	bl	800389a <SDIO_ReadFIFO>
 800a9d6:	f848 0b04 	str.w	r0, [r8], #4
 800a9da:	e7f2      	b.n	800a9c2 <SD_FindSCR+0xa6>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a9dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9de:	f013 0f08 	tst.w	r3, #8
 800a9e2:	d003      	beq.n	800a9ec <SD_FindSCR+0xd0>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a9e4:	2308      	movs	r3, #8
 800a9e6:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800a9e8:	2504      	movs	r5, #4
 800a9ea:	e7b3      	b.n	800a954 <SD_FindSCR+0x38>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a9ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9ee:	f013 0f02 	tst.w	r3, #2
 800a9f2:	d002      	beq.n	800a9fa <SD_FindSCR+0xde>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a9f4:	2502      	movs	r5, #2
 800a9f6:	6385      	str	r5, [r0, #56]	; 0x38
    return errorstate;
 800a9f8:	e7ac      	b.n	800a954 <SD_FindSCR+0x38>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a9fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9fc:	f013 0f20 	tst.w	r3, #32
 800aa00:	d003      	beq.n	800aa0a <SD_FindSCR+0xee>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800aa02:	2320      	movs	r3, #32
 800aa04:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800aa06:	2506      	movs	r5, #6
 800aa08:	e7a4      	b.n	800a954 <SD_FindSCR+0x38>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_STBITERR))
 800aa0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aa0c:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aa10:	d004      	beq.n	800aa1c <SD_FindSCR+0x100>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 800aa12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa16:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800aa18:	2507      	movs	r5, #7
 800aa1a:	e79b      	b.n	800a954 <SD_FindSCR+0x38>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa1c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800aa20:	6383      	str	r3, [r0, #56]	; 0x38
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800aa22:	9b01      	ldr	r3, [sp, #4]
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 800aa24:	0e1a      	lsrs	r2, r3, #24
 800aa26:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800aa2a:	0219      	lsls	r1, r3, #8
 800aa2c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 800aa30:	430a      	orrs	r2, r1
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa38:	4313      	orrs	r3, r2
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800aa3a:	6073      	str	r3, [r6, #4]
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800aa3c:	9b02      	ldr	r3, [sp, #8]
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 800aa3e:	0e1a      	lsrs	r2, r3, #24
 800aa40:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800aa44:	0219      	lsls	r1, r3, #8
 800aa46:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa52:	4313      	orrs	r3, r2
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800aa54:	6033      	str	r3, [r6, #0]
  return errorstate;
 800aa56:	e77d      	b.n	800a954 <SD_FindSCR+0x38>

0800aa58 <HAL_SD_MspInit>:
{
 800aa58:	4770      	bx	lr
	...

0800aa5c <HAL_SD_ReadBlocks_DMA>:
{
 800aa5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa60:	b08d      	sub	sp, #52	; 0x34
 800aa62:	4604      	mov	r4, r0
 800aa64:	4688      	mov	r8, r1
 800aa66:	4617      	mov	r7, r2
 800aa68:	4699      	mov	r9, r3
 800aa6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800aa6c:	9e15      	ldr	r6, [sp, #84]	; 0x54
  hsd->Instance->DCTRL = 0;
 800aa6e:	6802      	ldr	r2, [r0, #0]
 800aa70:	2300      	movs	r3, #0
 800aa72:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 800aa74:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 800aa76:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 800aa78:	64c3      	str	r3, [r0, #76]	; 0x4c
  if( hsd->EventSetupFunction != NULL )
 800aa7a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800aa7c:	b103      	cbz	r3, 800aa80 <HAL_SD_ReadBlocks_DMA+0x24>
	hsd->EventSetupFunction( hsd );
 800aa7e:	4798      	blx	r3
  if(NumberOfBlocks > 1)
 800aa80:	2e01      	cmp	r6, #1
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 800aa82:	bf8c      	ite	hi
 800aa84:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 800aa86:	2300      	movls	r3, #0
 800aa88:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 800aa8a:	6822      	ldr	r2, [r4, #0]
 800aa8c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800aa8e:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	63d3      	str	r3, [r2, #60]	; 0x3c
  __HAL_SD_SDIO_DMA_ENABLE();
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4b2c      	ldr	r3, [pc, #176]	; (800ab4c <HAL_SD_ReadBlocks_DMA+0xf0>)
 800aa9c:	601a      	str	r2, [r3, #0]
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 800aa9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa0:	4a2b      	ldr	r2, [pc, #172]	; (800ab50 <HAL_SD_ReadBlocks_DMA+0xf4>)
 800aaa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 800aaa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa6:	4a2b      	ldr	r2, [pc, #172]	; (800ab54 <HAL_SD_ReadBlocks_DMA+0xf8>)
 800aaa8:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800aaaa:	fb05 f306 	mul.w	r3, r5, r6
 800aaae:	6821      	ldr	r1, [r4, #0]
 800aab0:	089b      	lsrs	r3, r3, #2
 800aab2:	4642      	mov	r2, r8
 800aab4:	3180      	adds	r1, #128	; 0x80
 800aab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab8:	f7f6 fa74 	bl	8000fa4 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800aabc:	6a23      	ldr	r3, [r4, #32]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d019      	beq.n	800aaf6 <HAL_SD_ReadBlocks_DMA+0x9a>
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800aac2:	9507      	str	r5, [sp, #28]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800aac4:	f04f 0810 	mov.w	r8, #16
 800aac8:	f8cd 8020 	str.w	r8, [sp, #32]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800aad0:	2300      	movs	r3, #0
 800aad2:	930a      	str	r3, [sp, #40]	; 0x28
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800aad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad8:	930b      	str	r3, [sp, #44]	; 0x2c
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800aada:	a907      	add	r1, sp, #28
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	f7f8 fee7 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800aae2:	4641      	mov	r1, r8
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7ff fe79 	bl	800a7dc <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 800aaea:	4603      	mov	r3, r0
 800aaec:	b148      	cbz	r0, 800ab02 <HAL_SD_ReadBlocks_DMA+0xa6>
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	b00d      	add	sp, #52	; 0x34
 800aaf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ReadAddr /= 512;
 800aaf6:	0a7f      	lsrs	r7, r7, #9
 800aaf8:	ea47 57c9 	orr.w	r7, r7, r9, lsl #23
    BlockSize = 512;
 800aafc:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ab00:	e7df      	b.n	800aac2 <HAL_SD_ReadBlocks_DMA+0x66>
  sdio_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab06:	9301      	str	r3, [sp, #4]
  sdio_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800ab08:	fb06 f505 	mul.w	r5, r6, r5
 800ab0c:	9502      	str	r5, [sp, #8]
  sdio_datainitstructure.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ab0e:	2390      	movs	r3, #144	; 0x90
 800ab10:	9303      	str	r3, [sp, #12]
  sdio_datainitstructure.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ab12:	2302      	movs	r3, #2
 800ab14:	9304      	str	r3, [sp, #16]
  sdio_datainitstructure.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab16:	2300      	movs	r3, #0
 800ab18:	9305      	str	r3, [sp, #20]
  sdio_datainitstructure.DPSM          = SDIO_DPSM_ENABLE;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	9306      	str	r3, [sp, #24]
  SDIO_DataConfig(hsd->Instance, &sdio_datainitstructure);
 800ab1e:	a901      	add	r1, sp, #4
 800ab20:	6820      	ldr	r0, [r4, #0]
 800ab22:	f7f8 fee9 	bl	80038f8 <SDIO_DataConfig>
  if(NumberOfBlocks > 1)
 800ab26:	2e01      	cmp	r6, #1
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 800ab28:	bf8c      	ite	hi
 800ab2a:	2312      	movhi	r3, #18
    sdio_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 800ab2c:	2311      	movls	r3, #17
 800ab2e:	9308      	str	r3, [sp, #32]
  sdio_cmdinitstructure.Argument = (uint32_t)ReadAddr;
 800ab30:	a90c      	add	r1, sp, #48	; 0x30
 800ab32:	f841 7d14 	str.w	r7, [r1, #-20]!
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	f7f8 feba 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, sdio_cmdinitstructure.CmdIndex);
 800ab3c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800ab40:	4620      	mov	r0, r4
 800ab42:	f7ff fe4b 	bl	800a7dc <SD_CmdResp1Error>
 800ab46:	4603      	mov	r3, r0
  hsd->SdTransferErr = errorstate;
 800ab48:	64e0      	str	r0, [r4, #76]	; 0x4c
  return errorstate;
 800ab4a:	e7d0      	b.n	800aaee <HAL_SD_ReadBlocks_DMA+0x92>
 800ab4c:	4225858c 	.word	0x4225858c
 800ab50:	0800aced 	.word	0x0800aced
 800ab54:	0800acff 	.word	0x0800acff

0800ab58 <HAL_SD_WriteBlocks_DMA>:
{
 800ab58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	b087      	sub	sp, #28
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4688      	mov	r8, r1
 800ab62:	4617      	mov	r7, r2
 800ab64:	4699      	mov	r9, r3
 800ab66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ab68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  hsd->Instance->DCTRL = 0;
 800ab6a:	6802      	ldr	r2, [r0, #0]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 800ab70:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 800ab72:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 800ab74:	64c3      	str	r3, [r0, #76]	; 0x4c
  if( hsd->EventSetupFunction != NULL )
 800ab76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800ab78:	b103      	cbz	r3, 800ab7c <HAL_SD_WriteBlocks_DMA+0x24>
	hsd->EventSetupFunction( hsd );
 800ab7a:	4798      	blx	r3
  hsd->Instance->DLEN = NumberOfBlocks * BlockSize;
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	fb06 f305 	mul.w	r3, r6, r5
 800ab82:	6293      	str	r3, [r2, #40]	; 0x28
  if(NumberOfBlocks > 1)
 800ab84:	2d01      	cmp	r5, #1
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 800ab86:	bf8c      	ite	hi
 800ab88:	2203      	movhi	r2, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 800ab8a:	2202      	movls	r2, #2
 800ab8c:	6562      	str	r2, [r4, #84]	; 0x54
  __HAL_SD_SDIO_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL |\
 800ab8e:	6821      	ldr	r1, [r4, #0]
 800ab90:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ab92:	f442 7246 	orr.w	r2, r2, #792	; 0x318
 800ab96:	f042 0202 	orr.w	r2, r2, #2
 800ab9a:	63ca      	str	r2, [r1, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800ab9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ab9e:	4927      	ldr	r1, [pc, #156]	; (800ac3c <HAL_SD_WriteBlocks_DMA+0xe4>)
 800aba0:	63d1      	str	r1, [r2, #60]	; 0x3c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 800aba2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aba4:	4926      	ldr	r1, [pc, #152]	; (800ac40 <HAL_SD_WriteBlocks_DMA+0xe8>)
 800aba6:	6491      	str	r1, [r2, #72]	; 0x48
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	089b      	lsrs	r3, r3, #2
 800abac:	3280      	adds	r2, #128	; 0x80
 800abae:	4641      	mov	r1, r8
 800abb0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800abb2:	f7f6 f9f7 	bl	8000fa4 <HAL_DMA_Start_IT>
  __HAL_SD_SDIO_DMA_ENABLE();
 800abb6:	2201      	movs	r2, #1
 800abb8:	4b22      	ldr	r3, [pc, #136]	; (800ac44 <HAL_SD_WriteBlocks_DMA+0xec>)
 800abba:	601a      	str	r2, [r3, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800abbc:	6a23      	ldr	r3, [r4, #32]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d036      	beq.n	800ac30 <HAL_SD_WriteBlocks_DMA+0xd8>
  sdio_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800abc2:	9601      	str	r6, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800abc4:	2610      	movs	r6, #16
 800abc6:	9602      	str	r6, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800abc8:	2340      	movs	r3, #64	; 0x40
 800abca:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800abcc:	2300      	movs	r3, #0
 800abce:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800abd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abd4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800abd6:	a901      	add	r1, sp, #4
 800abd8:	6820      	ldr	r0, [r4, #0]
 800abda:	f7f8 fe69 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800abde:	4631      	mov	r1, r6
 800abe0:	4620      	mov	r0, r4
 800abe2:	f7ff fdfb 	bl	800a7dc <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 800abe6:	4603      	mov	r3, r0
 800abe8:	b9f0      	cbnz	r0, 800ac28 <HAL_SD_WriteBlocks_DMA+0xd0>
  if(NumberOfBlocks <= 1)
 800abea:	2d01      	cmp	r5, #1
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 800abec:	bf94      	ite	ls
 800abee:	2318      	movls	r3, #24
    sdio_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 800abf0:	2319      	movhi	r3, #25
 800abf2:	9302      	str	r3, [sp, #8]
  sdio_cmdinitstructure.Argument = (uint32_t)WriteAddr;
 800abf4:	a906      	add	r1, sp, #24
 800abf6:	f841 7d14 	str.w	r7, [r1, #-20]!
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	f7f8 fe58 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, sdio_cmdinitstructure.CmdIndex);
 800ac00:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800ac04:	4620      	mov	r0, r4
 800ac06:	f7ff fde9 	bl	800a7dc <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	b960      	cbnz	r0, 800ac28 <HAL_SD_WriteBlocks_DMA+0xd0>
  hsd->Instance->DTIMER = SD_DATATIMEOUT;
 800ac0e:	6822      	ldr	r2, [r4, #0]
 800ac10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ac14:	6251      	str	r1, [r2, #36]	; 0x24
  tmpreg = hsd->Instance->DCTRL & ~( DCTRL_CLEAR_MASK );
 800ac16:	6821      	ldr	r1, [r4, #0]
 800ac18:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ac1a:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(SDIO_DATABLOCK_SIZE_512B | SDIO_TRANSFER_DIR_TO_CARD | SDIO_TRANSFER_MODE_BLOCK | SDIO_DCTRL_DTEN);
 800ac1e:	f042 0291 	orr.w	r2, r2, #145	; 0x91
  hsd->Instance->DCTRL = tmpreg;
 800ac22:	62ca      	str	r2, [r1, #44]	; 0x2c
  hsd->SdTransferErr = errorstate;
 800ac24:	2200      	movs	r2, #0
 800ac26:	64e2      	str	r2, [r4, #76]	; 0x4c
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	b007      	add	sp, #28
 800ac2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    WriteAddr /= 512;
 800ac30:	0a7f      	lsrs	r7, r7, #9
 800ac32:	ea47 57c9 	orr.w	r7, r7, r9, lsl #23
    BlockSize = 512;
 800ac36:	f44f 7600 	mov.w	r6, #512	; 0x200
 800ac3a:	e7c2      	b.n	800abc2 <HAL_SD_WriteBlocks_DMA+0x6a>
 800ac3c:	0800ad0d 	.word	0x0800ad0d
 800ac40:	0800ad1f 	.word	0x0800ad1f
 800ac44:	4225858c 	.word	0x4225858c

0800ac48 <HAL_SD_XferCpltCallback>:
{
 800ac48:	4770      	bx	lr

0800ac4a <HAL_SD_XferErrorCallback>:
{
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_SD_IRQHandler>:
{
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	4604      	mov	r4, r0
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DATAEND))
 800ac50:	6803      	ldr	r3, [r0, #0]
 800ac52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac54:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ac58:	d11b      	bne.n	800ac92 <HAL_SD_IRQHandler+0x46>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DCRCFAIL))
 800ac5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac5c:	f012 0f02 	tst.w	r2, #2
 800ac60:	d128      	bne.n	800acb4 <HAL_SD_IRQHandler+0x68>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_DTIMEOUT))
 800ac62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac64:	f012 0f08 	tst.w	r2, #8
 800ac68:	d12a      	bne.n	800acc0 <HAL_SD_IRQHandler+0x74>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_RXOVERR))
 800ac6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac6c:	f012 0f20 	tst.w	r2, #32
 800ac70:	d12d      	bne.n	800acce <HAL_SD_IRQHandler+0x82>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_TXUNDERR))
 800ac72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac74:	f012 0f10 	tst.w	r2, #16
 800ac78:	d130      	bne.n	800acdc <HAL_SD_IRQHandler+0x90>
  else if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_IT_STBITERR))
 800ac7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac7c:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ac80:	d010      	beq.n	800aca4 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_STBITERR);
 800ac82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_START_BIT_ERR;
 800ac88:	2307      	movs	r3, #7
 800ac8a:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800ac8c:	f7ff ffdd 	bl	800ac4a <HAL_SD_XferErrorCallback>
 800ac90:	e008      	b.n	800aca4 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_IT_DATAEND);
 800ac92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);
 800aca0:	f7ff ffd2 	bl	800ac48 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDIO_DISABLE_IT(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND  |\
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800aca8:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800acac:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800acb0:	63d3      	str	r3, [r2, #60]	; 0x3c
 800acb2:	bd10      	pop	{r4, pc}
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800acb4:	2202      	movs	r2, #2
 800acb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 800acb8:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800acba:	f7ff ffc6 	bl	800ac4a <HAL_SD_XferErrorCallback>
 800acbe:	e7f1      	b.n	800aca4 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800acc0:	2208      	movs	r2, #8
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 800acc4:	2304      	movs	r3, #4
 800acc6:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800acc8:	f7ff ffbf 	bl	800ac4a <HAL_SD_XferErrorCallback>
 800accc:	e7ea      	b.n	800aca4 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800acce:	2220      	movs	r2, #32
 800acd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 800acd2:	2306      	movs	r3, #6
 800acd4:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800acd6:	f7ff ffb8 	bl	800ac4a <HAL_SD_XferErrorCallback>
 800acda:	e7e3      	b.n	800aca4 <HAL_SD_IRQHandler+0x58>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_TXUNDERR);
 800acdc:	2210      	movs	r2, #16
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 800ace0:	2305      	movs	r3, #5
 800ace2:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800ace4:	f7ff ffb1 	bl	800ac4a <HAL_SD_XferErrorCallback>
 800ace8:	e7dc      	b.n	800aca4 <HAL_SD_IRQHandler+0x58>

0800acea <HAL_SD_DMA_RxCpltCallback>:
{
 800acea:	4770      	bx	lr

0800acec <SD_DMA_RxCplt>:
{
 800acec:	b508      	push	{r3, lr}
	SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800acee:	6b83      	ldr	r3, [r0, #56]	; 0x38
	hsd->DmaTransferCplt = 1;
 800acf0:	2201      	movs	r2, #1
 800acf2:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);
 800acf4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800acf6:	f7ff fff8 	bl	800acea <HAL_SD_DMA_RxCpltCallback>
 800acfa:	bd08      	pop	{r3, pc}

0800acfc <HAL_SD_DMA_RxErrorCallback>:
{
 800acfc:	4770      	bx	lr

0800acfe <SD_DMA_RxError>:
{
 800acfe:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 800ad00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad02:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ad04:	f7ff fffa 	bl	800acfc <HAL_SD_DMA_RxErrorCallback>
 800ad08:	bd08      	pop	{r3, pc}

0800ad0a <HAL_SD_DMA_TxCpltCallback>:
{
 800ad0a:	4770      	bx	lr

0800ad0c <SD_DMA_TxCplt>:
{
 800ad0c:	b508      	push	{r3, lr}
	SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800ad0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
	hsd->DmaTransferCplt = 1;
 800ad10:	2201      	movs	r2, #1
 800ad12:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);
 800ad14:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ad16:	f7ff fff8 	bl	800ad0a <HAL_SD_DMA_TxCpltCallback>
 800ad1a:	bd08      	pop	{r3, pc}

0800ad1c <HAL_SD_DMA_TxErrorCallback>:
{
 800ad1c:	4770      	bx	lr

0800ad1e <SD_DMA_TxError>:
{
 800ad1e:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 800ad20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ad22:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ad24:	f7ff fffa 	bl	800ad1c <HAL_SD_DMA_TxErrorCallback>
 800ad28:	bd08      	pop	{r3, pc}

0800ad2a <HAL_SD_Get_CardInfo>:
{
 800ad2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2c:	4603      	mov	r3, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 800ad2e:	6a02      	ldr	r2, [r0, #32]
 800ad30:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800ad34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800ad36:	f8a1 2054 	strh.w	r2, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 800ad3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800ad3c:	0f90      	lsrs	r0, r2, #30
 800ad3e:	7008      	strb	r0, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800ad40:	f3c2 6083 	ubfx	r0, r2, #26, #4
 800ad44:	7048      	strb	r0, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 800ad46:	f3c2 6201 	ubfx	r2, r2, #24, #2
 800ad4a:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 800ad4c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ad50:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800ad52:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800ad56:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 800ad58:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800ad5c:	714a      	strb	r2, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800ad5e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800ad62:	0112      	lsls	r2, r2, #4
 800ad64:	80ca      	strh	r2, [r1, #6]
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
 800ad66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800ad68:	88ca      	ldrh	r2, [r1, #6]
 800ad6a:	b292      	uxth	r2, r2
 800ad6c:	f3c0 5403 	ubfx	r4, r0, #20, #4
 800ad70:	4322      	orrs	r2, r4
 800ad72:	80ca      	strh	r2, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800ad74:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800ad78:	7208      	strb	r0, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 800ad7a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800ad7e:	09d0      	lsrs	r0, r2, #7
 800ad80:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800ad82:	f3c2 1080 	ubfx	r0, r2, #6, #1
 800ad86:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800ad88:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800ad8c:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800ad8e:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800ad92:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 800ad94:	2000      	movs	r0, #0
 800ad96:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800ad98:	6a18      	ldr	r0, [r3, #32]
 800ad9a:	2801      	cmp	r0, #1
 800ad9c:	f240 80ad 	bls.w	800aefa <HAL_SD_Get_CardInfo+0x1d0>
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800ada0:	2802      	cmp	r0, #2
 800ada2:	f000 80ed 	beq.w	800af80 <HAL_SD_Get_CardInfo+0x256>
    errorstate = SD_ERROR;
 800ada6:	2029      	movs	r0, #41	; 0x29
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800ada8:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800adac:	764c      	strb	r4, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800adae:	0052      	lsls	r2, r2, #1
 800adb0:	f002 027e 	and.w	r2, r2, #126	; 0x7e
 800adb4:	768a      	strb	r2, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800adb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800adb8:	7e8c      	ldrb	r4, [r1, #26]
 800adba:	f3c2 15c0 	ubfx	r5, r2, #7, #1
 800adbe:	432c      	orrs	r4, r5
 800adc0:	768c      	strb	r4, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800adc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800adc6:	76ca      	strb	r2, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 800adc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 800adca:	0fd4      	lsrs	r4, r2, #31
 800adcc:	770c      	strb	r4, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800adce:	f3c2 7441 	ubfx	r4, r2, #29, #2
 800add2:	774c      	strb	r4, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800add4:	f3c2 6482 	ubfx	r4, r2, #26, #3
 800add8:	778c      	strb	r4, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800adda:	0d92      	lsrs	r2, r2, #22
 800addc:	f002 020c 	and.w	r2, r2, #12
 800ade0:	77ca      	strb	r2, [r1, #31]
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800ade2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800ade4:	7fcc      	ldrb	r4, [r1, #31]
 800ade6:	f3c2 5581 	ubfx	r5, r2, #22, #2
 800adea:	432c      	orrs	r4, r5
 800adec:	77cc      	strb	r4, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800adee:	f3c2 5440 	ubfx	r4, r2, #21, #1
 800adf2:	f881 4020 	strb.w	r4, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800adf6:	2400      	movs	r4, #0
 800adf8:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 800adfc:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800ae00:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800ae04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 800ae06:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800ae0a:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 800ae0e:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800ae12:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 800ae16:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800ae1a:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 800ae1e:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800ae22:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800ae26:	f3c2 2481 	ubfx	r4, r2, #10, #2
 800ae2a:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 800ae2e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800ae32:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 800ae36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae38:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800ae3c:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 800ae40:	2401      	movs	r4, #1
 800ae42:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 800ae46:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
  pCardInfo->SD_cid.ManufacturerID = tmp;
 800ae4a:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 800ae4e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800ae52:	0212      	lsls	r2, r2, #8
 800ae54:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 800ae56:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800ae58:	b292      	uxth	r2, r2
 800ae5a:	f893 5039 	ldrb.w	r5, [r3, #57]	; 0x39
 800ae5e:	432a      	orrs	r2, r5
 800ae60:	85ca      	strh	r2, [r1, #46]	; 0x2e
 800ae62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae64:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 800ae66:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800ae68:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800ae6a:	f893 503f 	ldrb.w	r5, [r3, #63]	; 0x3f
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800ae6e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800ae72:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 800ae74:	6b0d      	ldr	r5, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
 800ae76:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 800ae78:	0212      	lsls	r2, r2, #8
 800ae7a:	b292      	uxth	r2, r2
 800ae7c:	432a      	orrs	r2, r5
 800ae7e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800ae80:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800ae82:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800ae86:	432a      	orrs	r2, r5
 800ae88:	630a      	str	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 800ae8a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName2 = tmp;
 800ae8e:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 800ae92:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  pCardInfo->SD_cid.ProdRev = tmp;
 800ae96:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 800ae9a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800ae9e:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 800aea0:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800aea2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
 800aea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800aea6:	0212      	lsls	r2, r2, #8
 800aea8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800aeac:	432a      	orrs	r2, r5
 800aeae:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800aeb0:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800aeb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeb4:	0212      	lsls	r2, r2, #8
 800aeb6:	b292      	uxth	r2, r2
 800aeb8:	432a      	orrs	r2, r5
 800aeba:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 800aebc:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 800aebe:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
  pCardInfo->SD_cid.ProdSN |= tmp;
 800aec2:	432a      	orrs	r2, r5
 800aec4:	638a      	str	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
 800aec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800aec8:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
 800aecc:	f3c2 5603 	ubfx	r6, r2, #20, #4
 800aed0:	4335      	orrs	r5, r6
 800aed2:	f881 503c 	strb.w	r5, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800aed6:	0a12      	lsrs	r2, r2, #8
 800aed8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800aedc:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800aede:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800aee0:	b292      	uxth	r2, r2
 800aee2:	f893 5045 	ldrb.w	r5, [r3, #69]	; 0x45
 800aee6:	432a      	orrs	r2, r5
 800aee8:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800aef0:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 800aef4:	f881 4041 	strb.w	r4, [r1, #65]	; 0x41
}
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800aefa:	0292      	lsls	r2, r2, #10
 800aefc:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800af00:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 800af02:	6908      	ldr	r0, [r1, #16]
 800af04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af06:	0092      	lsls	r2, r2, #2
 800af08:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 800af0c:	4302      	orrs	r2, r0
 800af0e:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800af10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 800af12:	6908      	ldr	r0, [r1, #16]
 800af14:	ea40 7092 	orr.w	r0, r0, r2, lsr #30
 800af18:	6108      	str	r0, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800af1a:	f3c2 60c2 	ubfx	r0, r2, #27, #3
 800af1e:	7508      	strb	r0, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800af20:	f3c2 6202 	ubfx	r2, r2, #24, #3
 800af24:	754a      	strb	r2, [r1, #21]
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 800af26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800af28:	f3c2 5042 	ubfx	r0, r2, #21, #3
 800af2c:	7588      	strb	r0, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800af2e:	f3c2 4082 	ubfx	r0, r2, #18, #3
 800af32:	75c8      	strb	r0, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 800af34:	0bd2      	lsrs	r2, r2, #15
 800af36:	f002 0206 	and.w	r2, r2, #6
 800af3a:	760a      	strb	r2, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 800af3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af3e:	f3c0 2207 	ubfx	r2, r0, #8, #8
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 800af42:	7e0c      	ldrb	r4, [r1, #24]
 800af44:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800af48:	4320      	orrs	r0, r4
 800af4a:	7608      	strb	r0, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 800af4c:	f8d1 e010 	ldr.w	lr, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800af50:	7e0d      	ldrb	r5, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800af52:	7a08      	ldrb	r0, [r1, #8]
 800af54:	b2c0      	uxtb	r0, r0
 800af56:	2401      	movs	r4, #1
 800af58:	fa04 f000 	lsl.w	r0, r4, r0
 800af5c:	6508      	str	r0, [r1, #80]	; 0x50
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800af5e:	3502      	adds	r5, #2
 800af60:	40ac      	lsls	r4, r5
 800af62:	17e7      	asrs	r7, r4, #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800af64:	fba4 4500 	umull	r4, r5, r4, r0
 800af68:	fb00 5507 	mla	r5, r0, r7, r5
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 800af6c:	f10e 0001 	add.w	r0, lr, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800af70:	fba4 6700 	umull	r6, r7, r4, r0
 800af74:	fb00 7705 	mla	r7, r0, r5, r7
 800af78:	e9c1 6712 	strd	r6, r7, [r1, #72]	; 0x48
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800af7c:	2000      	movs	r0, #0
 800af7e:	e713      	b.n	800ada8 <HAL_SD_Get_CardInfo+0x7e>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	0412      	lsls	r2, r2, #16
 800af84:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800af88:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800af8a:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800af8c:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800af90:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800af94:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 800af96:	6908      	ldr	r0, [r1, #16]
 800af98:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800af9c:	4302      	orrs	r2, r0
 800af9e:	610a      	str	r2, [r1, #16]
 800afa0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    pCardInfo->CardCapacity = (uint64_t)((((uint64_t)pCardInfo->SD_csd.DeviceSize + 1)) * 512 * 1024);
 800afa4:	690c      	ldr	r4, [r1, #16]
 800afa6:	2500      	movs	r5, #0
 800afa8:	3401      	adds	r4, #1
 800afaa:	f145 0500 	adc.w	r5, r5, #0
 800afae:	04e8      	lsls	r0, r5, #19
 800afb0:	ea40 3054 	orr.w	r0, r0, r4, lsr #13
 800afb4:	04e4      	lsls	r4, r4, #19
 800afb6:	648c      	str	r4, [r1, #72]	; 0x48
 800afb8:	64c8      	str	r0, [r1, #76]	; 0x4c
    pCardInfo->CardBlockSize = 512;
 800afba:	f44f 7000 	mov.w	r0, #512	; 0x200
 800afbe:	6508      	str	r0, [r1, #80]	; 0x50
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800afc0:	2000      	movs	r0, #0
 800afc2:	e6f1      	b.n	800ada8 <HAL_SD_Get_CardInfo+0x7e>

0800afc4 <HAL_SD_Init>:
{
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	b092      	sub	sp, #72	; 0x48
 800afca:	4605      	mov	r5, r0
 800afcc:	4688      	mov	r8, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800afce:	2400      	movs	r4, #0
 800afd0:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
  HAL_SD_MspInit(hsd);
 800afd4:	f7ff fd40 	bl	800aa58 <HAL_SD_MspInit>
  tmpinit.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800afd8:	940b      	str	r4, [sp, #44]	; 0x2c
  tmpinit.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800afda:	940c      	str	r4, [sp, #48]	; 0x30
  tmpinit.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800afdc:	940d      	str	r4, [sp, #52]	; 0x34
  	tmpinit.BusWide             = SDIO_BUS_WIDE_4B;
 800afde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afe2:	930e      	str	r3, [sp, #56]	; 0x38
  tmpinit.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800afe4:	940f      	str	r4, [sp, #60]	; 0x3c
  tmpinit.ClockDiv            = SDIO_INIT_CLK_DIV;
 800afe6:	2376      	movs	r3, #118	; 0x76
 800afe8:	9310      	str	r3, [sp, #64]	; 0x40
  SDIO_Init(hsd->Instance, tmpinit);
 800afea:	ab0e      	add	r3, sp, #56	; 0x38
 800afec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aff0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800aff4:	ab0b      	add	r3, sp, #44	; 0x2c
 800aff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aff8:	6828      	ldr	r0, [r5, #0]
 800affa:	f7f8 fc32 	bl	8003862 <SDIO_Init>
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800affe:	f88d 4017 	strb.w	r4, [sp, #23]
  __HAL_SD_SDIO_DISABLE();
 800b002:	4fb0      	ldr	r7, [pc, #704]	; (800b2c4 <HAL_SD_Init+0x300>)
 800b004:	603c      	str	r4, [r7, #0]
  SDIO_PowerState_ON(hsd->Instance);
 800b006:	6828      	ldr	r0, [r5, #0]
 800b008:	f7f8 fc4a 	bl	80038a0 <SDIO_PowerState_ON>
  HAL_Delay(1);
 800b00c:	2001      	movs	r0, #1
 800b00e:	f7f5 fb6d 	bl	80006ec <HAL_Delay>
  __HAL_SD_SDIO_ENABLE();
 800b012:	2301      	movs	r3, #1
 800b014:	603b      	str	r3, [r7, #0]
  sdio_cmdinitstructure.Argument         = 0;
 800b016:	9406      	str	r4, [sp, #24]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 800b018:	9407      	str	r4, [sp, #28]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_NO;
 800b01a:	9408      	str	r4, [sp, #32]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b01c:	9409      	str	r4, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b022:	930a      	str	r3, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b024:	a906      	add	r1, sp, #24
 800b026:	6828      	ldr	r0, [r5, #0]
 800b028:	f7f8 fc42 	bl	80038b0 <SDIO_SendCommand>
  uint32_t ulStarted = xTaskGetTickCount( );
 800b02c:	f009 fa70 	bl	8014510 <xTaskGetTickCount>
 800b030:	4607      	mov	r7, r0
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  while( tmp == 0 )
 800b036:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b03a:	d10a      	bne.n	800b052 <HAL_SD_Init+0x8e>
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDSENT);
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b040:	f004 0480 	and.w	r4, r4, #128	; 0x80
	if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b044:	f009 fa64 	bl	8014510 <xTaskGetTickCount>
 800b048:	1bc0      	subs	r0, r0, r7
 800b04a:	28c7      	cmp	r0, #199	; 0xc7
 800b04c:	d81b      	bhi.n	800b086 <HAL_SD_Init+0xc2>
  while( tmp == 0 )
 800b04e:	2c00      	cmp	r4, #0
 800b050:	d0f4      	beq.n	800b03c <HAL_SD_Init+0x78>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b058:	639a      	str	r2, [r3, #56]	; 0x38
  return errorstate;
 800b05a:	2300      	movs	r3, #0
  errorstate = SD_CmdError(hsd);
 800b05c:	f88d 3017 	strb.w	r3, [sp, #23]
  if(errorstate != SD_OK)
 800b060:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b064:	b18b      	cbz	r3, 800b08a <HAL_SD_Init+0xc6>
    return errorstate;
 800b066:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b06a:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd);
 800b06c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  if(errorstate != SD_OK)
 800b070:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80b4 	beq.w	800b1e2 <HAL_SD_Init+0x21e>
    return errorstate;
 800b07a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 800b07e:	b2c0      	uxtb	r0, r0
}
 800b080:	b012      	add	sp, #72	; 0x48
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return errorstate;
 800b086:	2303      	movs	r3, #3
 800b088:	e7e8      	b.n	800b05c <HAL_SD_Init+0x98>
  sdio_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 800b08a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b08e:	9306      	str	r3, [sp, #24]
  sdio_cmdinitstructure.CmdIndex         = SD_SDIO_SEND_IF_COND;
 800b090:	2308      	movs	r3, #8
 800b092:	9307      	str	r3, [sp, #28]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b094:	2340      	movs	r3, #64	; 0x40
 800b096:	9308      	str	r3, [sp, #32]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b098:	a906      	add	r1, sp, #24
 800b09a:	6828      	ldr	r0, [r5, #0]
 800b09c:	f7f8 fc08 	bl	80038b0 <SDIO_SendCommand>
  uint32_t ulStarted = xTaskGetTickCount( );
 800b0a0:	f009 fa36 	bl	8014510 <xTaskGetTickCount>
 800b0a4:	4607      	mov	r7, r0
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  while( tmp == 0 )
 800b0aa:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b0ae:	d10b      	bne.n	800b0c8 <HAL_SD_Init+0x104>
    tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT);
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b0b4:	f004 0445 	and.w	r4, r4, #69	; 0x45
	if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b0b8:	f009 fa2a 	bl	8014510 <xTaskGetTickCount>
 800b0bc:	1bc0      	subs	r0, r0, r7
 800b0be:	28c7      	cmp	r0, #199	; 0xc7
 800b0c0:	f200 817b 	bhi.w	800b3ba <HAL_SD_Init+0x3f6>
  while( tmp == 0 )
 800b0c4:	2c00      	cmp	r4, #0
 800b0c6:	d0f3      	beq.n	800b0b0 <HAL_SD_Init+0xec>
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if( xHadTimeout != pdFALSE || tmp)
 800b0cc:	f012 0f04 	tst.w	r2, #4
 800b0d0:	f040 8175 	bne.w	800b3be <HAL_SD_Init+0x3fa>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CMDREND))
 800b0d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0d6:	f012 0f40 	tst.w	r2, #64	; 0x40
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CMDREND);
 800b0da:	bf1d      	ittte	ne
 800b0dc:	2240      	movne	r2, #64	; 0x40
 800b0de:	639a      	strne	r2, [r3, #56]	; 0x38
    return errorstate;
 800b0e0:	2300      	movne	r3, #0
  return errorstate;
 800b0e2:	2329      	moveq	r3, #41	; 0x29
 800b0e4:	e16e      	b.n	800b3c4 <HAL_SD_Init+0x400>
	FF_PRINTF( "It's a 2.0 card, check SDHC\n" );
 800b0e6:	4878      	ldr	r0, [pc, #480]	; (800b2c8 <HAL_SD_Init+0x304>)
 800b0e8:	f00b fc32 	bl	8016950 <lUDPLoggingPrintf>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	622b      	str	r3, [r5, #32]
    sdtype        = SD_HIGH_CAPACITY;
 800b0f0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800b0f4:	e16e      	b.n	800b3d4 <HAL_SD_Init+0x410>
        return errorstate;
 800b0f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	e7b6      	b.n	800b06c <HAL_SD_Init+0xa8>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0fe:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800b102:	6393      	str	r3, [r2, #56]	; 0x38
  return errorstate;
 800b104:	2300      	movs	r3, #0
 800b106:	e040      	b.n	800b18a <HAL_SD_Init+0x1c6>
        return errorstate;
 800b108:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	e7ad      	b.n	800b06c <HAL_SD_Init+0xa8>
		FF_PRINTF("Voltage resp: %08x\n", response);
 800b110:	4601      	mov	r1, r0
 800b112:	4648      	mov	r0, r9
 800b114:	f00b fc1c 	bl	8016950 <lUDPLoggingPrintf>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800b118:	f1ba 0f00 	cmp.w	sl, #0
 800b11c:	d14a      	bne.n	800b1b4 <HAL_SD_Init+0x1f0>
 800b11e:	3401      	adds	r4, #1
 800b120:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800b124:	d053      	beq.n	800b1ce <HAL_SD_Init+0x20a>
      sdio_cmdinitstructure.Argument         = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	9306      	str	r3, [sp, #24]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800b12a:	2737      	movs	r7, #55	; 0x37
 800b12c:	9707      	str	r7, [sp, #28]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b12e:	2240      	movs	r2, #64	; 0x40
 800b130:	9208      	str	r2, [sp, #32]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b132:	9309      	str	r3, [sp, #36]	; 0x24
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b138:	930a      	str	r3, [sp, #40]	; 0x28
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b13a:	a906      	add	r1, sp, #24
 800b13c:	6828      	ldr	r0, [r5, #0]
 800b13e:	f7f8 fbb7 	bl	80038b0 <SDIO_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800b142:	4639      	mov	r1, r7
 800b144:	4628      	mov	r0, r5
 800b146:	f7ff fb49 	bl	800a7dc <SD_CmdResp1Error>
 800b14a:	f88d 0017 	strb.w	r0, [sp, #23]
      if(errorstate != SD_OK)
 800b14e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1cf      	bne.n	800b0f6 <HAL_SD_Init+0x132>
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800b156:	9606      	str	r6, [sp, #24]
      sdio_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800b158:	2329      	movs	r3, #41	; 0x29
 800b15a:	9307      	str	r3, [sp, #28]
      sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	9308      	str	r3, [sp, #32]
      sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b160:	2300      	movs	r3, #0
 800b162:	9309      	str	r3, [sp, #36]	; 0x24
      sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b168:	930a      	str	r3, [sp, #40]	; 0x28
      SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b16a:	a906      	add	r1, sp, #24
 800b16c:	6828      	ldr	r0, [r5, #0]
 800b16e:	f7f8 fb9f 	bl	80038b0 <SDIO_SendCommand>
  while (!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800b172:	682a      	ldr	r2, [r5, #0]
 800b174:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b176:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b17a:	d0fb      	beq.n	800b174 <HAL_SD_Init+0x1b0>
  if (__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800b17c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b17e:	f013 0f04 	tst.w	r3, #4
 800b182:	d0bc      	beq.n	800b0fe <HAL_SD_Init+0x13a>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800b184:	2304      	movs	r3, #4
 800b186:	6393      	str	r3, [r2, #56]	; 0x38
    return errorstate;
 800b188:	2303      	movs	r3, #3
      errorstate = SD_CmdResp3Error(hsd);
 800b18a:	f88d 3017 	strb.w	r3, [sp, #23]
      if(errorstate != SD_OK)
 800b18e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1b8      	bne.n	800b108 <HAL_SD_Init+0x144>
      response = SDIO_GetResponse(SDIO_RESP1);
 800b196:	2000      	movs	r0, #0
 800b198:	f7f8 fba2 	bl	80038e0 <SDIO_GetResponse>
 800b19c:	4607      	mov	r7, r0
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800b19e:	ea4f 7ad0 	mov.w	sl, r0, lsr #31
	  if( ( count == 0 ) || ( validvoltage != 0 ) )
 800b1a2:	2c01      	cmp	r4, #1
 800b1a4:	d0b4      	beq.n	800b110 <HAL_SD_Init+0x14c>
 800b1a6:	f1ba 0f00 	cmp.w	sl, #0
 800b1aa:	d0b8      	beq.n	800b11e <HAL_SD_Init+0x15a>
		FF_PRINTF("Voltage resp: %08x\n", response);
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4847      	ldr	r0, [pc, #284]	; (800b2cc <HAL_SD_Init+0x308>)
 800b1b0:	f00b fbce 	bl	8016950 <lUDPLoggingPrintf>
    if(count >= SD_MAX_VOLT_TRIAL)
 800b1b4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b1b8:	429c      	cmp	r4, r3
 800b1ba:	d808      	bhi.n	800b1ce <HAL_SD_Init+0x20a>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b1bc:	f017 4f80 	tst.w	r7, #1073741824	; 0x40000000
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 800b1c0:	bf1c      	itt	ne
 800b1c2:	2302      	movne	r3, #2
 800b1c4:	622b      	strne	r3, [r5, #32]
  return errorstate;
 800b1c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	e74e      	b.n	800b06c <HAL_SD_Init+0xa8>
	  FF_PRINTF("Can not agree on Voltage\n");
 800b1ce:	4840      	ldr	r0, [pc, #256]	; (800b2d0 <HAL_SD_Init+0x30c>)
 800b1d0:	f00b fbbe 	bl	8016950 <lUDPLoggingPrintf>
      errorstate = SD_INVALID_VOLTRANGE;
 800b1d4:	231b      	movs	r3, #27
 800b1d6:	f88d 3017 	strb.w	r3, [sp, #23]
      return errorstate;
 800b1da:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	e744      	b.n	800b06c <HAL_SD_Init+0xa8>
  if(SDIO_GetPowerState(hsd->Instance) == 0) /* Power off */
 800b1e2:	6828      	ldr	r0, [r5, #0]
 800b1e4:	f7f8 fb60 	bl	80038a8 <SDIO_GetPowerState>
 800b1e8:	b958      	cbnz	r0, 800b202 <HAL_SD_Init+0x23e>
    return errorstate;
 800b1ea:	2425      	movs	r4, #37	; 0x25
  errorstate = SD_Initialize_Cards(hsd);
 800b1ec:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
  if (errorstate != SD_OK)
 800b1f0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 80ae 	beq.w	800b356 <HAL_SD_Init+0x392>
    return errorstate;
 800b1fa:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 800b1fe:	b2c0      	uxtb	r0, r0
 800b200:	e73e      	b.n	800b080 <HAL_SD_Init+0xbc>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800b202:	6a2b      	ldr	r3, [r5, #32]
 800b204:	2b04      	cmp	r3, #4
 800b206:	f000 80a4 	beq.w	800b352 <HAL_SD_Init+0x38e>
    sdio_cmdinitstructure.Argument         = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	9306      	str	r3, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800b20e:	2202      	movs	r2, #2
 800b210:	9207      	str	r2, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 800b212:	22c0      	movs	r2, #192	; 0xc0
 800b214:	9208      	str	r2, [sp, #32]
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21c:	930a      	str	r3, [sp, #40]	; 0x28
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b21e:	a906      	add	r1, sp, #24
 800b220:	6828      	ldr	r0, [r5, #0]
 800b222:	f7f8 fb45 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 800b226:	4628      	mov	r0, r5
 800b228:	f7ff fabe 	bl	800a7a8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800b22c:	4604      	mov	r4, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d1dc      	bne.n	800b1ec <HAL_SD_Init+0x228>
    hsd->CID[0] = SDIO_GetResponse(SDIO_RESP1);
 800b232:	f7f8 fb55 	bl	80038e0 <SDIO_GetResponse>
 800b236:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->CID[1] = SDIO_GetResponse(SDIO_RESP2);
 800b238:	2004      	movs	r0, #4
 800b23a:	f7f8 fb51 	bl	80038e0 <SDIO_GetResponse>
 800b23e:	63e8      	str	r0, [r5, #60]	; 0x3c
    hsd->CID[2] = SDIO_GetResponse(SDIO_RESP3);
 800b240:	2008      	movs	r0, #8
 800b242:	f7f8 fb4d 	bl	80038e0 <SDIO_GetResponse>
 800b246:	6428      	str	r0, [r5, #64]	; 0x40
    hsd->CID[3] = SDIO_GetResponse(SDIO_RESP4);
 800b248:	200c      	movs	r0, #12
 800b24a:	f7f8 fb49 	bl	80038e0 <SDIO_GetResponse>
 800b24e:	6468      	str	r0, [r5, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800b250:	6a2b      	ldr	r3, [r5, #32]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_SD_Init+0x296>
 800b256:	2b06      	cmp	r3, #6
 800b258:	d154      	bne.n	800b304 <HAL_SD_Init+0x340>
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 800b25a:	2303      	movs	r3, #3
 800b25c:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b25e:	2340      	movs	r3, #64	; 0x40
 800b260:	9308      	str	r3, [sp, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b262:	a906      	add	r1, sp, #24
 800b264:	6828      	ldr	r0, [r5, #0]
 800b266:	f7f8 fb23 	bl	80038b0 <SDIO_SendCommand>
  while(!__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))
 800b26a:	6828      	ldr	r0, [r5, #0]
 800b26c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b26e:	f013 0f45 	tst.w	r3, #69	; 0x45
 800b272:	d0fb      	beq.n	800b26c <HAL_SD_Init+0x2a8>
  if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT))
 800b274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b276:	f013 0f04 	tst.w	r3, #4
 800b27a:	d003      	beq.n	800b284 <HAL_SD_Init+0x2c0>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800b27c:	2304      	movs	r3, #4
 800b27e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800b280:	2403      	movs	r4, #3
 800b282:	e7b3      	b.n	800b1ec <HAL_SD_Init+0x228>
  else if(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CCRCFAIL))
 800b284:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b286:	f013 0f01 	tst.w	r3, #1
 800b28a:	d002      	beq.n	800b292 <HAL_SD_Init+0x2ce>
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CCRCFAIL);
 800b28c:	2401      	movs	r4, #1
 800b28e:	6384      	str	r4, [r0, #56]	; 0x38
 800b290:	e7ac      	b.n	800b1ec <HAL_SD_Init+0x228>
  if(SDIO_GetCommandResponse(hsd->Instance) != SD_CMD)
 800b292:	f7f8 fb22 	bl	80038da <SDIO_GetCommandResponse>
 800b296:	2803      	cmp	r0, #3
 800b298:	d007      	beq.n	800b2aa <HAL_SD_Init+0x2e6>
	FF_PRINTF( "RESPCMD[2] = %08x cmd = %02x\n", hsd->Instance->RESPCMD, SD_CMD );
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	6919      	ldr	r1, [r3, #16]
 800b29e:	2203      	movs	r2, #3
 800b2a0:	480c      	ldr	r0, [pc, #48]	; (800b2d4 <HAL_SD_Init+0x310>)
 800b2a2:	f00b fb55 	bl	8016950 <lUDPLoggingPrintf>
    return errorstate;
 800b2a6:	2410      	movs	r4, #16
 800b2a8:	e7a0      	b.n	800b1ec <HAL_SD_Init+0x228>
  __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2aa:	682b      	ldr	r3, [r5, #0]
 800b2ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	f7f8 fb14 	bl	80038e0 <SDIO_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 800b2b8:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 800b2bc:	d10c      	bne.n	800b2d8 <HAL_SD_Init+0x314>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2be:	0c00      	lsrs	r0, r0, #16
 800b2c0:	e021      	b.n	800b306 <HAL_SD_Init+0x342>
 800b2c2:	bf00      	nop
 800b2c4:	422580a0 	.word	0x422580a0
 800b2c8:	0801a0c8 	.word	0x0801a0c8
 800b2cc:	0801a0e8 	.word	0x0801a0e8
 800b2d0:	0801a0fc 	.word	0x0801a0fc
 800b2d4:	0801a118 	.word	0x0801a118
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 800b2d8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800b2dc:	f040 8095 	bne.w	800b40a <HAL_SD_Init+0x446>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800b2e0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800b2e4:	d008      	beq.n	800b2f8 <HAL_SD_Init+0x334>
	FF_PRINTF( "response_r1 = %08x cmd = %02x\n", hsd->Instance->RESPCMD, SD_R6_ILLEGAL_CMD );
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	6919      	ldr	r1, [r3, #16]
 800b2ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2ee:	4849      	ldr	r0, [pc, #292]	; (800b414 <HAL_SD_Init+0x450>)
 800b2f0:	f00b fb2e 	bl	8016950 <lUDPLoggingPrintf>
    return(SD_ILLEGAL_CMD);
 800b2f4:	2410      	movs	r4, #16
 800b2f6:	e779      	b.n	800b1ec <HAL_SD_Init+0x228>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 800b2f8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b2fc:	f040 8087 	bne.w	800b40e <HAL_SD_Init+0x44a>
  uint16_t sd_rca = 1;
 800b300:	2001      	movs	r0, #1
 800b302:	e000      	b.n	800b306 <HAL_SD_Init+0x342>
 800b304:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800b306:	6a2b      	ldr	r3, [r5, #32]
 800b308:	2b04      	cmp	r3, #4
 800b30a:	f43f af6f 	beq.w	800b1ec <HAL_SD_Init+0x228>
    hsd->RCA = sd_rca;
 800b30e:	6268      	str	r0, [r5, #36]	; 0x24
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800b310:	0400      	lsls	r0, r0, #16
 800b312:	9006      	str	r0, [sp, #24]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800b314:	2309      	movs	r3, #9
 800b316:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_LONG;
 800b318:	23c0      	movs	r3, #192	; 0xc0
 800b31a:	9308      	str	r3, [sp, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b31c:	a906      	add	r1, sp, #24
 800b31e:	6828      	ldr	r0, [r5, #0]
 800b320:	f7f8 fac6 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 800b324:	4628      	mov	r0, r5
 800b326:	f7ff fa3f 	bl	800a7a8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800b32a:	4604      	mov	r4, r0
 800b32c:	2800      	cmp	r0, #0
 800b32e:	f47f af5d 	bne.w	800b1ec <HAL_SD_Init+0x228>
    hsd->CSD[0] = SDIO_GetResponse(SDIO_RESP1);
 800b332:	f7f8 fad5 	bl	80038e0 <SDIO_GetResponse>
 800b336:	62a8      	str	r0, [r5, #40]	; 0x28
    hsd->CSD[1] = SDIO_GetResponse(SDIO_RESP2);
 800b338:	2004      	movs	r0, #4
 800b33a:	f7f8 fad1 	bl	80038e0 <SDIO_GetResponse>
 800b33e:	62e8      	str	r0, [r5, #44]	; 0x2c
    hsd->CSD[2] = SDIO_GetResponse(SDIO_RESP3);
 800b340:	2008      	movs	r0, #8
 800b342:	f7f8 facd 	bl	80038e0 <SDIO_GetResponse>
 800b346:	6328      	str	r0, [r5, #48]	; 0x30
    hsd->CSD[3] = SDIO_GetResponse(SDIO_RESP4);
 800b348:	200c      	movs	r0, #12
 800b34a:	f7f8 fac9 	bl	80038e0 <SDIO_GetResponse>
 800b34e:	6368      	str	r0, [r5, #52]	; 0x34
 800b350:	e74c      	b.n	800b1ec <HAL_SD_Init+0x228>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800b352:	2400      	movs	r4, #0
 800b354:	e74a      	b.n	800b1ec <HAL_SD_Init+0x228>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800b356:	4641      	mov	r1, r8
 800b358:	4628      	mov	r0, r5
 800b35a:	f7ff fce6 	bl	800ad2a <HAL_SD_Get_CardInfo>
 800b35e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  if (errorstate == SD_OK)
 800b362:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800b366:	b183      	cbz	r3, 800b38a <HAL_SD_Init+0x3c6>
  SDIO_Init(hsd->Instance, hsd->Init);
 800b368:	462b      	mov	r3, r5
 800b36a:	f853 4b10 	ldr.w	r4, [r3], #16
 800b36e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b372:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b376:	3504      	adds	r5, #4
 800b378:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800b37c:	4620      	mov	r0, r4
 800b37e:	f7f8 fa70 	bl	8003862 <SDIO_Init>
  return errorstate;
 800b382:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
 800b386:	b2c0      	uxtb	r0, r0
 800b388:	e67a      	b.n	800b080 <HAL_SD_Init+0xbc>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800b38a:	f8b8 3054 	ldrh.w	r3, [r8, #84]	; 0x54
 800b38e:	041b      	lsls	r3, r3, #16
  sdio_cmdinitstructure.Argument         = (uint32_t)addr;
 800b390:	9306      	str	r3, [sp, #24]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800b392:	2407      	movs	r4, #7
 800b394:	9407      	str	r4, [sp, #28]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b396:	2340      	movs	r3, #64	; 0x40
 800b398:	9308      	str	r3, [sp, #32]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b39a:	2300      	movs	r3, #0
 800b39c:	9309      	str	r3, [sp, #36]	; 0x24
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3a2:	930a      	str	r3, [sp, #40]	; 0x28
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b3a4:	a906      	add	r1, sp, #24
 800b3a6:	6828      	ldr	r0, [r5, #0]
 800b3a8:	f7f8 fa82 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f7ff fa14 	bl	800a7dc <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800b3b4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 800b3b8:	e7d6      	b.n	800b368 <HAL_SD_Init+0x3a4>
  tmp = __HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_FLAG_CTIMEOUT);
 800b3be:	2204      	movs	r2, #4
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b3c2:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 800b3c4:	f88d 3017 	strb.w	r3, [sp, #23]
  if (errorstate == SD_OK)
 800b3c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f43f ae8a 	beq.w	800b0e6 <HAL_SD_Init+0x122>
  uint32_t sdtype = SD_STD_CAPACITY;
 800b3d2:	2600      	movs	r6, #0
  sdio_cmdinitstructure.Argument         = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9306      	str	r3, [sp, #24]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800b3d8:	2437      	movs	r4, #55	; 0x37
 800b3da:	9407      	str	r4, [sp, #28]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b3dc:	a906      	add	r1, sp, #24
 800b3de:	6828      	ldr	r0, [r5, #0]
 800b3e0:	f7f8 fa66 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f7ff f9f8 	bl	800a7dc <SD_CmdResp1Error>
 800b3ec:	f88d 0017 	strb.w	r0, [sp, #23]
  if(errorstate == SD_OK)
 800b3f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f47f aee6 	bne.w	800b1c6 <HAL_SD_Init+0x202>
 800b3fa:	2401      	movs	r4, #1
      sdio_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800b3fc:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800b400:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
		FF_PRINTF("Voltage resp: %08x\n", response);
 800b404:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800b418 <HAL_SD_Init+0x454>
 800b408:	e68d      	b.n	800b126 <HAL_SD_Init+0x162>
    return(SD_GENERAL_UNKNOWN_ERROR);
 800b40a:	2413      	movs	r4, #19
 800b40c:	e6ee      	b.n	800b1ec <HAL_SD_Init+0x228>
    return(SD_COM_CRC_FAILED);
 800b40e:	240f      	movs	r4, #15
 800b410:	e6ec      	b.n	800b1ec <HAL_SD_Init+0x228>
 800b412:	bf00      	nop
 800b414:	0801a138 	.word	0x0801a138
 800b418:	0801a0e8 	.word	0x0801a0e8

0800b41c <HAL_SD_WideBusOperation_Config>:
{
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	b092      	sub	sp, #72	; 0x48
  if (hsd->CardType == MULTIMEDIA_CARD)
 800b420:	6a03      	ldr	r3, [r0, #32]
 800b422:	2b03      	cmp	r3, #3
 800b424:	f000 809f 	beq.w	800b566 <HAL_SD_WideBusOperation_Config+0x14a>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800b428:	2b02      	cmp	r3, #2
 800b42a:	f200 80a0 	bhi.w	800b56e <HAL_SD_WideBusOperation_Config+0x152>
    if (WideMode == SDIO_BUS_WIDE_8B)
 800b42e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b432:	f000 809e 	beq.w	800b572 <HAL_SD_WideBusOperation_Config+0x156>
 800b436:	460d      	mov	r5, r1
 800b438:	4604      	mov	r4, r0
    else if (WideMode == SDIO_BUS_WIDE_4B)
 800b43a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b43e:	d003      	beq.n	800b448 <HAL_SD_WideBusOperation_Config+0x2c>
    else if (WideMode == SDIO_BUS_WIDE_1B)
 800b440:	2900      	cmp	r1, #0
 800b442:	d03c      	beq.n	800b4be <HAL_SD_WideBusOperation_Config+0xa2>
      errorstate = SD_INVALID_PARAMETER;
 800b444:	2626      	movs	r6, #38	; 0x26
 800b446:	e08f      	b.n	800b568 <HAL_SD_WideBusOperation_Config+0x14c>
  uint32_t scr[2] = {0, 0};
 800b448:	2000      	movs	r0, #0
 800b44a:	9005      	str	r0, [sp, #20]
 800b44c:	9006      	str	r0, [sp, #24]
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800b44e:	f7f8 fa47 	bl	80038e0 <SDIO_GetResponse>
 800b452:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800b456:	d001      	beq.n	800b45c <HAL_SD_WideBusOperation_Config+0x40>
    return errorstate;
 800b458:	260e      	movs	r6, #14
 800b45a:	e039      	b.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
  errorstate = SD_FindSCR(hsd, scr);
 800b45c:	a905      	add	r1, sp, #20
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff fa5c 	bl	800a91c <SD_FindSCR>
  if(errorstate != SD_OK)
 800b464:	4606      	mov	r6, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d132      	bne.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 800b46a:	9b06      	ldr	r3, [sp, #24]
 800b46c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b470:	d101      	bne.n	800b476 <HAL_SD_WideBusOperation_Config+0x5a>
    return errorstate;
 800b472:	2625      	movs	r6, #37	; 0x25
 800b474:	e02c      	b.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800b476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b478:	041b      	lsls	r3, r3, #16
 800b47a:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800b47c:	2637      	movs	r6, #55	; 0x37
 800b47e:	9608      	str	r6, [sp, #32]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	9309      	str	r3, [sp, #36]	; 0x24
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b484:	2300      	movs	r3, #0
 800b486:	930a      	str	r3, [sp, #40]	; 0x28
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48c:	930b      	str	r3, [sp, #44]	; 0x2c
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b48e:	a907      	add	r1, sp, #28
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	f7f8 fa0d 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800b496:	4631      	mov	r1, r6
 800b498:	4620      	mov	r0, r4
 800b49a:	f7ff f99f 	bl	800a7dc <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 800b49e:	4606      	mov	r6, r0
 800b4a0:	b9b0      	cbnz	r0, 800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
    sdio_cmdinitstructure.Argument         = 2;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800b4a6:	2606      	movs	r6, #6
 800b4a8:	9608      	str	r6, [sp, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b4aa:	a907      	add	r1, sp, #28
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	f7f8 f9ff 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff f991 	bl	800a7dc <SD_CmdResp1Error>
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	e008      	b.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
  uint32_t scr[2] = {0, 0};
 800b4be:	2000      	movs	r0, #0
 800b4c0:	9005      	str	r0, [sp, #20]
 800b4c2:	9006      	str	r0, [sp, #24]
  if((SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800b4c4:	f7f8 fa0c 	bl	80038e0 <SDIO_GetResponse>
 800b4c8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800b4cc:	d019      	beq.n	800b502 <HAL_SD_WideBusOperation_Config+0xe6>
    return errorstate;
 800b4ce:	260e      	movs	r6, #14
    if (errorstate == SD_OK)
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	d149      	bne.n	800b568 <HAL_SD_WideBusOperation_Config+0x14c>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 800b4d4:	6863      	ldr	r3, [r4, #4]
 800b4d6:	930c      	str	r3, [sp, #48]	; 0x30
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	930d      	str	r3, [sp, #52]	; 0x34
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b4dc:	68e3      	ldr	r3, [r4, #12]
 800b4de:	930e      	str	r3, [sp, #56]	; 0x38
      tmpinit.BusWide             = WideMode;
 800b4e0:	950f      	str	r5, [sp, #60]	; 0x3c
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b4e2:	6963      	ldr	r3, [r4, #20]
 800b4e4:	9310      	str	r3, [sp, #64]	; 0x40
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800b4e6:	69a3      	ldr	r3, [r4, #24]
 800b4e8:	9311      	str	r3, [sp, #68]	; 0x44
      SDIO_Init(hsd->Instance, tmpinit);
 800b4ea:	6824      	ldr	r4, [r4, #0]
 800b4ec:	ab12      	add	r3, sp, #72	; 0x48
 800b4ee:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800b4f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b4f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b4f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7f8 f9b1 	bl	8003862 <SDIO_Init>
 800b500:	e032      	b.n	800b568 <HAL_SD_WideBusOperation_Config+0x14c>
  errorstate = SD_FindSCR(hsd, scr);
 800b502:	a905      	add	r1, sp, #20
 800b504:	4620      	mov	r0, r4
 800b506:	f7ff fa09 	bl	800a91c <SD_FindSCR>
  if(errorstate != SD_OK)
 800b50a:	4606      	mov	r6, r0
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1df      	bne.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 800b510:	9b06      	ldr	r3, [sp, #24]
 800b512:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b516:	d101      	bne.n	800b51c <HAL_SD_WideBusOperation_Config+0x100>
    return errorstate;
 800b518:	2625      	movs	r6, #37	; 0x25
 800b51a:	e7d9      	b.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
    sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800b51c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b51e:	041b      	lsls	r3, r3, #16
 800b520:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800b522:	2637      	movs	r6, #55	; 0x37
 800b524:	9608      	str	r6, [sp, #32]
    sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	9309      	str	r3, [sp, #36]	; 0x24
    sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b52a:	2300      	movs	r3, #0
 800b52c:	930a      	str	r3, [sp, #40]	; 0x28
    sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b532:	930b      	str	r3, [sp, #44]	; 0x2c
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b534:	a907      	add	r1, sp, #28
 800b536:	6820      	ldr	r0, [r4, #0]
 800b538:	f7f8 f9ba 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800b53c:	4631      	mov	r1, r6
 800b53e:	4620      	mov	r0, r4
 800b540:	f7ff f94c 	bl	800a7dc <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 800b544:	4606      	mov	r6, r0
 800b546:	2800      	cmp	r0, #0
 800b548:	d1c2      	bne.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
    sdio_cmdinitstructure.Argument         = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	9307      	str	r3, [sp, #28]
    sdio_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800b54e:	2606      	movs	r6, #6
 800b550:	9608      	str	r6, [sp, #32]
    SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b552:	a907      	add	r1, sp, #28
 800b554:	6820      	ldr	r0, [r4, #0]
 800b556:	f7f8 f9ab 	bl	80038b0 <SDIO_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800b55a:	4631      	mov	r1, r6
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7ff f93d 	bl	800a7dc <SD_CmdResp1Error>
 800b562:	4606      	mov	r6, r0
 800b564:	e7b4      	b.n	800b4d0 <HAL_SD_WideBusOperation_Config+0xb4>
    return errorstate;
 800b566:	2627      	movs	r6, #39	; 0x27
}
 800b568:	4630      	mov	r0, r6
 800b56a:	b012      	add	sp, #72	; 0x48
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b56e:	2600      	movs	r6, #0
 800b570:	e7fa      	b.n	800b568 <HAL_SD_WideBusOperation_Config+0x14c>
      errorstate = SD_UNSUPPORTED_FEATURE;
 800b572:	2627      	movs	r6, #39	; 0x27
 800b574:	e7f8      	b.n	800b568 <HAL_SD_WideBusOperation_Config+0x14c>

0800b576 <HAL_SD_StopTransfer>:
{
 800b576:	b530      	push	{r4, r5, lr}
 800b578:	b087      	sub	sp, #28
 800b57a:	4604      	mov	r4, r0
  sdio_cmdinitstructure.Argument         = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800b580:	250c      	movs	r5, #12
 800b582:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b584:	2240      	movs	r2, #64	; 0x40
 800b586:	9203      	str	r2, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b588:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b58e:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b590:	a901      	add	r1, sp, #4
 800b592:	6800      	ldr	r0, [r0, #0]
 800b594:	f7f8 f98c 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 800b598:	4629      	mov	r1, r5
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff f91e 	bl	800a7dc <SD_CmdResp1Error>
}
 800b5a0:	b007      	add	sp, #28
 800b5a2:	bd30      	pop	{r4, r5, pc}

0800b5a4 <HAL_SD_CheckReadOperation>:
{
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	460d      	mov	r5, r1
	uint32_t ulStarted = xTaskGetTickCount( );
 800b5aa:	f008 ffb1 	bl	8014510 <xTaskGetTickCount>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	e008      	b.n	800b5c4 <HAL_SD_CheckReadOperation+0x20>
		xError = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b5b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if( xError != SD_OK )
 800b5b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5b8:	d11b      	bne.n	800b5f2 <HAL_SD_CheckReadOperation+0x4e>
		if( hsd->EventWaitFunction != NULL )
 800b5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5bc:	b193      	cbz	r3, 800b5e4 <HAL_SD_CheckReadOperation+0x40>
			if( hsd->EventWaitFunction( ( void * ) hsd ) != 0 )
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4798      	blx	r3
 800b5c2:	b950      	cbnz	r0, 800b5da <HAL_SD_CheckReadOperation+0x36>
		if( ( hsd->DmaTransferCplt != 0 ) && ( hsd->SdTransferCplt != 0 ) )
 800b5c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0f3      	beq.n	800b5b2 <HAL_SD_CheckReadOperation+0xe>
 800b5ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0f0      	beq.n	800b5b2 <HAL_SD_CheckReadOperation+0xe>
			HAL_DMA_Abort( hsd->hdmarx );
 800b5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5d2:	f7f5 fd2d 	bl	8001030 <HAL_DMA_Abort>
	BaseType_t xHadTimeout = pdFALSE;
 800b5d6:	2700      	movs	r7, #0
			break;
 800b5d8:	e00c      	b.n	800b5f4 <HAL_SD_CheckReadOperation+0x50>
				FF_PRINTF( "EventWaitFunction: RX timeout!\n" );
 800b5da:	4818      	ldr	r0, [pc, #96]	; (800b63c <HAL_SD_CheckReadOperation+0x98>)
 800b5dc:	f00b f9b8 	bl	8016950 <lUDPLoggingPrintf>
	BaseType_t xHadTimeout = pdFALSE;
 800b5e0:	2700      	movs	r7, #0
				break;
 800b5e2:	e007      	b.n	800b5f4 <HAL_SD_CheckReadOperation+0x50>
			if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b5e4:	f008 ff94 	bl	8014510 <xTaskGetTickCount>
 800b5e8:	1b80      	subs	r0, r0, r6
 800b5ea:	42a8      	cmp	r0, r5
 800b5ec:	d3ea      	bcc.n	800b5c4 <HAL_SD_CheckReadOperation+0x20>
				xHadTimeout = pdTRUE;
 800b5ee:	2701      	movs	r7, #1
 800b5f0:	e000      	b.n	800b5f4 <HAL_SD_CheckReadOperation+0x50>
	BaseType_t xHadTimeout = pdFALSE;
 800b5f2:	2700      	movs	r7, #0
	ulStarted = xTaskGetTickCount( );
 800b5f4:	f008 ff8c 	bl	8014510 <xTaskGetTickCount>
 800b5f8:	4606      	mov	r6, r0
	while(__HAL_SD_SDIO_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b602:	d005      	beq.n	800b610 <HAL_SD_CheckReadOperation+0x6c>
		if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b604:	f008 ff84 	bl	8014510 <xTaskGetTickCount>
 800b608:	1b80      	subs	r0, r0, r6
 800b60a:	4285      	cmp	r5, r0
 800b60c:	d8f5      	bhi.n	800b5fa <HAL_SD_CheckReadOperation+0x56>
			xHadTimeout = pdTRUE;
 800b60e:	2701      	movs	r7, #1
	if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 800b610:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b612:	2b01      	cmp	r3, #1
 800b614:	d00d      	beq.n	800b632 <HAL_SD_CheckReadOperation+0x8e>
	HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b616:	2000      	movs	r0, #0
	if ((xHadTimeout != pdFALSE) && (errorstate == SD_OK))
 800b618:	b117      	cbz	r7, 800b620 <HAL_SD_CheckReadOperation+0x7c>
		errorstate = SD_DATA_TIMEOUT;
 800b61a:	2800      	cmp	r0, #0
 800b61c:	bf08      	it	eq
 800b61e:	2004      	moveq	r0, #4
	__HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b626:	639a      	str	r2, [r3, #56]	; 0x38
	if (hsd->SdTransferErr != SD_OK)
 800b628:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b62a:	b10b      	cbz	r3, 800b630 <HAL_SD_CheckReadOperation+0x8c>
		return (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b62c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b62e:	b2c0      	uxtb	r0, r0
}
 800b630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		errorstate = HAL_SD_StopTransfer(hsd);
 800b632:	4620      	mov	r0, r4
 800b634:	f7ff ff9f 	bl	800b576 <HAL_SD_StopTransfer>
 800b638:	e7ee      	b.n	800b618 <HAL_SD_CheckReadOperation+0x74>
 800b63a:	bf00      	nop
 800b63c:	0801a088 	.word	0x0801a088

0800b640 <HAL_SD_GetStatus>:
{
 800b640:	b530      	push	{r4, r5, lr}
 800b642:	b087      	sub	sp, #28
 800b644:	4604      	mov	r4, r0
  sdio_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800b646:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	9301      	str	r3, [sp, #4]
  sdio_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800b64c:	250d      	movs	r5, #13
 800b64e:	9502      	str	r5, [sp, #8]
  sdio_cmdinitstructure.Response         = SDIO_RESPONSE_SHORT;
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	9303      	str	r3, [sp, #12]
  sdio_cmdinitstructure.WaitForInterrupt = SDIO_WAIT_NO;
 800b654:	2300      	movs	r3, #0
 800b656:	9304      	str	r3, [sp, #16]
  sdio_cmdinitstructure.CPSM             = SDIO_CPSM_ENABLE;
 800b658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(hsd->Instance, &sdio_cmdinitstructure);
 800b65e:	a901      	add	r1, sp, #4
 800b660:	6800      	ldr	r0, [r0, #0]
 800b662:	f7f8 f925 	bl	80038b0 <SDIO_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800b666:	4629      	mov	r1, r5
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff f8b7 	bl	800a7dc <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800b66e:	b110      	cbz	r0, 800b676 <HAL_SD_GetStatus+0x36>
    return SD_TRANSFER_ERROR;
 800b670:	2002      	movs	r0, #2
}
 800b672:	b007      	add	sp, #28
 800b674:	bd30      	pop	{r4, r5, pc}
  *pCardStatus = SDIO_GetResponse(SDIO_RESP1);
 800b676:	f7f8 f933 	bl	80038e0 <SDIO_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 800b67a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 800b67e:	3804      	subs	r0, #4
 800b680:	bf18      	it	ne
 800b682:	2001      	movne	r0, #1
 800b684:	e7f5      	b.n	800b672 <HAL_SD_GetStatus+0x32>
	...

0800b688 <HAL_SD_CheckWriteOperation>:
{
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	460d      	mov	r5, r1
 800b68e:	e008      	b.n	800b6a2 <HAL_SD_CheckWriteOperation+0x1a>
		xError = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b690:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		if( xError != SD_OK )
 800b692:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b696:	d11a      	bne.n	800b6ce <HAL_SD_CheckWriteOperation+0x46>
		if( hsd->EventWaitFunction != NULL )
 800b698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b69a:	b193      	cbz	r3, 800b6c2 <HAL_SD_CheckWriteOperation+0x3a>
			if( hsd->EventWaitFunction( ( void * ) hsd ) != 0 )
 800b69c:	4620      	mov	r0, r4
 800b69e:	4798      	blx	r3
 800b6a0:	b950      	cbnz	r0, 800b6b8 <HAL_SD_CheckWriteOperation+0x30>
		if( ( hsd->DmaTransferCplt != 0 ) && ( hsd->SdTransferCplt != 0 ) )
 800b6a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0f3      	beq.n	800b690 <HAL_SD_CheckWriteOperation+0x8>
 800b6a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0f0      	beq.n	800b690 <HAL_SD_CheckWriteOperation+0x8>
			HAL_DMA_Abort( hsd->hdmatx );
 800b6ae:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800b6b0:	f7f5 fcbe 	bl	8001030 <HAL_DMA_Abort>
	BaseType_t xHadTimeout = pdFALSE;
 800b6b4:	2700      	movs	r7, #0
			break;
 800b6b6:	e00b      	b.n	800b6d0 <HAL_SD_CheckWriteOperation+0x48>
				FF_PRINTF( "EventWaitFunction: TX timeout!\n" );
 800b6b8:	481b      	ldr	r0, [pc, #108]	; (800b728 <HAL_SD_CheckWriteOperation+0xa0>)
 800b6ba:	f00b f949 	bl	8016950 <lUDPLoggingPrintf>
	BaseType_t xHadTimeout = pdFALSE;
 800b6be:	2700      	movs	r7, #0
				break;
 800b6c0:	e006      	b.n	800b6d0 <HAL_SD_CheckWriteOperation+0x48>
			if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b6c2:	f008 ff25 	bl	8014510 <xTaskGetTickCount>
 800b6c6:	42a8      	cmp	r0, r5
 800b6c8:	d3eb      	bcc.n	800b6a2 <HAL_SD_CheckWriteOperation+0x1a>
				xHadTimeout = pdTRUE;
 800b6ca:	2701      	movs	r7, #1
 800b6cc:	e000      	b.n	800b6d0 <HAL_SD_CheckWriteOperation+0x48>
	BaseType_t xHadTimeout = pdFALSE;
 800b6ce:	2700      	movs	r7, #0
	ulStarted = xTaskGetTickCount( );
 800b6d0:	f008 ff1e 	bl	8014510 <xTaskGetTickCount>
 800b6d4:	4606      	mov	r6, r0
	while( __HAL_SD_SDIO_GET_FLAG( hsd, SDIO_FLAG_TXACT ) )
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800b6de:	d005      	beq.n	800b6ec <HAL_SD_CheckWriteOperation+0x64>
		if( ( xTaskGetTickCount( ) - ulStarted ) >= ulMaxTime )
 800b6e0:	f008 ff16 	bl	8014510 <xTaskGetTickCount>
 800b6e4:	1b80      	subs	r0, r0, r6
 800b6e6:	4285      	cmp	r5, r0
 800b6e8:	d8f5      	bhi.n	800b6d6 <HAL_SD_CheckWriteOperation+0x4e>
			xHadTimeout = pdTRUE;
 800b6ea:	2701      	movs	r7, #1
	if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 800b6ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d011      	beq.n	800b716 <HAL_SD_CheckWriteOperation+0x8e>
	HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b6f2:	2500      	movs	r5, #0
	if( ( xHadTimeout != pdFALSE ) && ( errorstate == SD_OK ) )
 800b6f4:	b117      	cbz	r7, 800b6fc <HAL_SD_CheckWriteOperation+0x74>
		errorstate = SD_DATA_TIMEOUT;
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	bf08      	it	eq
 800b6fa:	2504      	moveq	r5, #4
	__HAL_SD_SDIO_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
	if (hsd->SdTransferErr != SD_OK)
 800b704:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b706:	b95b      	cbnz	r3, 800b720 <HAL_SD_CheckWriteOperation+0x98>
		while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 800b708:	4620      	mov	r0, r4
 800b70a:	f7ff ff99 	bl	800b640 <HAL_SD_GetStatus>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d1fa      	bne.n	800b708 <HAL_SD_CheckWriteOperation+0x80>
}
 800b712:	4628      	mov	r0, r5
 800b714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		errorstate = HAL_SD_StopTransfer(hsd);
 800b716:	4620      	mov	r0, r4
 800b718:	f7ff ff2d 	bl	800b576 <HAL_SD_StopTransfer>
 800b71c:	4605      	mov	r5, r0
 800b71e:	e7e9      	b.n	800b6f4 <HAL_SD_CheckWriteOperation+0x6c>
		errorstate = (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 800b720:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b722:	b2ed      	uxtb	r5, r5
 800b724:	e7f5      	b.n	800b712 <HAL_SD_CheckWriteOperation+0x8a>
 800b726:	bf00      	nop
 800b728:	0801a0a8 	.word	0x0801a0a8

0800b72c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	b083      	sub	sp, #12

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800b732:	4b46      	ldr	r3, [pc, #280]	; (800b84c <vARPRefreshCacheEntry+0x120>)
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	ea83 0401 	eor.w	r4, r3, r1
 800b73a:	4a45      	ldr	r2, [pc, #276]	; (800b850 <vARPRefreshCacheEntry+0x124>)
 800b73c:	6852      	ldr	r2, [r2, #4]
 800b73e:	4214      	tst	r4, r2
 800b740:	d001      	beq.n	800b746 <vARPRefreshCacheEntry+0x1a>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d164      	bne.n	800b810 <vARPRefreshCacheEntry+0xe4>
 800b746:	4688      	mov	r8, r1
 800b748:	4606      	mov	r6, r0
 800b74a:	4c42      	ldr	r4, [pc, #264]	; (800b854 <vARPRefreshCacheEntry+0x128>)
{
 800b74c:	f04f 0bff 	mov.w	fp, #255	; 0xff
 800b750:	2300      	movs	r3, #0
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800b758:	46ca      	mov	sl, r9
 800b75a:	461d      	mov	r5, r3
 800b75c:	e017      	b.n	800b78e <vARPRefreshCacheEntry+0x62>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
			{
				if( pxMACAddress == NULL )
 800b75e:	b34e      	cbz	r6, 800b7b4 <vARPRefreshCacheEntry+0x88>
					xIpEntry = x;
					break;
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800b760:	2206      	movs	r2, #6
 800b762:	4631      	mov	r1, r6
 800b764:	4620      	mov	r0, r4
 800b766:	f00b fffd 	bl	8017764 <memcmp>
 800b76a:	b108      	cbz	r0, 800b770 <vARPRefreshCacheEntry+0x44>
 800b76c:	46aa      	mov	sl, r5
 800b76e:	e00a      	b.n	800b786 <vARPRefreshCacheEntry+0x5a>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b770:	4b39      	ldr	r3, [pc, #228]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b772:	006a      	lsls	r2, r5, #1
 800b774:	1951      	adds	r1, r2, r5
 800b776:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b77a:	2096      	movs	r0, #150	; 0x96
 800b77c:	7288      	strb	r0, [r1, #10]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800b77e:	2201      	movs	r2, #1
 800b780:	72ca      	strb	r2, [r1, #11]
					return;
 800b782:	e045      	b.n	800b810 <vARPRefreshCacheEntry+0xe4>
 800b784:	46a9      	mov	r9, r5
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b786:	3501      	adds	r5, #1
 800b788:	340c      	adds	r4, #12
 800b78a:	2d06      	cmp	r5, #6
 800b78c:	d013      	beq.n	800b7b6 <vARPRefreshCacheEntry+0x8a>
 800b78e:	4627      	mov	r7, r4
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800b790:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b794:	4598      	cmp	r8, r3
 800b796:	d0e2      	beq.n	800b75e <vARPRefreshCacheEntry+0x32>
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 800b798:	b136      	cbz	r6, 800b7a8 <vARPRefreshCacheEntry+0x7c>
 800b79a:	2206      	movs	r2, #6
 800b79c:	4631      	mov	r1, r6
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f00b ffe0 	bl	8017764 <memcmp>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d0ed      	beq.n	800b784 <vARPRefreshCacheEntry+0x58>
				xMacEntry = x;
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800b7a8:	79bb      	ldrb	r3, [r7, #6]
 800b7aa:	455b      	cmp	r3, fp
 800b7ac:	d2eb      	bcs.n	800b786 <vARPRefreshCacheEntry+0x5a>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 800b7ae:	469b      	mov	fp, r3
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800b7b0:	9501      	str	r5, [sp, #4]
 800b7b2:	e7e8      	b.n	800b786 <vARPRefreshCacheEntry+0x5a>
 800b7b4:	46aa      	mov	sl, r5
				xUseEntry = x;
			}
		}

		if( xMacEntry >= 0 )
 800b7b6:	f1b9 0f00 	cmp.w	r9, #0
 800b7ba:	db2c      	blt.n	800b816 <vARPRefreshCacheEntry+0xea>
		{
			xUseEntry = xMacEntry;

			if( xIpEntry >= 0 )
 800b7bc:	f1ba 0f00 	cmp.w	sl, #0
 800b7c0:	db30      	blt.n	800b824 <vARPRefreshCacheEntry+0xf8>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 800b7c2:	4925      	ldr	r1, [pc, #148]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b7c4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800b7c8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800b7cc:	eb01 020a 	add.w	r2, r1, sl
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f841 300a 	str.w	r3, [r1, sl]
 800b7d6:	6053      	str	r3, [r2, #4]
 800b7d8:	6093      	str	r3, [r2, #8]
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800b7da:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800b7de:	4a1e      	ldr	r2, [pc, #120]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b7e0:	f842 8023 	str.w	r8, [r2, r3, lsl #2]

		if( pxMACAddress != NULL )
 800b7e4:	b1a6      	cbz	r6, 800b810 <vARPRefreshCacheEntry+0xe4>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800b7e6:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b7e8:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800b7ec:	eb01 0209 	add.w	r2, r1, r9
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	3204      	adds	r2, #4
 800b7f4:	189c      	adds	r4, r3, r2
 800b7f6:	6830      	ldr	r0, [r6, #0]
 800b7f8:	5098      	str	r0, [r3, r2]
 800b7fa:	88b2      	ldrh	r2, [r6, #4]
 800b7fc:	80a2      	strh	r2, [r4, #4]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b7fe:	eb01 0209 	add.w	r2, r1, r9
 800b802:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b806:	2096      	movs	r0, #150	; 0x96
 800b808:	7290      	strb	r0, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 800b80a:	4613      	mov	r3, r2
 800b80c:	2201      	movs	r2, #1
 800b80e:	72da      	strb	r2, [r3, #11]
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
		}
	}
}
 800b810:	b003      	add	sp, #12
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if( xIpEntry >= 0 )
 800b816:	f1ba 0f00 	cmp.w	sl, #0
 800b81a:	db01      	blt.n	800b820 <vARPRefreshCacheEntry+0xf4>
			xUseEntry = xIpEntry;
 800b81c:	46d1      	mov	r9, sl
 800b81e:	e7dc      	b.n	800b7da <vARPRefreshCacheEntry+0xae>
 800b820:	f8dd 9004 	ldr.w	r9, [sp, #4]
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800b824:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800b828:	4a0b      	ldr	r2, [pc, #44]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b82a:	f842 8023 	str.w	r8, [r2, r3, lsl #2]
		if( pxMACAddress != NULL )
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d1d9      	bne.n	800b7e6 <vARPRefreshCacheEntry+0xba>
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800b832:	4b09      	ldr	r3, [pc, #36]	; (800b858 <vARPRefreshCacheEntry+0x12c>)
 800b834:	ea4f 0249 	mov.w	r2, r9, lsl #1
 800b838:	eb02 0109 	add.w	r1, r2, r9
 800b83c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b840:	2005      	movs	r0, #5
 800b842:	7288      	strb	r0, [r1, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800b844:	2200      	movs	r2, #0
 800b846:	72ca      	strb	r2, [r1, #11]
 800b848:	e7e2      	b.n	800b810 <vARPRefreshCacheEntry+0xe4>
 800b84a:	bf00      	nop
 800b84c:	20000010 	.word	0x20000010
 800b850:	2000065c 	.word	0x2000065c
 800b854:	20000544 	.word	0x20000544
 800b858:	20000540 	.word	0x20000540

0800b85c <eARPProcessPacket>:
{
 800b85c:	b538      	push	{r3, r4, r5, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <eARPProcessPacket+0x9c>)
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d046      	beq.n	800b8f4 <eARPProcessPacket+0x98>
 800b866:	4604      	mov	r4, r0
		switch( pxARPHeader->usOperation )
 800b868:	8a82      	ldrh	r2, [r0, #20]
 800b86a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b86e:	d004      	beq.n	800b87a <eARPProcessPacket+0x1e>
 800b870:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b874:	d038      	beq.n	800b8e8 <eARPProcessPacket+0x8c>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b876:	2000      	movs	r0, #0
 800b878:	bd38      	pop	{r3, r4, r5, pc}
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800b87a:	f8d0 2026 	ldr.w	r2, [r0, #38]	; 0x26
 800b87e:	4293      	cmp	r3, r2
 800b880:	d001      	beq.n	800b886 <eARPProcessPacket+0x2a>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b882:	2000      	movs	r0, #0
}
 800b884:	bd38      	pop	{r3, r4, r5, pc}
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 800b886:	f100 0516 	add.w	r5, r0, #22
 800b88a:	69c1      	ldr	r1, [r0, #28]
 800b88c:	4628      	mov	r0, r5
 800b88e:	f7ff ff4d 	bl	800b72c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800b892:	2300      	movs	r3, #0
 800b894:	7523      	strb	r3, [r4, #20]
 800b896:	2302      	movs	r3, #2
 800b898:	7563      	strb	r3, [r4, #21]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 800b89a:	69e3      	ldr	r3, [r4, #28]
 800b89c:	f8d4 2026 	ldr.w	r2, [r4, #38]	; 0x26
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d00f      	beq.n	800b8c4 <eARPProcessPacket+0x68>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 800b8a4:	682a      	ldr	r2, [r5, #0]
 800b8a6:	6222      	str	r2, [r4, #32]
 800b8a8:	88aa      	ldrh	r2, [r5, #4]
 800b8aa:	84a2      	strh	r2, [r4, #36]	; 0x24
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 800b8ac:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800b8b0:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <eARPProcessPacket+0x9c>)
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	f8c4 0016 	str.w	r0, [r4, #22]
 800b8b8:	889a      	ldrh	r2, [r3, #4]
 800b8ba:	80aa      	strh	r2, [r5, #4]
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
 800b8c0:	2002      	movs	r0, #2
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 800b8c4:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <eARPProcessPacket+0xa0>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	f8c4 2006 	str.w	r2, [r4, #6]
 800b8cc:	889b      	ldrh	r3, [r3, #4]
 800b8ce:	8163      	strh	r3, [r4, #10]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6223      	str	r3, [r4, #32]
 800b8d4:	84a3      	strh	r3, [r4, #36]	; 0x24
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800b8d6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800b8da:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 800b8de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b8e2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800b8e6:	e7e3      	b.n	800b8b0 <eARPProcessPacket+0x54>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 800b8e8:	69c1      	ldr	r1, [r0, #28]
 800b8ea:	3016      	adds	r0, #22
 800b8ec:	f7ff ff1e 	bl	800b72c <vARPRefreshCacheEntry>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b8f0:	2000      	movs	r0, #0
				break;
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20000010 	.word	0x20000010
 800b8fc:	0801a214 	.word	0x0801a214

0800b900 <eARPGetCacheEntry>:
{
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 800b900:	6803      	ldr	r3, [r0, #0]
 800b902:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <eARPGetCacheEntry+0xa0>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d00b      	beq.n	800b920 <eARPGetCacheEntry+0x20>
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
		eReturn = eARPCacheHit;
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b90c:	d00f      	beq.n	800b92e <eARPGetCacheEntry+0x2e>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800b90e:	4a25      	ldr	r2, [pc, #148]	; (800b9a4 <eARPGetCacheEntry+0xa4>)
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 800b910:	6912      	ldr	r2, [r2, #16]
 800b912:	4293      	cmp	r3, r2
 800b914:	d00b      	beq.n	800b92e <eARPGetCacheEntry+0x2e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
		eReturn = eARPCacheHit;
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800b916:	4a24      	ldr	r2, [pc, #144]	; (800b9a8 <eARPGetCacheEntry+0xa8>)
 800b918:	6952      	ldr	r2, [r2, #20]
 800b91a:	b97a      	cbnz	r2, 800b93c <eARPGetCacheEntry+0x3c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 800b91c:	2002      	movs	r0, #2
 800b91e:	4770      	bx	lr
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 800b920:	4b22      	ldr	r3, [pc, #136]	; (800b9ac <eARPGetCacheEntry+0xac>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	600a      	str	r2, [r1, #0]
 800b926:	889b      	ldrh	r3, [r3, #4]
 800b928:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
 800b92a:	2001      	movs	r0, #1
 800b92c:	4770      	bx	lr
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b92e:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <eARPGetCacheEntry+0xb0>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	600a      	str	r2, [r1, #0]
 800b934:	889b      	ldrh	r3, [r3, #4]
 800b936:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
 800b938:	2001      	movs	r0, #1
 800b93a:	4770      	bx	lr
{
 800b93c:	b430      	push	{r4, r5}
	}
	else
	{
		eReturn = eARPCacheMiss;

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800b93e:	405a      	eors	r2, r3
 800b940:	4c18      	ldr	r4, [pc, #96]	; (800b9a4 <eARPGetCacheEntry+0xa4>)
 800b942:	6864      	ldr	r4, [r4, #4]
 800b944:	4222      	tst	r2, r4
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800b946:	bf1c      	itt	ne
 800b948:	4b16      	ldrne	r3, [pc, #88]	; (800b9a4 <eARPGetCacheEntry+0xa4>)
 800b94a:	689b      	ldrne	r3, [r3, #8]
			ulAddressToLookup = *pulIPAddress;
		}

		if( eReturn == eARPCacheMiss )
		{
			if( ulAddressToLookup == 0UL )
 800b94c:	b913      	cbnz	r3, 800b954 <eARPGetCacheEntry+0x54>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800b94e:	2002      	movs	r0, #2
			}
		}
	}

	return eReturn;
}
 800b950:	bc30      	pop	{r4, r5}
 800b952:	4770      	bx	lr
	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800b954:	4a17      	ldr	r2, [pc, #92]	; (800b9b4 <eARPGetCacheEntry+0xb4>)
 800b956:	6812      	ldr	r2, [r2, #0]
 800b958:	4293      	cmp	r3, r2
 800b95a:	d00b      	beq.n	800b974 <eARPGetCacheEntry+0x74>
 800b95c:	4c15      	ldr	r4, [pc, #84]	; (800b9b4 <eARPGetCacheEntry+0xb4>)
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b95e:	2201      	movs	r2, #1
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800b960:	68e5      	ldr	r5, [r4, #12]
 800b962:	42ab      	cmp	r3, r5
 800b964:	d007      	beq.n	800b976 <eARPGetCacheEntry+0x76>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b966:	3201      	adds	r2, #1
 800b968:	340c      	adds	r4, #12
 800b96a:	2a06      	cmp	r2, #6
 800b96c:	d1f8      	bne.n	800b960 <eARPGetCacheEntry+0x60>
					*pulIPAddress = ulAddressToLookup;
 800b96e:	6003      	str	r3, [r0, #0]
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800b970:	2000      	movs	r0, #0
 800b972:	e7ed      	b.n	800b950 <eARPGetCacheEntry+0x50>
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800b974:	2200      	movs	r2, #0
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b976:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b97a:	480e      	ldr	r0, [pc, #56]	; (800b9b4 <eARPGetCacheEntry+0xb4>)
 800b97c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b980:	7adb      	ldrb	r3, [r3, #11]
 800b982:	b90b      	cbnz	r3, 800b988 <eARPGetCacheEntry+0x88>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 800b984:	2002      	movs	r0, #2
	return eReturn;
 800b986:	e7e3      	b.n	800b950 <eARPGetCacheEntry+0x50>
			}
			else
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b988:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	3304      	adds	r3, #4
 800b990:	18c2      	adds	r2, r0, r3
 800b992:	58c0      	ldr	r0, [r0, r3]
 800b994:	6008      	str	r0, [r1, #0]
 800b996:	8893      	ldrh	r3, [r2, #4]
 800b998:	808b      	strh	r3, [r1, #4]
				eReturn = eARPCacheHit;
 800b99a:	2001      	movs	r0, #1
 800b99c:	e7d8      	b.n	800b950 <eARPGetCacheEntry+0x50>
 800b99e:	bf00      	nop
 800b9a0:	fc0000e0 	.word	0xfc0000e0
 800b9a4:	2000065c 	.word	0x2000065c
 800b9a8:	20000010 	.word	0x20000010
 800b9ac:	0801a1cc 	.word	0x0801a1cc
 800b9b0:	0801a214 	.word	0x0801a214
 800b9b4:	20000540 	.word	0x20000540

0800b9b8 <vARPGenerateRequestPacket>:
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
	}
}

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ba:	4686      	mov	lr, r0
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800b9bc:	6987      	ldr	r7, [r0, #24]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800b9be:	4e12      	ldr	r6, [pc, #72]	; (800ba08 <vARPGenerateRequestPacket+0x50>)
 800b9c0:	463c      	mov	r4, r7
 800b9c2:	f106 0c20 	add.w	ip, r6, #32
 800b9c6:	4635      	mov	r5, r6
 800b9c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9ca:	6020      	str	r0, [r4, #0]
 800b9cc:	6061      	str	r1, [r4, #4]
 800b9ce:	60a2      	str	r2, [r4, #8]
 800b9d0:	60e3      	str	r3, [r4, #12]
 800b9d2:	462e      	mov	r6, r5
 800b9d4:	3410      	adds	r4, #16
 800b9d6:	4565      	cmp	r5, ip
 800b9d8:	d1f5      	bne.n	800b9c6 <vARPGenerateRequestPacket+0xe>
 800b9da:	6828      	ldr	r0, [r5, #0]
 800b9dc:	6020      	str	r0, [r4, #0]
 800b9de:	88ab      	ldrh	r3, [r5, #4]
 800b9e0:	80a3      	strh	r3, [r4, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b9e2:	4b0a      	ldr	r3, [pc, #40]	; (800ba0c <vARPGenerateRequestPacket+0x54>)
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	f8c7 0006 	str.w	r0, [r7, #6]
 800b9ea:	889a      	ldrh	r2, [r3, #4]
 800b9ec:	817a      	strh	r2, [r7, #10]
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800b9ee:	f8c7 0016 	str.w	r0, [r7, #22]
 800b9f2:	837a      	strh	r2, [r7, #26]
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	61fb      	str	r3, [r7, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800b9f8:	f8de 3014 	ldr.w	r3, [lr, #20]
 800b9fc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800ba00:	232a      	movs	r3, #42	; 0x2a
 800ba02:	f8ce 301c 	str.w	r3, [lr, #28]
 800ba06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba08:	0801a198 	.word	0x0801a198
 800ba0c:	20000010 	.word	0x20000010

0800ba10 <FreeRTOS_OutputARPRequest>:
{
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 800ba14:	2100      	movs	r1, #0
 800ba16:	202a      	movs	r0, #42	; 0x2a
 800ba18:	f004 fdb2 	bl	8010580 <pxGetNetworkBufferWithDescriptor>
	if( pxNetworkBuffer != NULL )
 800ba1c:	b138      	cbz	r0, 800ba2e <FreeRTOS_OutputARPRequest+0x1e>
 800ba1e:	4604      	mov	r4, r0
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800ba20:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 800ba22:	f7ff ffc9 	bl	800b9b8 <vARPGenerateRequestPacket>
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800ba26:	2101      	movs	r1, #1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f005 f845 	bl	8010ab8 <xNetworkInterfaceOutput>
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}

0800ba30 <vARPAgeCache>:
{
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	4c1b      	ldr	r4, [pc, #108]	; (800baa4 <vARPAgeCache+0x74>)
 800ba36:	f104 0648 	add.w	r6, r4, #72	; 0x48
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
 800ba3a:	2700      	movs	r7, #0
 800ba3c:	f04f 0807 	mov.w	r8, #7
 800ba40:	e007      	b.n	800ba52 <vARPAgeCache+0x22>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	f7ff ffe4 	bl	800ba10 <FreeRTOS_OutputARPRequest>
			if( xARPCache[ x ].ucAge == 0u )
 800ba48:	7aab      	ldrb	r3, [r5, #10]
 800ba4a:	b193      	cbz	r3, 800ba72 <vARPAgeCache+0x42>
 800ba4c:	340c      	adds	r4, #12
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800ba4e:	42b4      	cmp	r4, r6
 800ba50:	d015      	beq.n	800ba7e <vARPAgeCache+0x4e>
 800ba52:	4625      	mov	r5, r4
		if( xARPCache[ x ].ucAge > 0U )
 800ba54:	7aa3      	ldrb	r3, [r4, #10]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f8      	beq.n	800ba4c <vARPAgeCache+0x1c>
			( xARPCache[ x ].ucAge )--;
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	72a3      	strb	r3, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800ba60:	7ae2      	ldrb	r2, [r4, #11]
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d0ed      	beq.n	800ba42 <vARPAgeCache+0x12>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d8ee      	bhi.n	800ba48 <vARPAgeCache+0x18>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	f7ff ffd0 	bl	800ba10 <FreeRTOS_OutputARPRequest>
 800ba70:	e7ea      	b.n	800ba48 <vARPAgeCache+0x18>
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
 800ba72:	4639      	mov	r1, r7
 800ba74:	4640      	mov	r0, r8
 800ba76:	f00a fe6f 	bl	8016758 <vExampleDebugStatUpdate>
				xARPCache[ x ].ulIPAddress = 0UL;
 800ba7a:	602f      	str	r7, [r5, #0]
 800ba7c:	e7e6      	b.n	800ba4c <vARPAgeCache+0x1c>
	xTimeNow = xTaskGetTickCount ();
 800ba7e:	f008 fd47 	bl	8014510 <xTaskGetTickCount>
 800ba82:	4604      	mov	r4, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800ba84:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <vARPAgeCache+0x78>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	b123      	cbz	r3, 800ba94 <vARPAgeCache+0x64>
 800ba8a:	1ac3      	subs	r3, r0, r3
 800ba8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d905      	bls.n	800baa0 <vARPAgeCache+0x70>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <vARPAgeCache+0x7c>)
 800ba96:	6958      	ldr	r0, [r3, #20]
 800ba98:	f7ff ffba 	bl	800ba10 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 800ba9c:	4b02      	ldr	r3, [pc, #8]	; (800baa8 <vARPAgeCache+0x78>)
 800ba9e:	601c      	str	r4, [r3, #0]
 800baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa4:	20000540 	.word	0x20000540
 800baa8:	20000588 	.word	0x20000588
 800baac:	20000010 	.word	0x20000010

0800bab0 <prvSkipNameField>:

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800bab0:	7803      	ldrb	r3, [r0, #0]
 800bab2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800bab6:	2ac0      	cmp	r2, #192	; 0xc0
 800bab8:	d007      	beq.n	800baca <prvSkipNameField+0x1a>

	}
	else
	{
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
 800baba:	b123      	cbz	r3, 800bac6 <prvSkipNameField+0x16>
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 800babc:	3301      	adds	r3, #1
 800babe:	4418      	add	r0, r3
		while( *pucByte != 0x00 )
 800bac0:	7803      	ldrb	r3, [r0, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1fa      	bne.n	800babc <prvSkipNameField+0xc>
		}

		pucByte++;
 800bac6:	3001      	adds	r0, #1
	}

	return pucByte;
}
 800bac8:	4770      	bx	lr
		pucByte += sizeof( uint16_t );
 800baca:	3002      	adds	r0, #2
 800bacc:	4770      	bx	lr
	...

0800bad0 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 800bad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	b0a0      	sub	sp, #128	; 0x80
 800bad6:	4607      	mov	r7, r0
 800bad8:	460c      	mov	r4, r1
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 800bada:	2100      	movs	r1, #0
 800badc:	9100      	str	r1, [sp, #0]
 800bade:	227c      	movs	r2, #124	; 0x7c
 800bae0:	a801      	add	r0, sp, #4
 800bae2:	f00b fe73 	bl	80177cc <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 800bae6:	883b      	ldrh	r3, [r7, #0]
 800bae8:	b2a4      	uxth	r4, r4
 800baea:	42a3      	cmp	r3, r4
 800baec:	d003      	beq.n	800baf6 <prvParseDNSReply+0x26>
uint32_t ulIPAddress = 0UL;
 800baee:	2000      	movs	r0, #0
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
}
 800baf0:	b020      	add	sp, #128	; 0x80
 800baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 800baf6:	f107 050c 	add.w	r5, r7, #12
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 800bafa:	88bb      	ldrh	r3, [r7, #4]
 800bafc:	0a1e      	lsrs	r6, r3, #8
 800bafe:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800bb02:	b2b6      	uxth	r6, r6
		for( x = 0; x < usQuestions; x++ )
 800bb04:	2e00      	cmp	r6, #0
 800bb06:	d05c      	beq.n	800bbc2 <prvParseDNSReply+0xf2>
 800bb08:	2400      	movs	r4, #0
 800bb0a:	46a2      	mov	sl, r4
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800bb0c:	46a1      	mov	r9, r4
					pcName[xNameLen++] = '.';
 800bb0e:	f04f 082e 	mov.w	r8, #46	; 0x2e
				if( x == 0 )
 800bb12:	2c00      	cmp	r4, #0
 800bb14:	f000 816c 	beq.w	800bdf0 <prvParseDNSReply+0x320>
				pucByte = prvSkipNameField( pucByte );
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f7ff ffc9 	bl	800bab0 <prvSkipNameField>
			pucByte += sizeof( uint32_t );
 800bb1e:	1d05      	adds	r5, r0, #4
		for( x = 0; x < usQuestions; x++ )
 800bb20:	3401      	adds	r4, #1
 800bb22:	b2a4      	uxth	r4, r4
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d1f4      	bne.n	800bb12 <prvParseDNSReply+0x42>

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800bb28:	7803      	ldrb	r3, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 800bb2a:	7842      	ldrb	r2, [r0, #1]
	return ( uint16_t )
 800bb2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800bb30:	7881      	ldrb	r1, [r0, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
 800bb32:	78c3      	ldrb	r3, [r0, #3]
	return ( uint16_t )
 800bb34:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 800bb38:	88fb      	ldrh	r3, [r7, #6]
 800bb3a:	0a1c      	lsrs	r4, r3, #8
 800bb3c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800bb40:	b2a4      	uxth	r4, r4
 800bb42:	80fc      	strh	r4, [r7, #6]
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800bb44:	887b      	ldrh	r3, [r7, #2]
 800bb46:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 800bb4a:	2b80      	cmp	r3, #128	; 0x80
 800bb4c:	d03e      	beq.n	800bbcc <prvParseDNSReply+0xfc>
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 800bb4e:	2e00      	cmp	r6, #0
 800bb50:	f000 8148 	beq.w	800bde4 <prvParseDNSReply+0x314>
 800bb54:	2a01      	cmp	r2, #1
 800bb56:	f000 80b8 	beq.w	800bcca <prvParseDNSReply+0x1fa>
uint32_t ulIPAddress = 0UL;
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e7c8      	b.n	800baf0 <prvParseDNSReply+0x20>
			pucByte += sizeof( uint16_t );
 800bb5e:	1ca8      	adds	r0, r5, #2
 800bb60:	46aa      	mov	sl, r5
 800bb62:	e7dc      	b.n	800bb1e <prvParseDNSReply+0x4e>
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 800bb64:	3201      	adds	r2, #1
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d00a      	beq.n	800bb80 <prvParseDNSReply+0xb0>
					if( xNameLen < xLen - 1 )
 800bb6a:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 800bb6e:	dcf9      	bgt.n	800bb64 <prvParseDNSReply+0x94>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 800bb70:	7810      	ldrb	r0, [r2, #0]
 800bb72:	a920      	add	r1, sp, #128	; 0x80
 800bb74:	4451      	add	r1, sl
 800bb76:	f801 0c80 	strb.w	r0, [r1, #-128]
 800bb7a:	f10a 0a01 	add.w	sl, sl, #1
 800bb7e:	e7f1      	b.n	800bb64 <prvParseDNSReply+0x94>
 800bb80:	eb0c 030e 	add.w	r3, ip, lr
			while( *pucByte != 0x00 )
 800bb84:	781a      	ldrb	r2, [r3, #0]
 800bb86:	b1ca      	cbz	r2, 800bbbc <prvParseDNSReply+0xec>
				if( xNameLen && xNameLen < xLen - 1 )
 800bb88:	f1ba 0f00 	cmp.w	sl, #0
 800bb8c:	d008      	beq.n	800bba0 <prvParseDNSReply+0xd0>
 800bb8e:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 800bb92:	dc05      	bgt.n	800bba0 <prvParseDNSReply+0xd0>
					pcName[xNameLen++] = '.';
 800bb94:	aa20      	add	r2, sp, #128	; 0x80
 800bb96:	4452      	add	r2, sl
 800bb98:	f802 8c80 	strb.w	r8, [r2, #-128]
 800bb9c:	f10a 0a01 	add.w	sl, sl, #1
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 800bba0:	f103 0c01 	add.w	ip, r3, #1
 800bba4:	f893 e000 	ldrb.w	lr, [r3]
 800bba8:	f1be 0f00 	cmp.w	lr, #0
 800bbac:	d004      	beq.n	800bbb8 <prvParseDNSReply+0xe8>
 800bbae:	f10e 0201 	add.w	r2, lr, #1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	4662      	mov	r2, ip
 800bbb6:	e7d8      	b.n	800bb6a <prvParseDNSReply+0x9a>
 800bbb8:	4663      	mov	r3, ip
 800bbba:	e7e3      	b.n	800bb84 <prvParseDNSReply+0xb4>
			pucByte++;
 800bbbc:	1c58      	adds	r0, r3, #1
 800bbbe:	46aa      	mov	sl, r5
 800bbc0:	e7ad      	b.n	800bb1e <prvParseDNSReply+0x4e>
	uint16_t usType = 0, usClass = 0;
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4632      	mov	r2, r6
	char *pcRequestedName = NULL;
 800bbc6:	f04f 0a00 	mov.w	sl, #0
 800bbca:	e7b5      	b.n	800bb38 <prvParseDNSReply+0x68>
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800bbcc:	2c00      	cmp	r4, #0
 800bbce:	f000 8107 	beq.w	800bde0 <prvParseDNSReply+0x310>
 800bbd2:	2600      	movs	r6, #0
				pucByte = prvSkipNameField( pucByte );
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7ff ff6b 	bl	800bab0 <prvSkipNameField>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800bbda:	7802      	ldrb	r2, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 800bbdc:	7843      	ldrb	r3, [r0, #1]
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 800bbde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d00c      	beq.n	800bc00 <prvParseDNSReply+0x130>
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 800bbe6:	8905      	ldrh	r5, [r0, #8]
					usDataLength = FreeRTOS_ntohs( usDataLength );
 800bbe8:	0a2b      	lsrs	r3, r5, #8
 800bbea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
					pucByte += usDataLength + sizeof( uint16_t );
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	330a      	adds	r3, #10
 800bbf2:	18c5      	adds	r5, r0, r3
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800bbf4:	3601      	adds	r6, #1
 800bbf6:	b2b6      	uxth	r6, r6
 800bbf8:	42b4      	cmp	r4, r6
 800bbfa:	d1eb      	bne.n	800bbd4 <prvParseDNSReply+0x104>
uint32_t ulIPAddress = 0UL;
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	e777      	b.n	800baf0 <prvParseDNSReply+0x20>
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 800bc00:	7a43      	ldrb	r3, [r0, #9]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d001      	beq.n	800bc0a <prvParseDNSReply+0x13a>
uint32_t ulIPAddress = 0UL;
 800bc06:	2000      	movs	r0, #0
 800bc08:	e772      	b.n	800baf0 <prvParseDNSReply+0x20>
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 800bc0a:	f8d0 400a 	ldr.w	r4, [r0, #10]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800bc0e:	4b7e      	ldr	r3, [pc, #504]	; (800be08 <prvParseDNSReply+0x338>)
 800bc10:	791b      	ldrb	r3, [r3, #4]
 800bc12:	b18b      	cbz	r3, 800bc38 <prvParseDNSReply+0x168>
 800bc14:	4e7d      	ldr	r6, [pc, #500]	; (800be0c <prvParseDNSReply+0x33c>)
 800bc16:	2500      	movs	r5, #0
			{
				break;
			}

			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 800bc18:	f04f 0810 	mov.w	r8, #16
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	4669      	mov	r1, sp
 800bc20:	4630      	mov	r0, r6
 800bc22:	f00c f848 	bl	8017cb6 <strncmp>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d041      	beq.n	800bcae <prvParseDNSReply+0x1de>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800bc2a:	3501      	adds	r5, #1
 800bc2c:	2d04      	cmp	r5, #4
 800bc2e:	d003      	beq.n	800bc38 <prvParseDNSReply+0x168>
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800bc30:	f816 3f18 	ldrb.w	r3, [r6, #24]!
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1f1      	bne.n	800bc1c <prvParseDNSReply+0x14c>
				*pulIP = 0;
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 800bc38:	4b75      	ldr	r3, [pc, #468]	; (800be10 <prvParseDNSReply+0x340>)
 800bc3a:	681d      	ldr	r5, [r3, #0]
 800bc3c:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800be08 <prvParseDNSReply+0x338>
 800bc40:	006e      	lsls	r6, r5, #1
 800bc42:	1970      	adds	r0, r6, r5
 800bc44:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 800bc48:	2210      	movs	r2, #16
 800bc4a:	4669      	mov	r1, sp
 800bc4c:	3004      	adds	r0, #4
 800bc4e:	f00c f844 	bl	8017cda <strncpy>
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 800bc52:	442e      	add	r6, r5
 800bc54:	f848 4036 	str.w	r4, [r8, r6, lsl #3]

				xFreeEntry++;
 800bc58:	3501      	adds	r5, #1
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 800bc5a:	2d04      	cmp	r5, #4
 800bc5c:	d02d      	beq.n	800bcba <prvParseDNSReply+0x1ea>
				xFreeEntry++;
 800bc5e:	4b6c      	ldr	r3, [pc, #432]	; (800be10 <prvParseDNSReply+0x340>)
 800bc60:	601d      	str	r5, [r3, #0]
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 800bc62:	883d      	ldrh	r5, [r7, #0]
		vTaskSuspendAll();
 800bc64:	f008 fc4c 	bl	8014500 <vTaskSuspendAll>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800bc68:	4a6a      	ldr	r2, [pc, #424]	; (800be14 <prvParseDNSReply+0x344>)
 800bc6a:	68d3      	ldr	r3, [r2, #12]
 800bc6c:	3208      	adds	r2, #8
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d019      	beq.n	800bca6 <prvParseDNSReply+0x1d6>
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	4295      	cmp	r5, r2
 800bc76:	d006      	beq.n	800bc86 <prvParseDNSReply+0x1b6>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800bc78:	4967      	ldr	r1, [pc, #412]	; (800be18 <prvParseDNSReply+0x348>)
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800bc7a:	685b      	ldr	r3, [r3, #4]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800bc7c:	428b      	cmp	r3, r1
 800bc7e:	d012      	beq.n	800bca6 <prvParseDNSReply+0x1d6>
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4295      	cmp	r5, r2
 800bc84:	d1f9      	bne.n	800bc7a <prvParseDNSReply+0x1aa>
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800bc86:	68dd      	ldr	r5, [r3, #12]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 800bc88:	686b      	ldr	r3, [r5, #4]
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	6929      	ldr	r1, [r5, #16]
 800bc8e:	4668      	mov	r0, sp
 800bc90:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 800bc92:	f105 0014 	add.w	r0, r5, #20
 800bc96:	f007 fa53 	bl	8013140 <uxListRemove>
					vPortFree( pxCallback );
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f007 fc9a 	bl	80135d4 <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 800bca0:	4b5c      	ldr	r3, [pc, #368]	; (800be14 <prvParseDNSReply+0x344>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	b16b      	cbz	r3, 800bcc2 <prvParseDNSReply+0x1f2>
		xTaskResumeAll();
 800bca6:	f008 fd05 	bl	80146b4 <xTaskResumeAll>
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 800bcaa:	4620      	mov	r0, r4
 800bcac:	e720      	b.n	800baf0 <prvParseDNSReply+0x20>
					xDNSCache[ x ].ulIPAddress = *pulIP;
 800bcae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcb2:	4b55      	ldr	r3, [pc, #340]	; (800be08 <prvParseDNSReply+0x338>)
 800bcb4:	f843 4035 	str.w	r4, [r3, r5, lsl #3]
 800bcb8:	e7d3      	b.n	800bc62 <prvParseDNSReply+0x192>
				{
					xFreeEntry = 0;
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4b54      	ldr	r3, [pc, #336]	; (800be10 <prvParseDNSReply+0x340>)
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	e7cf      	b.n	800bc62 <prvParseDNSReply+0x192>
						vIPSetDnsTimerEnableState( pdFALSE );
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	f000 fece 	bl	800ca64 <vIPSetDnsTimerEnableState>
 800bcc8:	e7ed      	b.n	800bca6 <prvParseDNSReply+0x1d6>
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 800bcca:	2901      	cmp	r1, #1
 800bccc:	d001      	beq.n	800bcd2 <prvParseDNSReply+0x202>
uint32_t ulIPAddress = 0UL;
 800bcce:	2000      	movs	r0, #0
 800bcd0:	e70e      	b.n	800baf0 <prvParseDNSReply+0x20>
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 800bcd2:	f10a 0001 	add.w	r0, sl, #1
 800bcd6:	f00b fc7d 	bl	80175d4 <xApplicationDNSQueryHook>
 800bcda:	b908      	cbnz	r0, 800bce0 <prvParseDNSReply+0x210>
uint32_t ulIPAddress = 0UL;
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e707      	b.n	800baf0 <prvParseDNSReply+0x20>
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800bce0:	4638      	mov	r0, r7
 800bce2:	f000 fab1 	bl	800c248 <pxUDPPayloadBuffer_to_NetworkBuffer>
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 800bce6:	4b4d      	ldr	r3, [pc, #308]	; (800be1c <prvParseDNSReply+0x34c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	b9b3      	cbnz	r3, 800bd1a <prvParseDNSReply+0x24a>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	f000 8088 	beq.w	800be02 <prvParseDNSReply+0x332>
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 800bcf2:	69c1      	ldr	r1, [r0, #28]
 800bcf4:	f101 032a 	add.w	r3, r1, #42	; 0x2a
					pxNetworkBuffer->xDataLength = xDataLength;
 800bcf8:	61c3      	str	r3, [r0, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 800bcfa:	313a      	adds	r1, #58	; 0x3a
 800bcfc:	f000 fa8f 	bl	800c21e <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNewBuffer != NULL )
 800bd00:	4604      	mov	r4, r0
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d07d      	beq.n	800be02 <prvParseDNSReply+0x332>
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 800bd06:	463a      	mov	r2, r7
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 800bd08:	6983      	ldr	r3, [r0, #24]
 800bd0a:	f103 072a 	add.w	r7, r3, #42	; 0x2a
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 800bd0e:	1aad      	subs	r5, r5, r2
						pucByte = pucUDPPayloadBuffer + xOffset1;
 800bd10:	443d      	add	r5, r7
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800bd12:	ebaa 0a02 	sub.w	sl, sl, r2
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 800bd16:	44ba      	add	sl, r7
 800bd18:	e002      	b.n	800bd20 <prvParseDNSReply+0x250>
				if( pxNetworkBuffer != NULL )
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d064      	beq.n	800bde8 <prvParseDNSReply+0x318>
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 800bd1e:	2400      	movs	r4, #0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 800bd20:	f04f 0e80 	mov.w	lr, #128	; 0x80
 800bd24:	f887 e002 	strb.w	lr, [r7, #2]
 800bd28:	2100      	movs	r1, #0
 800bd2a:	70f9      	strb	r1, [r7, #3]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 800bd2c:	71b9      	strb	r1, [r7, #6]
 800bd2e:	2301      	movs	r3, #1
 800bd30:	71fb      	strb	r3, [r7, #7]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 800bd32:	7239      	strb	r1, [r7, #8]
 800bd34:	7279      	strb	r1, [r7, #9]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 800bd36:	72b9      	strb	r1, [r7, #10]
 800bd38:	72f9      	strb	r1, [r7, #11]
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800bd3a:	22c0      	movs	r2, #192	; 0xc0
 800bd3c:	702a      	strb	r2, [r5, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 800bd3e:	ebaa 0a07 	sub.w	sl, sl, r7
 800bd42:	f885 a001 	strb.w	sl, [r5, #1]
					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 800bd46:	70a9      	strb	r1, [r5, #2]
 800bd48:	70eb      	strb	r3, [r5, #3]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 800bd4a:	7129      	strb	r1, [r5, #4]
 800bd4c:	716b      	strb	r3, [r5, #5]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800bd4e:	71a9      	strb	r1, [r5, #6]
 800bd50:	2304      	movs	r3, #4
 800bd52:	71eb      	strb	r3, [r5, #7]
 800bd54:	2293      	movs	r2, #147	; 0x93
 800bd56:	722a      	strb	r2, [r5, #8]
 800bd58:	22e0      	movs	r2, #224	; 0xe0
 800bd5a:	726a      	strb	r2, [r5, #9]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800bd5c:	72a9      	strb	r1, [r5, #10]
 800bd5e:	72eb      	strb	r3, [r5, #11]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 800bd60:	4a2f      	ldr	r2, [pc, #188]	; (800be20 <prvParseDNSReply+0x350>)
 800bd62:	7d13      	ldrb	r3, [r2, #20]
 800bd64:	732b      	strb	r3, [r5, #12]
 800bd66:	7d53      	ldrb	r3, [r2, #21]
 800bd68:	736b      	strb	r3, [r5, #13]
 800bd6a:	7d93      	ldrb	r3, [r2, #22]
 800bd6c:	73ab      	strb	r3, [r5, #14]
 800bd6e:	7dd3      	ldrb	r3, [r2, #23]
 800bd70:	73eb      	strb	r3, [r5, #15]
					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 800bd72:	1beb      	subs	r3, r5, r7
 800bd74:	b29b      	uxth	r3, r3
		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800bd76:	6985      	ldr	r5, [r0, #24]
					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 800bd78:	f103 0610 	add.w	r6, r3, #16
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800bd7c:	b236      	sxth	r6, r6
 800bd7e:	f103 0c2c 	add.w	ip, r3, #44	; 0x2c
 800bd82:	f106 071c 	add.w	r7, r6, #28
 800bd86:	0a3f      	lsrs	r7, r7, #8
 800bd88:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 800bd8c:	822f      	strh	r7, [r5, #16]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800bd8e:	f8d5 701a 	ldr.w	r7, [r5, #26]
 800bd92:	f8c5 701e 	str.w	r7, [r5, #30]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 800bd96:	6952      	ldr	r2, [r2, #20]
 800bd98:	f8c5 201a 	str.w	r2, [r5, #26]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 800bd9c:	f885 e016 	strb.w	lr, [r5, #22]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 800bda0:	f8df e080 	ldr.w	lr, [pc, #128]	; 800be24 <prvParseDNSReply+0x354>
 800bda4:	f8be 2000 	ldrh.w	r2, [lr]
 800bda8:	0a17      	lsrs	r7, r2, #8
 800bdaa:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 800bdae:	826f      	strh	r7, [r5, #18]
		usPacketIdentifier++;
 800bdb0:	3201      	adds	r2, #1
 800bdb2:	f8ae 2000 	strh.w	r2, [lr]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800bdb6:	3318      	adds	r3, #24
 800bdb8:	f106 0208 	add.w	r2, r6, #8
 800bdbc:	0a12      	lsrs	r2, r2, #8
 800bdbe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800bdc2:	84ea      	strh	r2, [r5, #38]	; 0x26
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 800bdc4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800bdc6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bdc8:	846a      	strh	r2, [r5, #34]	; 0x22
 800bdca:	84ab      	strh	r3, [r5, #36]	; 0x24
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 800bdcc:	362a      	adds	r6, #42	; 0x2a
 800bdce:	61c6      	str	r6, [r0, #28]
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800bdd0:	f000 fbe8 	bl	800c5a4 <vReturnEthernetFrame>
					if( pxNewBuffer != NULL )
 800bdd4:	b154      	cbz	r4, 800bdec <prvParseDNSReply+0x31c>
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f004 fbac 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
uint32_t ulIPAddress = 0UL;
 800bddc:	2000      	movs	r0, #0
 800bdde:	e687      	b.n	800baf0 <prvParseDNSReply+0x20>
 800bde0:	2000      	movs	r0, #0
 800bde2:	e685      	b.n	800baf0 <prvParseDNSReply+0x20>
 800bde4:	2000      	movs	r0, #0
 800bde6:	e683      	b.n	800baf0 <prvParseDNSReply+0x20>
 800bde8:	2000      	movs	r0, #0
 800bdea:	e681      	b.n	800baf0 <prvParseDNSReply+0x20>
 800bdec:	2000      	movs	r0, #0
	return ulIPAddress;
 800bdee:	e67f      	b.n	800baf0 <prvParseDNSReply+0x20>
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800bdf0:	782b      	ldrb	r3, [r5, #0]
 800bdf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdf6:	2bc0      	cmp	r3, #192	; 0xc0
 800bdf8:	f43f aeb1 	beq.w	800bb5e <prvParseDNSReply+0x8e>
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	46ca      	mov	sl, r9
 800be00:	e6c0      	b.n	800bb84 <prvParseDNSReply+0xb4>
uint32_t ulIPAddress = 0UL;
 800be02:	2000      	movs	r0, #0
 800be04:	e674      	b.n	800baf0 <prvParseDNSReply+0x20>
 800be06:	bf00      	nop
 800be08:	200005a8 	.word	0x200005a8
 800be0c:	200005ac 	.word	0x200005ac
 800be10:	20000608 	.word	0x20000608
 800be14:	20000594 	.word	0x20000594
 800be18:	2000059c 	.word	0x2000059c
 800be1c:	0801a4bc 	.word	0x0801a4bc
 800be20:	20000010 	.word	0x20000010
 800be24:	20000610 	.word	0x20000610

0800be28 <FreeRTOS_dnslookup>:
	{
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <FreeRTOS_dnslookup+0x44>)
 800be2c:	791b      	ldrb	r3, [r3, #4]
 800be2e:	b1d3      	cbz	r3, 800be66 <FreeRTOS_dnslookup+0x3e>
 800be30:	4606      	mov	r6, r0
 800be32:	4d0f      	ldr	r5, [pc, #60]	; (800be70 <FreeRTOS_dnslookup+0x48>)
 800be34:	2400      	movs	r4, #0
			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 800be36:	2710      	movs	r7, #16
 800be38:	463a      	mov	r2, r7
 800be3a:	4631      	mov	r1, r6
 800be3c:	4628      	mov	r0, r5
 800be3e:	f00b ff3a 	bl	8017cb6 <strncmp>
 800be42:	b140      	cbz	r0, 800be56 <FreeRTOS_dnslookup+0x2e>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800be44:	3401      	adds	r4, #1
 800be46:	2c04      	cmp	r4, #4
 800be48:	d00b      	beq.n	800be62 <FreeRTOS_dnslookup+0x3a>
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 800be4a:	f815 3f18 	ldrb.w	r3, [r5, #24]!
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f2      	bne.n	800be38 <FreeRTOS_dnslookup+0x10>
				*pulIP = 0;
 800be52:	2000      	movs	r0, #0
	}
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					*pulIP = xDNSCache[ x ].ulIPAddress;
 800be56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800be5a:	4b04      	ldr	r3, [pc, #16]	; (800be6c <FreeRTOS_dnslookup+0x44>)
 800be5c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800be60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				*pulIP = 0;
 800be62:	2000      	movs	r0, #0
 800be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be66:	2000      	movs	r0, #0
 800be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6a:	bf00      	nop
 800be6c:	200005a8 	.word	0x200005a8
 800be70:	200005ac 	.word	0x200005ac

0800be74 <vDNSInitialise>:
	{
 800be74:	b508      	push	{r3, lr}
		vListInitialise( &xCallbackList );
 800be76:	4802      	ldr	r0, [pc, #8]	; (800be80 <vDNSInitialise+0xc>)
 800be78:	f007 f92e 	bl	80130d8 <vListInitialise>
 800be7c:	bd08      	pop	{r3, pc}
 800be7e:	bf00      	nop
 800be80:	20000594 	.word	0x20000594

0800be84 <vDNSCheckCallBack>:
	{
 800be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be88:	4606      	mov	r6, r0
		vTaskSuspendAll();
 800be8a:	f008 fb39 	bl	8014500 <vTaskSuspendAll>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800be8e:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <vDNSCheckCallBack+0x7c>)
 800be90:	68dd      	ldr	r5, [r3, #12]
 800be92:	3308      	adds	r3, #8
 800be94:	429d      	cmp	r5, r3
 800be96:	d027      	beq.n	800bee8 <vDNSCheckCallBack+0x64>
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 800be98:	f04f 0800 	mov.w	r8, #0
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800be9c:	461f      	mov	r7, r3
 800be9e:	e008      	b.n	800beb2 <vDNSCheckCallBack+0x2e>
					uxListRemove( &pxCallback->xListItem );
 800bea0:	f104 0014 	add.w	r0, r4, #20
 800bea4:	f007 f94c 	bl	8013140 <uxListRemove>
					vPortFree( pxCallback );
 800bea8:	4620      	mov	r0, r4
 800beaa:	f007 fb93 	bl	80135d4 <vPortFree>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800beae:	42bd      	cmp	r5, r7
 800beb0:	d01a      	beq.n	800bee8 <vDNSCheckCallBack+0x64>
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800beb2:	68ec      	ldr	r4, [r5, #12]
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800beb4:	686d      	ldr	r5, [r5, #4]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 800beb6:	b116      	cbz	r6, 800bebe <vDNSCheckCallBack+0x3a>
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	429e      	cmp	r6, r3
 800bebc:	d0f0      	beq.n	800bea0 <vDNSCheckCallBack+0x1c>
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 800bebe:	4621      	mov	r1, r4
 800bec0:	f104 0008 	add.w	r0, r4, #8
 800bec4:	f008 fe2e 	bl	8014b24 <xTaskCheckForTimeOut>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d0f0      	beq.n	800beae <vDNSCheckCallBack+0x2a>
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 800becc:	6863      	ldr	r3, [r4, #4]
 800bece:	4642      	mov	r2, r8
 800bed0:	6921      	ldr	r1, [r4, #16]
 800bed2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bed6:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 800bed8:	f104 0014 	add.w	r0, r4, #20
 800bedc:	f007 f930 	bl	8013140 <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 800bee0:	4620      	mov	r0, r4
 800bee2:	f007 fb77 	bl	80135d4 <vPortFree>
 800bee6:	e7e2      	b.n	800beae <vDNSCheckCallBack+0x2a>
		xTaskResumeAll();
 800bee8:	f008 fbe4 	bl	80146b4 <xTaskResumeAll>
		if( listLIST_IS_EMPTY( &xCallbackList ) )
 800beec:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <vDNSCheckCallBack+0x7c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	b10b      	cbz	r3, 800bef6 <vDNSCheckCallBack+0x72>
 800bef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			vIPSetDnsTimerEnableState( pdFALSE );
 800bef6:	2000      	movs	r0, #0
 800bef8:	f000 fdb4 	bl	800ca64 <vIPSetDnsTimerEnableState>
	}
 800befc:	e7f9      	b.n	800bef2 <vDNSCheckCallBack+0x6e>
 800befe:	bf00      	nop
 800bf00:	20000594 	.word	0x20000594

0800bf04 <FreeRTOS_gethostbyname_a>:
{
 800bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	b08b      	sub	sp, #44	; 0x2c
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460d      	mov	r5, r1
 800bf0e:	4617      	mov	r7, r2
 800bf10:	4699      	mov	r9, r3
TickType_t xIdentifier = ( TickType_t )usIdentifier++;
 800bf12:	4b93      	ldr	r3, [pc, #588]	; (800c160 <FreeRTOS_gethostbyname_a+0x25c>)
 800bf14:	f8b3 8000 	ldrh.w	r8, [r3]
 800bf18:	f108 0201 	add.w	r2, r8, #1
 800bf1c:	801a      	strh	r2, [r3, #0]
 800bf1e:	f8cd 800c 	str.w	r8, [sp, #12]
		ulIPAddress = FreeRTOS_dnslookup( pcHostName );
 800bf22:	f7ff ff81 	bl	800be28 <FreeRTOS_dnslookup>
 800bf26:	4604      	mov	r4, r0
		if( pCallback != NULL )
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	d048      	beq.n	800bfbe <FreeRTOS_gethostbyname_a+0xba>
			if( ulIPAddress == 0UL )
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d13e      	bne.n	800bfae <FreeRTOS_gethostbyname_a+0xaa>
		size_t lLength = strlen( pcHostName );
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7f4 f957 	bl	80001e4 <strlen>
		DNSCallback_t *pxCallback = ( DNSCallback_t * )pvPortMalloc( sizeof( *pxCallback ) + lLength );
 800bf36:	302c      	adds	r0, #44	; 0x2c
 800bf38:	f007 fae6 	bl	8013508 <pvPortMalloc>
		if( pxCallback != NULL )
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	b1c8      	cbz	r0, 800bf74 <FreeRTOS_gethostbyname_a+0x70>
			if( listLIST_IS_EMPTY( &xCallbackList ) )
 800bf40:	4b88      	ldr	r3, [pc, #544]	; (800c164 <FreeRTOS_gethostbyname_a+0x260>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b353      	cbz	r3, 800bf9c <FreeRTOS_gethostbyname_a+0x98>
			strcpy( pxCallback->pcName, pcHostName );
 800bf46:	4631      	mov	r1, r6
 800bf48:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bf4c:	f00b fc80 	bl	8017850 <strcpy>
			pxCallback->pCallbackFunction = pCallbackFunction;
 800bf50:	6065      	str	r5, [r4, #4]
			pxCallback->pvSearchID = pvSearchID;
 800bf52:	6127      	str	r7, [r4, #16]
			pxCallback->xRemaningTime = xTimeout;
 800bf54:	4620      	mov	r0, r4
 800bf56:	f840 9b08 	str.w	r9, [r0], #8
			vTaskSetTimeOutState( &pxCallback->xTimeoutState );
 800bf5a:	f008 fdcd 	bl	8014af8 <vTaskSetTimeOutState>
			listSET_LIST_ITEM_OWNER( &( pxCallback->xListItem ), ( void* ) pxCallback );
 800bf5e:	6224      	str	r4, [r4, #32]
			listSET_LIST_ITEM_VALUE( &( pxCallback->xListItem ), xIdentifier );
 800bf60:	f844 8f14 	str.w	r8, [r4, #20]!
			vTaskSuspendAll();
 800bf64:	f008 facc 	bl	8014500 <vTaskSuspendAll>
				vListInsertEnd( &xCallbackList, &pxCallback->xListItem );
 800bf68:	4621      	mov	r1, r4
 800bf6a:	487e      	ldr	r0, [pc, #504]	; (800c164 <FreeRTOS_gethostbyname_a+0x260>)
 800bf6c:	f007 f8c2 	bl	80130f4 <vListInsertEnd>
			xTaskResumeAll();
 800bf70:	f008 fba0 	bl	80146b4 <xTaskResumeAll>
TickType_t xReadTimeOut_ms = 1200U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	9304      	str	r3, [sp, #16]
uint32_t ulIPAddress = 0UL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9305      	str	r3, [sp, #20]
TickType_t xWriteTimeOut_ms = 100U;
 800bf7c:	2364      	movs	r3, #100	; 0x64
 800bf7e:	9306      	str	r3, [sp, #24]
		for( pucPtr = pcHostName; *pucPtr; pucPtr++ )
 800bf80:	7833      	ldrb	r3, [r6, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d05e      	beq.n	800c044 <FreeRTOS_gethostbyname_a+0x140>
			if( *pucPtr == '.' )
 800bf86:	2b2e      	cmp	r3, #46	; 0x2e
 800bf88:	d05f      	beq.n	800c04a <FreeRTOS_gethostbyname_a+0x146>
 800bf8a:	4632      	mov	r2, r6
		for( pucPtr = pcHostName; *pucPtr; pucPtr++ )
 800bf8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bf90:	b1d3      	cbz	r3, 800bfc8 <FreeRTOS_gethostbyname_a+0xc4>
			if( *pucPtr == '.' )
 800bf92:	2b2e      	cmp	r3, #46	; 0x2e
 800bf94:	d1fa      	bne.n	800bf8c <FreeRTOS_gethostbyname_a+0x88>
				bHasDot = pdTRUE;
 800bf96:	f04f 0b01 	mov.w	fp, #1
 800bf9a:	e017      	b.n	800bfcc <FreeRTOS_gethostbyname_a+0xc8>
				vIPReloadDNSTimer( FreeRTOS_min_uint32( 1000U, xTimeout ) );
 800bf9c:	4648      	mov	r0, r9
 800bf9e:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 800bfa2:	bf28      	it	cs
 800bfa4:	f44f 707a 	movcs.w	r0, #1000	; 0x3e8
 800bfa8:	f000 fd6c 	bl	800ca84 <vIPReloadDNSTimer>
 800bfac:	e7cb      	b.n	800bf46 <FreeRTOS_gethostbyname_a+0x42>
				pCallback( pcHostName, pvSearchID, ulIPAddress );
 800bfae:	4602      	mov	r2, r0
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	47a8      	blx	r5
}
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	b00b      	add	sp, #44	; 0x2c
 800bfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( ulIPAddress == 0UL)
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d1f9      	bne.n	800bfb6 <FreeRTOS_gethostbyname_a+0xb2>
TickType_t xReadTimeOut_ms = 1200U;
 800bfc2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bfc6:	e7d6      	b.n	800bf76 <FreeRTOS_gethostbyname_a+0x72>
	BaseType_t bHasDot = pdFALSE;
 800bfc8:	f04f 0b00 	mov.w	fp, #0
	xExpectedPayloadLength = sizeof( DNSMessage_t ) + strlen( pcHostName ) + sizeof( uint16_t ) + sizeof( uint16_t ) + 2u;
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f7f4 f909 	bl	80001e4 <strlen>
 800bfd2:	f100 0312 	add.w	r3, r0, #18
 800bfd6:	9302      	str	r3, [sp, #8]
TickType_t xTimeoutTime = pdMS_TO_TICKS( 200 );
 800bfd8:	23c8      	movs	r3, #200	; 0xc8
 800bfda:	9307      	str	r3, [sp, #28]
	xSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800bfdc:	2211      	movs	r2, #17
 800bfde:	2102      	movs	r1, #2
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	f000 fdf3 	bl	800cbcc <FreeRTOS_socket>
 800bfe6:	4b60      	ldr	r3, [pc, #384]	; (800c168 <FreeRTOS_gethostbyname_a+0x264>)
 800bfe8:	6018      	str	r0, [r3, #0]
	xAddress.sin_port = 0u;
 800bfea:	2300      	movs	r3, #0
 800bfec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	xReturn = FreeRTOS_bind( xSocket, &xAddress, sizeof( xAddress ) );
 800bff0:	2208      	movs	r2, #8
 800bff2:	a908      	add	r1, sp, #32
 800bff4:	f000 ffaf 	bl	800cf56 <FreeRTOS_bind>
	if( xReturn != 0 )
 800bff8:	bb50      	cbnz	r0, 800c050 <FreeRTOS_gethostbyname_a+0x14c>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 800bffa:	4c5b      	ldr	r4, [pc, #364]	; (800c168 <FreeRTOS_gethostbyname_a+0x264>)
 800bffc:	2504      	movs	r5, #4
 800bffe:	9500      	str	r5, [sp, #0]
 800c000:	ab07      	add	r3, sp, #28
 800c002:	2200      	movs	r2, #0
 800c004:	4611      	mov	r1, r2
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	f001 fdae 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 800c00c:	9500      	str	r5, [sp, #0]
 800c00e:	ab07      	add	r3, sp, #28
 800c010:	2201      	movs	r2, #1
 800c012:	2100      	movs	r1, #0
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	f001 fda7 	bl	800db68 <FreeRTOS_setsockopt>
	return xSocket;
 800c01a:	f8d4 a000 	ldr.w	sl, [r4]
	if( xDNSSocket != NULL )
 800c01e:	f1ba 0f00 	cmp.w	sl, #0
 800c022:	d070      	beq.n	800c106 <FreeRTOS_gethostbyname_a+0x202>
		FreeRTOS_setsockopt( xDNSSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xWriteTimeOut_ms, sizeof( TickType_t ) );
 800c024:	462f      	mov	r7, r5
 800c026:	9500      	str	r5, [sp, #0]
 800c028:	ab06      	add	r3, sp, #24
 800c02a:	2201      	movs	r2, #1
 800c02c:	2100      	movs	r1, #0
 800c02e:	4650      	mov	r0, sl
 800c030:	f001 fd9a 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xDNSSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xReadTimeOut_ms,  sizeof( TickType_t ) );
 800c034:	9500      	str	r5, [sp, #0]
 800c036:	ab04      	add	r3, sp, #16
 800c038:	2200      	movs	r2, #0
 800c03a:	4611      	mov	r1, r2
 800c03c:	4650      	mov	r0, sl
 800c03e:	f001 fd93 	bl	800db68 <FreeRTOS_setsockopt>
 800c042:	e06e      	b.n	800c122 <FreeRTOS_gethostbyname_a+0x21e>
	BaseType_t bHasDot = pdFALSE;
 800c044:	f04f 0b00 	mov.w	fp, #0
 800c048:	e7c0      	b.n	800bfcc <FreeRTOS_gethostbyname_a+0xc8>
				bHasDot = pdTRUE;
 800c04a:	f04f 0b01 	mov.w	fp, #1
 800c04e:	e7bd      	b.n	800bfcc <FreeRTOS_gethostbyname_a+0xc8>
		FreeRTOS_closesocket( xSocket );
 800c050:	4c45      	ldr	r4, [pc, #276]	; (800c168 <FreeRTOS_gethostbyname_a+0x264>)
 800c052:	6820      	ldr	r0, [r4, #0]
 800c054:	f001 f8ba 	bl	800d1cc <FreeRTOS_closesocket>
		xSocket = NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	6023      	str	r3, [r4, #0]
 800c05c:	e053      	b.n	800c106 <FreeRTOS_gethostbyname_a+0x202>
		*pucStart = ( uint8_t ) ( ( uint32_t ) pucByte - ( uint32_t ) pucStart );
 800c05e:	1b13      	subs	r3, r2, r4
		( *pucStart )--;
 800c060:	3b01      	subs	r3, #1
 800c062:	7023      	strb	r3, [r4, #0]
 800c064:	4614      	mov	r4, r2
	} while( *pucByte != 0x00 );
 800c066:	7813      	ldrb	r3, [r2, #0]
 800c068:	b163      	cbz	r3, 800c084 <FreeRTOS_gethostbyname_a+0x180>
		pucByte++;
 800c06a:	1c62      	adds	r2, r4, #1
		while( ( *pucByte != 0x00 ) && ( *pucByte != '.' ) )
 800c06c:	7863      	ldrb	r3, [r4, #1]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d0f5      	beq.n	800c05e <FreeRTOS_gethostbyname_a+0x15a>
 800c072:	2b2e      	cmp	r3, #46	; 0x2e
 800c074:	d0f3      	beq.n	800c05e <FreeRTOS_gethostbyname_a+0x15a>
 800c076:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0ef      	beq.n	800c05e <FreeRTOS_gethostbyname_a+0x15a>
 800c07e:	2b2e      	cmp	r3, #46	; 0x2e
 800c080:	d1f9      	bne.n	800c076 <FreeRTOS_gethostbyname_a+0x172>
 800c082:	e7ec      	b.n	800c05e <FreeRTOS_gethostbyname_a+0x15a>
	vSetField16( pxTail, DNSTail_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 800c084:	2000      	movs	r0, #0
 800c086:	7050      	strb	r0, [r2, #1]
 800c088:	2301      	movs	r3, #1
 800c08a:	7093      	strb	r3, [r2, #2]
	vSetField16( pxTail, DNSTail_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 800c08c:	70d0      	strb	r0, [r2, #3]
 800c08e:	7113      	strb	r3, [r2, #4]
	return ( ( uint32_t ) pucByte - ( uint32_t ) pucUDPPayloadBuffer + 1 ) + sizeof( *pxTail );
 800c090:	f1c5 0405 	rsb	r4, r5, #5
 800c094:	4414      	add	r4, r2
				FreeRTOS_GetAddressConfiguration( NULL, NULL, NULL, &ulIPAddress );
 800c096:	ab05      	add	r3, sp, #20
 800c098:	4602      	mov	r2, r0
 800c09a:	4601      	mov	r1, r0
 800c09c:	f000 f99c 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
				if( bHasDot == pdFALSE )
 800c0a0:	f1bb 0f00 	cmp.w	fp, #0
 800c0a4:	d131      	bne.n	800c10a <FreeRTOS_gethostbyname_a+0x206>
					( ( DNSMessage_t * ) pucUDPPayloadBuffer) -> usFlags = 0;
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	709a      	strb	r2, [r3, #2]
 800c0ac:	70da      	strb	r2, [r3, #3]
					xAddress.sin_addr = ipLLMNR_IP_ADDR;	/* Is in network byte order. */
 800c0ae:	4b2f      	ldr	r3, [pc, #188]	; (800c16c <FreeRTOS_gethostbyname_a+0x268>)
 800c0b0:	9309      	str	r3, [sp, #36]	; 0x24
					xAddress.sin_port = FreeRTOS_ntohs( ipLLMNR_PORT );
 800c0b2:	f64e 3314 	movw	r3, #60180	; 0xeb14
 800c0b6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
				ulIPAddress = 0UL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9305      	str	r3, [sp, #20]
				if( FreeRTOS_sendto( xDNSSocket, pucUDPPayloadBuffer, xPayloadLength, FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) != 0 )
 800c0be:	2308      	movs	r3, #8
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	ab08      	add	r3, sp, #32
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	9907      	ldr	r1, [sp, #28]
 800c0cc:	4650      	mov	r0, sl
 800c0ce:	f000 ff79 	bl	800cfc4 <FreeRTOS_sendto>
 800c0d2:	b308      	cbz	r0, 800c118 <FreeRTOS_gethostbyname_a+0x214>
					lBytes = FreeRTOS_recvfrom( xDNSSocket, &pucUDPPayloadBuffer, 0, FREERTOS_ZERO_COPY, &xAddress, &ulAddressLength );
 800c0d4:	4b26      	ldr	r3, [pc, #152]	; (800c170 <FreeRTOS_gethostbyname_a+0x26c>)
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	ab08      	add	r3, sp, #32
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	2200      	movs	r2, #0
 800c0e0:	a907      	add	r1, sp, #28
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f000 fea8 	bl	800ce38 <FreeRTOS_recvfrom>
					if( lBytes > 0 )
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	dd18      	ble.n	800c11e <FreeRTOS_gethostbyname_a+0x21a>
						ulIPAddress = prvParseDNSReply( pucUDPPayloadBuffer, xIdentifier );
 800c0ec:	9903      	ldr	r1, [sp, #12]
 800c0ee:	9807      	ldr	r0, [sp, #28]
 800c0f0:	f7ff fcee 	bl	800bad0 <prvParseDNSReply>
 800c0f4:	9005      	str	r0, [sp, #20]
						FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayloadBuffer );
 800c0f6:	9807      	ldr	r0, [sp, #28]
 800c0f8:	f000 f8b1 	bl	800c25e <FreeRTOS_ReleaseUDPPayloadBuffer>
						if( ulIPAddress != 0UL )
 800c0fc:	9b05      	ldr	r3, [sp, #20]
 800c0fe:	b173      	cbz	r3, 800c11e <FreeRTOS_gethostbyname_a+0x21a>
		FreeRTOS_closesocket( xDNSSocket );
 800c100:	4650      	mov	r0, sl
 800c102:	f001 f863 	bl	800d1cc <FreeRTOS_closesocket>
	return ulIPAddress;
 800c106:	9c05      	ldr	r4, [sp, #20]
	return ulIPAddress;
 800c108:	e755      	b.n	800bfb6 <FreeRTOS_gethostbyname_a+0xb2>
					xAddress.sin_addr = ulIPAddress;
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	9309      	str	r3, [sp, #36]	; 0x24
					xAddress.sin_port = dnsDNS_PORT;
 800c10e:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 800c112:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c116:	e7d0      	b.n	800c0ba <FreeRTOS_gethostbyname_a+0x1b6>
					FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayloadBuffer );
 800c118:	9807      	ldr	r0, [sp, #28]
 800c11a:	f000 f8a0 	bl	800c25e <FreeRTOS_ReleaseUDPPayloadBuffer>
		for( xAttempt = 0; xAttempt < ipconfigDNS_REQUEST_ATTEMPTS; xAttempt++ )
 800c11e:	3f01      	subs	r7, #1
 800c120:	d0ee      	beq.n	800c100 <FreeRTOS_gethostbyname_a+0x1fc>
			pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xExpectedPayloadLength, portMAX_DELAY );
 800c122:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c126:	9802      	ldr	r0, [sp, #8]
 800c128:	f000 f86a 	bl	800c200 <FreeRTOS_GetUDPPayloadBuffer>
 800c12c:	4605      	mov	r5, r0
 800c12e:	9007      	str	r0, [sp, #28]
			if( pucUDPPayloadBuffer != NULL )
 800c130:	2800      	cmp	r0, #0
 800c132:	d0f4      	beq.n	800c11e <FreeRTOS_gethostbyname_a+0x21a>
	memcpy( ( void * ) pucUDPPayloadBuffer, ( void * ) &xDefaultPartDNSHeader, sizeof( xDefaultPartDNSHeader ) );
 800c134:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <FreeRTOS_gethostbyname_a+0x270>)
 800c136:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c138:	6028      	str	r0, [r5, #0]
 800c13a:	6069      	str	r1, [r5, #4]
 800c13c:	60aa      	str	r2, [r5, #8]
	pxDNSMessageHeader->usIdentifier = ( uint16_t ) xIdentifier;
 800c13e:	462c      	mov	r4, r5
 800c140:	f824 8b0c 	strh.w	r8, [r4], #12
	pucByte = pucStart + 1;
 800c144:	f105 090d 	add.w	r9, r5, #13
	strcpy( ( char * ) pucByte, pcHostName );
 800c148:	4631      	mov	r1, r6
 800c14a:	4648      	mov	r0, r9
 800c14c:	f00b fb80 	bl	8017850 <strcpy>
	pucByte += strlen( pcHostName );
 800c150:	4630      	mov	r0, r6
 800c152:	f7f4 f847 	bl	80001e4 <strlen>
	*pucByte = 0x00u;
 800c156:	2300      	movs	r3, #0
 800c158:	f809 3000 	strb.w	r3, [r9, r0]
 800c15c:	e785      	b.n	800c06a <FreeRTOS_gethostbyname_a+0x166>
 800c15e:	bf00      	nop
 800c160:	20000590 	.word	0x20000590
 800c164:	20000594 	.word	0x20000594
 800c168:	2000060c 	.word	0x2000060c
 800c16c:	fc0000e0 	.word	0xfc0000e0
 800c170:	2000058c 	.word	0x2000058c
 800c174:	0801a1c0 	.word	0x0801a1c0

0800c178 <FreeRTOS_gethostbyname>:
	{
 800c178:	b508      	push	{r3, lr}
		return FreeRTOS_gethostbyname_a( pcHostName, ( FOnDNSEvent ) NULL, ( void* )NULL, 0 );
 800c17a:	2300      	movs	r3, #0
 800c17c:	461a      	mov	r2, r3
 800c17e:	4619      	mov	r1, r3
 800c180:	f7ff fec0 	bl	800bf04 <FreeRTOS_gethostbyname_a>
	}
 800c184:	bd08      	pop	{r3, pc}

0800c186 <ulDNSHandlePacket>:
{
 800c186:	b508      	push	{r3, lr}
	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 800c188:	6980      	ldr	r0, [r0, #24]
 800c18a:	f830 1f2a 	ldrh.w	r1, [r0, #42]!
 800c18e:	f7ff fc9f 	bl	800bad0 <prvParseDNSReply>
}
 800c192:	2000      	movs	r0, #0
 800c194:	bd08      	pop	{r3, pc}

0800c196 <prvIPTimerCheck>:
	prvIPTimerStart( pxTimer, xTime );
}
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800c196:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800c198:	7803      	ldrb	r3, [r0, #0]
 800c19a:	f013 0f01 	tst.w	r3, #1
 800c19e:	d01e      	beq.n	800c1de <prvIPTimerCheck+0x48>
 800c1a0:	4604      	mov	r4, r0
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800c1a2:	f013 0f02 	tst.w	r3, #2
 800c1a6:	d105      	bne.n	800c1b4 <prvIPTimerCheck+0x1e>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800c1a8:	f100 010c 	add.w	r1, r0, #12
 800c1ac:	3004      	adds	r0, #4
 800c1ae:	f008 fcb9 	bl	8014b24 <xTaskCheckForTimeOut>
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800c1b2:	b1b0      	cbz	r0, 800c1e2 <prvIPTimerCheck+0x4c>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800c1b4:	6925      	ldr	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800c1b6:	1d20      	adds	r0, r4, #4
 800c1b8:	f008 fc9e 	bl	8014af8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800c1bc:	60e5      	str	r5, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
 800c1be:	b14d      	cbz	r5, 800c1d4 <prvIPTimerCheck+0x3e>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800c1c0:	7823      	ldrb	r3, [r4, #0]
 800c1c2:	f36f 0341 	bfc	r3, #1, #1
 800c1c6:	7023      	strb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800c1c8:	7823      	ldrb	r3, [r4, #0]
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	7023      	strb	r3, [r4, #0]
			xReturn = pdTRUE;
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800c1d4:	7823      	ldrb	r3, [r4, #0]
 800c1d6:	f043 0302 	orr.w	r3, r3, #2
 800c1da:	7023      	strb	r3, [r4, #0]
 800c1dc:	e7f4      	b.n	800c1c8 <prvIPTimerCheck+0x32>
		xReturn = pdFALSE;
 800c1de:	2000      	movs	r0, #0
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			xReturn = pdFALSE;
 800c1e2:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c1e8 <xIsCallingFromIPTask>:
{
 800c1e8:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800c1ea:	f008 fdc3 	bl	8014d74 <xTaskGetCurrentTaskHandle>
 800c1ee:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <xIsCallingFromIPTask+0x14>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
}
 800c1f2:	4283      	cmp	r3, r0
 800c1f4:	bf14      	ite	ne
 800c1f6:	2000      	movne	r0, #0
 800c1f8:	2001      	moveq	r0, #1
 800c1fa:	bd08      	pop	{r3, pc}
 800c1fc:	20000654 	.word	0x20000654

0800c200 <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800c200:	b508      	push	{r3, lr}
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 800c202:	f241 3388 	movw	r3, #5000	; 0x1388
 800c206:	4299      	cmp	r1, r3
 800c208:	bf28      	it	cs
 800c20a:	4619      	movcs	r1, r3
 800c20c:	302a      	adds	r0, #42	; 0x2a
 800c20e:	f004 f9b7 	bl	8010580 <pxGetNetworkBufferWithDescriptor>

	if( pxNetworkBuffer != NULL )
 800c212:	b110      	cbz	r0, 800c21a <FreeRTOS_GetUDPPayloadBuffer+0x1a>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800c214:	6980      	ldr	r0, [r0, #24]
 800c216:	302a      	adds	r0, #42	; 0x2a
 800c218:	bd08      	pop	{r3, pc}
	}
	else
	{
		pvReturn = NULL;
 800c21a:	2000      	movs	r0, #0
	}

	return ( void * ) pvReturn;
}
 800c21c:	bd08      	pop	{r3, pc}

0800c21e <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800c21e:	b538      	push	{r3, r4, r5, lr}
 800c220:	4605      	mov	r5, r0
 800c222:	4608      	mov	r0, r1
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800c224:	2100      	movs	r1, #0
 800c226:	f004 f9ab 	bl	8010580 <pxGetNetworkBufferWithDescriptor>

	if( pxNewBuffer != NULL )
 800c22a:	4604      	mov	r4, r0
 800c22c:	b150      	cbz	r0, 800c244 <pxDuplicateNetworkBufferWithDescriptor+0x26>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800c22e:	696b      	ldr	r3, [r5, #20]
 800c230:	6143      	str	r3, [r0, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800c232:	8c2b      	ldrh	r3, [r5, #32]
 800c234:	8403      	strh	r3, [r0, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800c236:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800c238:	8443      	strh	r3, [r0, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800c23a:	69ea      	ldr	r2, [r5, #28]
 800c23c:	69a9      	ldr	r1, [r5, #24]
 800c23e:	6980      	ldr	r0, [r0, #24]
 800c240:	f00b fa9f 	bl	8017782 <memcpy>
	}

	return pxNewBuffer;
}
 800c244:	4620      	mov	r0, r4
 800c246:	bd38      	pop	{r3, r4, r5, pc}

0800c248 <pxUDPPayloadBuffer_to_NetworkBuffer>:
NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800c248:	b128      	cbz	r0, 800c256 <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800c24a:	f010 0f03 	tst.w	r0, #3
 800c24e:	d104      	bne.n	800c25a <pxUDPPayloadBuffer_to_NetworkBuffer+0x12>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800c250:	f850 0c34 	ldr.w	r0, [r0, #-52]
 800c254:	4770      	bx	lr
		pxResult = NULL;
 800c256:	2000      	movs	r0, #0
 800c258:	4770      	bx	lr
		}
		else
		{
			pxResult = NULL;
 800c25a:	2000      	movs	r0, #0
		}
	}

	return pxResult;
}
 800c25c:	4770      	bx	lr

0800c25e <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 800c25e:	b508      	push	{r3, lr}
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800c260:	f7ff fff2 	bl	800c248 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800c264:	f004 f966 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
 800c268:	bd08      	pop	{r3, pc}
	...

0800c26c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800c26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c270:	b083      	sub	sp, #12
 800c272:	4605      	mov	r5, r0
 800c274:	460f      	mov	r7, r1
 800c276:	4691      	mov	r9, r2
 800c278:	4698      	mov	r8, r3
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
 800c27a:	4b4d      	ldr	r3, [pc, #308]	; (800c3b0 <FreeRTOS_IPInit+0x144>)
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	bb3b      	cbnz	r3, 800c2d0 <FreeRTOS_IPInit+0x64>
	configASSERT( xNetworkEventQueue == NULL );
 800c280:	4b4c      	ldr	r3, [pc, #304]	; (800c3b4 <FreeRTOS_IPInit+0x148>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	b123      	cbz	r3, 800c290 <FreeRTOS_IPInit+0x24>
 800c286:	f240 31d6 	movw	r1, #982	; 0x3d6
 800c28a:	484b      	ldr	r0, [pc, #300]	; (800c3b8 <FreeRTOS_IPInit+0x14c>)
 800c28c:	f00b f808 	bl	80172a0 <vAssertCalled>
	configASSERT( xIPTaskHandle == NULL );
 800c290:	4b4a      	ldr	r3, [pc, #296]	; (800c3bc <FreeRTOS_IPInit+0x150>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	b123      	cbz	r3, 800c2a0 <FreeRTOS_IPInit+0x34>
 800c296:	f240 31d7 	movw	r1, #983	; 0x3d7
 800c29a:	4847      	ldr	r0, [pc, #284]	; (800c3b8 <FreeRTOS_IPInit+0x14c>)
 800c29c:	f00b f800 	bl	80172a0 <vAssertCalled>
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2108      	movs	r1, #8
 800c2a4:	201e      	movs	r0, #30
 800c2a6:	f007 fb39 	bl	801391c <xQueueGenericCreate>
 800c2aa:	4b42      	ldr	r3, [pc, #264]	; (800c3b4 <FreeRTOS_IPInit+0x148>)
 800c2ac:	6018      	str	r0, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800c2ae:	b1a8      	cbz	r0, 800c2dc <FreeRTOS_IPInit+0x70>
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800c2b0:	4943      	ldr	r1, [pc, #268]	; (800c3c0 <FreeRTOS_IPInit+0x154>)
 800c2b2:	f007 fe1f 	bl	8013ef4 <vQueueAddToRegistry>
		if( xNetworkBuffersInitialise() == pdPASS )
 800c2b6:	f004 f8f3 	bl	80104a0 <xNetworkBuffersInitialise>
 800c2ba:	2801      	cmp	r0, #1
 800c2bc:	d019      	beq.n	800c2f2 <FreeRTOS_IPInit+0x86>
			vQueueDelete( xNetworkEventQueue );
 800c2be:	4c3d      	ldr	r4, [pc, #244]	; (800c3b4 <FreeRTOS_IPInit+0x148>)
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	f007 fe4b 	bl	8013f5c <vQueueDelete>
			xNetworkEventQueue = NULL;
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	6020      	str	r0, [r4, #0]
}
 800c2ca:	b003      	add	sp, #12
 800c2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800c2d0:	f240 31d5 	movw	r1, #981	; 0x3d5
 800c2d4:	4838      	ldr	r0, [pc, #224]	; (800c3b8 <FreeRTOS_IPInit+0x14c>)
 800c2d6:	f00a ffe3 	bl	80172a0 <vAssertCalled>
 800c2da:	e7d1      	b.n	800c280 <FreeRTOS_IPInit+0x14>
	configASSERT( xNetworkEventQueue );
 800c2dc:	f240 31e2 	movw	r1, #994	; 0x3e2
 800c2e0:	4835      	ldr	r0, [pc, #212]	; (800c3b8 <FreeRTOS_IPInit+0x14c>)
 800c2e2:	f00a ffdd 	bl	80172a0 <vAssertCalled>
	if( xNetworkEventQueue != NULL )
 800c2e6:	4b33      	ldr	r3, [pc, #204]	; (800c3b4 <FreeRTOS_IPInit+0x148>)
 800c2e8:	6818      	ldr	r0, [r3, #0]
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d1e0      	bne.n	800c2b0 <FreeRTOS_IPInit+0x44>
BaseType_t xReturn = pdFALSE;
 800c2ee:	2000      	movs	r0, #0
	return xReturn;
 800c2f0:	e7eb      	b.n	800c2ca <FreeRTOS_IPInit+0x5e>
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800c2f2:	78eb      	ldrb	r3, [r5, #3]
 800c2f4:	78ac      	ldrb	r4, [r5, #2]
 800c2f6:	0424      	lsls	r4, r4, #16
 800c2f8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800c2fc:	782b      	ldrb	r3, [r5, #0]
 800c2fe:	431c      	orrs	r4, r3
 800c300:	786b      	ldrb	r3, [r5, #1]
 800c302:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800c306:	4d2f      	ldr	r5, [pc, #188]	; (800c3c4 <FreeRTOS_IPInit+0x158>)
 800c308:	602c      	str	r4, [r5, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800c30a:	78fb      	ldrb	r3, [r7, #3]
 800c30c:	78be      	ldrb	r6, [r7, #2]
 800c30e:	0436      	lsls	r6, r6, #16
 800c310:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 800c314:	783b      	ldrb	r3, [r7, #0]
 800c316:	431e      	orrs	r6, r3
 800c318:	787b      	ldrb	r3, [r7, #1]
 800c31a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800c31e:	606e      	str	r6, [r5, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800c320:	f899 3003 	ldrb.w	r3, [r9, #3]
 800c324:	f899 7002 	ldrb.w	r7, [r9, #2]
 800c328:	043f      	lsls	r7, r7, #16
 800c32a:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 800c32e:	f899 3000 	ldrb.w	r3, [r9]
 800c332:	431f      	orrs	r7, r3
 800c334:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c338:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800c33c:	60af      	str	r7, [r5, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800c33e:	f898 2003 	ldrb.w	r2, [r8, #3]
 800c342:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c346:	041b      	lsls	r3, r3, #16
 800c348:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c34c:	f898 2000 	ldrb.w	r2, [r8]
 800c350:	4313      	orrs	r3, r2
 800c352:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c35a:	60eb      	str	r3, [r5, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800c35c:	ea64 0c06 	orn	ip, r4, r6
 800c360:	f8c5 c010 	str.w	ip, [r5, #16]
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800c364:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c3d4 <FreeRTOS_IPInit+0x168>
 800c368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c36e:	f8ce c000 	str.w	ip, [lr]
				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <FreeRTOS_IPInit+0x15c>)
 800c374:	615c      	str	r4, [r3, #20]
				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800c376:	407c      	eors	r4, r7
 800c378:	4234      	tst	r4, r6
 800c37a:	d113      	bne.n	800c3a4 <FreeRTOS_IPInit+0x138>
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c37c:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <FreeRTOS_IPInit+0x15c>)
 800c37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c380:	6810      	ldr	r0, [r2, #0]
 800c382:	6018      	str	r0, [r3, #0]
 800c384:	8892      	ldrh	r2, [r2, #4]
 800c386:	809a      	strh	r2, [r3, #4]
			vNetworkSocketsInit();
 800c388:	f000 fbf0 	bl	800cb6c <vNetworkSocketsInit>
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <FreeRTOS_IPInit+0x150>)
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	2305      	movs	r3, #5
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	2300      	movs	r3, #0
 800c396:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c39a:	490c      	ldr	r1, [pc, #48]	; (800c3cc <FreeRTOS_IPInit+0x160>)
 800c39c:	480c      	ldr	r0, [pc, #48]	; (800c3d0 <FreeRTOS_IPInit+0x164>)
 800c39e:	f007 fe67 	bl	8014070 <xTaskCreate>
 800c3a2:	e792      	b.n	800c2ca <FreeRTOS_IPInit+0x5e>
				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800c3a4:	f240 4106 	movw	r1, #1030	; 0x406
 800c3a8:	4803      	ldr	r0, [pc, #12]	; (800c3b8 <FreeRTOS_IPInit+0x14c>)
 800c3aa:	f00a ff79 	bl	80172a0 <vAssertCalled>
 800c3ae:	e7e5      	b.n	800c37c <FreeRTOS_IPInit+0x110>
 800c3b0:	20000658 	.word	0x20000658
 800c3b4:	20000674 	.word	0x20000674
 800c3b8:	0801a1d4 	.word	0x0801a1d4
 800c3bc:	20000654 	.word	0x20000654
 800c3c0:	0801a204 	.word	0x0801a204
 800c3c4:	2000065c 	.word	0x2000065c
 800c3c8:	20000010 	.word	0x20000010
 800c3cc:	0801a20c 	.word	0x0801a20c
 800c3d0:	0800c5d1 	.word	0x0800c5d1
 800c3d4:	20000640 	.word	0x20000640

0800c3d8 <FreeRTOS_GetAddressConfiguration>:
	if( pulIPAddress != NULL )
 800c3d8:	b198      	cbz	r0, 800c402 <FreeRTOS_GetAddressConfiguration+0x2a>
{
 800c3da:	b410      	push	{r4}
 800c3dc:	4604      	mov	r4, r0
		*pulIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c3de:	4810      	ldr	r0, [pc, #64]	; (800c420 <FreeRTOS_GetAddressConfiguration+0x48>)
 800c3e0:	6940      	ldr	r0, [r0, #20]
 800c3e2:	6020      	str	r0, [r4, #0]
	if( pulNetMask != NULL )
 800c3e4:	b111      	cbz	r1, 800c3ec <FreeRTOS_GetAddressConfiguration+0x14>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 800c3e6:	480f      	ldr	r0, [pc, #60]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c3e8:	6840      	ldr	r0, [r0, #4]
 800c3ea:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 800c3ec:	b112      	cbz	r2, 800c3f4 <FreeRTOS_GetAddressConfiguration+0x1c>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 800c3ee:	490d      	ldr	r1, [pc, #52]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c3f0:	6889      	ldr	r1, [r1, #8]
 800c3f2:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 800c3f4:	b113      	cbz	r3, 800c3fc <FreeRTOS_GetAddressConfiguration+0x24>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 800c3f6:	4a0b      	ldr	r2, [pc, #44]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c3f8:	68d2      	ldr	r2, [r2, #12]
 800c3fa:	601a      	str	r2, [r3, #0]
}
 800c3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c400:	4770      	bx	lr
	if( pulNetMask != NULL )
 800c402:	b111      	cbz	r1, 800c40a <FreeRTOS_GetAddressConfiguration+0x32>
		*pulNetMask = xNetworkAddressing.ulNetMask;
 800c404:	4807      	ldr	r0, [pc, #28]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c406:	6840      	ldr	r0, [r0, #4]
 800c408:	6008      	str	r0, [r1, #0]
	if( pulGatewayAddress != NULL )
 800c40a:	b112      	cbz	r2, 800c412 <FreeRTOS_GetAddressConfiguration+0x3a>
		*pulGatewayAddress = xNetworkAddressing.ulGatewayAddress;
 800c40c:	4905      	ldr	r1, [pc, #20]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c40e:	6889      	ldr	r1, [r1, #8]
 800c410:	6011      	str	r1, [r2, #0]
	if( pulDNSServerAddress != NULL )
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0f4      	beq.n	800c400 <FreeRTOS_GetAddressConfiguration+0x28>
		*pulDNSServerAddress = xNetworkAddressing.ulDNSServerAddress;
 800c416:	4a03      	ldr	r2, [pc, #12]	; (800c424 <FreeRTOS_GetAddressConfiguration+0x4c>)
 800c418:	68d2      	ldr	r2, [r2, #12]
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000010 	.word	0x20000010
 800c424:	2000065c 	.word	0x2000065c

0800c428 <xSendEventStructToIPTask>:
{
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	460d      	mov	r5, r1
	return xIPTaskInitialised;
 800c42e:	4b17      	ldr	r3, [pc, #92]	; (800c48c <xSendEventStructToIPTask+0x64>)
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	b92b      	cbnz	r3, 800c440 <xSendEventStructToIPTask+0x18>
 800c434:	f990 3000 	ldrsb.w	r3, [r0]
 800c438:	b133      	cbz	r3, 800c448 <xSendEventStructToIPTask+0x20>
		xReturn = pdFAIL;
 800c43a:	2400      	movs	r4, #0
}
 800c43c:	4620      	mov	r0, r4
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
			if( pxEvent->eEventType == eTCPTimerEvent )
 800c440:	f990 3000 	ldrsb.w	r3, [r0]
 800c444:	2b05      	cmp	r3, #5
 800c446:	d014      	beq.n	800c472 <xSendEventStructToIPTask+0x4a>
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800c448:	f7ff fece 	bl	800c1e8 <xIsCallingFromIPTask>
 800c44c:	2801      	cmp	r0, #1
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800c44e:	f04f 0300 	mov.w	r3, #0
 800c452:	bf14      	ite	ne
 800c454:	462a      	movne	r2, r5
 800c456:	461a      	moveq	r2, r3
 800c458:	4621      	mov	r1, r4
 800c45a:	480d      	ldr	r0, [pc, #52]	; (800c490 <xSendEventStructToIPTask+0x68>)
 800c45c:	6800      	ldr	r0, [r0, #0]
 800c45e:	f007 fa9f 	bl	80139a0 <xQueueGenericSend>
			if( xReturn == pdFAIL )
 800c462:	4604      	mov	r4, r0
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e9      	bne.n	800c43c <xSendEventStructToIPTask+0x14>
				iptraceSTACK_TX_EVENT_LOST( pxEvent->eEventType );
 800c468:	2100      	movs	r1, #0
 800c46a:	200b      	movs	r0, #11
 800c46c:	f00a f974 	bl	8016758 <vExampleDebugStatUpdate>
 800c470:	e7e4      	b.n	800c43c <xSendEventStructToIPTask+0x14>
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800c472:	4a08      	ldr	r2, [pc, #32]	; (800c494 <xSendEventStructToIPTask+0x6c>)
 800c474:	7813      	ldrb	r3, [r2, #0]
 800c476:	f043 0302 	orr.w	r3, r3, #2
 800c47a:	7013      	strb	r3, [r2, #0]
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800c47c:	4b04      	ldr	r3, [pc, #16]	; (800c490 <xSendEventStructToIPTask+0x68>)
 800c47e:	6818      	ldr	r0, [r3, #0]
 800c480:	f007 fd26 	bl	8013ed0 <uxQueueMessagesWaiting>
		if( xSendMessage != pdFALSE )
 800c484:	2800      	cmp	r0, #0
 800c486:	d0df      	beq.n	800c448 <xSendEventStructToIPTask+0x20>
			xReturn = pdPASS;
 800c488:	2401      	movs	r4, #1
	return xReturn;
 800c48a:	e7d7      	b.n	800c43c <xSendEventStructToIPTask+0x14>
 800c48c:	20000658 	.word	0x20000658
 800c490:	20000674 	.word	0x20000674
 800c494:	20000684 	.word	0x20000684

0800c498 <FreeRTOS_NetworkDown>:
{
 800c498:	b508      	push	{r3, lr}
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800c49a:	2100      	movs	r1, #0
 800c49c:	4804      	ldr	r0, [pc, #16]	; (800c4b0 <FreeRTOS_NetworkDown+0x18>)
 800c49e:	f7ff ffc3 	bl	800c428 <xSendEventStructToIPTask>
 800c4a2:	2801      	cmp	r0, #1
		xNetworkDownEventPending = pdTRUE;
 800c4a4:	bf14      	ite	ne
 800c4a6:	2201      	movne	r2, #1
		xNetworkDownEventPending = pdFALSE;
 800c4a8:	2200      	moveq	r2, #0
 800c4aa:	4b02      	ldr	r3, [pc, #8]	; (800c4b4 <FreeRTOS_NetworkDown+0x1c>)
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	bd08      	pop	{r3, pc}
 800c4b0:	0801a21c 	.word	0x0801a21c
 800c4b4:	20000670 	.word	0x20000670

0800c4b8 <FreeRTOS_SendPingRequest>:
	{
 800c4b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c4bc:	b082      	sub	sp, #8
	IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800c4be:	2303      	movs	r3, #3
 800c4c0:	f88d 3000 	strb.w	r3, [sp]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9301      	str	r3, [sp, #4]
		if( xNumberOfBytesToSend < ( ( ipconfigNETWORK_MTU - sizeof( IPHeader_t ) ) - sizeof( ICMPHeader_t ) ) )
 800c4c8:	f5b1 6fb8 	cmp.w	r1, #1472	; 0x5c0
 800c4cc:	d303      	bcc.n	800c4d6 <FreeRTOS_SendPingRequest+0x1e>
	BaseType_t xReturn = pdFAIL;
 800c4ce:	2000      	movs	r0, #0
	}
 800c4d0:	b002      	add	sp, #8
 800c4d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c4d6:	4616      	mov	r6, r2
 800c4d8:	460c      	mov	r4, r1
 800c4da:	4680      	mov	r8, r0
			pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xNumberOfBytesToSend + sizeof( ICMPPacket_t ), xBlockTimeTicks );
 800c4dc:	4611      	mov	r1, r2
 800c4de:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800c4e2:	f004 f84d 	bl	8010580 <pxGetNetworkBufferWithDescriptor>
			if( pxNetworkBuffer != NULL )
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	b380      	cbz	r0, 800c54c <FreeRTOS_SendPingRequest+0x94>
				pxICMPHeader = ( ICMPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipIP_PAYLOAD_OFFSET ] );
 800c4ea:	6980      	ldr	r0, [r0, #24]
				usSequenceNumber++;
 800c4ec:	4918      	ldr	r1, [pc, #96]	; (800c550 <FreeRTOS_SendPingRequest+0x98>)
 800c4ee:	880b      	ldrh	r3, [r1, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	800b      	strh	r3, [r1, #0]
				pxICMPHeader->ucTypeOfMessage = ipICMP_ECHO_REQUEST;
 800c4f8:	2308      	movs	r3, #8
 800c4fa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
				pxICMPHeader->ucTypeOfService = 0;
 800c4fe:	f04f 0900 	mov.w	r9, #0
 800c502:	f880 9023 	strb.w	r9, [r0, #35]	; 0x23
				pxICMPHeader->usIdentifier = usSequenceNumber;
 800c506:	84c2      	strh	r2, [r0, #38]	; 0x26
				pxICMPHeader->usSequenceNumber = usSequenceNumber;
 800c508:	8502      	strh	r2, [r0, #40]	; 0x28
				memset( ( void * ) pucChar, ( int ) ipECHO_DATA_FILL_BYTE, xNumberOfBytesToSend );
 800c50a:	4622      	mov	r2, r4
 800c50c:	2178      	movs	r1, #120	; 0x78
 800c50e:	302a      	adds	r0, #42	; 0x2a
 800c510:	f00b f95c 	bl	80177cc <memset>
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = FREERTOS_SO_UDPCKSUM_OUT;
 800c514:	69ab      	ldr	r3, [r5, #24]
 800c516:	2202      	movs	r2, #2
 800c518:	719a      	strb	r2, [r3, #6]
				pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800c51a:	f8c5 8014 	str.w	r8, [r5, #20]
				pxNetworkBuffer->usPort = ipPACKET_CONTAINS_ICMP_DATA;
 800c51e:	f8a5 9020 	strh.w	r9, [r5, #32]
				pxNetworkBuffer->xDataLength = xNumberOfBytesToSend + sizeof( ICMPHeader_t );
 800c522:	3408      	adds	r4, #8
 800c524:	61ec      	str	r4, [r5, #28]
				xStackTxEvent.pvData = pxNetworkBuffer;
 800c526:	9501      	str	r5, [sp, #4]
				if( xSendEventStructToIPTask( &xStackTxEvent, xBlockTimeTicks) != pdPASS )
 800c528:	4631      	mov	r1, r6
 800c52a:	4668      	mov	r0, sp
 800c52c:	f7ff ff7c 	bl	800c428 <xSendEventStructToIPTask>
 800c530:	2801      	cmp	r0, #1
 800c532:	d102      	bne.n	800c53a <FreeRTOS_SendPingRequest+0x82>
					xReturn = usSequenceNumber;
 800c534:	4b06      	ldr	r3, [pc, #24]	; (800c550 <FreeRTOS_SendPingRequest+0x98>)
 800c536:	8818      	ldrh	r0, [r3, #0]
 800c538:	e7ca      	b.n	800c4d0 <FreeRTOS_SendPingRequest+0x18>
					vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c53a:	4628      	mov	r0, r5
 800c53c:	f003 fffa 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
 800c540:	4649      	mov	r1, r9
 800c542:	200b      	movs	r0, #11
 800c544:	f00a f908 	bl	8016758 <vExampleDebugStatUpdate>
	BaseType_t xReturn = pdFAIL;
 800c548:	4648      	mov	r0, r9
 800c54a:	e7c1      	b.n	800c4d0 <FreeRTOS_SendPingRequest+0x18>
 800c54c:	2000      	movs	r0, #0
		return xReturn;
 800c54e:	e7bf      	b.n	800c4d0 <FreeRTOS_SendPingRequest+0x18>
 800c550:	20000612 	.word	0x20000612

0800c554 <xSendEventToIPTask>:
{
 800c554:	b500      	push	{lr}
 800c556:	b083      	sub	sp, #12
	xEventMessage.eEventType = eEvent;
 800c558:	f88d 0000 	strb.w	r0, [sp]
	xEventMessage.pvData = ( void* )NULL;
 800c55c:	2100      	movs	r1, #0
 800c55e:	9101      	str	r1, [sp, #4]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800c560:	4668      	mov	r0, sp
 800c562:	f7ff ff61 	bl	800c428 <xSendEventStructToIPTask>
}
 800c566:	b003      	add	sp, #12
 800c568:	f85d fb04 	ldr.w	pc, [sp], #4

0800c56c <vIPNetworkUpCalls>:
{
 800c56c:	b538      	push	{r3, r4, r5, lr}
	xNetworkUp = pdTRUE;
 800c56e:	2201      	movs	r2, #1
 800c570:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <vIPNetworkUpCalls+0x30>)
 800c572:	601a      	str	r2, [r3, #0]
		vApplicationIPNetworkEventHook( eNetworkUp );
 800c574:	2000      	movs	r0, #0
 800c576:	f00a ff63 	bl	8017440 <vApplicationIPNetworkEventHook>
		vDNSInitialise();
 800c57a:	f7ff fc7b 	bl	800be74 <vDNSInitialise>
	pxTimer->ulReloadTime = xTime;
 800c57e:	4c08      	ldr	r4, [pc, #32]	; (800c5a0 <vIPNetworkUpCalls+0x34>)
 800c580:	f242 7510 	movw	r5, #10000	; 0x2710
 800c584:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800c586:	1d20      	adds	r0, r4, #4
 800c588:	f008 fab6 	bl	8014af8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800c58c:	60e5      	str	r5, [r4, #12]
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800c58e:	7823      	ldrb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800c590:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800c594:	f043 0301 	orr.w	r3, r3, #1
 800c598:	7023      	strb	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	20000678 	.word	0x20000678
 800c5a0:	20000614 	.word	0x20000614

0800c5a4 <vReturnEthernetFrame>:
{
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4604      	mov	r4, r0
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c5a8:	6982      	ldr	r2, [r0, #24]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	f853 0f06 	ldr.w	r0, [r3, #6]!
 800c5b0:	6010      	str	r0, [r2, #0]
 800c5b2:	8898      	ldrh	r0, [r3, #4]
 800c5b4:	8090      	strh	r0, [r2, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c5b6:	4d05      	ldr	r5, [pc, #20]	; (800c5cc <vReturnEthernetFrame+0x28>)
 800c5b8:	6828      	ldr	r0, [r5, #0]
 800c5ba:	f8c2 0006 	str.w	r0, [r2, #6]
 800c5be:	88aa      	ldrh	r2, [r5, #4]
 800c5c0:	809a      	strh	r2, [r3, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f004 fa78 	bl	8010ab8 <xNetworkInterfaceOutput>
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000010 	.word	0x20000010

0800c5d0 <prvIPTask>:
{
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	b089      	sub	sp, #36	; 0x24
	FreeRTOS_NetworkDown();
 800c5d6:	f7ff ff5f 	bl	800c498 <FreeRTOS_NetworkDown>
	pxTimer->ulReloadTime = xTime;
 800c5da:	4cc1      	ldr	r4, [pc, #772]	; (800c8e0 <prvIPTask+0x310>)
 800c5dc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800c5e0:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800c5e2:	1d20      	adds	r0, r4, #4
 800c5e4:	f008 fa88 	bl	8014af8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800c5e8:	60e5      	str	r5, [r4, #12]
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800c5ea:	7823      	ldrb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800c5ec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800c5f0:	f043 0301 	orr.w	r3, r3, #1
 800c5f4:	7023      	strb	r3, [r4, #0]
	xIPTaskInitialised = pdTRUE;
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	4bba      	ldr	r3, [pc, #744]	; (800c8e4 <prvIPTask+0x314>)
 800c5fa:	601a      	str	r2, [r3, #0]
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800c5fc:	4eba      	ldr	r6, [pc, #744]	; (800c8e8 <prvIPTask+0x318>)
		if( xStart != ( TickType_t ) 0 )
 800c5fe:	f8df 8308 	ldr.w	r8, [pc, #776]	; 800c908 <prvIPTask+0x338>
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800c602:	f104 0904 	add.w	r9, r4, #4
 800c606:	e21a      	b.n	800ca3e <prvIPTask+0x46e>
		xSendEventToIPTask( eARPTimerEvent );
 800c608:	2002      	movs	r0, #2
 800c60a:	f7ff ffa3 	bl	800c554 <xSendEventToIPTask>
 800c60e:	e19e      	b.n	800c94e <prvIPTask+0x37e>
			vDNSCheckCallBack( NULL );
 800c610:	2000      	movs	r0, #0
 800c612:	f7ff fc37 	bl	800be84 <vDNSCheckCallBack>
 800c616:	e1a0      	b.n	800c95a <prvIPTask+0x38a>
			xNextTime = xTCPTimerCheck( xWillSleep );
 800c618:	faba f08a 	clz	r0, sl
 800c61c:	0940      	lsrs	r0, r0, #5
 800c61e:	f001 f975 	bl	800d90c <xTCPTimerCheck>
 800c622:	4682      	mov	sl, r0
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800c624:	4648      	mov	r0, r9
 800c626:	f008 fa67 	bl	8014af8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800c62a:	f8c4 a00c 	str.w	sl, [r4, #12]
	if( xTime == ( TickType_t ) 0 )
 800c62e:	f1ba 0f00 	cmp.w	sl, #0
 800c632:	d00b      	beq.n	800c64c <prvIPTask+0x7c>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800c634:	7823      	ldrb	r3, [r4, #0]
 800c636:	f36f 0341 	bfc	r3, #1, #1
 800c63a:	7023      	strb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800c63c:	7823      	ldrb	r3, [r4, #0]
 800c63e:	f043 0301 	orr.w	r3, r3, #1
 800c642:	7023      	strb	r3, [r4, #0]
			xProcessedTCPMessage = 0;
 800c644:	2200      	movs	r2, #0
 800c646:	4ba9      	ldr	r3, [pc, #676]	; (800c8ec <prvIPTask+0x31c>)
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	e1a4      	b.n	800c996 <prvIPTask+0x3c6>
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800c64c:	7823      	ldrb	r3, [r4, #0]
 800c64e:	f043 0302 	orr.w	r3, r3, #2
 800c652:	7023      	strb	r3, [r4, #0]
 800c654:	e7f2      	b.n	800c63c <prvIPTask+0x6c>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800c656:	f242 7210 	movw	r2, #10000	; 0x2710
 800c65a:	68e3      	ldr	r3, [r4, #12]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	bf28      	it	cs
 800c660:	461a      	movcs	r2, r3
		if( xDNSTimer.bActive != pdFALSE )
 800c662:	783b      	ldrb	r3, [r7, #0]
 800c664:	f013 0f01 	tst.w	r3, #1
 800c668:	d003      	beq.n	800c672 <prvIPTask+0xa2>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	bf28      	it	cs
 800c670:	461a      	movcs	r2, r3
		xReceivedEvent.eEventType = eNoEvent;
 800c672:	a908      	add	r1, sp, #32
 800c674:	23ff      	movs	r3, #255	; 0xff
 800c676:	f801 3d08 	strb.w	r3, [r1, #-8]!
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 800c67a:	2300      	movs	r3, #0
 800c67c:	6828      	ldr	r0, [r5, #0]
 800c67e:	f007 fb2f 	bl	8013ce0 <xQueueGenericReceive>
		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );
 800c682:	6828      	ldr	r0, [r5, #0]
 800c684:	f007 fc24 	bl	8013ed0 <uxQueueMessagesWaiting>
 800c688:	f1c0 011d 	rsb	r1, r0, #29
 800c68c:	b289      	uxth	r1, r1
 800c68e:	2005      	movs	r0, #5
 800c690:	f00a f862 	bl	8016758 <vExampleDebugStatUpdate>
		switch( xReceivedEvent.eEventType )
 800c694:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 800c698:	2b0b      	cmp	r3, #11
 800c69a:	f200 814e 	bhi.w	800c93a <prvIPTask+0x36a>
 800c69e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c6a2:	000f      	.short	0x000f
 800c6a4:	014a002f 	.word	0x014a002f
 800c6a8:	014c01a7 	.word	0x014c01a7
 800c6ac:	01b801b3 	.word	0x01b801b3
 800c6b0:	018701c9 	.word	0x018701c9
 800c6b4:	01ab01a3 	.word	0x01ab01a3
 800c6b8:	01af      	.short	0x01af
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800c6ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800c6be:	e7cc      	b.n	800c65a <prvIPTask+0x8a>
				xNetworkUp = pdFALSE;
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4b8b      	ldr	r3, [pc, #556]	; (800c8f0 <prvIPTask+0x320>)
 800c6c4:	601a      	str	r2, [r3, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800c6c6:	7833      	ldrb	r3, [r6, #0]
 800c6c8:	f362 0300 	bfi	r3, r2, #0, #1
 800c6cc:	7033      	strb	r3, [r6, #0]
		if( xCallEventHook == pdTRUE )
 800c6ce:	4b89      	ldr	r3, [pc, #548]	; (800c8f4 <prvIPTask+0x324>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d00d      	beq.n	800c6f2 <prvIPTask+0x122>
		xCallEventHook = pdTRUE;
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4b86      	ldr	r3, [pc, #536]	; (800c8f4 <prvIPTask+0x324>)
 800c6da:	601a      	str	r2, [r3, #0]
	if( xNetworkInterfaceInitialise() != pdPASS )
 800c6dc:	f004 f982 	bl	80109e4 <xNetworkInterfaceInitialise>
 800c6e0:	2801      	cmp	r0, #1
 800c6e2:	d00a      	beq.n	800c6fa <prvIPTask+0x12a>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800c6e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c6e8:	f008 f864 	bl	80147b4 <vTaskDelay>
		FreeRTOS_NetworkDown();
 800c6ec:	f7ff fed4 	bl	800c498 <FreeRTOS_NetworkDown>
 800c6f0:	e123      	b.n	800c93a <prvIPTask+0x36a>
			vApplicationIPNetworkEventHook( eNetworkDown );
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	f00a fea4 	bl	8017440 <vApplicationIPNetworkEventHook>
 800c6f8:	e7ed      	b.n	800c6d6 <prvIPTask+0x106>
			vIPNetworkUpCalls();
 800c6fa:	f7ff ff37 	bl	800c56c <vIPNetworkUpCalls>
 800c6fe:	e11c      	b.n	800c93a <prvIPTask+0x36a>
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800c700:	f8dd a01c 	ldr.w	sl, [sp, #28]
	configASSERT( pxNetworkBuffer );
 800c704:	f1ba 0f00 	cmp.w	sl, #0
 800c708:	d014      	beq.n	800c734 <prvIPTask+0x164>
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800c70a:	2301      	movs	r3, #1
 800c70c:	f88d 300f 	strb.w	r3, [sp, #15]
	if( eReturned == eProcessBuffer )
 800c710:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b01      	cmp	r3, #1
 800c718:	d012      	beq.n	800c740 <prvIPTask+0x170>
	switch( eReturned )
 800c71a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b02      	cmp	r3, #2
 800c722:	f000 8103 	beq.w	800c92c <prvIPTask+0x35c>
 800c726:	2b03      	cmp	r3, #3
 800c728:	f000 8107 	beq.w	800c93a <prvIPTask+0x36a>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c72c:	4650      	mov	r0, sl
 800c72e:	f003 ff01 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
 800c732:	e102      	b.n	800c93a <prvIPTask+0x36a>
	configASSERT( pxNetworkBuffer );
 800c734:	f240 516c 	movw	r1, #1388	; 0x56c
 800c738:	486f      	ldr	r0, [pc, #444]	; (800c8f8 <prvIPTask+0x328>)
 800c73a:	f00a fdb1 	bl	80172a0 <vAssertCalled>
 800c73e:	e7e4      	b.n	800c70a <prvIPTask+0x13a>
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c740:	f8da b018 	ldr.w	fp, [sl, #24]
		switch( pxEthernetHeader->usFrameType )
 800c744:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800c748:	2b08      	cmp	r3, #8
 800c74a:	d009      	beq.n	800c760 <prvIPTask+0x190>
 800c74c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800c750:	f040 80e8 	bne.w	800c924 <prvIPTask+0x354>
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c754:	4658      	mov	r0, fp
 800c756:	f7ff f881 	bl	800b85c <eARPProcessPacket>
 800c75a:	f88d 000f 	strb.w	r0, [sp, #15]
 800c75e:	e7dc      	b.n	800c71a <prvIPTask+0x14a>
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800c760:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800c764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f040 80ce 	bne.w	800c90c <prvIPTask+0x33c>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800c770:	f89b 300e 	ldrb.w	r3, [fp, #14]
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800c774:	f1a3 0245 	sub.w	r2, r3, #69	; 0x45
 800c778:	b2d2      	uxtb	r2, r2
 800c77a:	2a0a      	cmp	r2, #10
 800c77c:	f200 80ca 	bhi.w	800c914 <prvIPTask+0x344>
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800c780:	f8db 201e 	ldr.w	r2, [fp, #30]
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800c784:	495d      	ldr	r1, [pc, #372]	; (800c8fc <prvIPTask+0x32c>)
 800c786:	6949      	ldr	r1, [r1, #20]
 800c788:	428a      	cmp	r2, r1
 800c78a:	d00c      	beq.n	800c7a6 <prvIPTask+0x1d6>
 800c78c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c790:	d009      	beq.n	800c7a6 <prvIPTask+0x1d6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800c792:	485b      	ldr	r0, [pc, #364]	; (800c900 <prvIPTask+0x330>)
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800c794:	6900      	ldr	r0, [r0, #16]
 800c796:	4282      	cmp	r2, r0
 800c798:	d005      	beq.n	800c7a6 <prvIPTask+0x1d6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800c79a:	485a      	ldr	r0, [pc, #360]	; (800c904 <prvIPTask+0x334>)
 800c79c:	4282      	cmp	r2, r0
 800c79e:	d002      	beq.n	800c7a6 <prvIPTask+0x1d6>
	if( eReturn == eProcessBuffer )
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	f040 80b9 	bne.w	800c918 <prvIPTask+0x348>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800c7ac:	f89b 2017 	ldrb.w	r2, [fp, #23]
 800c7b0:	9200      	str	r2, [sp, #0]
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800c7b2:	2b14      	cmp	r3, #20
 800c7b4:	d818      	bhi.n	800c7e8 <prvIPTask+0x218>
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	2b11      	cmp	r3, #17
 800c7ba:	d06a      	beq.n	800c892 <prvIPTask+0x2c2>
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800c7bc:	f8db 101a 	ldr.w	r1, [fp, #26]
 800c7c0:	f10b 0006 	add.w	r0, fp, #6
 800c7c4:	f7fe ffb2 	bl	800b72c <vARPRefreshCacheEntry>
		switch( ucProtocol )
 800c7c8:	9b00      	ldr	r3, [sp, #0]
 800c7ca:	2b06      	cmp	r3, #6
 800c7cc:	d07b      	beq.n	800c8c6 <prvIPTask+0x2f6>
 800c7ce:	2b11      	cmp	r3, #17
 800c7d0:	d05f      	beq.n	800c892 <prvIPTask+0x2c2>
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	f040 80a2 	bne.w	800c91c <prvIPTask+0x34c>
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800c7d8:	f8db 301e 	ldr.w	r3, [fp, #30]
 800c7dc:	4a47      	ldr	r2, [pc, #284]	; (800c8fc <prvIPTask+0x32c>)
 800c7de:	6952      	ldr	r2, [r2, #20]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d017      	beq.n	800c814 <prvIPTask+0x244>
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	e092      	b.n	800c90e <prvIPTask+0x33e>
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800c7e8:	f1a3 0214 	sub.w	r2, r3, #20
 800c7ec:	4610      	mov	r0, r2
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800c7ee:	f8da 201c 	ldr.w	r2, [sl, #28]
 800c7f2:	3a22      	subs	r2, #34	; 0x22
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c7f4:	f10b 010e 	add.w	r1, fp, #14
			memmove( pucTarget, pucSource, xMoveLen );
 800c7f8:	9001      	str	r0, [sp, #4]
 800c7fa:	1a12      	subs	r2, r2, r0
 800c7fc:	4419      	add	r1, r3
 800c7fe:	f10b 0022 	add.w	r0, fp, #34	; 0x22
 800c802:	f00a ffc9 	bl	8017798 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800c806:	f8da 301c 	ldr.w	r3, [sl, #28]
 800c80a:	9a01      	ldr	r2, [sp, #4]
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	f8ca 301c 	str.w	r3, [sl, #28]
 800c812:	e7d0      	b.n	800c7b6 <prvIPTask+0x1e6>
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c814:	f8da 2018 	ldr.w	r2, [sl, #24]
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800c818:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 800c81c:	b1a9      	cbz	r1, 800c84a <prvIPTask+0x27a>
 800c81e:	2908      	cmp	r1, #8
 800c820:	d17e      	bne.n	800c920 <prvIPTask+0x350>
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800c822:	2100      	movs	r1, #0
 800c824:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c828:	f8d2 101a 	ldr.w	r1, [r2, #26]
 800c82c:	f8c2 101e 	str.w	r1, [r2, #30]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c830:	f8c2 301a 	str.w	r3, [r2, #26]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800c834:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800c836:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 800c83a:	428b      	cmp	r3, r1
			pxICMPHeader->usChecksum = ( uint16_t )
 800c83c:	bf8c      	ite	hi
 800c83e:	f503 7384 	addhi.w	r3, r3, #264	; 0x108
			pxICMPHeader->usChecksum = ( uint16_t )
 800c842:	3308      	addls	r3, #8
 800c844:	8493      	strh	r3, [r2, #36]	; 0x24
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800c846:	2302      	movs	r3, #2
 800c848:	e061      	b.n	800c90e <prvIPTask+0x33e>
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 800c84a:	8a11      	ldrh	r1, [r2, #16]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 800c84c:	0a0b      	lsrs	r3, r1, #8
 800c84e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c852:	b29b      	uxth	r3, r3
		pucByte += sizeof( ICMPPacket_t );
 800c854:	f102 012a 	add.w	r1, r2, #42	; 0x2a
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800c858:	2b1c      	cmp	r3, #28
 800c85a:	d014      	beq.n	800c886 <prvIPTask+0x2b6>
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 800c85c:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
 800c860:	2878      	cmp	r0, #120	; 0x78
 800c862:	d112      	bne.n	800c88a <prvIPTask+0x2ba>
 800c864:	3b1d      	subs	r3, #29
 800c866:	b29b      	uxth	r3, r3
 800c868:	332a      	adds	r3, #42	; 0x2a
 800c86a:	4413      	add	r3, r2
 800c86c:	e003      	b.n	800c876 <prvIPTask+0x2a6>
 800c86e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c872:	2878      	cmp	r0, #120	; 0x78
 800c874:	d10b      	bne.n	800c88e <prvIPTask+0x2be>
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800c876:	428b      	cmp	r3, r1
 800c878:	d1f9      	bne.n	800c86e <prvIPTask+0x29e>
	ePingReplyStatus_t eStatus = eSuccess;
 800c87a:	2000      	movs	r0, #0
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800c87c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800c87e:	f00a fea7 	bl	80175d0 <vApplicationPingReplyHook>
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800c882:	2300      	movs	r3, #0
 800c884:	e043      	b.n	800c90e <prvIPTask+0x33e>
	ePingReplyStatus_t eStatus = eSuccess;
 800c886:	2000      	movs	r0, #0
 800c888:	e7f8      	b.n	800c87c <prvIPTask+0x2ac>
				eStatus = eInvalidData;
 800c88a:	2002      	movs	r0, #2
 800c88c:	e7f6      	b.n	800c87c <prvIPTask+0x2ac>
 800c88e:	2002      	movs	r0, #2
 800c890:	e7f4      	b.n	800c87c <prvIPTask+0x2ac>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c892:	f8da 2018 	ldr.w	r2, [sl, #24]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 800c896:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800c898:	0a0b      	lsrs	r3, r1, #8
 800c89a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b08      	subs	r3, #8
 800c8a2:	f8ca 301c 	str.w	r3, [sl, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800c8a6:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800c8a8:	f8aa 3020 	strh.w	r3, [sl, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800c8ac:	f8d2 301a 	ldr.w	r3, [r2, #26]
 800c8b0:	f8ca 3014 	str.w	r3, [sl, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800c8b4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f003 fda0 	bl	80103fc <xProcessReceivedUDPPacket>
						eReturn = eFrameConsumed;
 800c8bc:	2801      	cmp	r0, #1
 800c8be:	bf14      	ite	ne
 800c8c0:	2301      	movne	r3, #1
 800c8c2:	2303      	moveq	r3, #3
 800c8c4:	e023      	b.n	800c90e <prvIPTask+0x33e>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f002 fba2 	bl	800f010 <xProcessReceivedTCPPacket>
						eReturn = eFrameConsumed;
 800c8cc:	2801      	cmp	r0, #1
 800c8ce:	bf14      	ite	ne
 800c8d0:	2301      	movne	r3, #1
 800c8d2:	2303      	moveq	r3, #3
					xProcessedTCPMessage++;
 800c8d4:	4905      	ldr	r1, [pc, #20]	; (800c8ec <prvIPTask+0x31c>)
 800c8d6:	680a      	ldr	r2, [r1, #0]
 800c8d8:	3201      	adds	r2, #1
 800c8da:	600a      	str	r2, [r1, #0]
 800c8dc:	e017      	b.n	800c90e <prvIPTask+0x33e>
 800c8de:	bf00      	nop
 800c8e0:	20000684 	.word	0x20000684
 800c8e4:	20000658 	.word	0x20000658
 800c8e8:	20000614 	.word	0x20000614
 800c8ec:	2000067c 	.word	0x2000067c
 800c8f0:	20000678 	.word	0x20000678
 800c8f4:	20000628 	.word	0x20000628
 800c8f8:	0801a1d4 	.word	0x0801a1d4
 800c8fc:	20000010 	.word	0x20000010
 800c900:	2000065c 	.word	0x2000065c
 800c904:	fc0000e0 	.word	0xfc0000e0
 800c908:	20000680 	.word	0x20000680
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800c90c:	2300      	movs	r3, #0
				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800c90e:	f88d 300f 	strb.w	r3, [sp, #15]
 800c912:	e702      	b.n	800c71a <prvIPTask+0x14a>
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800c914:	2300      	movs	r3, #0
 800c916:	e7fa      	b.n	800c90e <prvIPTask+0x33e>
 800c918:	2300      	movs	r3, #0
 800c91a:	e7f8      	b.n	800c90e <prvIPTask+0x33e>
 800c91c:	2301      	movs	r3, #1
 800c91e:	e7f6      	b.n	800c90e <prvIPTask+0x33e>
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800c920:	2300      	movs	r3, #0
 800c922:	e7f4      	b.n	800c90e <prvIPTask+0x33e>
				eReturned = eReleaseBuffer;
 800c924:	2300      	movs	r3, #0
 800c926:	f88d 300f 	strb.w	r3, [sp, #15]
 800c92a:	e6f6      	b.n	800c71a <prvIPTask+0x14a>
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800c92c:	2101      	movs	r1, #1
 800c92e:	4650      	mov	r0, sl
 800c930:	f7ff fe38 	bl	800c5a4 <vReturnEthernetFrame>
 800c934:	e001      	b.n	800c93a <prvIPTask+0x36a>
				vARPAgeCache();
 800c936:	f7ff f87b 	bl	800ba30 <vARPAgeCache>
		if( xNetworkDownEventPending != pdFALSE )
 800c93a:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <prvIPTask+0x474>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d17b      	bne.n	800ca3a <prvIPTask+0x46a>
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff fc27 	bl	800c196 <prvIPTimerCheck>
 800c948:	2800      	cmp	r0, #0
 800c94a:	f47f ae5d 	bne.w	800c608 <prvIPTask+0x38>
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800c94e:	4638      	mov	r0, r7
 800c950:	f7ff fc21 	bl	800c196 <prvIPTimerCheck>
 800c954:	2800      	cmp	r0, #0
 800c956:	f47f ae5b 	bne.w	800c610 <prvIPTask+0x40>
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 800c95a:	6828      	ldr	r0, [r5, #0]
 800c95c:	f007 fab8 	bl	8013ed0 <uxQueueMessagesWaiting>
 800c960:	4682      	mov	sl, r0
		xTimeNow = xTaskGetTickCount();
 800c962:	f007 fdd5 	bl	8014510 <xTaskGetTickCount>
		if( xStart != ( TickType_t ) 0 )
 800c966:	f8d8 3000 	ldr.w	r3, [r8]
 800c96a:	b12b      	cbz	r3, 800c978 <prvIPTask+0x3a8>
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 800c96c:	4936      	ldr	r1, [pc, #216]	; (800ca48 <prvIPTask+0x478>)
 800c96e:	1ac3      	subs	r3, r0, r3
 800c970:	680a      	ldr	r2, [r1, #0]
 800c972:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800c976:	600b      	str	r3, [r1, #0]
		xStart = xTimeNow;
 800c978:	f8c8 0000 	str.w	r0, [r8]
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800c97c:	4620      	mov	r0, r4
 800c97e:	f7ff fc0a 	bl	800c196 <prvIPTimerCheck>
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800c982:	4b32      	ldr	r3, [pc, #200]	; (800ca4c <prvIPTask+0x47c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	b11b      	cbz	r3, 800c990 <prvIPTask+0x3c0>
 800c988:	f1ba 0f00 	cmp.w	sl, #0
 800c98c:	f43f ae44 	beq.w	800c618 <prvIPTask+0x48>
		if( xCheckTCPSockets != pdFALSE )
 800c990:	2800      	cmp	r0, #0
 800c992:	f47f ae41 	bne.w	800c618 <prvIPTask+0x48>
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800c996:	7833      	ldrb	r3, [r6, #0]
 800c998:	f013 0f01 	tst.w	r3, #1
 800c99c:	f43f ae5b 	beq.w	800c656 <prvIPTask+0x86>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800c9a0:	68f2      	ldr	r2, [r6, #12]
 800c9a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	f63f ae87 	bhi.w	800c6ba <prvIPTask+0xea>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 800c9ac:	6932      	ldr	r2, [r6, #16]
 800c9ae:	e654      	b.n	800c65a <prvIPTask+0x8a>
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800c9b0:	f8dd a01c 	ldr.w	sl, [sp, #28]
				xAddress.sin_addr = 0u;	/* For the moment. */
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9305      	str	r3, [sp, #20]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800c9b8:	f8ba 1024 	ldrh.w	r1, [sl, #36]	; 0x24
 800c9bc:	0a0a      	lsrs	r2, r1, #8
 800c9be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c9c2:	f8ad 2012 	strh.w	r2, [sp, #18]
				pxSocket->usLocalPort = 0u;
 800c9c6:	f8aa 3024 	strh.w	r3, [sl, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800c9ca:	2208      	movs	r2, #8
 800c9cc:	a904      	add	r1, sp, #16
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	f000 fb78 	bl	800d0c4 <vSocketBind>
				pxSocket->xEventBits |= eSOCKET_BOUND;
 800c9d4:	f8da 3000 	ldr.w	r3, [sl]
 800c9d8:	f043 0310 	orr.w	r3, r3, #16
 800c9dc:	f8ca 3000 	str.w	r3, [sl]
				vSocketWakeUpUser( pxSocket );
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	f000 fcd5 	bl	800d390 <vSocketWakeUpUser>
				break;
 800c9e6:	e7a8      	b.n	800c93a <prvIPTask+0x36a>
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 800c9e8:	9807      	ldr	r0, [sp, #28]
 800c9ea:	f000 fc07 	bl	800d1fc <vSocketClose>
				break;
 800c9ee:	e7a4      	b.n	800c93a <prvIPTask+0x36a>
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800c9f0:	9807      	ldr	r0, [sp, #28]
 800c9f2:	f003 fc9b 	bl	801032c <vProcessGeneratedUDPPacket>
				break;
 800c9f6:	e7a0      	b.n	800c93a <prvIPTask+0x36a>
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 800c9f8:	9807      	ldr	r0, [sp, #28]
 800c9fa:	f001 fb49 	bl	800e090 <vSocketSelect>
				break;
 800c9fe:	e79c      	b.n	800c93a <prvIPTask+0x36a>
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 800ca00:	9807      	ldr	r0, [sp, #28]
 800ca02:	f001 fbf9 	bl	800e1f8 <FreeRTOS_SignalSocket>
				break;
 800ca06:	e798      	b.n	800c93a <prvIPTask+0x36a>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800ca08:	7823      	ldrb	r3, [r4, #0]
 800ca0a:	f043 0302 	orr.w	r3, r3, #2
 800ca0e:	7023      	strb	r3, [r4, #0]
				break;
 800ca10:	e793      	b.n	800c93a <prvIPTask+0x36a>
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800ca12:	f8dd a01c 	ldr.w	sl, [sp, #28]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800ca16:	4650      	mov	r0, sl
 800ca18:	f003 f858 	bl	800facc <xTCPCheckNewClient>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d08c      	beq.n	800c93a <prvIPTask+0x36a>
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800ca20:	f8da 3000 	ldr.w	r3, [sl]
 800ca24:	f043 0304 	orr.w	r3, r3, #4
 800ca28:	f8ca 3000 	str.w	r3, [sl]
						vSocketWakeUpUser( pxSocket );
 800ca2c:	4650      	mov	r0, sl
 800ca2e:	f000 fcaf 	bl	800d390 <vSocketWakeUpUser>
 800ca32:	e782      	b.n	800c93a <prvIPTask+0x36a>
					vTCPNetStat();
 800ca34:	f001 fa94 	bl	800df60 <vTCPNetStat>
				break;
 800ca38:	e77f      	b.n	800c93a <prvIPTask+0x36a>
			FreeRTOS_NetworkDown();
 800ca3a:	f7ff fd2d 	bl	800c498 <FreeRTOS_NetworkDown>
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800ca3e:	4f04      	ldr	r7, [pc, #16]	; (800ca50 <prvIPTask+0x480>)
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 800ca40:	4d04      	ldr	r5, [pc, #16]	; (800ca54 <prvIPTask+0x484>)
 800ca42:	e77e      	b.n	800c942 <prvIPTask+0x372>
 800ca44:	20000670 	.word	0x20000670
 800ca48:	200006a0 	.word	0x200006a0
 800ca4c:	2000067c 	.word	0x2000067c
 800ca50:	2000062c 	.word	0x2000062c
 800ca54:	20000674 	.word	0x20000674

0800ca58 <FreeRTOS_GetIPAddress>:
}
 800ca58:	4b01      	ldr	r3, [pc, #4]	; (800ca60 <FreeRTOS_GetIPAddress+0x8>)
 800ca5a:	6958      	ldr	r0, [r3, #20]
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20000010 	.word	0x20000010

0800ca64 <vIPSetDnsTimerEnableState>:
		if( xEnableState != 0 )
 800ca64:	b928      	cbnz	r0, 800ca72 <vIPSetDnsTimerEnableState+0xe>
			xDNSTimer.bActive = pdFALSE;
 800ca66:	4b06      	ldr	r3, [pc, #24]	; (800ca80 <vIPSetDnsTimerEnableState+0x1c>)
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	f36f 0200 	bfc	r2, #0, #1
 800ca6e:	701a      	strb	r2, [r3, #0]
 800ca70:	4770      	bx	lr
			xDNSTimer.bActive = pdTRUE;
 800ca72:	4a03      	ldr	r2, [pc, #12]	; (800ca80 <vIPSetDnsTimerEnableState+0x1c>)
 800ca74:	7813      	ldrb	r3, [r2, #0]
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	7013      	strb	r3, [r2, #0]
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	2000062c 	.word	0x2000062c

0800ca84 <vIPReloadDNSTimer>:
	{
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4604      	mov	r4, r0
	pxTimer->ulReloadTime = xTime;
 800ca88:	4d0b      	ldr	r5, [pc, #44]	; (800cab8 <vIPReloadDNSTimer+0x34>)
 800ca8a:	6128      	str	r0, [r5, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800ca8c:	1d28      	adds	r0, r5, #4
 800ca8e:	f008 f833 	bl	8014af8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800ca92:	60ec      	str	r4, [r5, #12]
	if( xTime == ( TickType_t ) 0 )
 800ca94:	b154      	cbz	r4, 800caac <vIPReloadDNSTimer+0x28>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800ca96:	4b08      	ldr	r3, [pc, #32]	; (800cab8 <vIPReloadDNSTimer+0x34>)
 800ca98:	781a      	ldrb	r2, [r3, #0]
 800ca9a:	f36f 0241 	bfc	r2, #1, #1
 800ca9e:	701a      	strb	r2, [r3, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 800caa0:	4a05      	ldr	r2, [pc, #20]	; (800cab8 <vIPReloadDNSTimer+0x34>)
 800caa2:	7813      	ldrb	r3, [r2, #0]
 800caa4:	f043 0301 	orr.w	r3, r3, #1
 800caa8:	7013      	strb	r3, [r2, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800caac:	782b      	ldrb	r3, [r5, #0]
 800caae:	f043 0302 	orr.w	r3, r3, #2
 800cab2:	702b      	strb	r3, [r5, #0]
 800cab4:	e7f4      	b.n	800caa0 <vIPReloadDNSTimer+0x1c>
 800cab6:	bf00      	nop
 800cab8:	2000062c 	.word	0x2000062c

0800cabc <xIPIsNetworkTaskReady>:
}
 800cabc:	4b01      	ldr	r3, [pc, #4]	; (800cac4 <xIPIsNetworkTaskReady+0x8>)
 800cabe:	6818      	ldr	r0, [r3, #0]
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20000658 	.word	0x20000658

0800cac8 <prvValidSocket>:

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
BaseType_t xReturn = pdTRUE;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800cac8:	1e43      	subs	r3, r0, #1
 800caca:	f113 0f03 	cmn.w	r3, #3
 800cace:	d80a      	bhi.n	800cae6 <prvValidSocket+0x1e>
	{
		xReturn = pdFALSE;
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800cad0:	b10a      	cbz	r2, 800cad6 <prvValidSocket+0xe>
 800cad2:	6983      	ldr	r3, [r0, #24]
 800cad4:	b14b      	cbz	r3, 800caea <prvValidSocket+0x22>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800cad6:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
 800cada:	b2c9      	uxtb	r1, r1
 800cadc:	4288      	cmp	r0, r1
 800cade:	bf14      	ite	ne
 800cae0:	2000      	movne	r0, #0
 800cae2:	2001      	moveq	r0, #1
 800cae4:	4770      	bx	lr
		xReturn = pdFALSE;
 800cae6:	2000      	movs	r0, #0
 800cae8:	4770      	bx	lr
		xReturn = pdFALSE;
 800caea:	2000      	movs	r0, #0
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800caec:	4770      	bx	lr

0800caee <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800caee:	b538      	push	{r3, r4, r5, lr}
 800caf0:	4605      	mov	r5, r0
 800caf2:	460c      	mov	r4, r1
const ListItem_t * pxResult = NULL;

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800caf4:	f7ff ffe2 	bl	800cabc <xIPIsNetworkTaskReady>
 800caf8:	b190      	cbz	r0, 800cb20 <pxListFindListItemWithValue+0x32>
 800cafa:	b19d      	cbz	r5, 800cb24 <pxListFindListItemWithValue+0x36>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800cafc:	f105 0208 	add.w	r2, r5, #8
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800cb00:	68e8      	ldr	r0, [r5, #12]
 800cb02:	4282      	cmp	r2, r0
 800cb04:	d010      	beq.n	800cb28 <pxListFindListItemWithValue+0x3a>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800cb06:	6803      	ldr	r3, [r0, #0]
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	d006      	beq.n	800cb1a <pxListFindListItemWithValue+0x2c>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800cb0c:	6840      	ldr	r0, [r0, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800cb0e:	4282      	cmp	r2, r0
 800cb10:	d004      	beq.n	800cb1c <pxListFindListItemWithValue+0x2e>
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800cb12:	6803      	ldr	r3, [r0, #0]
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	d1f9      	bne.n	800cb0c <pxListFindListItemWithValue+0x1e>
			}
		}
	}

	return pxResult;
} /* Tested */
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
const ListItem_t * pxResult = NULL;
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	bd38      	pop	{r3, r4, r5, pc}
 800cb20:	2000      	movs	r0, #0
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	2000      	movs	r0, #0
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	2000      	movs	r0, #0
	return pxResult;
 800cb2a:	e7f5      	b.n	800cb18 <pxListFindListItemWithValue+0x2a>

0800cb2c <prvFindSelectedSocket>:
	{
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	4604      	mov	r4, r0
		xSelectEvent.eEventType = eSocketSelectEvent;
 800cb32:	230a      	movs	r3, #10
 800cb34:	f88d 3008 	strb.w	r3, [sp, #8]
		xSelectEvent.pvData = ( void * ) pxSocketSet;
 800cb38:	9003      	str	r0, [sp, #12]
		xEventGroupClearBits( pxSocketSet->xSelectGroup, eSELECT_CALL_IP );
 800cb3a:	2110      	movs	r1, #16
 800cb3c:	6800      	ldr	r0, [r0, #0]
 800cb3e:	f006 fa3b 	bl	8012fb8 <xEventGroupClearBits>
		if( xSendEventStructToIPTask( &xSelectEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800cb42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cb46:	a802      	add	r0, sp, #8
 800cb48:	f7ff fc6e 	bl	800c428 <xSendEventStructToIPTask>
 800cb4c:	b158      	cbz	r0, 800cb66 <prvFindSelectedSocket+0x3a>
			xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_CALL_IP, pdTRUE, pdFALSE, portMAX_DELAY );
 800cb4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	2300      	movs	r3, #0
 800cb56:	2201      	movs	r2, #1
 800cb58:	2110      	movs	r1, #16
 800cb5a:	6820      	ldr	r0, [r4, #0]
 800cb5c:	f006 f9a8 	bl	8012eb0 <xEventGroupWaitBits>
			xReturn = pxSocketSet->pxSocket;
 800cb60:	68a0      	ldr	r0, [r4, #8]
	}
 800cb62:	b004      	add	sp, #16
 800cb64:	bd10      	pop	{r4, pc}
			xReturn = NULL;
 800cb66:	2000      	movs	r0, #0
		return xReturn;
 800cb68:	e7fb      	b.n	800cb62 <prvFindSelectedSocket+0x36>
	...

0800cb6c <vNetworkSocketsInit>:
{
 800cb6c:	b538      	push	{r3, r4, r5, lr}
	vListInitialise( &xBoundUDPSocketsList );
 800cb6e:	4812      	ldr	r0, [pc, #72]	; (800cbb8 <vNetworkSocketsInit+0x4c>)
 800cb70:	f006 fab2 	bl	80130d8 <vListInitialise>
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800cb74:	f00a fd02 	bl	801757c <uxRand>
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800cb78:	4c10      	ldr	r4, [pc, #64]	; (800cbbc <vNetworkSocketsInit+0x50>)
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800cb7a:	0a43      	lsrs	r3, r0, #9
 800cb7c:	4d10      	ldr	r5, [pc, #64]	; (800cbc0 <vNetworkSocketsInit+0x54>)
 800cb7e:	fba5 2303 	umull	r2, r3, r5, r3
 800cb82:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800cb86:	eba0 2043 	sub.w	r0, r0, r3, lsl #9
 800cb8a:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800cb8e:	8020      	strh	r0, [r4, #0]
		ulNextInitialSequenceNumber = ipconfigRAND32();
 800cb90:	f00a fcf4 	bl	801757c <uxRand>
 800cb94:	4b0b      	ldr	r3, [pc, #44]	; (800cbc4 <vNetworkSocketsInit+0x58>)
 800cb96:	6018      	str	r0, [r3, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800cb98:	f00a fcf0 	bl	801757c <uxRand>
 800cb9c:	0a43      	lsrs	r3, r0, #9
 800cb9e:	fba5 2303 	umull	r2, r3, r5, r3
 800cba2:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800cba6:	eba0 2043 	sub.w	r0, r0, r3, lsl #9
 800cbaa:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800cbae:	8060      	strh	r0, [r4, #2]
		vListInitialise( &xBoundTCPSocketsList );
 800cbb0:	4805      	ldr	r0, [pc, #20]	; (800cbc8 <vNetworkSocketsInit+0x5c>)
 800cbb2:	f006 fa91 	bl	80130d8 <vListInitialise>
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
 800cbb8:	200029a4 	.word	0x200029a4
 800cbbc:	20000698 	.word	0x20000698
 800cbc0:	08421094 	.word	0x08421094
 800cbc4:	200006a0 	.word	0x200006a0
 800cbc8:	20002990 	.word	0x20002990

0800cbcc <FreeRTOS_socket>:
{
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	4615      	mov	r5, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800cbd4:	f7ff ff72 	bl	800cabc <xIPIsNetworkTaskReady>
 800cbd8:	b1f0      	cbz	r0, 800cc18 <FreeRTOS_socket+0x4c>
		configASSERT( xDomain == FREERTOS_AF_INET );
 800cbda:	2e02      	cmp	r6, #2
 800cbdc:	d004      	beq.n	800cbe8 <FreeRTOS_socket+0x1c>
 800cbde:	f44f 718c 	mov.w	r1, #280	; 0x118
 800cbe2:	4843      	ldr	r0, [pc, #268]	; (800ccf0 <FreeRTOS_socket+0x124>)
 800cbe4:	f00a fb5c 	bl	80172a0 <vAssertCalled>
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800cbe8:	4b42      	ldr	r3, [pc, #264]	; (800ccf4 <FreeRTOS_socket+0x128>)
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbf0:	d004      	beq.n	800cbfc <FreeRTOS_socket+0x30>
 800cbf2:	f240 111b 	movw	r1, #283	; 0x11b
 800cbf6:	483e      	ldr	r0, [pc, #248]	; (800ccf0 <FreeRTOS_socket+0x124>)
 800cbf8:	f00a fb52 	bl	80172a0 <vAssertCalled>
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800cbfc:	4b3e      	ldr	r3, [pc, #248]	; (800ccf8 <FreeRTOS_socket+0x12c>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc04:	d004      	beq.n	800cc10 <FreeRTOS_socket+0x44>
 800cc06:	f240 111f 	movw	r1, #287	; 0x11f
 800cc0a:	4839      	ldr	r0, [pc, #228]	; (800ccf0 <FreeRTOS_socket+0x124>)
 800cc0c:	f00a fb48 	bl	80172a0 <vAssertCalled>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800cc10:	2d11      	cmp	r5, #17
 800cc12:	d004      	beq.n	800cc1e <FreeRTOS_socket+0x52>
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800cc14:	2d06      	cmp	r5, #6
 800cc16:	d02c      	beq.n	800cc72 <FreeRTOS_socket+0xa6>
		xReturn = FREERTOS_INVALID_SOCKET;
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xType != FREERTOS_SOCK_DGRAM )
 800cc1e:	2c02      	cmp	r4, #2
 800cc20:	bf14      	ite	ne
 800cc22:	2400      	movne	r4, #0
 800cc24:	2401      	moveq	r4, #1
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800cc26:	264c      	movs	r6, #76	; 0x4c
	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800cc28:	2c00      	cmp	r4, #0
 800cc2a:	d05e      	beq.n	800ccea <FreeRTOS_socket+0x11e>
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f006 fc6b 	bl	8013508 <pvPortMalloc>
		if( pxSocket == NULL )
 800cc32:	4604      	mov	r4, r0
 800cc34:	b320      	cbz	r0, 800cc80 <FreeRTOS_socket+0xb4>
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800cc36:	f006 f92d 	bl	8012e94 <xEventGroupCreate>
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	b338      	cbz	r0, 800cc8e <FreeRTOS_socket+0xc2>
			memset( pxSocket, '\0', uxSocketSize );
 800cc3e:	4632      	mov	r2, r6
 800cc40:	2100      	movs	r1, #0
 800cc42:	4620      	mov	r0, r4
 800cc44:	f00a fdc2 	bl	80177cc <memset>
			pxSocket->xEventGroup = xEventGroup;
 800cc48:	6067      	str	r7, [r4, #4]
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800cc4a:	2d11      	cmp	r5, #17
 800cc4c:	d025      	beq.n	800cc9a <FreeRTOS_socket+0xce>
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800cc4e:	f104 0008 	add.w	r0, r4, #8
 800cc52:	f006 fa4c 	bl	80130ee <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800cc56:	6164      	str	r4, [r4, #20]
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800cc58:	f241 3388 	movw	r3, #5000	; 0x1388
 800cc5c:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800cc5e:	6223      	str	r3, [r4, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800cc60:	2302      	movs	r3, #2
 800cc62:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800cc66:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800cc6a:	2d06      	cmp	r5, #6
 800cc6c:	d02a      	beq.n	800ccc4 <FreeRTOS_socket+0xf8>
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800cc6e:	4620      	mov	r0, r4
	return xReturn;
 800cc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xType != FREERTOS_SOCK_STREAM )
 800cc72:	2c01      	cmp	r4, #1
 800cc74:	bf14      	ite	ne
 800cc76:	2400      	movne	r4, #0
 800cc78:	2401      	moveq	r4, #1
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800cc7a:	f44f 76d0 	mov.w	r6, #416	; 0x1a0
 800cc7e:	e7d3      	b.n	800cc28 <FreeRTOS_socket+0x5c>
			iptraceFAILED_TO_CREATE_SOCKET();
 800cc80:	2100      	movs	r1, #0
 800cc82:	2008      	movs	r0, #8
 800cc84:	f009 fd68 	bl	8016758 <vExampleDebugStatUpdate>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vPortFreeSocket( pxSocket );
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f006 fca0 	bl	80135d4 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800cc9a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800cc9e:	f006 fa1b 	bl	80130d8 <vListInitialise>
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800cca2:	f104 0008 	add.w	r0, r4, #8
 800cca6:	f006 fa22 	bl	80130ee <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800ccaa:	6164      	str	r4, [r4, #20]
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800ccac:	f241 3388 	movw	r3, #5000	; 0x1388
 800ccb0:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800ccb2:	6223      	str	r3, [r4, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800ccba:	2311      	movs	r3, #17
 800ccbc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800ccc4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ccc8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800cccc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800ccd0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ccd4:	66e3      	str	r3, [r4, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800ccd6:	f640 3368 	movw	r3, #2920	; 0xb68
 800ccda:	6723      	str	r3, [r4, #112]	; 0x70
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800ccdc:	2301      	movs	r3, #1
 800ccde:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800cce2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800cce6:	4620      	mov	r0, r4
 800cce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xReturn = FREERTOS_INVALID_SOCKET;
 800ccea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf0:	0801a224 	.word	0x0801a224
 800ccf4:	200029a4 	.word	0x200029a4
 800ccf8:	20002990 	.word	0x20002990

0800ccfc <FreeRTOS_CreateSocketSet>:
	{
 800ccfc:	b510      	push	{r4, lr}
		pxSocketSet = ( SocketSelect_t * ) pvPortMalloc( sizeof( *pxSocketSet ) );
 800ccfe:	200c      	movs	r0, #12
 800cd00:	f006 fc02 	bl	8013508 <pvPortMalloc>
		if( pxSocketSet != NULL )
 800cd04:	4604      	mov	r4, r0
 800cd06:	b138      	cbz	r0, 800cd18 <FreeRTOS_CreateSocketSet+0x1c>
			memset( pxSocketSet, '\0', sizeof( *pxSocketSet ) );
 800cd08:	2300      	movs	r3, #0
 800cd0a:	6003      	str	r3, [r0, #0]
 800cd0c:	6043      	str	r3, [r0, #4]
 800cd0e:	6083      	str	r3, [r0, #8]
			pxSocketSet->xSelectGroup = xEventGroupCreate();
 800cd10:	f006 f8c0 	bl	8012e94 <xEventGroupCreate>
 800cd14:	6020      	str	r0, [r4, #0]
			if( pxSocketSet->xSelectGroup == NULL )
 800cd16:	b108      	cbz	r0, 800cd1c <FreeRTOS_CreateSocketSet+0x20>
	}
 800cd18:	4620      	mov	r0, r4
 800cd1a:	bd10      	pop	{r4, pc}
				vPortFree( ( void* ) pxSocketSet );
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f006 fc59 	bl	80135d4 <vPortFree>
				pxSocketSet = NULL;
 800cd22:	2400      	movs	r4, #0
 800cd24:	e7f8      	b.n	800cd18 <FreeRTOS_CreateSocketSet+0x1c>

0800cd26 <FreeRTOS_DeleteSocketSet>:
	{
 800cd26:	b510      	push	{r4, lr}
 800cd28:	4604      	mov	r4, r0
		vEventGroupDelete( pxSocketSet->xSelectGroup );
 800cd2a:	6800      	ldr	r0, [r0, #0]
 800cd2c:	f006 f9b0 	bl	8013090 <vEventGroupDelete>
		vPortFree( ( void* ) pxSocketSet );
 800cd30:	4620      	mov	r0, r4
 800cd32:	f006 fc4f 	bl	80135d4 <vPortFree>
 800cd36:	bd10      	pop	{r4, pc}

0800cd38 <FreeRTOS_FD_SET>:
	{
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	4614      	mov	r4, r2
		configASSERT( pxSocket != NULL );
 800cd3e:	4605      	mov	r5, r0
 800cd40:	b148      	cbz	r0, 800cd56 <FreeRTOS_FD_SET+0x1e>
		configASSERT( xSocketSet != NULL );
 800cd42:	b176      	cbz	r6, 800cd62 <FreeRTOS_FD_SET+0x2a>
		pxSocket->xSelectBits |= ( xSelectBits & eSELECT_ALL );
 800cd44:	f004 020f 	and.w	r2, r4, #15
 800cd48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	62ea      	str	r2, [r5, #44]	; 0x2c
		if( ( pxSocket->xSelectBits & eSELECT_ALL ) != 0 )
 800cd4e:	f012 0f0f 	tst.w	r2, #15
 800cd52:	d10c      	bne.n	800cd6e <FreeRTOS_FD_SET+0x36>
 800cd54:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxSocket != NULL );
 800cd56:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800cd5a:	4808      	ldr	r0, [pc, #32]	; (800cd7c <FreeRTOS_FD_SET+0x44>)
 800cd5c:	f00a faa0 	bl	80172a0 <vAssertCalled>
 800cd60:	e7ef      	b.n	800cd42 <FreeRTOS_FD_SET+0xa>
		configASSERT( xSocketSet != NULL );
 800cd62:	f240 11d5 	movw	r1, #469	; 0x1d5
 800cd66:	4805      	ldr	r0, [pc, #20]	; (800cd7c <FreeRTOS_FD_SET+0x44>)
 800cd68:	f00a fa9a 	bl	80172a0 <vAssertCalled>
 800cd6c:	e7ea      	b.n	800cd44 <FreeRTOS_FD_SET+0xc>
			pxSocket->pxSocketSet = ( SocketSelect_t * ) xSocketSet;
 800cd6e:	62ae      	str	r6, [r5, #40]	; 0x28
			pxSocketSet->bApiCalled = pdFALSE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	6073      	str	r3, [r6, #4]
			prvFindSelectedSocket( pxSocketSet );
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff fed9 	bl	800cb2c <prvFindSelectedSocket>
	}
 800cd7a:	e7eb      	b.n	800cd54 <FreeRTOS_FD_SET+0x1c>
 800cd7c:	0801a224 	.word	0x0801a224

0800cd80 <FreeRTOS_FD_CLR>:
	{
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	460e      	mov	r6, r1
 800cd84:	4615      	mov	r5, r2
		configASSERT( pxSocket != NULL );
 800cd86:	4604      	mov	r4, r0
 800cd88:	b168      	cbz	r0, 800cda6 <FreeRTOS_FD_CLR+0x26>
		configASSERT( xSocketSet != NULL );
 800cd8a:	b196      	cbz	r6, 800cdb2 <FreeRTOS_FD_CLR+0x32>
		pxSocket->xSelectBits &= ~( xSelectBits & eSELECT_ALL );
 800cd8c:	f005 050f 	and.w	r5, r5, #15
 800cd90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cd92:	ea22 0205 	bic.w	r2, r2, r5
 800cd96:	62e2      	str	r2, [r4, #44]	; 0x2c
		if( ( pxSocket->xSelectBits & eSELECT_ALL ) != 0 )
 800cd98:	f012 0f0f 	tst.w	r2, #15
			pxSocket->pxSocketSet = ( SocketSelect_t *)xSocketSet;
 800cd9c:	bf12      	itee	ne
 800cd9e:	62a6      	strne	r6, [r4, #40]	; 0x28
			pxSocket->pxSocketSet = ( SocketSelect_t *)NULL;
 800cda0:	2300      	moveq	r3, #0
 800cda2:	62a3      	streq	r3, [r4, #40]	; 0x28
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxSocket != NULL );
 800cda6:	f240 11f3 	movw	r1, #499	; 0x1f3
 800cdaa:	4805      	ldr	r0, [pc, #20]	; (800cdc0 <FreeRTOS_FD_CLR+0x40>)
 800cdac:	f00a fa78 	bl	80172a0 <vAssertCalled>
 800cdb0:	e7eb      	b.n	800cd8a <FreeRTOS_FD_CLR+0xa>
		configASSERT( xSocketSet != NULL );
 800cdb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cdb6:	4802      	ldr	r0, [pc, #8]	; (800cdc0 <FreeRTOS_FD_CLR+0x40>)
 800cdb8:	f00a fa72 	bl	80172a0 <vAssertCalled>
 800cdbc:	e7e6      	b.n	800cd8c <FreeRTOS_FD_CLR+0xc>
 800cdbe:	bf00      	nop
 800cdc0:	0801a224 	.word	0x0801a224

0800cdc4 <FreeRTOS_select>:
	{
 800cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	b086      	sub	sp, #24
 800cdca:	460d      	mov	r5, r1
		configASSERT( xSocketSet != NULL );
 800cdcc:	4604      	mov	r4, r0
 800cdce:	b310      	cbz	r0, 800ce16 <FreeRTOS_select+0x52>
		xRemainingTime = xBlockTimeTicks;
 800cdd0:	9503      	str	r5, [sp, #12]
		vTaskSetTimeOutState( &xTimeOut );
 800cdd2:	a804      	add	r0, sp, #16
 800cdd4:	f007 fe90 	bl	8014af8 <vTaskSetTimeOutState>
			xResult = ( BaseType_t ) xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_ALL, pdFALSE, pdFALSE, xRemainingTime );
 800cdd8:	2600      	movs	r6, #0
 800cdda:	270f      	movs	r7, #15
			pxSocketSet->bApiCalled = pdTRUE;
 800cddc:	2501      	movs	r5, #1
			xResult = ( BaseType_t ) xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_ALL, pdFALSE, pdFALSE, xRemainingTime );
 800cdde:	6820      	ldr	r0, [r4, #0]
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	4633      	mov	r3, r6
 800cde6:	4632      	mov	r2, r6
 800cde8:	4639      	mov	r1, r7
 800cdea:	f006 f861 	bl	8012eb0 <xEventGroupWaitBits>
				if( ( xResult & eSELECT_INTR ) != 0u )
 800cdee:	f010 0f08 	tst.w	r0, #8
 800cdf2:	d116      	bne.n	800ce22 <FreeRTOS_select+0x5e>
			pxSocketSet->bApiCalled = pdTRUE;
 800cdf4:	6065      	str	r5, [r4, #4]
			prvFindSelectedSocket( pxSocketSet );
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7ff fe98 	bl	800cb2c <prvFindSelectedSocket>
			xResult = ( BaseType_t ) xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	f006 f8da 	bl	8012fb8 <xEventGroupClearBits>
			if( xResult != 0 )
 800ce04:	4680      	mov	r8, r0
 800ce06:	b988      	cbnz	r0, 800ce2c <FreeRTOS_select+0x68>
			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ce08:	a903      	add	r1, sp, #12
 800ce0a:	a804      	add	r0, sp, #16
 800ce0c:	f007 fe8a 	bl	8014b24 <xTaskCheckForTimeOut>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d0e4      	beq.n	800cdde <FreeRTOS_select+0x1a>
 800ce14:	e00a      	b.n	800ce2c <FreeRTOS_select+0x68>
		configASSERT( xSocketSet != NULL );
 800ce16:	f240 212d 	movw	r1, #557	; 0x22d
 800ce1a:	4806      	ldr	r0, [pc, #24]	; (800ce34 <FreeRTOS_select+0x70>)
 800ce1c:	f00a fa40 	bl	80172a0 <vAssertCalled>
 800ce20:	e7d6      	b.n	800cdd0 <FreeRTOS_select+0xc>
			xResult = ( BaseType_t ) xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_ALL, pdFALSE, pdFALSE, xRemainingTime );
 800ce22:	4680      	mov	r8, r0
					xEventGroupClearBits( pxSocketSet->xSelectGroup, eSELECT_INTR );
 800ce24:	2108      	movs	r1, #8
 800ce26:	6820      	ldr	r0, [r4, #0]
 800ce28:	f006 f8c6 	bl	8012fb8 <xEventGroupClearBits>
	}
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	b006      	add	sp, #24
 800ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce34:	0801a224 	.word	0x0801a224

0800ce38 <FreeRTOS_recvfrom>:
{
 800ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	b086      	sub	sp, #24
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4689      	mov	r9, r1
 800ce42:	4692      	mov	sl, r2
 800ce44:	4698      	mov	r8, r3
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800ce46:	2300      	movs	r3, #0
 800ce48:	9305      	str	r3, [sp, #20]
	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	2111      	movs	r1, #17
 800ce4e:	f7ff fe3b 	bl	800cac8 <prvValidSocket>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d05a      	beq.n	800cf0c <FreeRTOS_recvfrom+0xd4>
	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800ce56:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	while( lPacketCount == 0 )
 800ce58:	2d00      	cmp	r5, #0
 800ce5a:	d15a      	bne.n	800cf12 <FreeRTOS_recvfrom+0xda>
 800ce5c:	2300      	movs	r3, #0
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800ce5e:	f008 0710 	and.w	r7, r8, #16
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800ce62:	461e      	mov	r6, r3
 800ce64:	e025      	b.n	800ceb2 <FreeRTOS_recvfrom+0x7a>
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800ce66:	6860      	ldr	r0, [r4, #4]
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	2140      	movs	r1, #64	; 0x40
 800ce6e:	f006 f81f 	bl	8012eb0 <xEventGroupWaitBits>
 800ce72:	4605      	mov	r5, r0
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800ce74:	f015 0f40 	tst.w	r5, #64	; 0x40
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800ce78:	bf18      	it	ne
 800ce7a:	f06f 0403 	mvnne.w	r4, #3
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800ce7e:	d03e      	beq.n	800cefe <FreeRTOS_recvfrom+0xc6>
}
 800ce80:	4620      	mov	r0, r4
 800ce82:	b006      	add	sp, #24
 800ce84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800ce88:	9b05      	ldr	r3, [sp, #20]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	4633      	mov	r3, r6
 800ce8e:	2201      	movs	r2, #1
 800ce90:	2141      	movs	r1, #65	; 0x41
 800ce92:	6860      	ldr	r0, [r4, #4]
 800ce94:	f006 f80c 	bl	8012eb0 <xEventGroupWaitBits>
 800ce98:	4605      	mov	r5, r0
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800ce9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce9e:	d114      	bne.n	800ceca <FreeRTOS_recvfrom+0x92>
		if( lPacketCount != 0 )
 800cea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d135      	bne.n	800cf12 <FreeRTOS_recvfrom+0xda>
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800cea6:	a905      	add	r1, sp, #20
 800cea8:	a803      	add	r0, sp, #12
 800ceaa:	f007 fe3b 	bl	8014b24 <xTaskCheckForTimeOut>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	bb28      	cbnz	r0, 800cefe <FreeRTOS_recvfrom+0xc6>
		if( xTimed == pdFALSE )
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e8      	bne.n	800ce88 <FreeRTOS_recvfrom+0x50>
			xRemainingTime = pxSocket->xReceiveBlockTime;
 800ceb6:	69e3      	ldr	r3, [r4, #28]
 800ceb8:	9305      	str	r3, [sp, #20]
			if( xRemainingTime == ( TickType_t ) 0 )
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d0d3      	beq.n	800ce66 <FreeRTOS_recvfrom+0x2e>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800cebe:	2f00      	cmp	r7, #0
 800cec0:	d1d8      	bne.n	800ce74 <FreeRTOS_recvfrom+0x3c>
			vTaskSetTimeOutState( &xTimeOut );
 800cec2:	a803      	add	r0, sp, #12
 800cec4:	f007 fe18 	bl	8014af8 <vTaskSetTimeOutState>
 800cec8:	e7de      	b.n	800ce88 <FreeRTOS_recvfrom+0x50>
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800ceca:	f010 0f01 	tst.w	r0, #1
 800cece:	d102      	bne.n	800ced6 <FreeRTOS_recvfrom+0x9e>
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800ced0:	f06f 0403 	mvn.w	r4, #3
 800ced4:	e7d4      	b.n	800ce80 <FreeRTOS_recvfrom+0x48>
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800ced6:	2101      	movs	r1, #1
 800ced8:	6860      	ldr	r0, [r4, #4]
 800ceda:	f006 f88d 	bl	8012ff8 <xEventGroupSetBits>
 800cede:	e7f7      	b.n	800ced0 <FreeRTOS_recvfrom+0x98>
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800cee0:	4628      	mov	r0, r5
 800cee2:	f006 f92d 	bl	8013140 <uxListRemove>
 800cee6:	e01b      	b.n	800cf20 <FreeRTOS_recvfrom+0xe8>
				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
 800cee8:	2100      	movs	r1, #0
 800ceea:	2009      	movs	r0, #9
 800ceec:	f009 fc34 	bl	8016758 <vExampleDebugStatUpdate>
				lReturn = ( int32_t )xBufferLength;
 800cef0:	4654      	mov	r4, sl
 800cef2:	e024      	b.n	800cf3e <FreeRTOS_recvfrom+0x106>
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800cef4:	69ab      	ldr	r3, [r5, #24]
 800cef6:	332a      	adds	r3, #42	; 0x2a
 800cef8:	f8c9 3000 	str.w	r3, [r9]
 800cefc:	e7c0      	b.n	800ce80 <FreeRTOS_recvfrom+0x48>
		iptraceRECVFROM_TIMEOUT();
 800cefe:	2100      	movs	r1, #0
 800cf00:	200d      	movs	r0, #13
 800cf02:	f009 fc29 	bl	8016758 <vExampleDebugStatUpdate>
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800cf06:	f06f 040a 	mvn.w	r4, #10
 800cf0a:	e7b9      	b.n	800ce80 <FreeRTOS_recvfrom+0x48>
		return -pdFREERTOS_ERRNO_EINVAL;
 800cf0c:	f06f 0415 	mvn.w	r4, #21
 800cf10:	e7b6      	b.n	800ce80 <FreeRTOS_recvfrom+0x48>
		taskENTER_CRITICAL();
 800cf12:	f006 f96f 	bl	80131f4 <vPortEnterCritical>
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800cf16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf18:	68dd      	ldr	r5, [r3, #12]
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800cf1a:	f018 0604 	ands.w	r6, r8, #4
 800cf1e:	d0df      	beq.n	800cee0 <FreeRTOS_recvfrom+0xa8>
		taskEXIT_CRITICAL();
 800cf20:	f006 f98a 	bl	8013238 <vPortExitCritical>
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 800cf24:	69ec      	ldr	r4, [r5, #28]
		if( pxSourceAddress != NULL )
 800cf26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf28:	b123      	cbz	r3, 800cf34 <FreeRTOS_recvfrom+0xfc>
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800cf2a:	8c2b      	ldrh	r3, [r5, #32]
 800cf2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf2e:	8053      	strh	r3, [r2, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800cf30:	696b      	ldr	r3, [r5, #20]
 800cf32:	6053      	str	r3, [r2, #4]
		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800cf34:	f018 0f01 	tst.w	r8, #1
 800cf38:	d1dc      	bne.n	800cef4 <FreeRTOS_recvfrom+0xbc>
			if( lReturn > ( int32_t ) xBufferLength )
 800cf3a:	4554      	cmp	r4, sl
 800cf3c:	dcd4      	bgt.n	800cee8 <FreeRTOS_recvfrom+0xb0>
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 800cf3e:	69a9      	ldr	r1, [r5, #24]
 800cf40:	4622      	mov	r2, r4
 800cf42:	312a      	adds	r1, #42	; 0x2a
 800cf44:	4648      	mov	r0, r9
 800cf46:	f00a fc1c 	bl	8017782 <memcpy>
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800cf4a:	2e00      	cmp	r6, #0
 800cf4c:	d198      	bne.n	800ce80 <FreeRTOS_recvfrom+0x48>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800cf4e:	4628      	mov	r0, r5
 800cf50:	f003 faf0 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
 800cf54:	e794      	b.n	800ce80 <FreeRTOS_recvfrom+0x48>

0800cf56 <FreeRTOS_bind>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800cf56:	1e43      	subs	r3, r0, #1
 800cf58:	f113 0f03 	cmn.w	r3, #3
 800cf5c:	d829      	bhi.n	800cfb2 <FreeRTOS_bind+0x5c>
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 800cf5e:	6983      	ldr	r3, [r0, #24]
 800cf60:	bb53      	cbnz	r3, 800cfb8 <FreeRTOS_bind+0x62>
{
 800cf62:	b510      	push	{r4, lr}
 800cf64:	b084      	sub	sp, #16
		xBindEvent.eEventType = eSocketBindEvent;
 800cf66:	2308      	movs	r3, #8
 800cf68:	f88d 3008 	strb.w	r3, [sp, #8]
		xBindEvent.pvData = ( void * ) xSocket;
 800cf6c:	9003      	str	r0, [sp, #12]
		if( pxAddress != NULL )
 800cf6e:	b1e9      	cbz	r1, 800cfac <FreeRTOS_bind+0x56>
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800cf70:	884a      	ldrh	r2, [r1, #2]
 800cf72:	fa22 f303 	lsr.w	r3, r2, r3
 800cf76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf7a:	8483      	strh	r3, [r0, #36]	; 0x24
 800cf7c:	4604      	mov	r4, r0
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800cf7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf82:	a802      	add	r0, sp, #8
 800cf84:	f7ff fa50 	bl	800c428 <xSendEventStructToIPTask>
 800cf88:	b1c8      	cbz	r0, 800cfbe <FreeRTOS_bind+0x68>
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	2300      	movs	r3, #0
 800cf92:	2201      	movs	r2, #1
 800cf94:	2110      	movs	r1, #16
 800cf96:	6860      	ldr	r0, [r4, #4]
 800cf98:	f005 ff8a 	bl	8012eb0 <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800cf9c:	69a3      	ldr	r3, [r4, #24]
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bf14      	ite	ne
 800cfa2:	2000      	movne	r0, #0
 800cfa4:	f06f 0015 	mvneq.w	r0, #21
}
 800cfa8:	b004      	add	sp, #16
 800cfaa:	bd10      	pop	{r4, pc}
			pxSocket->usLocalPort = 0u;
 800cfac:	2300      	movs	r3, #0
 800cfae:	8483      	strh	r3, [r0, #36]	; 0x24
 800cfb0:	e7e4      	b.n	800cf7c <FreeRTOS_bind+0x26>
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cfb2:	f06f 0015 	mvn.w	r0, #21
 800cfb6:	4770      	bx	lr
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800cfb8:	f06f 0015 	mvn.w	r0, #21
 800cfbc:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800cfbe:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800cfc2:	e7f1      	b.n	800cfa8 <FreeRTOS_bind+0x52>

0800cfc4 <FreeRTOS_sendto>:
{
 800cfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	b087      	sub	sp, #28
 800cfca:	4607      	mov	r7, r0
 800cfcc:	4614      	mov	r4, r2
 800cfce:	461e      	mov	r6, r3
 800cfd0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	f88d 3010 	strb.w	r3, [sp, #16]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	9305      	str	r3, [sp, #20]
	configASSERT( pvBuffer );
 800cfde:	4689      	mov	r9, r1
 800cfe0:	b339      	cbz	r1, 800d032 <FreeRTOS_sendto+0x6e>
	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 800cfe2:	f5b4 6fb8 	cmp.w	r4, #1472	; 0x5c0
 800cfe6:	d865      	bhi.n	800d0b4 <FreeRTOS_sendto+0xf0>
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	b343      	cbz	r3, 800d03e <FreeRTOS_sendto+0x7a>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800cfec:	f016 0f10 	tst.w	r6, #16
			xTicksToWait = pxSocket->xSendBlockTime;
 800cff0:	bf0c      	ite	eq
 800cff2:	6a3b      	ldreq	r3, [r7, #32]
				xTicksToWait = ( TickType_t ) 0;
 800cff4:	2300      	movne	r3, #0
 800cff6:	9301      	str	r3, [sp, #4]
			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800cff8:	f016 0601 	ands.w	r6, r6, #1
 800cffc:	d12c      	bne.n	800d058 <FreeRTOS_sendto+0x94>
				vTaskSetTimeOutState( &xTimeOut );
 800cffe:	a802      	add	r0, sp, #8
 800d000:	f007 fd7a 	bl	8014af8 <vTaskSetTimeOutState>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800d004:	9901      	ldr	r1, [sp, #4]
 800d006:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800d00a:	f003 fab9 	bl	8010580 <pxGetNetworkBufferWithDescriptor>
				if( pxNetworkBuffer != NULL )
 800d00e:	4605      	mov	r5, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	d049      	beq.n	800d0a8 <FreeRTOS_sendto+0xe4>
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800d014:	6980      	ldr	r0, [r0, #24]
 800d016:	4622      	mov	r2, r4
 800d018:	4649      	mov	r1, r9
 800d01a:	302a      	adds	r0, #42	; 0x2a
 800d01c:	f00a fbb1 	bl	8017782 <memcpy>
					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800d020:	a901      	add	r1, sp, #4
 800d022:	a802      	add	r0, sp, #8
 800d024:	f007 fd7e 	bl	8014b24 <xTaskCheckForTimeOut>
 800d028:	2801      	cmp	r0, #1
 800d02a:	d11a      	bne.n	800d062 <FreeRTOS_sendto+0x9e>
						xTicksToWait = ( TickType_t ) 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	e017      	b.n	800d062 <FreeRTOS_sendto+0x9e>
	configASSERT( pvBuffer );
 800d032:	f240 313d 	movw	r1, #829	; 0x33d
 800d036:	4822      	ldr	r0, [pc, #136]	; (800d0c0 <FreeRTOS_sendto+0xfc>)
 800d038:	f00a f932 	bl	80172a0 <vAssertCalled>
 800d03c:	e7d1      	b.n	800cfe2 <FreeRTOS_sendto+0x1e>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 800d03e:	2200      	movs	r2, #0
 800d040:	4611      	mov	r1, r2
 800d042:	4638      	mov	r0, r7
 800d044:	f7ff ff87 	bl	800cf56 <FreeRTOS_bind>
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800d048:	2800      	cmp	r0, #0
 800d04a:	d0cf      	beq.n	800cfec <FreeRTOS_sendto+0x28>
			iptraceSENDTO_SOCKET_NOT_BOUND();
 800d04c:	2100      	movs	r1, #0
 800d04e:	200f      	movs	r0, #15
 800d050:	f009 fb82 	bl	8016758 <vExampleDebugStatUpdate>
int32_t lReturn = 0;
 800d054:	2000      	movs	r0, #0
 800d056:	e01e      	b.n	800d096 <FreeRTOS_sendto+0xd2>
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 800d058:	4648      	mov	r0, r9
 800d05a:	f7ff f8f5 	bl	800c248 <pxUDPPayloadBuffer_to_NetworkBuffer>
			if( pxNetworkBuffer != NULL )
 800d05e:	4605      	mov	r5, r0
 800d060:	b310      	cbz	r0, 800d0a8 <FreeRTOS_sendto+0xe4>
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 800d062:	61ec      	str	r4, [r5, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800d064:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800d068:	842b      	strh	r3, [r5, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	846b      	strh	r3, [r5, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800d06e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d072:	616b      	str	r3, [r5, #20]
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800d074:	69ab      	ldr	r3, [r5, #24]
 800d076:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d07a:	719a      	strb	r2, [r3, #6]
				xStackTxEvent.pvData = pxNetworkBuffer;
 800d07c:	9505      	str	r5, [sp, #20]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800d07e:	9901      	ldr	r1, [sp, #4]
 800d080:	a804      	add	r0, sp, #16
 800d082:	f7ff f9d1 	bl	800c428 <xSendEventStructToIPTask>
 800d086:	2801      	cmp	r0, #1
 800d088:	d008      	beq.n	800d09c <FreeRTOS_sendto+0xd8>
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800d08a:	b14e      	cbz	r6, 800d0a0 <FreeRTOS_sendto+0xdc>
					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
 800d08c:	2100      	movs	r1, #0
 800d08e:	200b      	movs	r0, #11
 800d090:	f009 fb62 	bl	8016758 <vExampleDebugStatUpdate>
int32_t lReturn = 0;
 800d094:	2000      	movs	r0, #0
} /* Tested */
 800d096:	b007      	add	sp, #28
 800d098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					lReturn = ( int32_t ) xTotalDataLength;
 800d09c:	4620      	mov	r0, r4
 800d09e:	e7fa      	b.n	800d096 <FreeRTOS_sendto+0xd2>
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f003 fa47 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
 800d0a6:	e7f1      	b.n	800d08c <FreeRTOS_sendto+0xc8>
				iptraceNO_BUFFER_FOR_SENDTO();
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	2010      	movs	r0, #16
 800d0ac:	f009 fb54 	bl	8016758 <vExampleDebugStatUpdate>
int32_t lReturn = 0;
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e7f0      	b.n	800d096 <FreeRTOS_sendto+0xd2>
		iptraceSENDTO_DATA_TOO_LONG();
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	200e      	movs	r0, #14
 800d0b8:	f009 fb4e 	bl	8016758 <vExampleDebugStatUpdate>
int32_t lReturn = 0;
 800d0bc:	2000      	movs	r0, #0
	return lReturn;
 800d0be:	e7ea      	b.n	800d096 <FreeRTOS_sendto+0xd2>
 800d0c0:	0801a224 	.word	0x0801a224

0800d0c4 <vSocketBind>:
{
 800d0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	4688      	mov	r8, r1
 800d0ce:	469a      	mov	sl, r3
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d0d0:	f890 9027 	ldrb.w	r9, [r0, #39]	; 0x27
		pxSocketList = &xBoundUDPSocketsList;
 800d0d4:	4b39      	ldr	r3, [pc, #228]	; (800d1bc <vSocketBind+0xf8>)
 800d0d6:	4a3a      	ldr	r2, [pc, #232]	; (800d1c0 <vSocketBind+0xfc>)
 800d0d8:	f1b9 0f06 	cmp.w	r9, #6
 800d0dc:	bf0c      	ite	eq
 800d0de:	4691      	moveq	r9, r2
 800d0e0:	4699      	movne	r9, r3
	configASSERT( pxSocket );
 800d0e2:	b340      	cbz	r0, 800d136 <vSocketBind+0x72>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800d0e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d0e8:	d02b      	beq.n	800d142 <vSocketBind+0x7e>
		if( pxAddress == NULL )
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	d02e      	beq.n	800d14e <vSocketBind+0x8a>
		if( pxAddress->sin_port == 0u )
 800d0f0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800d0f4:	b38b      	cbz	r3, 800d15a <vSocketBind+0x96>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d0f6:	f1ba 0f00 	cmp.w	sl, #0
 800d0fa:	d003      	beq.n	800d104 <vSocketBind+0x40>
 800d0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d100:	2b06      	cmp	r3, #6
 800d102:	d006      	beq.n	800d112 <vSocketBind+0x4e>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800d104:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800d108:	4648      	mov	r0, r9
 800d10a:	f7ff fcf0 	bl	800caee <pxListFindListItemWithValue>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d10e:	2800      	cmp	r0, #0
 800d110:	d14c      	bne.n	800d1ac <vSocketBind+0xe8>
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800d112:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800d116:	60bb      	str	r3, [r7, #8]
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800d118:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800d11c:	0a13      	lsrs	r3, r2, #8
 800d11e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d122:	84bb      	strh	r3, [r7, #36]	; 0x24
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800d124:	f107 0108 	add.w	r1, r7, #8
 800d128:	4648      	mov	r0, r9
 800d12a:	f005 ffe3 	bl	80130f4 <vListInsertEnd>
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800d12e:	2000      	movs	r0, #0
} /* Tested */
 800d130:	b005      	add	sp, #20
 800d132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( pxSocket );
 800d136:	f240 4115 	movw	r1, #1045	; 0x415
 800d13a:	4822      	ldr	r0, [pc, #136]	; (800d1c4 <vSocketBind+0x100>)
 800d13c:	f00a f8b0 	bl	80172a0 <vAssertCalled>
 800d140:	e7d3      	b.n	800d0ea <vSocketBind+0x26>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800d142:	f240 4116 	movw	r1, #1046	; 0x416
 800d146:	481f      	ldr	r0, [pc, #124]	; (800d1c4 <vSocketBind+0x100>)
 800d148:	f00a f8aa 	bl	80172a0 <vAssertCalled>
 800d14c:	e7cd      	b.n	800d0ea <vSocketBind+0x26>
			pxAddress->sin_port = 0u;
 800d14e:	2300      	movs	r3, #0
 800d150:	f8ad 300a 	strh.w	r3, [sp, #10]
			pxAddress = &xAddress;
 800d154:	f10d 0808 	add.w	r8, sp, #8
 800d158:	e7ca      	b.n	800d0f0 <vSocketBind+0x2c>
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800d15a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		pxList = &xBoundUDPSocketsList;
 800d15e:	4a17      	ldr	r2, [pc, #92]	; (800d1bc <vSocketBind+0xf8>)
 800d160:	4917      	ldr	r1, [pc, #92]	; (800d1c0 <vSocketBind+0xfc>)
 800d162:	2b06      	cmp	r3, #6
 800d164:	bf18      	it	ne
 800d166:	4611      	movne	r1, r2
 800d168:	9101      	str	r1, [sp, #4]
 800d16a:	2b06      	cmp	r3, #6
 800d16c:	bf0c      	ite	eq
 800d16e:	2601      	moveq	r6, #1
 800d170:	2600      	movne	r6, #0
		++( usNextPortToUse[ xIndex ] );
 800d172:	4d15      	ldr	r5, [pc, #84]	; (800d1c8 <vSocketBind+0x104>)
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800d174:	f44f 4b41 	mov.w	fp, #49408	; 0xc100
		++( usNextPortToUse[ xIndex ] );
 800d178:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
 800d17c:	3301      	adds	r3, #1
 800d17e:	b29b      	uxth	r3, r3
		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 800d180:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
		++( usNextPortToUse[ xIndex ] );
 800d184:	bf34      	ite	cc
 800d186:	f825 3016 	strhcc.w	r3, [r5, r6, lsl #1]
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800d18a:	f825 b016 	strhcs.w	fp, [r5, r6, lsl #1]
		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 800d18e:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
 800d192:	0a1c      	lsrs	r4, r3, #8
 800d194:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800d198:	b2a4      	uxth	r4, r4
		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 800d19a:	4621      	mov	r1, r4
 800d19c:	9801      	ldr	r0, [sp, #4]
 800d19e:	f7ff fca6 	bl	800caee <pxListFindListItemWithValue>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d1e8      	bne.n	800d178 <vSocketBind+0xb4>
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800d1a6:	f8a8 4002 	strh.w	r4, [r8, #2]
 800d1aa:	e7a4      	b.n	800d0f6 <vSocketBind+0x32>
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	200c      	movs	r0, #12
 800d1b0:	f009 fad2 	bl	8016758 <vExampleDebugStatUpdate>
 800d1b4:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 800d1b8:	e7ba      	b.n	800d130 <vSocketBind+0x6c>
 800d1ba:	bf00      	nop
 800d1bc:	200029a4 	.word	0x200029a4
 800d1c0:	20002990 	.word	0x20002990
 800d1c4:	0801a224 	.word	0x0801a224
 800d1c8:	20000698 	.word	0x20000698

0800d1cc <FreeRTOS_closesocket>:
{
 800d1cc:	b500      	push	{lr}
 800d1ce:	b083      	sub	sp, #12
xCloseEvent.eEventType = eSocketCloseEvent;
 800d1d0:	2309      	movs	r3, #9
 800d1d2:	f88d 3000 	strb.w	r3, [sp]
xCloseEvent.pvData = ( void * ) xSocket;
 800d1d6:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800d1d8:	3801      	subs	r0, #1
 800d1da:	f110 0f03 	cmn.w	r0, #3
 800d1de:	d903      	bls.n	800d1e8 <FreeRTOS_closesocket+0x1c>
		xResult = 0;
 800d1e0:	2000      	movs	r0, #0
}
 800d1e2:	b003      	add	sp, #12
 800d1e4:	f85d fb04 	ldr.w	pc, [sp], #4
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	4668      	mov	r0, sp
 800d1ec:	f7ff f91c 	bl	800c428 <xSendEventStructToIPTask>
 800d1f0:	2800      	cmp	r0, #0
			xResult = 1;
 800d1f2:	bf0c      	ite	eq
 800d1f4:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 800d1f8:	2001      	movne	r0, #1
 800d1fa:	e7f2      	b.n	800d1e2 <FreeRTOS_closesocket+0x16>

0800d1fc <vSocketClose>:
{
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4604      	mov	r4, r0
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d200:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800d204:	2b06      	cmp	r3, #6
 800d206:	d00f      	beq.n	800d228 <vSocketClose+0x2c>
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800d208:	69a3      	ldr	r3, [r4, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d137      	bne.n	800d27e <vSocketClose+0x82>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d20e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800d212:	2b11      	cmp	r3, #17
 800d214:	d038      	beq.n	800d288 <vSocketClose+0x8c>
	if( pxSocket->xEventGroup )
 800d216:	6860      	ldr	r0, [r4, #4]
 800d218:	b108      	cbz	r0, 800d21e <vSocketClose+0x22>
		vEventGroupDelete( pxSocket->xEventGroup );
 800d21a:	f005 ff39 	bl	8013090 <vEventGroupDelete>
	vPortFreeSocket( pxSocket );
 800d21e:	4620      	mov	r0, r4
 800d220:	f006 f9d8 	bl	80135d4 <vPortFree>
} /* Tested */
 800d224:	2000      	movs	r0, #0
 800d226:	bd38      	pop	{r3, r4, r5, pc}
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d228:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800d22a:	b108      	cbz	r0, 800d230 <vSocketClose+0x34>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d22c:	f003 f982 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800d230:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 800d234:	f002 fdb9 	bl	800fdaa <vTCPWindowDestroy>
			if( pxSocket->u.xTCP.rxStream != NULL )
 800d238:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d23a:	b108      	cbz	r0, 800d240 <vSocketClose+0x44>
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800d23c:	f006 f9ca 	bl	80135d4 <vPortFree>
			if( pxSocket->u.xTCP.txStream != NULL )
 800d240:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d242:	b108      	cbz	r0, 800d248 <vSocketClose+0x4c>
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800d244:	f006 f9c6 	bl	80135d4 <vPortFree>
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800d248:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800d24a:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <vSocketClose+0xac>)
 800d24c:	68d3      	ldr	r3, [r2, #12]
 800d24e:	3208      	adds	r2, #8
 800d250:	4293      	cmp	r3, r2
 800d252:	d0d9      	beq.n	800d208 <vSocketClose+0xc>
 800d254:	4610      	mov	r0, r2
 800d256:	e002      	b.n	800d25e <vSocketClose+0x62>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800d258:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800d25a:	4283      	cmp	r3, r0
 800d25c:	d0d4      	beq.n	800d208 <vSocketClose+0xc>
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800d25e:	68da      	ldr	r2, [r3, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800d260:	f892 1053 	ldrb.w	r1, [r2, #83]	; 0x53
 800d264:	2901      	cmp	r1, #1
 800d266:	d1f7      	bne.n	800d258 <vSocketClose+0x5c>
 800d268:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800d26a:	42a9      	cmp	r1, r5
 800d26c:	d1f4      	bne.n	800d258 <vSocketClose+0x5c>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800d26e:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800d272:	2900      	cmp	r1, #0
 800d274:	d0f0      	beq.n	800d258 <vSocketClose+0x5c>
				pxOtherSocket->u.xTCP.usChildCount--;
 800d276:	3901      	subs	r1, #1
 800d278:	f8a2 104e 	strh.w	r1, [r2, #78]	; 0x4e
 800d27c:	e7c4      	b.n	800d208 <vSocketClose+0xc>
		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800d27e:	f104 0008 	add.w	r0, r4, #8
 800d282:	f005 ff5d 	bl	8013140 <uxListRemove>
 800d286:	e7c2      	b.n	800d20e <vSocketClose+0x12>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800d288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0c3      	beq.n	800d216 <vSocketClose+0x1a>
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800d28e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d290:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800d292:	4628      	mov	r0, r5
 800d294:	f005 ff54 	bl	8013140 <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d298:	4628      	mov	r0, r5
 800d29a:	f003 f94b 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800d29e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1f4      	bne.n	800d28e <vSocketClose+0x92>
 800d2a4:	e7b7      	b.n	800d216 <vSocketClose+0x1a>
 800d2a6:	bf00      	nop
 800d2a8:	20002990 	.word	0x20002990

0800d2ac <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800d2ac:	b510      	push	{r4, lr}

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	4807      	ldr	r0, [pc, #28]	; (800d2d0 <pxUDPSocketLookup+0x24>)
 800d2b2:	f7ff fc1c 	bl	800caee <pxListFindListItemWithValue>

	if( pxListItem != NULL )
 800d2b6:	b148      	cbz	r0, 800d2cc <pxUDPSocketLookup+0x20>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800d2b8:	68c4      	ldr	r4, [r0, #12]
		configASSERT( pxSocket != NULL );
 800d2ba:	b10c      	cbz	r4, 800d2c0 <pxUDPSocketLookup+0x14>
	}
	return pxSocket;
}
 800d2bc:	4620      	mov	r0, r4
 800d2be:	bd10      	pop	{r4, pc}
		configASSERT( pxSocket != NULL );
 800d2c0:	f240 61d1 	movw	r1, #1745	; 0x6d1
 800d2c4:	4803      	ldr	r0, [pc, #12]	; (800d2d4 <pxUDPSocketLookup+0x28>)
 800d2c6:	f009 ffeb 	bl	80172a0 <vAssertCalled>
 800d2ca:	e7f7      	b.n	800d2bc <pxUDPSocketLookup+0x10>
FreeRTOS_Socket_t *pxSocket = NULL;
 800d2cc:	2400      	movs	r4, #0
	return pxSocket;
 800d2ce:	e7f5      	b.n	800d2bc <pxUDPSocketLookup+0x10>
 800d2d0:	200029a4 	.word	0x200029a4
 800d2d4:	0801a224 	.word	0x0801a224

0800d2d8 <FreeRTOS_inet_addr>:
/*-----------------------------------------------------------*/

#if ipconfigINCLUDE_FULL_INET_ADDR == 1

	uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
	{
 800d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	ad01      	add	r5, sp, #4
 800d2de:	4686      	mov	lr, r0
	const char *pcPointerOnEntering;
	uint32_t ulReturn = 0UL, ulValue;
	UBaseType_t uxOctetNumber;
	BaseType_t xResult = pdPASS;

		for( uxOctetNumber = 0u; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800d2e0:	2400      	movs	r4, #0
		{
			ulValue = 0ul;
			pcPointerOnEntering = pcIPAddress;

			while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800d2e2:	4626      	mov	r6, r4
			}

			/* Check characters were read. */
			if( pcIPAddress == pcPointerOnEntering )
			{
				xResult = pdFAIL;
 800d2e4:	4627      	mov	r7, r4
 800d2e6:	e004      	b.n	800d2f2 <FreeRTOS_inet_addr+0x1a>
						pcIPAddress++;
					}
				}
			}

			if( xResult == pdFAIL )
 800d2e8:	b381      	cbz	r1, 800d34c <FreeRTOS_inet_addr+0x74>
		for( uxOctetNumber = 0u; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800d2ea:	3401      	adds	r4, #1
 800d2ec:	2c04      	cmp	r4, #4
 800d2ee:	d02d      	beq.n	800d34c <FreeRTOS_inet_addr+0x74>
 800d2f0:	4686      	mov	lr, r0
			while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800d2f2:	7802      	ldrb	r2, [r0, #0]
 800d2f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	2b09      	cmp	r3, #9
 800d2fc:	bf98      	it	ls
 800d2fe:	4633      	movls	r3, r6
 800d300:	d819      	bhi.n	800d336 <FreeRTOS_inet_addr+0x5e>
				ulValue *= ulDecimalBase;
 800d302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				ulValue += ( ( uint32_t ) ( *pcIPAddress ) - ( uint32_t ) '0' );
 800d306:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d30a:	3b30      	subs	r3, #48	; 0x30
			while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800d30c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800d310:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d314:	b2c9      	uxtb	r1, r1
 800d316:	2909      	cmp	r1, #9
 800d318:	d9f3      	bls.n	800d302 <FreeRTOS_inet_addr+0x2a>
			if( pcIPAddress == pcPointerOnEntering )
 800d31a:	ebb0 010e 	subs.w	r1, r0, lr
 800d31e:	bf18      	it	ne
 800d320:	2101      	movne	r1, #1
			if( ulValue > 0xffUL )
 800d322:	2bff      	cmp	r3, #255	; 0xff
 800d324:	d811      	bhi.n	800d34a <FreeRTOS_inet_addr+0x72>
				ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
 800d326:	f805 3b01 	strb.w	r3, [r5], #1
				if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1u ) )
 800d32a:	2c02      	cmp	r4, #2
 800d32c:	d8dc      	bhi.n	800d2e8 <FreeRTOS_inet_addr+0x10>
					if( *pcIPAddress != '.' )
 800d32e:	2a2e      	cmp	r2, #46	; 0x2e
 800d330:	d10b      	bne.n	800d34a <FreeRTOS_inet_addr+0x72>
						pcIPAddress++;
 800d332:	3001      	adds	r0, #1
 800d334:	e7d8      	b.n	800d2e8 <FreeRTOS_inet_addr+0x10>
			while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800d336:	4633      	mov	r3, r6
				xResult = pdFAIL;
 800d338:	4639      	mov	r1, r7
 800d33a:	e7f4      	b.n	800d326 <FreeRTOS_inet_addr+0x4e>
	uint32_t ulReturn = 0UL, ulValue;
 800d33c:	2000      	movs	r0, #0
		{
			ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
		}

		return ulReturn;
	}
 800d33e:	b003      	add	sp, #12
 800d340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ulReturn = 0UL, ulValue;
 800d342:	2000      	movs	r0, #0
 800d344:	e7fb      	b.n	800d33e <FreeRTOS_inet_addr+0x66>
 800d346:	2000      	movs	r0, #0
		return ulReturn;
 800d348:	e7f9      	b.n	800d33e <FreeRTOS_inet_addr+0x66>
		for( uxOctetNumber = 0u; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800d34a:	2100      	movs	r1, #0
		if( *pcIPAddress != ( char ) 0 )
 800d34c:	7803      	ldrb	r3, [r0, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1f4      	bne.n	800d33c <FreeRTOS_inet_addr+0x64>
		if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
 800d352:	2c04      	cmp	r4, #4
 800d354:	d1f5      	bne.n	800d342 <FreeRTOS_inet_addr+0x6a>
		if( xResult == pdPASS )
 800d356:	2900      	cmp	r1, #0
 800d358:	d0f5      	beq.n	800d346 <FreeRTOS_inet_addr+0x6e>
			ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
 800d35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d35e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800d362:	0400      	lsls	r0, r0, #16
 800d364:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d368:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d36c:	4318      	orrs	r0, r3
 800d36e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d372:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800d376:	e7e2      	b.n	800d33e <FreeRTOS_inet_addr+0x66>

0800d378 <FreeRTOS_GetLocalAddress>:
size_t FreeRTOS_GetLocalAddress( Socket_t xSocket, struct freertos_sockaddr *pxAddress )
{
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;

	/* IP address of local machine. */
	pxAddress->sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800d378:	4b04      	ldr	r3, [pc, #16]	; (800d38c <FreeRTOS_GetLocalAddress+0x14>)
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	604b      	str	r3, [r1, #4]

	/* Local port on this machine. */
	pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800d37e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800d380:	0a13      	lsrs	r3, r2, #8
 800d382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d386:	804b      	strh	r3, [r1, #2]

	return sizeof( *pxAddress );
}
 800d388:	2008      	movs	r0, #8
 800d38a:	4770      	bx	lr
 800d38c:	20000010 	.word	0x20000010

0800d390 <vSocketWakeUpUser>:

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800d390:	b510      	push	{r4, lr}
 800d392:	4604      	mov	r4, r0
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800d394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d396:	b11b      	cbz	r3, 800d3a0 <vSocketWakeUpUser+0x10>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800d398:	6801      	ldr	r1, [r0, #0]
 800d39a:	f3c1 2103 	ubfx	r1, r1, #8, #4
			if( xSelectBits != 0ul )
 800d39e:	b949      	cbnz	r1, 800d3b4 <vSocketWakeUpUser+0x24>
				pxSocket->xSocketBits |= xSelectBits;
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800d3a0:	6821      	ldr	r1, [r4, #0]
 800d3a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d3a6:	6021      	str	r1, [r4, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800d3a8:	6860      	ldr	r0, [r4, #4]
 800d3aa:	b100      	cbz	r0, 800d3ae <vSocketWakeUpUser+0x1e>
 800d3ac:	b949      	cbnz	r1, 800d3c2 <vSocketWakeUpUser+0x32>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
	}

	pxSocket->xEventBits = 0ul;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd10      	pop	{r4, pc}
				pxSocket->xSocketBits |= xSelectBits;
 800d3b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	6302      	str	r2, [r0, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	f005 fe1c 	bl	8012ff8 <xEventGroupSetBits>
 800d3c0:	e7ee      	b.n	800d3a0 <vSocketWakeUpUser+0x10>
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800d3c2:	f005 fe19 	bl	8012ff8 <xEventGroupSetBits>
 800d3c6:	e7f2      	b.n	800d3ae <vSocketWakeUpUser+0x1e>

0800d3c8 <FreeRTOS_accept>:
	 * if the server socket is in listen mode and receives a connection request
	 * The new socket will be bound already to the same port number as the listing
	 * socket.
	 */
	Socket_t FreeRTOS_accept( Socket_t xServerSocket, struct freertos_sockaddr *pxAddress, socklen_t *pxAddressLength )
	{
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	b08b      	sub	sp, #44	; 0x2c
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	460e      	mov	r6, r1
 800d3d2:	4691      	mov	r9, r2
	TickType_t xRemainingTime;
	BaseType_t xTimed = pdFALSE, xAsk = pdFALSE;
	TimeOut_t xTimeOut;
	IPStackEvent_t xAskEvent;

		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	2106      	movs	r1, #6
 800d3d8:	f7ff fb76 	bl	800cac8 <prvValidSocket>
 800d3dc:	b1d0      	cbz	r0, 800d414 <FreeRTOS_accept+0x4c>
		{
			/* Not a valid socket or wrong type */
			pxClientSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
		}
		else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800d3de:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d3e2:	f013 0f08 	tst.w	r3, #8
 800d3e6:	d10a      	bne.n	800d3fe <FreeRTOS_accept+0x36>
 800d3e8:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d002      	beq.n	800d3f6 <FreeRTOS_accept+0x2e>
				 ( pxSocket->u.xTCP.ucTCPState != eTCP_LISTEN ) )
		{
			/* Parent socket is not in listening mode */
			pxClientSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800d3f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d3f4:	e010      	b.n	800d418 <FreeRTOS_accept+0x50>
 800d3f6:	f04f 0a00 	mov.w	sl, #0
 800d3fa:	4657      	mov	r7, sl
 800d3fc:	e002      	b.n	800d404 <FreeRTOS_accept+0x3c>
 800d3fe:	f04f 0a00 	mov.w	sl, #0
 800d402:	4657      	mov	r7, sl
					{
						pxClientSocket = pxSocket->u.xTCP.pxPeerSocket;
					}
					else
					{
						pxClientSocket = pxSocket;
 800d404:	9503      	str	r5, [sp, #12]
 800d406:	f04f 0800 	mov.w	r8, #0

				if( xAsk != pdFALSE )
				{
					/* Ask to set an event in 'xEventGroup' as soon as a new
					client gets connected for this listening socket. */
					xAskEvent.eEventType = eTCPAcceptEvent;
 800d40a:	f04f 0b06 	mov.w	fp, #6
 800d40e:	e027      	b.n	800d460 <FreeRTOS_accept+0x98>
 800d410:	4644      	mov	r4, r8
 800d412:	e05d      	b.n	800d4d0 <FreeRTOS_accept+0x108>
			pxClientSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800d414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
			}
		}

		return ( Socket_t ) pxClientSocket;
	}
 800d418:	4620      	mov	r0, r4
 800d41a:	b00b      	add	sp, #44	; 0x2c
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d420:	2400      	movs	r4, #0
 800d422:	e7f9      	b.n	800d418 <FreeRTOS_accept+0x50>
 800d424:	2400      	movs	r4, #0
 800d426:	e7f7      	b.n	800d418 <FreeRTOS_accept+0x50>
				xTaskResumeAll();
 800d428:	f007 f944 	bl	80146b4 <xTaskResumeAll>
				if( xAsk != pdFALSE )
 800d42c:	f1ba 0f00 	cmp.w	sl, #0
 800d430:	d1ee      	bne.n	800d410 <FreeRTOS_accept+0x48>
				if( xTimed == pdFALSE )
 800d432:	b937      	cbnz	r7, 800d442 <FreeRTOS_accept+0x7a>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 800d434:	69eb      	ldr	r3, [r5, #28]
 800d436:	9309      	str	r3, [sp, #36]	; 0x24
					if( xRemainingTime == ( TickType_t ) 0 )
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d0f1      	beq.n	800d420 <FreeRTOS_accept+0x58>
					vTaskSetTimeOutState( &xTimeOut );
 800d43c:	a807      	add	r0, sp, #28
 800d43e:	f007 fb5b 	bl	8014af8 <vTaskSetTimeOutState>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800d442:	a909      	add	r1, sp, #36	; 0x24
 800d444:	a807      	add	r0, sp, #28
 800d446:	f007 fb6d 	bl	8014b24 <xTaskCheckForTimeOut>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d1ea      	bne.n	800d424 <FreeRTOS_accept+0x5c>
				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 800d44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4643      	mov	r3, r8
 800d454:	2201      	movs	r2, #1
 800d456:	2104      	movs	r1, #4
 800d458:	6868      	ldr	r0, [r5, #4]
 800d45a:	f005 fd29 	bl	8012eb0 <xEventGroupWaitBits>
 800d45e:	2701      	movs	r7, #1
				vTaskSuspendAll();
 800d460:	f007 f84e 	bl	8014500 <vTaskSuspendAll>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d464:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d468:	f013 0f08 	tst.w	r3, #8
						pxClientSocket = pxSocket->u.xTCP.pxPeerSocket;
 800d46c:	bf0c      	ite	eq
 800d46e:	6d6c      	ldreq	r4, [r5, #84]	; 0x54
						pxClientSocket = pxSocket;
 800d470:	9c03      	ldrne	r4, [sp, #12]
					if( pxClientSocket != NULL )
 800d472:	2c00      	cmp	r4, #0
 800d474:	d0d8      	beq.n	800d428 <FreeRTOS_accept+0x60>
						pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d476:	f8c5 8054 	str.w	r8, [r5, #84]	; 0x54
						if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800d47a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d47e:	f013 0f02 	tst.w	r3, #2
 800d482:	d0d1      	beq.n	800d428 <FreeRTOS_accept+0x60>
							pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800d484:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d488:	f36f 0341 	bfc	r3, #1, #1
 800d48c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				xTaskResumeAll();
 800d490:	f007 f910 	bl	80146b4 <xTaskResumeAll>
					if( pxAddress != NULL )
 800d494:	b18e      	cbz	r6, 800d4ba <FreeRTOS_accept+0xf2>
						pxAddress->sin_addr = FreeRTOS_ntohl( pxClientSocket->u.xTCP.ulRemoteIP );
 800d496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d498:	0e1a      	lsrs	r2, r3, #24
 800d49a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d49e:	0219      	lsls	r1, r3, #8
 800d4a0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800d4a4:	430a      	orrs	r2, r1
 800d4a6:	0a1b      	lsrs	r3, r3, #8
 800d4a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	6073      	str	r3, [r6, #4]
						pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800d4b0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d4b2:	0a13      	lsrs	r3, r2, #8
 800d4b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d4b8:	8073      	strh	r3, [r6, #2]
					if( pxAddressLength != NULL )
 800d4ba:	f1b9 0f00 	cmp.w	r9, #0
 800d4be:	d002      	beq.n	800d4c6 <FreeRTOS_accept+0xfe>
						*pxAddressLength = sizeof( *pxAddress );
 800d4c0:	2308      	movs	r3, #8
 800d4c2:	f8c9 3000 	str.w	r3, [r9]
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d4c6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800d4ca:	f013 0f08 	tst.w	r3, #8
 800d4ce:	d10d      	bne.n	800d4ec <FreeRTOS_accept+0x124>
					xAskEvent.eEventType = eTCPAcceptEvent;
 800d4d0:	f88d b014 	strb.w	fp, [sp, #20]
					xAskEvent.pvData = ( void * ) pxSocket;
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	9306      	str	r3, [sp, #24]
					xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800d4d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d4dc:	a805      	add	r0, sp, #20
 800d4de:	f7fe ffa3 	bl	800c428 <xSendEventStructToIPTask>
				if( pxClientSocket != NULL )
 800d4e2:	2c00      	cmp	r4, #0
 800d4e4:	d198      	bne.n	800d418 <FreeRTOS_accept+0x50>
 800d4e6:	f04f 0a01 	mov.w	sl, #1
 800d4ea:	e7a2      	b.n	800d432 <FreeRTOS_accept+0x6a>
				if( xAsk != pdFALSE )
 800d4ec:	f1ba 0f00 	cmp.w	sl, #0
 800d4f0:	d1ee      	bne.n	800d4d0 <FreeRTOS_accept+0x108>
 800d4f2:	e791      	b.n	800d418 <FreeRTOS_accept+0x50>

0800d4f4 <FreeRTOS_recv>:
	/*
	 * Read incoming data from a TCP socket
	 * Only after the last byte has been read, a close error might be returned
	 */
	BaseType_t FreeRTOS_recv( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlags )
	{
 800d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f8:	b086      	sub	sp, #24
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	4689      	mov	r9, r1
 800d4fe:	4692      	mov	sl, r2
 800d500:	4698      	mov	r8, r3
	TimeOut_t xTimeOut;
	EventBits_t xEventBits = ( EventBits_t ) 0;

		/* Check if the socket is valid, has type TCP and if it is bound to a
		port. */
		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d502:	2201      	movs	r2, #1
 800d504:	2106      	movs	r1, #6
 800d506:	f7ff fadf 	bl	800cac8 <prvValidSocket>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	f000 80b7 	beq.w	800d67e <FreeRTOS_recv+0x18a>
		{
			xByteCount = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.rxStream != NULL )
 800d510:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800d512:	b16a      	cbz	r2, 800d530 <FreeRTOS_recv+0x3c>
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800d514:	6893      	ldr	r3, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800d516:	6811      	ldr	r1, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d518:	6912      	ldr	r2, [r2, #16]
 800d51a:	4413      	add	r3, r2
 800d51c:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 800d51e:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800d520:	bf98      	it	ls
 800d522:	1a9b      	subls	r3, r3, r2
			{
				xByteCount = ( BaseType_t )uxStreamBufferGetSize ( pxSocket->u.xTCP.rxStream );
 800d524:	461d      	mov	r5, r3
			else
			{
				xByteCount = 0;
			}

			while( xByteCount == 0 )
 800d526:	b99b      	cbnz	r3, 800d550 <FreeRTOS_recv+0x5c>
 800d528:	2600      	movs	r6, #0
						}
						#endif /* ipconfigSUPPORT_SIGNALS */
						break;
					}

					if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800d52a:	f008 0710 	and.w	r7, r8, #16
 800d52e:	e05b      	b.n	800d5e8 <FreeRTOS_recv+0xf4>
 800d530:	2600      	movs	r6, #0
 800d532:	4635      	mov	r5, r6
 800d534:	e7f9      	b.n	800d52a <FreeRTOS_recv+0x36>
					if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800d536:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d53a:	f003 0308 	and.w	r3, r3, #8
						xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800d53e:	2b00      	cmp	r3, #0
 800d540:	bf14      	ite	ne
 800d542:	f06f 050b 	mvnne.w	r5, #11
 800d546:	f06f 057f 	mvneq.w	r5, #127	; 0x7f
					xByteCount = 0;
				}
			}

		#if( ipconfigSUPPORT_SIGNALS != 0 )
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800d54a:	f016 0f40 	tst.w	r6, #64	; 0x40
 800d54e:	d123      	bne.n	800d598 <FreeRTOS_recv+0xa4>
				}
				xByteCount = -pdFREERTOS_ERRNO_EINTR;
			}
			else
		#endif /* ipconfigSUPPORT_SIGNALS */
			if( xByteCount > 0 )
 800d550:	2d00      	cmp	r5, #0
 800d552:	dd26      	ble.n	800d5a2 <FreeRTOS_recv+0xae>
			{
				if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800d554:	f018 0f01 	tst.w	r8, #1
 800d558:	d063      	beq.n	800d622 <FreeRTOS_recv+0x12e>
					}
				}
				else
				{
					/* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
					xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, (uint8_t **)pvBuffer );
 800d55a:	6f62      	ldr	r2, [r4, #116]	; 0x74
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetPtr( StreamBuffer_t *pxBuffer, uint8_t **ppucData );
static portINLINE size_t uxStreamBufferGetPtr( StreamBuffer_t *pxBuffer, uint8_t **ppucData )
{
size_t uxNextTail = pxBuffer->uxTail;
 800d55c:	6810      	ldr	r0, [r2, #0]
size_t uxHead = pxBuffer->uxHead;
 800d55e:	6893      	ldr	r3, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800d560:	6815      	ldr	r5, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d562:	6911      	ldr	r1, [r2, #16]
 800d564:	440b      	add	r3, r1
 800d566:	1b5b      	subs	r3, r3, r5
	if ( uxCount >= pxBuffer->LENGTH )
 800d568:	4299      	cmp	r1, r3
		uxCount -= pxBuffer->LENGTH;
 800d56a:	bf98      	it	ls
 800d56c:	1a5b      	subls	r3, r3, r1
size_t uxSize = uxStreamBufferGetSize( pxBuffer );

	*ppucData = pxBuffer->ucArray + uxNextTail;
 800d56e:	f102 0114 	add.w	r1, r2, #20
 800d572:	4401      	add	r1, r0
 800d574:	f8c9 1000 	str.w	r1, [r9]

	return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 800d578:	6915      	ldr	r5, [r2, #16]
 800d57a:	1a2d      	subs	r5, r5, r0


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800d57c:	429d      	cmp	r5, r3
 800d57e:	bf28      	it	cs
 800d580:	461d      	movcs	r5, r3
 800d582:	e00e      	b.n	800d5a2 <FreeRTOS_recv+0xae>
							xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	2201      	movs	r2, #1
 800d588:	2140      	movs	r1, #64	; 0x40
 800d58a:	6860      	ldr	r0, [r4, #4]
 800d58c:	f005 fc90 	bl	8012eb0 <xEventGroupWaitBits>
 800d590:	4606      	mov	r6, r0
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800d592:	f016 0f40 	tst.w	r6, #64	; 0x40
 800d596:	d075      	beq.n	800d684 <FreeRTOS_recv+0x190>
				if( ( xEventBits & ( eSOCKET_RECEIVE | eSOCKET_CLOSED ) ) != 0 )
 800d598:	f016 0f21 	tst.w	r6, #33	; 0x21
 800d59c:	d139      	bne.n	800d612 <FreeRTOS_recv+0x11e>
				xByteCount = -pdFREERTOS_ERRNO_EINTR;
 800d59e:	f06f 0503 	mvn.w	r5, #3
				}
			}
		} /* prvValidSocket() */

		return xByteCount;
	}
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	b006      	add	sp, #24
 800d5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800d5aa:	a905      	add	r1, sp, #20
 800d5ac:	a803      	add	r0, sp, #12
 800d5ae:	f007 fab9 	bl	8014b24 <xTaskCheckForTimeOut>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d1ed      	bne.n	800d592 <FreeRTOS_recv+0x9e>
				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800d5b6:	9b05      	ldr	r3, [sp, #20]
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	2201      	movs	r2, #1
 800d5be:	2161      	movs	r1, #97	; 0x61
 800d5c0:	6860      	ldr	r0, [r4, #4]
 800d5c2:	f005 fc75 	bl	8012eb0 <xEventGroupWaitBits>
 800d5c6:	4606      	mov	r6, r0
					if( ( xEventBits & eSOCKET_INTR ) != 0u )
 800d5c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5cc:	d1e4      	bne.n	800d598 <FreeRTOS_recv+0xa4>
				if( pxSocket->u.xTCP.rxStream != NULL )
 800d5ce:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800d5d0:	2501      	movs	r5, #1
 800d5d2:	b14a      	cbz	r2, 800d5e8 <FreeRTOS_recv+0xf4>
size_t uxHead = pxBuffer->uxHead;
 800d5d4:	6893      	ldr	r3, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800d5d6:	6811      	ldr	r1, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800d5d8:	6912      	ldr	r2, [r2, #16]
 800d5da:	4413      	add	r3, r2
 800d5dc:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 800d5de:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800d5e0:	bf98      	it	ls
 800d5e2:	1a9b      	subls	r3, r3, r2
 800d5e4:	2501      	movs	r5, #1
			while( xByteCount == 0 )
 800d5e6:	b993      	cbnz	r3, 800d60e <FreeRTOS_recv+0x11a>
				switch( pxSocket->u.xTCP.ucTCPState )
 800d5e8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0a2      	beq.n	800d536 <FreeRTOS_recv+0x42>
 800d5f0:	3b08      	subs	r3, #8
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d99f      	bls.n	800d536 <FreeRTOS_recv+0x42>
				if( xTimed == pdFALSE )
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	d1d7      	bne.n	800d5aa <FreeRTOS_recv+0xb6>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 800d5fa:	69e3      	ldr	r3, [r4, #28]
 800d5fc:	9305      	str	r3, [sp, #20]
					if( xRemainingTime == ( TickType_t ) 0 )
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0c0      	beq.n	800d584 <FreeRTOS_recv+0x90>
					if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800d602:	2f00      	cmp	r7, #0
 800d604:	d1c5      	bne.n	800d592 <FreeRTOS_recv+0x9e>
					vTaskSetTimeOutState( &xTimeOut );
 800d606:	a803      	add	r0, sp, #12
 800d608:	f007 fa76 	bl	8014af8 <vTaskSetTimeOutState>
 800d60c:	e7cd      	b.n	800d5aa <FreeRTOS_recv+0xb6>
					xByteCount = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.rxStream );
 800d60e:	461d      	mov	r5, r3
 800d610:	e79e      	b.n	800d550 <FreeRTOS_recv+0x5c>
					xEventGroupSetBits( pxSocket->xEventGroup, xEventBits );
 800d612:	f026 0140 	bic.w	r1, r6, #64	; 0x40
 800d616:	6860      	ldr	r0, [r4, #4]
 800d618:	f005 fcee 	bl	8012ff8 <xEventGroupSetBits>
				xByteCount = -pdFREERTOS_ERRNO_EINTR;
 800d61c:	f06f 0503 	mvn.w	r5, #3
 800d620:	e7bf      	b.n	800d5a2 <FreeRTOS_recv+0xae>
					xByteCount = ( BaseType_t ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0ul, ( uint8_t * ) pvBuffer, ( size_t ) xBufferLength, ( xFlags & FREERTOS_MSG_PEEK ) != 0 );
 800d622:	f3c8 0380 	ubfx	r3, r8, #2, #1
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	4653      	mov	r3, sl
 800d62a:	464a      	mov	r2, r9
 800d62c:	2100      	movs	r1, #0
 800d62e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d630:	f000 fe8e 	bl	800e350 <uxStreamBufferGet>
 800d634:	4605      	mov	r5, r0
					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800d636:	f994 3040 	ldrsb.w	r3, [r4, #64]	; 0x40
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dab1      	bge.n	800d5a2 <FreeRTOS_recv+0xae>
						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800d63e:	6f62      	ldr	r2, [r4, #116]	; 0x74
size_t uxFront = pxBuffer->uxFront;
 800d640:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 800d642:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800d644:	6912      	ldr	r2, [r2, #16]
 800d646:	4413      	add	r3, r2
 800d648:	3b01      	subs	r3, #1
 800d64a:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800d64c:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800d64e:	bf98      	it	ls
 800d650:	1a9b      	subls	r3, r3, r2
						if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800d652:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800d654:	429a      	cmp	r2, r3
 800d656:	d8a4      	bhi.n	800d5a2 <FreeRTOS_recv+0xae>
							pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800d658:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d65c:	f36f 13c7 	bfc	r3, #7, #1
 800d660:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
							pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d664:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d668:	f043 0301 	orr.w	r3, r3, #1
 800d66c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
							pxSocket->u.xTCP.usTimeout = 1u; /* because bLowWater is cleared. */
 800d670:	2301      	movs	r3, #1
 800d672:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
							xSendEventToIPTask( eTCPTimerEvent );
 800d676:	2005      	movs	r0, #5
 800d678:	f7fe ff6c 	bl	800c554 <xSendEventToIPTask>
 800d67c:	e791      	b.n	800d5a2 <FreeRTOS_recv+0xae>
			xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800d67e:	f06f 0515 	mvn.w	r5, #21
 800d682:	e78e      	b.n	800d5a2 <FreeRTOS_recv+0xae>
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800d684:	2500      	movs	r5, #0
 800d686:	e78c      	b.n	800d5a2 <FreeRTOS_recv+0xae>

0800d688 <FreeRTOS_send>:
	 * Send data using a TCP socket.  It is not necessary to have the socket
	 * connected already.  Outgoing data will be stored and delivered as soon as
	 * the socket gets connected.
	 */
	BaseType_t FreeRTOS_send( Socket_t xSocket, const void *pvBuffer, size_t uxDataLength, BaseType_t xFlags )
	{
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	b089      	sub	sp, #36	; 0x24
 800d68e:	4604      	mov	r4, r0
 800d690:	460f      	mov	r7, r1
 800d692:	4615      	mov	r5, r2
 800d694:	9203      	str	r2, [sp, #12]
 800d696:	469b      	mov	fp, r3
		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d698:	2201      	movs	r2, #1
 800d69a:	2106      	movs	r1, #6
 800d69c:	f7ff fa14 	bl	800cac8 <prvValidSocket>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	f000 80ba 	beq.w	800d81a <FreeRTOS_send+0x192>
		else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800d6a6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d6aa:	f013 0f08 	tst.w	r3, #8
 800d6ae:	f040 80b8 	bne.w	800d822 <FreeRTOS_send+0x19a>
		else if( pxSocket->u.xTCP.ucTCPState == eCLOSED )
 800d6b2:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80b7 	beq.w	800d82a <FreeRTOS_send+0x1a2>
		else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800d6bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d6c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d6c4:	f040 80b5 	bne.w	800d832 <FreeRTOS_send+0x1aa>
		else if( xDataLength == 0ul )
 800d6c8:	2d00      	cmp	r5, #0
 800d6ca:	f000 80b5 	beq.w	800d838 <FreeRTOS_send+0x1b0>
		else if( pxSocket->u.xTCP.txStream == NULL )
 800d6ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d6d0:	b1a3      	cbz	r3, 800d6fc <FreeRTOS_send+0x74>
		xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );

		if( xByteCount > 0 )
		{
			/* xBytesLeft is number of bytes to send, will count to zero. */
			xBytesLeft = ( BaseType_t ) uxDataLength;
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	9302      	str	r3, [sp, #8]

			/* xByteCount is number of bytes that can be sent now. */
			xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800d6d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 800d6d8:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800d6da:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800d6dc:	6912      	ldr	r2, [r2, #16]
 800d6de:	4413      	add	r3, r2
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800d6e4:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800d6e6:	bf98      	it	ls
 800d6e8:	1a9b      	subls	r3, r3, r2

			/* While there are still bytes to be sent. */
			while( xBytesLeft > 0 )
 800d6ea:	9a03      	ldr	r2, [sp, #12]
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	f340 8087 	ble.w	800d800 <FreeRTOS_send+0x178>
 800d6f2:	4615      	mov	r5, r2
 800d6f4:	f04f 0a00 	mov.w	sl, #0
						xTaskResumeAll();
					}

					/* Send a message to the IP-task so it can work on this
					socket.  Data is sent, let the IP-task work on it. */
					pxSocket->u.xTCP.usTimeout = 1u;
 800d6f8:	2601      	movs	r6, #1
 800d6fa:	e054      	b.n	800d7a6 <FreeRTOS_send+0x11e>
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800d6fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800d6fe:	3304      	adds	r3, #4

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800d700:	f023 0503 	bic.w	r5, r3, #3

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800d704:	f105 0014 	add.w	r0, r5, #20
 800d708:	f005 fefe 	bl	8013508 <pvPortMalloc>

		if( pxBuffer == NULL )
 800d70c:	b138      	cbz	r0, 800d71e <FreeRTOS_send+0x96>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800d70e:	2200      	movs	r2, #0
 800d710:	6002      	str	r2, [r0, #0]
 800d712:	6042      	str	r2, [r0, #4]
 800d714:	6082      	str	r2, [r0, #8]
 800d716:	60c2      	str	r2, [r0, #12]
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800d718:	6105      	str	r5, [r0, #16]
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800d71a:	67a0      	str	r0, [r4, #120]	; 0x78
 800d71c:	e7d9      	b.n	800d6d2 <FreeRTOS_send+0x4a>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800d71e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d722:	f043 0308 	orr.w	r3, r3, #8
 800d726:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d72a:	2108      	movs	r1, #8
 800d72c:	4620      	mov	r0, r4
 800d72e:	f001 f81f 	bl	800e770 <vTCPStateChange>
			if( pxSocket->u.xTCP.txStream == NULL )
 800d732:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1cc      	bne.n	800d6d2 <FreeRTOS_send+0x4a>
				xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800d738:	f06f 030b 	mvn.w	r3, #11
 800d73c:	9302      	str	r3, [sp, #8]
 800d73e:	e068      	b.n	800d812 <FreeRTOS_send+0x18a>
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0ul, ( const uint8_t * ) pvBuffer, ( size_t ) xByteCount );
 800d740:	463a      	mov	r2, r7
 800d742:	2100      	movs	r1, #0
 800d744:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d746:	f000 fd9f 	bl	800e288 <uxStreamBufferAdd>
 800d74a:	4681      	mov	r9, r0
 800d74c:	4680      	mov	r8, r0
					pxSocket->u.xTCP.usTimeout = 1u;
 800d74e:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
					if( xIsCallingFromIPTask() == pdFALSE )
 800d752:	f7fe fd49 	bl	800c1e8 <xIsCallingFromIPTask>
 800d756:	2800      	cmp	r0, #0
 800d758:	d044      	beq.n	800d7e4 <FreeRTOS_send+0x15c>
					if( xBytesLeft == 0 )
 800d75a:	ebb5 0508 	subs.w	r5, r5, r8
 800d75e:	d058      	beq.n	800d812 <FreeRTOS_send+0x18a>
					pvBuffer = ( void * ) ( ( ( const uint8_t * ) pvBuffer) + xByteCount );
 800d760:	444f      	add	r7, r9
				if( xTimed == pdFALSE )
 800d762:	f1ba 0f00 	cmp.w	sl, #0
 800d766:	d141      	bne.n	800d7ec <FreeRTOS_send+0x164>
					xRemainingTime = pxSocket->xSendBlockTime;
 800d768:	6a23      	ldr	r3, [r4, #32]
 800d76a:	9307      	str	r3, [sp, #28]
					if( xRemainingTime == ( TickType_t ) 0 )
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d043      	beq.n	800d7f8 <FreeRTOS_send+0x170>
					if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800d770:	f01b 0f10 	tst.w	fp, #16
 800d774:	d140      	bne.n	800d7f8 <FreeRTOS_send+0x170>
					vTaskSetTimeOutState( &xTimeOut );
 800d776:	a805      	add	r0, sp, #20
 800d778:	f007 f9be 	bl	8014af8 <vTaskSetTimeOutState>
				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_SEND | eSOCKET_CLOSED,
 800d77c:	9b07      	ldr	r3, [sp, #28]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	4632      	mov	r2, r6
 800d784:	2122      	movs	r1, #34	; 0x22
 800d786:	6860      	ldr	r0, [r4, #4]
 800d788:	f005 fb92 	bl	8012eb0 <xEventGroupWaitBits>
				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800d78c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 800d78e:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800d790:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800d792:	6912      	ldr	r2, [r2, #16]
 800d794:	4413      	add	r3, r2
 800d796:	3b01      	subs	r3, #1
 800d798:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800d79a:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800d79c:	bf98      	it	ls
 800d79e:	1a9b      	subls	r3, r3, r2
 800d7a0:	46b2      	mov	sl, r6
			while( xBytesLeft > 0 )
 800d7a2:	2d00      	cmp	r5, #0
 800d7a4:	dd28      	ble.n	800d7f8 <FreeRTOS_send+0x170>
				if( xByteCount > 0 )
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	dddb      	ble.n	800d762 <FreeRTOS_send+0xda>
 800d7aa:	42ab      	cmp	r3, r5
 800d7ac:	bfa8      	it	ge
 800d7ae:	462b      	movge	r3, r5
					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLeft ) )
 800d7b0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800d7b4:	f012 0f10 	tst.w	r2, #16
 800d7b8:	d0c2      	beq.n	800d740 <FreeRTOS_send+0xb8>
 800d7ba:	429d      	cmp	r5, r3
 800d7bc:	d1c0      	bne.n	800d740 <FreeRTOS_send+0xb8>
						vTaskSuspendAll();
 800d7be:	f006 fe9f 	bl	8014500 <vTaskSuspendAll>
						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800d7c2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0ul, ( const uint8_t * ) pvBuffer, ( size_t ) xByteCount );
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	463a      	mov	r2, r7
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d7d6:	f000 fd57 	bl	800e288 <uxStreamBufferAdd>
 800d7da:	4681      	mov	r9, r0
 800d7dc:	4680      	mov	r8, r0
						xTaskResumeAll();
 800d7de:	f006 ff69 	bl	80146b4 <xTaskResumeAll>
 800d7e2:	e7b4      	b.n	800d74e <FreeRTOS_send+0xc6>
						xSendEventToIPTask( eTCPTimerEvent );
 800d7e4:	2005      	movs	r0, #5
 800d7e6:	f7fe feb5 	bl	800c554 <xSendEventToIPTask>
 800d7ea:	e7b6      	b.n	800d75a <FreeRTOS_send+0xd2>
					if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800d7ec:	a907      	add	r1, sp, #28
 800d7ee:	a805      	add	r0, sp, #20
 800d7f0:	f007 f998 	bl	8014b24 <xTaskCheckForTimeOut>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d0c1      	beq.n	800d77c <FreeRTOS_send+0xf4>
			if( xByteCount == 0 )
 800d7f8:	9b03      	ldr	r3, [sp, #12]
 800d7fa:	1b5b      	subs	r3, r3, r5
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	d108      	bne.n	800d812 <FreeRTOS_send+0x18a>
				if( pxSocket->u.xTCP.ucTCPState > eESTABLISHED )
 800d800:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
					xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800d804:	2b05      	cmp	r3, #5
 800d806:	bf8c      	ite	hi
 800d808:	f06f 037f 	mvnhi.w	r3, #127	; 0x7f
 800d80c:	f06f 031b 	mvnls.w	r3, #27
 800d810:	9302      	str	r3, [sp, #8]
	}
 800d812:	9802      	ldr	r0, [sp, #8]
 800d814:	b009      	add	sp, #36	; 0x24
 800d816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xResult = -pdFREERTOS_ERRNO_EINVAL;
 800d81a:	f06f 0315 	mvn.w	r3, #21
 800d81e:	9302      	str	r3, [sp, #8]
 800d820:	e7f7      	b.n	800d812 <FreeRTOS_send+0x18a>
			xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800d822:	f06f 030b 	mvn.w	r3, #11
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	e7f3      	b.n	800d812 <FreeRTOS_send+0x18a>
			xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800d82a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d82e:	9302      	str	r3, [sp, #8]
 800d830:	e7ef      	b.n	800d812 <FreeRTOS_send+0x18a>
			xResult = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	9302      	str	r3, [sp, #8]
 800d836:	e7ec      	b.n	800d812 <FreeRTOS_send+0x18a>
			xResult = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	9302      	str	r3, [sp, #8]
 800d83c:	e7e9      	b.n	800d812 <FreeRTOS_send+0x18a>

0800d83e <FreeRTOS_listen>:
	{
 800d83e:	b538      	push	{r3, r4, r5, lr}
 800d840:	4604      	mov	r4, r0
 800d842:	460d      	mov	r5, r1
		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d844:	2201      	movs	r2, #1
 800d846:	2106      	movs	r1, #6
 800d848:	f7ff f93e 	bl	800cac8 <prvValidSocket>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d038      	beq.n	800d8c2 <FreeRTOS_listen+0x84>
		else if( ( pxSocket->u.xTCP.ucTCPState != eCLOSED ) && ( pxSocket->u.xTCP.ucTCPState != eCLOSE_WAIT ) )
 800d850:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800d854:	f013 0ff7 	tst.w	r3, #247	; 0xf7
 800d858:	d136      	bne.n	800d8c8 <FreeRTOS_listen+0x8a>
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800d85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d85e:	429d      	cmp	r5, r3
 800d860:	bfa8      	it	ge
 800d862:	461d      	movge	r5, r3
			pxSocket->u.xTCP.usBacklog = ( uint16_t )FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800d864:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
			if( pxSocket->u.xTCP.bits.bReuseSocket )
 800d868:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d86c:	f013 0f08 	tst.w	r3, #8
 800d870:	d021      	beq.n	800d8b6 <FreeRTOS_listen+0x78>
				if( pxSocket->u.xTCP.rxStream != NULL )
 800d872:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d874:	b123      	cbz	r3, 800d880 <FreeRTOS_listen+0x42>
	pxBuffer->uxHead = 0u;
 800d876:	2200      	movs	r2, #0
 800d878:	609a      	str	r2, [r3, #8]
	pxBuffer->uxTail = 0u;
 800d87a:	601a      	str	r2, [r3, #0]
	pxBuffer->uxFront = 0u;
 800d87c:	60da      	str	r2, [r3, #12]
	pxBuffer->uxMid = 0u;
 800d87e:	605a      	str	r2, [r3, #4]
				if( pxSocket->u.xTCP.txStream != NULL )
 800d880:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d882:	b123      	cbz	r3, 800d88e <FreeRTOS_listen+0x50>
	pxBuffer->uxHead = 0u;
 800d884:	2200      	movs	r2, #0
 800d886:	609a      	str	r2, [r3, #8]
	pxBuffer->uxTail = 0u;
 800d888:	601a      	str	r2, [r3, #0]
	pxBuffer->uxFront = 0u;
 800d88a:	60da      	str	r2, [r3, #12]
	pxBuffer->uxMid = 0u;
 800d88c:	605a      	str	r2, [r3, #4]
				memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d88e:	2246      	movs	r2, #70	; 0x46
 800d890:	2100      	movs	r1, #0
 800d892:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800d896:	f009 ff99 	bl	80177cc <memset>
				memset( &pxSocket->u.xTCP.xTCPWindow, '\0', sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800d89a:	22c0      	movs	r2, #192	; 0xc0
 800d89c:	2100      	movs	r1, #0
 800d89e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 800d8a2:	f009 ff93 	bl	80177cc <memset>
				memset( &pxSocket->u.xTCP.bits, '\0', sizeof( pxSocket->u.xTCP.bits ) );
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6423      	str	r3, [r4, #64]	; 0x40
				pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800d8aa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d8ae:	f043 0308 	orr.w	r3, r3, #8
 800d8b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			vTCPStateChange( pxSocket, eTCP_LISTEN );
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 ff59 	bl	800e770 <vTCPStateChange>
	BaseType_t xResult = 0;
 800d8be:	2000      	movs	r0, #0
 800d8c0:	bd38      	pop	{r3, r4, r5, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d8c2:	f06f 005e 	mvn.w	r0, #94	; 0x5e
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d8c8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
	}
 800d8cc:	bd38      	pop	{r3, r4, r5, pc}

0800d8ce <FreeRTOS_shutdown>:
	{
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	4604      	mov	r4, r0
		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	2106      	movs	r1, #6
 800d8d6:	f7ff f8f7 	bl	800cac8 <prvValidSocket>
 800d8da:	b188      	cbz	r0, 800d900 <FreeRTOS_shutdown+0x32>
		else if ( pxSocket->u.xTCP.ucTCPState != eESTABLISHED )
 800d8dc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800d8e0:	2b05      	cmp	r3, #5
 800d8e2:	d110      	bne.n	800d906 <FreeRTOS_shutdown+0x38>
			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800d8e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d8e8:	f043 0320 	orr.w	r3, r3, #32
 800d8ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxSocket->u.xTCP.usTimeout = 1u;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
			xSendEventToIPTask( eTCPTimerEvent );
 800d8f6:	2005      	movs	r0, #5
 800d8f8:	f7fe fe2c 	bl	800c554 <xSendEventToIPTask>
			xResult = 0;
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	bd10      	pop	{r4, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d900:	f06f 005e 	mvn.w	r0, #94	; 0x5e
 800d904:	bd10      	pop	{r4, pc}
			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800d906:	f06f 005e 	mvn.w	r0, #94	; 0x5e
	}
 800d90a:	bd10      	pop	{r4, pc}

0800d90c <xTCPTimerCheck>:
	{
 800d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	4681      	mov	r9, r0
	TickType_t xNow = xTaskGetTickCount();
 800d912:	f006 fdfd 	bl	8014510 <xTaskGetTickCount>
	TickType_t xDelta = xNow - xLastTime;
 800d916:	4b1f      	ldr	r3, [pc, #124]	; (800d994 <xTCPTimerCheck+0x88>)
 800d918:	681e      	ldr	r6, [r3, #0]
 800d91a:	1b86      	subs	r6, r0, r6
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800d91c:	4a1e      	ldr	r2, [pc, #120]	; (800d998 <xTCPTimerCheck+0x8c>)
 800d91e:	68d4      	ldr	r4, [r2, #12]
		xLastTime = xNow;
 800d920:	6018      	str	r0, [r3, #0]
			xDelta = 1u;
 800d922:	2e00      	cmp	r6, #0
 800d924:	bf08      	it	eq
 800d926:	2601      	moveq	r6, #1
		while( pxIterator != pxEnd )
 800d928:	f102 0308 	add.w	r3, r2, #8
 800d92c:	429c      	cmp	r4, r3
 800d92e:	d02c      	beq.n	800d98a <xTCPTimerCheck+0x7e>
 800d930:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
				pxSocket->u.xTCP.usTimeout = 0u;
 800d934:	f04f 0a00 	mov.w	sl, #0
		while( pxIterator != pxEnd )
 800d938:	461f      	mov	r7, r3
 800d93a:	e012      	b.n	800d962 <xTCPTimerCheck+0x56>
				pxSocket->u.xTCP.usTimeout = 0u;
 800d93c:	f8a5 a048 	strh.w	sl, [r5, #72]	; 0x48
				if( xTCPSocketCheck( pxSocket ) < 0 )
 800d940:	4628      	mov	r0, r5
 800d942:	f001 f989 	bl	800ec58 <xTCPSocketCheck>
 800d946:	2800      	cmp	r0, #0
 800d948:	da16      	bge.n	800d978 <xTCPTimerCheck+0x6c>
 800d94a:	e008      	b.n	800d95e <xTCPTimerCheck+0x52>
					vSocketWakeUpUser( pxSocket );
 800d94c:	4628      	mov	r0, r5
 800d94e:	f7ff fd1f 	bl	800d390 <vSocketWakeUpUser>
			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800d952:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800d956:	b113      	cbz	r3, 800d95e <xTCPTimerCheck+0x52>
 800d958:	4598      	cmp	r8, r3
 800d95a:	bf28      	it	cs
 800d95c:	4698      	movcs	r8, r3
		while( pxIterator != pxEnd )
 800d95e:	42bc      	cmp	r4, r7
 800d960:	d015      	beq.n	800d98e <xTCPTimerCheck+0x82>
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800d962:	68e5      	ldr	r5, [r4, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800d964:	6864      	ldr	r4, [r4, #4]
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800d966:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0f7      	beq.n	800d95e <xTCPTimerCheck+0x52>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800d96e:	42b3      	cmp	r3, r6
 800d970:	d9e4      	bls.n	800d93c <xTCPTimerCheck+0x30>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800d972:	1b9b      	subs	r3, r3, r6
 800d974:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
			if( pxSocket->xEventBits != 0u )
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0e9      	beq.n	800d952 <xTCPTimerCheck+0x46>
				if( xWillSleep != pdFALSE )
 800d97e:	f1b9 0f00 	cmp.w	r9, #0
 800d982:	d1e3      	bne.n	800d94c <xTCPTimerCheck+0x40>
					xShortest = ( TickType_t ) 0;
 800d984:	f04f 0800 	mov.w	r8, #0
 800d988:	e7e3      	b.n	800d952 <xTCPTimerCheck+0x46>
		while( pxIterator != pxEnd )
 800d98a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	}
 800d98e:	4640      	mov	r0, r8
 800d990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d994:	2000069c 	.word	0x2000069c
 800d998:	20002990 	.word	0x20002990

0800d99c <pxTCPSocketLookup>:
	{
 800d99c:	b4f0      	push	{r4, r5, r6, r7}
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800d99e:	4811      	ldr	r0, [pc, #68]	; (800d9e4 <pxTCPSocketLookup+0x48>)
 800d9a0:	68c4      	ldr	r4, [r0, #12]
 800d9a2:	3008      	adds	r0, #8
 800d9a4:	4284      	cmp	r4, r0
 800d9a6:	d01b      	beq.n	800d9e0 <pxTCPSocketLookup+0x44>
 800d9a8:	2000      	movs	r0, #0
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800d9aa:	b289      	uxth	r1, r1
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800d9ac:	b29b      	uxth	r3, r3
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800d9ae:	4f0e      	ldr	r7, [pc, #56]	; (800d9e8 <pxTCPSocketLookup+0x4c>)
 800d9b0:	e003      	b.n	800d9ba <pxTCPSocketLookup+0x1e>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800d9b2:	4628      	mov	r0, r5
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800d9b4:	6864      	ldr	r4, [r4, #4]
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800d9b6:	42bc      	cmp	r4, r7
 800d9b8:	d010      	beq.n	800d9dc <pxTCPSocketLookup+0x40>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800d9ba:	68e5      	ldr	r5, [r4, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800d9bc:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 800d9be:	428e      	cmp	r6, r1
 800d9c0:	d1f8      	bne.n	800d9b4 <pxTCPSocketLookup+0x18>
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800d9c2:	f895 6053 	ldrb.w	r6, [r5, #83]	; 0x53
 800d9c6:	2e01      	cmp	r6, #1
 800d9c8:	d0f3      	beq.n	800d9b2 <pxTCPSocketLookup+0x16>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800d9ca:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
 800d9cc:	429e      	cmp	r6, r3
 800d9ce:	d1f1      	bne.n	800d9b4 <pxTCPSocketLookup+0x18>
 800d9d0:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800d9d2:	4296      	cmp	r6, r2
 800d9d4:	d1ee      	bne.n	800d9b4 <pxTCPSocketLookup+0x18>
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800d9d6:	2d00      	cmp	r5, #0
 800d9d8:	bf18      	it	ne
 800d9da:	4628      	movne	r0, r5
	}
 800d9dc:	bcf0      	pop	{r4, r5, r6, r7}
 800d9de:	4770      	bx	lr
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	e7fb      	b.n	800d9dc <pxTCPSocketLookup+0x40>
 800d9e4:	20002990 	.word	0x20002990
 800d9e8:	20002998 	.word	0x20002998

0800d9ec <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800d9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	4617      	mov	r7, r2
 800d9f6:	4698      	mov	r8, r3
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800d9f8:	6f45      	ldr	r5, [r0, #116]	; 0x74
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800d9fa:	b345      	cbz	r5, 800da4e <lTCPAddRxdata+0x62>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800d9fc:	4643      	mov	r3, r8
 800d9fe:	463a      	mov	r2, r7
 800da00:	4631      	mov	r1, r6
 800da02:	4628      	mov	r0, r5
 800da04:	f000 fc40 	bl	800e288 <uxStreamBufferAdd>
 800da08:	4605      	mov	r5, r0
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800da0a:	b9ee      	cbnz	r6, 800da48 <lTCPAddRxdata+0x5c>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800da0c:	f994 3040 	ldrsb.w	r3, [r4, #64]	; 0x40
 800da10:	2b00      	cmp	r3, #0
 800da12:	db0c      	blt.n	800da2e <lTCPAddRxdata+0x42>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800da14:	6f62      	ldr	r2, [r4, #116]	; 0x74
size_t uxFront = pxBuffer->uxFront;
 800da16:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 800da18:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800da1a:	6912      	ldr	r2, [r2, #16]
 800da1c:	4413      	add	r3, r2
 800da1e:	3b01      	subs	r3, #1
 800da20:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800da22:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800da24:	bf98      	it	ls
 800da26:	1a9b      	subls	r3, r3, r2
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800da28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d23f      	bcs.n	800daae <lTCPAddRxdata+0xc2>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	f043 0201 	orr.w	r2, r3, #1
 800da34:	6022      	str	r2, [r4, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800da36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800da38:	f012 0f01 	tst.w	r2, #1
 800da3c:	d004      	beq.n	800da48 <lTCPAddRxdata+0x5c>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800da3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da42:	f043 0301 	orr.w	r3, r3, #1
 800da46:	6023      	str	r3, [r4, #0]
				#endif
			}
		}

		return xResult;
	}
 800da48:	4628      	mov	r0, r5
 800da4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800da4e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800da50:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800da52:	b92a      	cbnz	r2, 800da60 <lTCPAddRxdata+0x74>
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800da54:	f1a2 3233 	sub.w	r2, r2, #858993459	; 0x33333333
 800da58:	fba2 1203 	umull	r1, r2, r2, r3
 800da5c:	0892      	lsrs	r2, r2, #2
 800da5e:	6642      	str	r2, [r0, #100]	; 0x64
			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800da60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800da62:	b92a      	cbnz	r2, 800da70 <lTCPAddRxdata+0x84>
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800da64:	009a      	lsls	r2, r3, #2
 800da66:	491b      	ldr	r1, [pc, #108]	; (800dad4 <lTCPAddRxdata+0xe8>)
 800da68:	fba1 1202 	umull	r1, r2, r1, r2
 800da6c:	0892      	lsrs	r2, r2, #2
 800da6e:	66a2      	str	r2, [r4, #104]	; 0x68
		uxLength += sizeof( size_t );
 800da70:	3304      	adds	r3, #4
		uxLength &= ~( sizeof( size_t ) - 1u );
 800da72:	f023 0903 	bic.w	r9, r3, #3
		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800da76:	f109 0014 	add.w	r0, r9, #20
 800da7a:	f005 fd45 	bl	8013508 <pvPortMalloc>
		if( pxBuffer == NULL )
 800da7e:	4605      	mov	r5, r0
 800da80:	b140      	cbz	r0, 800da94 <lTCPAddRxdata+0xa8>
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800da82:	2300      	movs	r3, #0
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	6043      	str	r3, [r0, #4]
 800da88:	6083      	str	r3, [r0, #8]
 800da8a:	60c3      	str	r3, [r0, #12]
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800da8c:	f8c0 9010 	str.w	r9, [r0, #16]
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800da90:	6760      	str	r0, [r4, #116]	; 0x74
 800da92:	e7b3      	b.n	800d9fc <lTCPAddRxdata+0x10>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800da94:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800da98:	f043 0308 	orr.w	r3, r3, #8
 800da9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800daa0:	2108      	movs	r1, #8
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 fe64 	bl	800e770 <vTCPStateChange>
				return -1;
 800daa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800daac:	e7cc      	b.n	800da48 <lTCPAddRxdata+0x5c>
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800daae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dab6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800daba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
						pxSocket->u.xTCP.usTimeout = 1u;
 800dac6:	2301      	movs	r3, #1
 800dac8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800dacc:	2005      	movs	r0, #5
 800dace:	f7fe fd41 	bl	800c554 <xSendEventToIPTask>
 800dad2:	e7ac      	b.n	800da2e <lTCPAddRxdata+0x42>
 800dad4:	cccccccd 	.word	0xcccccccd

0800dad8 <FreeRTOS_GetRemoteAddress>:
	BaseType_t FreeRTOS_GetRemoteAddress( Socket_t xSocket, struct freertos_sockaddr *pxAddress )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xResult;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dad8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800dadc:	2b06      	cmp	r3, #6
 800dade:	d116      	bne.n	800db0e <FreeRTOS_GetRemoteAddress+0x36>
	{
 800dae0:	b410      	push	{r4}
		{
			/* BSD style sockets communicate IP and port addresses in network
			byte order.

			IP address of remote machine. */
			pxAddress->sin_addr = FreeRTOS_htonl ( pxSocket->u.xTCP.ulRemoteIP );
 800dae2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dae4:	0e1a      	lsrs	r2, r3, #24
 800dae6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800daea:	021c      	lsls	r4, r3, #8
 800daec:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800daf0:	4322      	orrs	r2, r4
 800daf2:	0a1b      	lsrs	r3, r3, #8
 800daf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800daf8:	4313      	orrs	r3, r2
 800dafa:	604b      	str	r3, [r1, #4]

			/* Port on remote machine. */
			pxAddress->sin_port = FreeRTOS_htons ( pxSocket->u.xTCP.usRemotePort );
 800dafc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800dafe:	0a13      	lsrs	r3, r2, #8
 800db00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db04:	804b      	strh	r3, [r1, #2]

			xResult = ( BaseType_t ) sizeof( ( *pxAddress ) );
 800db06:	2008      	movs	r0, #8
		}

		return xResult;
	}
 800db08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db0c:	4770      	bx	lr
			xResult = -pdFREERTOS_ERRNO_EINVAL;
 800db0e:	f06f 0015 	mvn.w	r0, #21
		return xResult;
 800db12:	4770      	bx	lr

0800db14 <FreeRTOS_tx_space>:
	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800db14:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800db18:	2b06      	cmp	r3, #6
 800db1a:	d10d      	bne.n	800db38 <FreeRTOS_tx_space+0x24>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800db1c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800db1e:	b14b      	cbz	r3, 800db34 <FreeRTOS_tx_space+0x20>
size_t uxHead = pxBuffer->uxHead;
 800db20:	689a      	ldr	r2, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
 800db22:	6818      	ldr	r0, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	4418      	add	r0, r3
 800db28:	3801      	subs	r0, #1
 800db2a:	1a80      	subs	r0, r0, r2
	if( uxCount >= pxBuffer->LENGTH )
 800db2c:	4283      	cmp	r3, r0
 800db2e:	d805      	bhi.n	800db3c <FreeRTOS_tx_space+0x28>
		uxCount -= pxBuffer->LENGTH;
 800db30:	1ac0      	subs	r0, r0, r3
 800db32:	4770      	bx	lr
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800db34:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800db36:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800db38:	f06f 0015 	mvn.w	r0, #21
			}
		}

		return xReturn;
	}
 800db3c:	4770      	bx	lr

0800db3e <FreeRTOS_tx_size>:
	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800db3e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800db42:	2b06      	cmp	r3, #6
 800db44:	d10a      	bne.n	800db5c <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800db46:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800db48:	b15b      	cbz	r3, 800db62 <FreeRTOS_tx_size+0x24>
size_t uxHead = pxBuffer->uxHead;
 800db4a:	6898      	ldr	r0, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
 800db4c:	681a      	ldr	r2, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	4418      	add	r0, r3
 800db52:	1a80      	subs	r0, r0, r2
	if ( uxCount >= pxBuffer->LENGTH )
 800db54:	4283      	cmp	r3, r0
 800db56:	d805      	bhi.n	800db64 <FreeRTOS_tx_size+0x26>
		uxCount -= pxBuffer->LENGTH;
 800db58:	1ac0      	subs	r0, r0, r3
 800db5a:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800db5c:	f06f 0015 	mvn.w	r0, #21
 800db60:	4770      	bx	lr
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
			}
			else
			{
				xReturn = 0;
 800db62:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 800db64:	4770      	bx	lr
	...

0800db68 <FreeRTOS_setsockopt>:
{
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	4615      	mov	r5, r2
 800db6e:	461e      	mov	r6, r3
	configASSERT( xSocket );
 800db70:	4604      	mov	r4, r0
 800db72:	b1a0      	cbz	r0, 800db9e <FreeRTOS_setsockopt+0x36>
	switch( lOptionName )
 800db74:	2d0f      	cmp	r5, #15
 800db76:	f200 810c 	bhi.w	800dd92 <FreeRTOS_setsockopt+0x22a>
 800db7a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800db7e:	0016      	.short	0x0016
 800db80:	002c001c 	.word	0x002c001c
 800db84:	003d010a 	.word	0x003d010a
 800db88:	010a003d 	.word	0x010a003d
 800db8c:	010a010a 	.word	0x010a010a
 800db90:	010a010a 	.word	0x010a010a
 800db94:	00a70091 	.word	0x00a70091
 800db98:	00bc0060 	.word	0x00bc0060
 800db9c:	00e9      	.short	0x00e9
	configASSERT( xSocket );
 800db9e:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 800dba2:	488f      	ldr	r0, [pc, #572]	; (800dde0 <FreeRTOS_setsockopt+0x278>)
 800dba4:	f009 fb7c 	bl	80172a0 <vAssertCalled>
 800dba8:	e7e4      	b.n	800db74 <FreeRTOS_setsockopt+0xc>
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 800dbaa:	6833      	ldr	r3, [r6, #0]
 800dbac:	61e3      	str	r3, [r4, #28]
			xReturn = 0;
 800dbae:	2300      	movs	r3, #0
} /* Tested */
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	b002      	add	sp, #8
 800dbb4:	bd70      	pop	{r4, r5, r6, pc}
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 800dbb6:	6833      	ldr	r3, [r6, #0]
 800dbb8:	6223      	str	r3, [r4, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800dbba:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800dbbe:	2a11      	cmp	r2, #17
 800dbc0:	d001      	beq.n	800dbc6 <FreeRTOS_setsockopt+0x5e>
			xReturn = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e7f4      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800dbc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	f240 80e4 	bls.w	800dd98 <FreeRTOS_setsockopt+0x230>
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800dbd0:	6222      	str	r2, [r4, #32]
			xReturn = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e7ec      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
			lOptionValue = ( BaseType_t ) pvOptionValue;
 800dbd6:	4633      	mov	r3, r6
			if( lOptionValue == 0 )
 800dbd8:	b936      	cbnz	r6, 800dbe8 <FreeRTOS_setsockopt+0x80>
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 800dbda:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800dbde:	f022 0202 	bic.w	r2, r2, #2
 800dbe2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 800dbe6:	e7e3      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800dbe8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			xReturn = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e7db      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dbf8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dbfc:	2b06      	cmp	r3, #6
 800dbfe:	f040 80cd 	bne.w	800dd9c <FreeRTOS_setsockopt+0x234>
					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800dc02:	2d04      	cmp	r5, #4
 800dc04:	d005      	beq.n	800dc12 <FreeRTOS_setsockopt+0xaa>
 800dc06:	2d05      	cmp	r5, #5
 800dc08:	d013      	beq.n	800dc32 <FreeRTOS_setsockopt+0xca>
					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800dc0a:	6833      	ldr	r3, [r6, #0]
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800dc0c:	66e3      	str	r3, [r4, #108]	; 0x6c
				xReturn = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e7ce      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800dc12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f040 80c4 	bne.w	800dda2 <FreeRTOS_setsockopt+0x23a>
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800dc1a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800dc1e:	6833      	ldr	r3, [r6, #0]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	4413      	add	r3, r2
 800dc24:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc28:	fb02 f303 	mul.w	r3, r2, r3
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800dc2c:	6723      	str	r3, [r4, #112]	; 0x70
				xReturn = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	e7be      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800dc32:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f040 80b7 	bne.w	800dda8 <FreeRTOS_setsockopt+0x240>
					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800dc3a:	6833      	ldr	r3, [r6, #0]
 800dc3c:	e7e6      	b.n	800dc0c <FreeRTOS_setsockopt+0xa4>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dc3e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dc42:	2b06      	cmp	r3, #6
 800dc44:	f040 80b3 	bne.w	800ddae <FreeRTOS_setsockopt+0x246>
					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800dc48:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f040 80b2 	bne.w	800ddb4 <FreeRTOS_setsockopt+0x24c>
 800dc50:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f040 80b1 	bne.w	800ddba <FreeRTOS_setsockopt+0x252>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 800dc58:	2504      	movs	r5, #4
 800dc5a:	9500      	str	r5, [sp, #0]
 800dc5c:	4633      	mov	r3, r6
 800dc5e:	462a      	mov	r2, r5
 800dc60:	2100      	movs	r1, #0
 800dc62:	4620      	mov	r0, r4
 800dc64:	f7ff ff80 	bl	800db68 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 800dc68:	9500      	str	r5, [sp, #0]
 800dc6a:	f106 0308 	add.w	r3, r6, #8
 800dc6e:	2205      	movs	r2, #5
 800dc70:	2100      	movs	r1, #0
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7ff ff78 	bl	800db68 <FreeRTOS_setsockopt>
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 800dc78:	68f3      	ldr	r3, [r6, #12]
 800dc7a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 800dc7e:	6873      	ldr	r3, [r6, #4]
 800dc80:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800dc84:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
 800dc88:	f012 0f01 	tst.w	r2, #1
 800dc8c:	f000 8098 	beq.w	800ddc0 <FreeRTOS_setsockopt+0x258>
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800dc90:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800dc94:	fb03 f302 	mul.w	r3, r3, r2
 800dc98:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
				xReturn = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e787      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dca0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dca4:	2b06      	cmp	r3, #6
 800dca6:	f040 808d 	bne.w	800ddc4 <FreeRTOS_setsockopt+0x25c>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800dcaa:	6833      	ldr	r3, [r6, #0]
 800dcac:	b13b      	cbz	r3, 800dcbe <FreeRTOS_setsockopt+0x156>
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800dcae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dcb2:	f043 0308 	orr.w	r3, r3, #8
 800dcb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				xReturn = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e778      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800dcbe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800dcc2:	f36f 02c3 	bfc	r2, #3, #1
 800dcc6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800dcca:	e771      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dccc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dcd0:	2b06      	cmp	r3, #6
 800dcd2:	d17a      	bne.n	800ddca <FreeRTOS_setsockopt+0x262>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800dcd4:	6833      	ldr	r3, [r6, #0]
 800dcd6:	b13b      	cbz	r3, 800dce8 <FreeRTOS_setsockopt+0x180>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800dcd8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800dcdc:	f043 0310 	orr.w	r3, r3, #16
 800dce0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				xReturn = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	e763      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800dce8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800dcec:	f36f 1204 	bfc	r2, #4, #1
 800dcf0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800dcf4:	e75c      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dcf6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dcfa:	2b06      	cmp	r3, #6
 800dcfc:	d168      	bne.n	800ddd0 <FreeRTOS_setsockopt+0x268>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800dcfe:	6833      	ldr	r3, [r6, #0]
 800dd00:	b183      	cbz	r3, 800dd24 <FreeRTOS_setsockopt+0x1bc>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800dd02:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800dd06:	f043 0302 	orr.w	r3, r3, #2
 800dd0a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800dd0e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800dd12:	f013 0f02 	tst.w	r3, #2
 800dd16:	d15e      	bne.n	800ddd6 <FreeRTOS_setsockopt+0x26e>
 800dd18:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d808      	bhi.n	800dd32 <FreeRTOS_setsockopt+0x1ca>
				xReturn = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e745      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800dd24:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800dd28:	f36f 0341 	bfc	r3, #1, #1
 800dd2c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 800dd30:	e7ed      	b.n	800dd0e <FreeRTOS_setsockopt+0x1a6>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff ff03 	bl	800db3e <FreeRTOS_tx_size>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	f43f af38 	beq.w	800dbb0 <FreeRTOS_setsockopt+0x48>
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
 800dd40:	2301      	movs	r3, #1
 800dd42:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800dd46:	2005      	movs	r0, #5
 800dd48:	f7fe fc04 	bl	800c554 <xSendEventToIPTask>
				xReturn = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e72f      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dd50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800dd54:	2b06      	cmp	r3, #6
 800dd56:	d140      	bne.n	800ddda <FreeRTOS_setsockopt+0x272>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800dd58:	6833      	ldr	r3, [r6, #0]
 800dd5a:	b19b      	cbz	r3, 800dd84 <FreeRTOS_setsockopt+0x21c>
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800dd5c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dd60:	f043 0304 	orr.w	r3, r3, #4
 800dd64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dd68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dd6c:	f043 0301 	orr.w	r3, r3, #1
 800dd70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 800dd74:	2301      	movs	r3, #1
 800dd76:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 800dd7a:	2005      	movs	r0, #5
 800dd7c:	f7fe fbea 	bl	800c554 <xSendEventToIPTask>
				xReturn = 0;
 800dd80:	2300      	movs	r3, #0
				break;
 800dd82:	e715      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800dd84:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800dd88:	f36f 0382 	bfc	r3, #2, #1
 800dd8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd90:	e7ea      	b.n	800dd68 <FreeRTOS_setsockopt+0x200>
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800dd92:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800dd96:	e70b      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
			xReturn = 0;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	e709      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dd9c:	f06f 0315 	mvn.w	r3, #21
 800dda0:	e706      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800dda2:	f06f 0315 	mvn.w	r3, #21
 800dda6:	e703      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800dda8:	f06f 0315 	mvn.w	r3, #21
 800ddac:	e700      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800ddae:	f06f 0315 	mvn.w	r3, #21
 800ddb2:	e6fd      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800ddb4:	f06f 0315 	mvn.w	r3, #21
 800ddb8:	e6fa      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800ddba:	f06f 0315 	mvn.w	r3, #21
 800ddbe:	e6f7      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
				xReturn = 0;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e6f5      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddc4:	f06f 0315 	mvn.w	r3, #21
 800ddc8:	e6f2      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800ddca:	f06f 0315 	mvn.w	r3, #21
 800ddce:	e6ef      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800ddd0:	f06f 0315 	mvn.w	r3, #21
 800ddd4:	e6ec      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
				xReturn = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	e6ea      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddda:	f06f 0315 	mvn.w	r3, #21
	return xReturn;
 800ddde:	e6e7      	b.n	800dbb0 <FreeRTOS_setsockopt+0x48>
 800dde0:	0801a224 	.word	0x0801a224

0800dde4 <FreeRTOS_issocketconnected>:
	BaseType_t FreeRTOS_issocketconnected( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn = pdFALSE;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dde4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800dde8:	2b06      	cmp	r3, #6
 800ddea:	d108      	bne.n	800ddfe <FreeRTOS_issocketconnected+0x1a>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800ddec:	f890 0053 	ldrb.w	r0, [r0, #83]	; 0x53
 800ddf0:	3805      	subs	r0, #5
 800ddf2:	b2c0      	uxtb	r0, r0
 800ddf4:	2802      	cmp	r0, #2
 800ddf6:	bf8c      	ite	hi
 800ddf8:	2000      	movhi	r0, #0
 800ddfa:	2001      	movls	r0, #1
 800ddfc:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddfe:	f06f 0015 	mvn.w	r0, #21
				}
			}
		}

		return xReturn;
	}
 800de02:	4770      	bx	lr

0800de04 <FreeRTOS_connect>:
	{
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	4604      	mov	r4, r0
 800de0a:	460d      	mov	r5, r1
		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800de0c:	2200      	movs	r2, #0
 800de0e:	2106      	movs	r1, #6
 800de10:	f7fe fe5a 	bl	800cac8 <prvValidSocket>
 800de14:	2800      	cmp	r0, #0
 800de16:	d06c      	beq.n	800def2 <FreeRTOS_connect+0xee>
		else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800de18:	4620      	mov	r0, r4
 800de1a:	f7ff ffe3 	bl	800dde4 <FreeRTOS_issocketconnected>
 800de1e:	2800      	cmp	r0, #0
 800de20:	dd02      	ble.n	800de28 <FreeRTOS_connect+0x24>
			xResult = -pdFREERTOS_ERRNO_EISCONN;
 800de22:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800de26:	e066      	b.n	800def6 <FreeRTOS_connect+0xf2>
		else if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800de28:	69a3      	ldr	r3, [r4, #24]
 800de2a:	b14b      	cbz	r3, 800de40 <FreeRTOS_connect+0x3c>
		switch( pxSocket->u.xTCP.ucTCPState )
 800de2c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800de30:	2b02      	cmp	r3, #2
 800de32:	d063      	beq.n	800defc <FreeRTOS_connect+0xf8>
 800de34:	2b08      	cmp	r3, #8
 800de36:	d00c      	beq.n	800de52 <FreeRTOS_connect+0x4e>
 800de38:	b15b      	cbz	r3, 800de52 <FreeRTOS_connect+0x4e>
			default:			return -pdFREERTOS_ERRNO_EAGAIN;
 800de3a:	f06f 030a 	mvn.w	r3, #10
 800de3e:	e05a      	b.n	800def6 <FreeRTOS_connect+0xf2>
			xResult = FreeRTOS_bind( ( Socket_t ) pxSocket, NULL, 0u );
 800de40:	2200      	movs	r2, #0
 800de42:	4611      	mov	r1, r2
 800de44:	4620      	mov	r0, r4
 800de46:	f7ff f886 	bl	800cf56 <FreeRTOS_bind>
		if( xResult == 0 )
 800de4a:	4603      	mov	r3, r0
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d0ed      	beq.n	800de2c <FreeRTOS_connect+0x28>
 800de50:	e051      	b.n	800def6 <FreeRTOS_connect+0xf2>
				pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE_UNSIGNED;
 800de52:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800de56:	f36f 03c3 	bfc	r3, #3, #1
 800de5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
				pxSocket->u.xTCP.ucRepCount = 0u;
 800de5e:	2300      	movs	r3, #0
 800de60:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
				pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800de64:	886a      	ldrh	r2, [r5, #2]
 800de66:	0a13      	lsrs	r3, r2, #8
 800de68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800de6c:	87a3      	strh	r3, [r4, #60]	; 0x3c
				pxSocket->u.xTCP.ulRemoteIP = FreeRTOS_ntohl( pxAddress->sin_addr );
 800de6e:	686b      	ldr	r3, [r5, #4]
 800de70:	0e1a      	lsrs	r2, r3, #24
 800de72:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800de76:	0219      	lsls	r1, r3, #8
 800de78:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800de7c:	430a      	orrs	r2, r1
 800de7e:	0a1b      	lsrs	r3, r3, #8
 800de80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de84:	4313      	orrs	r3, r2
 800de86:	63a3      	str	r3, [r4, #56]	; 0x38
				vTCPStateChange( pxSocket, eCONNECT_SYN );
 800de88:	2102      	movs	r1, #2
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 fc70 	bl	800e770 <vTCPStateChange>
				pxSocket->u.xTCP.usTimeout = 1u;
 800de90:	2301      	movs	r3, #1
 800de92:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
				if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800de96:	2005      	movs	r0, #5
 800de98:	f7fe fb5c 	bl	800c554 <xSendEventToIPTask>
 800de9c:	4605      	mov	r5, r0
 800de9e:	2801      	cmp	r0, #1
 800dea0:	d12f      	bne.n	800df02 <FreeRTOS_connect+0xfe>
 800dea2:	2300      	movs	r3, #0
				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 800dea4:	461e      	mov	r6, r3
 800dea6:	e013      	b.n	800ded0 <FreeRTOS_connect+0xcc>
				xResult = FreeRTOS_issocketconnected( pxSocket );
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7ff ff9b 	bl	800dde4 <FreeRTOS_issocketconnected>
				if( xResult < 0 )
 800deae:	1e03      	subs	r3, r0, #0
 800deb0:	db21      	blt.n	800def6 <FreeRTOS_connect+0xf2>
				if( xResult > 0 )
 800deb2:	dc19      	bgt.n	800dee8 <FreeRTOS_connect+0xe4>
				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800deb4:	a905      	add	r1, sp, #20
 800deb6:	a803      	add	r0, sp, #12
 800deb8:	f006 fe34 	bl	8014b24 <xTaskCheckForTimeOut>
 800debc:	b9b0      	cbnz	r0, 800deec <FreeRTOS_connect+0xe8>
				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 800debe:	9b05      	ldr	r3, [sp, #20]
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	4633      	mov	r3, r6
 800dec4:	2201      	movs	r2, #1
 800dec6:	2108      	movs	r1, #8
 800dec8:	6860      	ldr	r0, [r4, #4]
 800deca:	f004 fff1 	bl	8012eb0 <xEventGroupWaitBits>
 800dece:	462b      	mov	r3, r5
				if( xTimed == pdFALSE )
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e9      	bne.n	800dea8 <FreeRTOS_connect+0xa4>
					xRemainingTime = pxSocket->xReceiveBlockTime;
 800ded4:	69e3      	ldr	r3, [r4, #28]
 800ded6:	9305      	str	r3, [sp, #20]
					if( xRemainingTime == ( TickType_t )0 )
 800ded8:	b11b      	cbz	r3, 800dee2 <FreeRTOS_connect+0xde>
					vTaskSetTimeOutState( &xTimeOut );
 800deda:	a803      	add	r0, sp, #12
 800dedc:	f006 fe0c 	bl	8014af8 <vTaskSetTimeOutState>
 800dee0:	e7e2      	b.n	800dea8 <FreeRTOS_connect+0xa4>
						xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800dee2:	f06f 030a 	mvn.w	r3, #10
 800dee6:	e006      	b.n	800def6 <FreeRTOS_connect+0xf2>
					xResult = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	e004      	b.n	800def6 <FreeRTOS_connect+0xf2>
					xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800deec:	f06f 0373 	mvn.w	r3, #115	; 0x73
		return xResult;
 800def0:	e001      	b.n	800def6 <FreeRTOS_connect+0xf2>
			xResult = -pdFREERTOS_ERRNO_EBADF;
 800def2:	f06f 0308 	mvn.w	r3, #8
	}
 800def6:	4618      	mov	r0, r3
 800def8:	b006      	add	sp, #24
 800defa:	bd70      	pop	{r4, r5, r6, pc}
			case eCONNECT_SYN:	return -pdFREERTOS_ERRNO_EINPROGRESS;
 800defc:	f06f 0376 	mvn.w	r3, #118	; 0x76
 800df00:	e7f9      	b.n	800def6 <FreeRTOS_connect+0xf2>
					xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800df02:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800df06:	e7f6      	b.n	800def6 <FreeRTOS_connect+0xf2>

0800df08 <FreeRTOS_connstatus>:
	BaseType_t FreeRTOS_connstatus( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df08:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800df0c:	2b06      	cmp	r3, #6
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			/* Cast it to BaseType_t */
			xReturn = ( BaseType_t ) ( pxSocket->u.xTCP.ucTCPState );
 800df0e:	bf0c      	ite	eq
 800df10:	f890 0053 	ldrbeq.w	r0, [r0, #83]	; 0x53
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df14:	f06f 0015 	mvnne.w	r0, #21
		}

		return xReturn;
	}
 800df18:	4770      	bx	lr

0800df1a <FreeRTOS_rx_size>:
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df1a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800df1e:	2b06      	cmp	r3, #6
 800df20:	d10a      	bne.n	800df38 <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800df22:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800df24:	b15b      	cbz	r3, 800df3e <FreeRTOS_rx_size+0x24>
size_t uxHead = pxBuffer->uxHead;
 800df26:	6898      	ldr	r0, [r3, #8]
size_t uxTail = pxBuffer->uxTail;
 800df28:	681a      	ldr	r2, [r3, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	4418      	add	r0, r3
 800df2e:	1a80      	subs	r0, r0, r2
	if ( uxCount >= pxBuffer->LENGTH )
 800df30:	4283      	cmp	r3, r0
 800df32:	d805      	bhi.n	800df40 <FreeRTOS_rx_size+0x26>
		uxCount -= pxBuffer->LENGTH;
 800df34:	1ac0      	subs	r0, r0, r3
 800df36:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df38:	f06f 0015 	mvn.w	r0, #21
 800df3c:	4770      	bx	lr
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
		}
		else
		{
			xReturn = 0;
 800df3e:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 800df40:	4770      	bx	lr

0800df42 <FreeRTOS_netstat>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	void FreeRTOS_netstat( void )
	{
 800df42:	b500      	push	{lr}
 800df44:	b083      	sub	sp, #12
	IPStackEvent_t xAskEvent;

		/* Ask the IP-task to call vTCPNetStat()
		 * to avoid accessing xBoundTCPSocketsList
		 */
		xAskEvent.eEventType = eTCPNetStat;
 800df46:	2307      	movs	r3, #7
 800df48:	f88d 3000 	strb.w	r3, [sp]
		xAskEvent.pvData = ( void * ) NULL;
 800df4c:	2300      	movs	r3, #0
 800df4e:	9301      	str	r3, [sp, #4]
		xSendEventStructToIPTask( &xAskEvent, 1000u );
 800df50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800df54:	4668      	mov	r0, sp
 800df56:	f7fe fa67 	bl	800c428 <xSendEventStructToIPTask>
	}
 800df5a:	b003      	add	sp, #12
 800df5c:	f85d fb04 	ldr.w	pc, [sp], #4

0800df60 <vTCPNetStat>:
/*-----------------------------------------------------------*/

#if( ( ipconfigHAS_PRINTF != 0 ) && ( ipconfigUSE_TCP == 1 ) )

	void vTCPNetStat( void )
	{
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	b08d      	sub	sp, #52	; 0x34
	/* Show a simple listing of all created sockets and their connections */
	ListItem_t *pxIterator;
	BaseType_t count = 0;

		if( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) == pdFALSE )
 800df66:	4b40      	ldr	r3, [pc, #256]	; (800e068 <vTCPNetStat+0x108>)
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df6e:	d005      	beq.n	800df7c <vTCPNetStat+0x1c>
		{
			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800df70:	483e      	ldr	r0, [pc, #248]	; (800e06c <vTCPNetStat+0x10c>)
 800df72:	f008 fced 	bl	8016950 <lUDPLoggingPrintf>
				count,
				uxGetMinimumFreeNetworkBuffers( ),
				uxGetNumberOfFreeNetworkBuffers( ),
				ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
		}
	}
 800df76:	b00d      	add	sp, #52	; 0x34
 800df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800df7c:	483c      	ldr	r0, [pc, #240]	; (800e070 <vTCPNetStat+0x110>)
 800df7e:	f008 fce7 	bl	8016950 <lUDPLoggingPrintf>
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800df82:	4b39      	ldr	r3, [pc, #228]	; (800e068 <vTCPNetStat+0x108>)
 800df84:	68de      	ldr	r6, [r3, #12]
 800df86:	3308      	adds	r3, #8
 800df88:	429e      	cmp	r6, r3
 800df8a:	d06b      	beq.n	800e064 <vTCPNetStat+0x104>
 800df8c:	2700      	movs	r7, #0
				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 800df8e:	46b9      	mov	r9, r7
 800df90:	e02d      	b.n	800dfee <vTCPNetStat+0x8e>
 800df92:	f8b4 a024 	ldrh.w	sl, [r4, #36]	; 0x24
 800df96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df98:	9307      	str	r3, [sp, #28]
 800df9a:	f8b4 b03c 	ldrh.w	fp, [r4, #60]	; 0x3c
 800df9e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800dfa0:	3700      	adds	r7, #0
 800dfa2:	bf18      	it	ne
 800dfa4:	2701      	movne	r7, #1
 800dfa6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dfa8:	f113 0800 	adds.w	r8, r3, #0
 800dfac:	bf18      	it	ne
 800dfae:	f04f 0801 	movne.w	r8, #1
 800dfb2:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 800dfb6:	f001 fd7f 	bl	800fab8 <FreeRTOS_GetTCPStateName>
 800dfba:	a908      	add	r1, sp, #32
 800dfbc:	9105      	str	r1, [sp, #20]
 800dfbe:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800dfc2:	9304      	str	r3, [sp, #16]
 800dfc4:	4b2b      	ldr	r3, [pc, #172]	; (800e074 <vTCPNetStat+0x114>)
 800dfc6:	429d      	cmp	r5, r3
 800dfc8:	bf28      	it	cs
 800dfca:	461d      	movcs	r5, r3
 800dfcc:	9503      	str	r5, [sp, #12]
 800dfce:	9002      	str	r0, [sp, #8]
 800dfd0:	f8cd 8004 	str.w	r8, [sp, #4]
 800dfd4:	9700      	str	r7, [sp, #0]
 800dfd6:	465b      	mov	r3, fp
 800dfd8:	9a07      	ldr	r2, [sp, #28]
 800dfda:	4651      	mov	r1, sl
 800dfdc:	4826      	ldr	r0, [pc, #152]	; (800e078 <vTCPNetStat+0x118>)
 800dfde:	f008 fcb7 	bl	8016950 <lUDPLoggingPrintf>
				count++;
 800dfe2:	f109 0901 	add.w	r9, r9, #1
				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800dfe6:	6876      	ldr	r6, [r6, #4]
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dfe8:	4b24      	ldr	r3, [pc, #144]	; (800e07c <vTCPNetStat+0x11c>)
 800dfea:	429e      	cmp	r6, r3
 800dfec:	d018      	beq.n	800e020 <vTCPNetStat+0xc0>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800dfee:	68f4      	ldr	r4, [r6, #12]
					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800dff0:	f006 fa8e 	bl	8014510 <xTaskGetTickCount>
 800dff4:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800dff6:	1b45      	subs	r5, r0, r5
				char ucChildText[16] = "";
 800dff8:	2300      	movs	r3, #0
 800dffa:	9308      	str	r3, [sp, #32]
 800dffc:	9309      	str	r3, [sp, #36]	; 0x24
 800dffe:	930a      	str	r3, [sp, #40]	; 0x28
 800e000:	930b      	str	r3, [sp, #44]	; 0x2c
				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
 800e002:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800e006:	2b01      	cmp	r3, #1
 800e008:	d1c3      	bne.n	800df92 <vTCPNetStat+0x32>
					snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800e00a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800e00e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800e012:	9200      	str	r2, [sp, #0]
 800e014:	4a1a      	ldr	r2, [pc, #104]	; (800e080 <vTCPNetStat+0x120>)
 800e016:	2110      	movs	r1, #16
 800e018:	a808      	add	r0, sp, #32
 800e01a:	f008 ffde 	bl	8016fda <snprintf>
 800e01e:	e7b8      	b.n	800df92 <vTCPNetStat+0x32>
 800e020:	464f      	mov	r7, r9
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800e022:	4b18      	ldr	r3, [pc, #96]	; (800e084 <vTCPNetStat+0x124>)
 800e024:	68dc      	ldr	r4, [r3, #12]
 800e026:	3308      	adds	r3, #8
 800e028:	429c      	cmp	r4, r3
 800e02a:	d00d      	beq.n	800e048 <vTCPNetStat+0xe8>
				FreeRTOS_printf( ( "UDP Port %5u\n",
 800e02c:	4e16      	ldr	r6, [pc, #88]	; (800e088 <vTCPNetStat+0x128>)
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800e02e:	461d      	mov	r5, r3
				FreeRTOS_printf( ( "UDP Port %5u\n",
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	0a19      	lsrs	r1, r3, #8
 800e034:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800e038:	b289      	uxth	r1, r1
 800e03a:	4630      	mov	r0, r6
 800e03c:	f008 fc88 	bl	8016950 <lUDPLoggingPrintf>
				count++;
 800e040:	3701      	adds	r7, #1
				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e042:	6864      	ldr	r4, [r4, #4]
			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800e044:	42ac      	cmp	r4, r5
 800e046:	d1f3      	bne.n	800e030 <vTCPNetStat+0xd0>
			FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %d buffers free\n",
 800e048:	f002 fafc 	bl	8010644 <uxGetMinimumFreeNetworkBuffers>
 800e04c:	4604      	mov	r4, r0
 800e04e:	f002 faf3 	bl	8010638 <uxGetNumberOfFreeNetworkBuffers>
 800e052:	2319      	movs	r3, #25
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	4603      	mov	r3, r0
 800e058:	4622      	mov	r2, r4
 800e05a:	4639      	mov	r1, r7
 800e05c:	480b      	ldr	r0, [pc, #44]	; (800e08c <vTCPNetStat+0x12c>)
 800e05e:	f008 fc77 	bl	8016950 <lUDPLoggingPrintf>
	}
 800e062:	e788      	b.n	800df76 <vTCPNetStat+0x16>
	BaseType_t count = 0;
 800e064:	2700      	movs	r7, #0
 800e066:	e7dc      	b.n	800e022 <vTCPNetStat+0xc2>
 800e068:	20002990 	.word	0x20002990
 800e06c:	0801a25c 	.word	0x0801a25c
 800e070:	0801a278 	.word	0x0801a278
 800e074:	000f423f 	.word	0x000f423f
 800e078:	0801a2c8 	.word	0x0801a2c8
 800e07c:	20002998 	.word	0x20002998
 800e080:	0801a2c0 	.word	0x0801a2c0
 800e084:	200029a4 	.word	0x200029a4
 800e088:	0801a2f8 	.word	0x0801a2f8
 800e08c:	0801a308 	.word	0x0801a308

0800e090 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	b085      	sub	sp, #20
 800e096:	4606      	mov	r6, r0
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
		pxSocketSet->pxSocket = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	6083      	str	r3, [r0, #8]
 800e09c:	f04f 0a01 	mov.w	sl, #1
		EventBits_t xGroupBits = 0;
 800e0a0:	4698      	mov	r8, r3
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800e0a2:	4b51      	ldr	r3, [pc, #324]	; (800e1e8 <vSocketSelect+0x158>)
 800e0a4:	3308      	adds	r3, #8
 800e0a6:	9303      	str	r3, [sp, #12]
 800e0a8:	f8df b148 	ldr.w	fp, [pc, #328]	; 800e1f4 <vSocketSelect+0x164>
 800e0ac:	f10b 0308 	add.w	r3, fp, #8
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	e070      	b.n	800e196 <vSocketSelect+0x106>
 800e0b4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800e0b8:	f003 0306 	and.w	r3, r3, #6
 800e0bc:	9302      	str	r3, [sp, #8]
								bAccepted = pdTRUE;
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800e0be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e0c0:	f013 0f01 	tst.w	r3, #1
 800e0c4:	d01b      	beq.n	800e0fe <vSocketSelect+0x6e>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800e0c6:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
 800e0ca:	2a01      	cmp	r2, #1
 800e0cc:	d004      	beq.n	800e0d8 <vSocketSelect+0x48>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
								{
									xSocketBits |= eSELECT_READ;
								}
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800e0ce:	9b02      	ldr	r3, [sp, #8]
 800e0d0:	b15b      	cbz	r3, 800e0ea <vSocketSelect+0x5a>
				xSocketBits = 0;
 800e0d2:	f04f 0900 	mov.w	r9, #0
 800e0d6:	e014      	b.n	800e102 <vSocketSelect+0x72>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800e0d8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800e0da:	2a00      	cmp	r2, #0
 800e0dc:	f000 8081 	beq.w	800e1e2 <vSocketSelect+0x152>
 800e0e0:	f892 9040 	ldrb.w	r9, [r2, #64]	; 0x40
 800e0e4:	f3c9 0940 	ubfx	r9, r9, #1, #1
 800e0e8:	e016      	b.n	800e118 <vSocketSelect+0x88>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7ff ff15 	bl	800df1a <FreeRTOS_rx_size>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	bfd4      	ite	le
 800e0f4:	f04f 0900 	movle.w	r9, #0
 800e0f8:	f04f 0901 	movgt.w	r9, #1
 800e0fc:	e001      	b.n	800e102 <vSocketSelect+0x72>
				xSocketBits = 0;
 800e0fe:	f04f 0900 	mov.w	r9, #0
							{
								xSocketBits |= eSELECT_READ;
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800e102:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e104:	f013 0f04 	tst.w	r3, #4
 800e108:	d006      	beq.n	800e118 <vSocketSelect+0x88>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800e10a:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
 800e10e:	f012 0ff7 	tst.w	r2, #247	; 0xf7
							{
								xSocketBits |= eSELECT_EXCEPT;
 800e112:	bf08      	it	eq
 800e114:	f049 0904 	orreq.w	r9, r9, #4
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800e118:	f013 0f02 	tst.w	r3, #2
 800e11c:	d01c      	beq.n	800e158 <vSocketSelect+0xc8>
						{
							BaseType_t bMatch = pdFALSE;

							if( bAccepted != 0 )
 800e11e:	9b02      	ldr	r3, [sp, #8]
 800e120:	b183      	cbz	r3, 800e144 <vSocketSelect+0xb4>
								}
							}

							if( bMatch == pdFALSE )
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800e122:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800e126:	f013 0f08 	tst.w	r3, #8
 800e12a:	d015      	beq.n	800e158 <vSocketSelect+0xc8>
 800e12c:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
 800e130:	2a04      	cmp	r2, #4
 800e132:	d911      	bls.n	800e158 <vSocketSelect+0xc8>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800e134:	f013 0f10 	tst.w	r3, #16
 800e138:	d10e      	bne.n	800e158 <vSocketSelect+0xc8>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800e13a:	f043 0310 	orr.w	r3, r3, #16
 800e13e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800e142:	e004      	b.n	800e14e <vSocketSelect+0xbe>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800e144:	4628      	mov	r0, r5
 800e146:	f7ff fce5 	bl	800db14 <FreeRTOS_tx_space>
							if( bMatch == pdFALSE )
 800e14a:	2800      	cmp	r0, #0
 800e14c:	dde9      	ble.n	800e122 <vSocketSelect+0x92>
								}
							}

							if( bMatch != pdFALSE )
							{
								xSocketBits |= eSELECT_WRITE;
 800e14e:	f049 0902 	orr.w	r9, r9, #2
 800e152:	e001      	b.n	800e158 <vSocketSelect+0xc8>
				xSocketBits = 0;
 800e154:	f04f 0900 	mov.w	r9, #0
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800e158:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800e15c:	ea48 0809 	orr.w	r8, r8, r9
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e160:	6864      	ldr	r4, [r4, #4]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800e162:	42bc      	cmp	r4, r7
 800e164:	d012      	beq.n	800e18c <vSocketSelect+0xfc>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e166:	68e5      	ldr	r5, [r4, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800e168:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e16a:	429e      	cmp	r6, r3
 800e16c:	d1f8      	bne.n	800e160 <vSocketSelect+0xd0>
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800e16e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800e172:	2b06      	cmp	r3, #6
 800e174:	d09e      	beq.n	800e0b4 <vSocketSelect+0x24>
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800e176:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e178:	f013 0f01 	tst.w	r3, #1
 800e17c:	d0ea      	beq.n	800e154 <vSocketSelect+0xc4>
 800e17e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800e180:	f113 0900 	adds.w	r9, r3, #0
 800e184:	bf18      	it	ne
 800e186:	f04f 0901 	movne.w	r9, #1
 800e18a:	e7e5      	b.n	800e158 <vSocketSelect+0xc8>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800e18c:	f1ba 0f01 	cmp.w	sl, #1
 800e190:	dc0b      	bgt.n	800e1aa <vSocketSelect+0x11a>
 800e192:	f10a 0a01 	add.w	sl, sl, #1
			if( xRound == 0 )
 800e196:	f1ba 0f01 	cmp.w	sl, #1
 800e19a:	d01b      	beq.n	800e1d4 <vSocketSelect+0x144>
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800e19c:	f8db 400c 	ldr.w	r4, [fp, #12]
 800e1a0:	9b01      	ldr	r3, [sp, #4]
 800e1a2:	429c      	cmp	r4, r3
 800e1a4:	d0f2      	beq.n	800e18c <vSocketSelect+0xfc>
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800e1a6:	4f11      	ldr	r7, [pc, #68]	; (800e1ec <vSocketSelect+0x15c>)
 800e1a8:	e7dd      	b.n	800e166 <vSocketSelect+0xd6>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	6830      	ldr	r0, [r6, #0]
 800e1ae:	f004 ff03 	bl	8012fb8 <xEventGroupClearBits>
 800e1b2:	f000 0007 	and.w	r0, r0, #7
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800e1b6:	ea30 0108 	bics.w	r1, r0, r8
 800e1ba:	d107      	bne.n	800e1cc <vSocketSelect+0x13c>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800e1bc:	f048 0110 	orr.w	r1, r8, #16
 800e1c0:	6830      	ldr	r0, [r6, #0]
 800e1c2:	f004 ff19 	bl	8012ff8 <xEventGroupSetBits>
	}
 800e1c6:	b005      	add	sp, #20
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800e1cc:	6830      	ldr	r0, [r6, #0]
 800e1ce:	f004 fef3 	bl	8012fb8 <xEventGroupClearBits>
 800e1d2:	e7f3      	b.n	800e1bc <vSocketSelect+0x12c>
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800e1d4:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <vSocketSelect+0x158>)
 800e1d6:	68dc      	ldr	r4, [r3, #12]
 800e1d8:	9b03      	ldr	r3, [sp, #12]
 800e1da:	429c      	cmp	r4, r3
 800e1dc:	d0d9      	beq.n	800e192 <vSocketSelect+0x102>
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800e1de:	4f04      	ldr	r7, [pc, #16]	; (800e1f0 <vSocketSelect+0x160>)
 800e1e0:	e7c1      	b.n	800e166 <vSocketSelect+0xd6>
 800e1e2:	f04f 0900 	mov.w	r9, #0
 800e1e6:	e797      	b.n	800e118 <vSocketSelect+0x88>
 800e1e8:	200029a4 	.word	0x200029a4
 800e1ec:	20002998 	.word	0x20002998
 800e1f0:	200029ac 	.word	0x200029ac
 800e1f4:	20002990 	.word	0x20002990

0800e1f8 <FreeRTOS_SignalSocket>:
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket == NULL )
 800e1f8:	b188      	cbz	r0, 800e21e <FreeRTOS_SignalSocket+0x26>
	{
 800e1fa:	b508      	push	{r3, lr}
 800e1fc:	4603      	mov	r3, r0
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 800e1fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e200:	b132      	cbz	r2, 800e210 <FreeRTOS_SignalSocket+0x18>
 800e202:	6810      	ldr	r0, [r2, #0]
 800e204:	b120      	cbz	r0, 800e210 <FreeRTOS_SignalSocket+0x18>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 800e206:	2108      	movs	r1, #8
 800e208:	f004 fef6 	bl	8012ff8 <xEventGroupSetBits>
			xReturn = 0;
 800e20c:	2000      	movs	r0, #0
 800e20e:	bd08      	pop	{r3, pc}
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
 800e210:	6858      	ldr	r0, [r3, #4]
 800e212:	b138      	cbz	r0, 800e224 <FreeRTOS_SignalSocket+0x2c>
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 800e214:	2140      	movs	r1, #64	; 0x40
 800e216:	f004 feef 	bl	8012ff8 <xEventGroupSetBits>
			xReturn = 0;
 800e21a:	2000      	movs	r0, #0
 800e21c:	bd08      	pop	{r3, pc}
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e21e:	f06f 0015 	mvn.w	r0, #21
 800e222:	4770      	bx	lr
		}
		else
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e224:	f06f 0015 	mvn.w	r0, #21
		}

		return xReturn;
	}
 800e228:	bd08      	pop	{r3, pc}
	...

0800e22c <FreeRTOS_SignalSocketFromISR>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket (FromISR version). */
	BaseType_t FreeRTOS_SignalSocketFromISR( Socket_t xSocket, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e22c:	b530      	push	{r4, r5, lr}
 800e22e:	b083      	sub	sp, #12
 800e230:	460d      	mov	r5, r1
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;
	IPStackEvent_t xEvent;
	extern QueueHandle_t xNetworkEventQueue;

		configASSERT( pxSocket != NULL );
 800e232:	4604      	mov	r4, r0
 800e234:	b1b8      	cbz	r0, 800e266 <FreeRTOS_SignalSocketFromISR+0x3a>
		configASSERT( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP );
 800e236:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d004      	beq.n	800e248 <FreeRTOS_SignalSocketFromISR+0x1c>
 800e23e:	f640 6125 	movw	r1, #3621	; 0xe25
 800e242:	480f      	ldr	r0, [pc, #60]	; (800e280 <FreeRTOS_SignalSocketFromISR+0x54>)
 800e244:	f009 f82c 	bl	80172a0 <vAssertCalled>
		configASSERT( pxSocket->xEventGroup );
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	b193      	cbz	r3, 800e272 <FreeRTOS_SignalSocketFromISR+0x46>

		xEvent.eEventType = eSocketSignalEvent;
 800e24c:	230b      	movs	r3, #11
 800e24e:	f88d 3000 	strb.w	r3, [sp]
		xEvent.pvData = ( void * )pxSocket;
 800e252:	9401      	str	r4, [sp, #4]

		/* The IP-task will call FreeRTOS_SignalSocket for this socket. */
		xReturn = xQueueSendToBackFromISR( xNetworkEventQueue, &xEvent, pxHigherPriorityTaskWoken );
 800e254:	2300      	movs	r3, #0
 800e256:	462a      	mov	r2, r5
 800e258:	4669      	mov	r1, sp
 800e25a:	480a      	ldr	r0, [pc, #40]	; (800e284 <FreeRTOS_SignalSocketFromISR+0x58>)
 800e25c:	6800      	ldr	r0, [r0, #0]
 800e25e:	f005 fc8d 	bl	8013b7c <xQueueGenericSendFromISR>

		return xReturn;
	}
 800e262:	b003      	add	sp, #12
 800e264:	bd30      	pop	{r4, r5, pc}
		configASSERT( pxSocket != NULL );
 800e266:	f640 6124 	movw	r1, #3620	; 0xe24
 800e26a:	4805      	ldr	r0, [pc, #20]	; (800e280 <FreeRTOS_SignalSocketFromISR+0x54>)
 800e26c:	f009 f818 	bl	80172a0 <vAssertCalled>
 800e270:	e7e1      	b.n	800e236 <FreeRTOS_SignalSocketFromISR+0xa>
		configASSERT( pxSocket->xEventGroup );
 800e272:	f640 6126 	movw	r1, #3622	; 0xe26
 800e276:	4802      	ldr	r0, [pc, #8]	; (800e280 <FreeRTOS_SignalSocketFromISR+0x54>)
 800e278:	f009 f812 	bl	80172a0 <vAssertCalled>
 800e27c:	e7e6      	b.n	800e24c <FreeRTOS_SignalSocketFromISR+0x20>
 800e27e:	bf00      	nop
 800e280:	0801a224 	.word	0x0801a224
 800e284:	20000674 	.word	0x20000674

0800e288 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
size_t uxHead = pxBuffer->uxHead;
 800e28c:	6884      	ldr	r4, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 800e28e:	6805      	ldr	r5, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800e290:	6906      	ldr	r6, [r0, #16]
 800e292:	4435      	add	r5, r6
 800e294:	3d01      	subs	r5, #1
 800e296:	1b2c      	subs	r4, r5, r4
	if( uxCount >= pxBuffer->LENGTH )
 800e298:	42a6      	cmp	r6, r4
		uxCount -= pxBuffer->LENGTH;
 800e29a:	bf98      	it	ls
 800e29c:	1ba4      	subls	r4, r4, r6
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800e29e:	42a1      	cmp	r1, r4
 800e2a0:	d22d      	bcs.n	800e2fe <uxStreamBufferAdd+0x76>
	{
		uxSpace -= uxOffset;
 800e2a2:	1a64      	subs	r4, r4, r1
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800e2a4:	429c      	cmp	r4, r3
 800e2a6:	bf28      	it	cs
 800e2a8:	461c      	movcs	r4, r3

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0u )
 800e2aa:	b34c      	cbz	r4, 800e300 <uxStreamBufferAdd+0x78>
 800e2ac:	4691      	mov	r9, r2
 800e2ae:	4688      	mov	r8, r1
 800e2b0:	4605      	mov	r5, r0
	{
		uxNextHead = pxBuffer->uxHead;
 800e2b2:	6887      	ldr	r7, [r0, #8]

		if( uxOffset != 0u )
 800e2b4:	b339      	cbz	r1, 800e306 <uxStreamBufferAdd+0x7e>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800e2b6:	440f      	add	r7, r1
			if( uxNextHead >= pxBuffer->LENGTH )
 800e2b8:	42b7      	cmp	r7, r6
 800e2ba:	d300      	bcc.n	800e2be <uxStreamBufferAdd+0x36>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800e2bc:	1bbf      	subs	r7, r7, r6
			}
		}

		if( pucData != NULL )
 800e2be:	f1b9 0f00 	cmp.w	r9, #0
 800e2c2:	d035      	beq.n	800e330 <uxStreamBufferAdd+0xa8>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800e2c4:	1bf6      	subs	r6, r6, r7
 800e2c6:	42a6      	cmp	r6, r4
 800e2c8:	bf28      	it	cs
 800e2ca:	4626      	movcs	r6, r4

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800e2cc:	f105 0a14 	add.w	sl, r5, #20
 800e2d0:	4632      	mov	r2, r6
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	eb0a 0007 	add.w	r0, sl, r7
 800e2d8:	f009 fa53 	bl	8017782 <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800e2dc:	42b4      	cmp	r4, r6
 800e2de:	d927      	bls.n	800e330 <uxStreamBufferAdd+0xa8>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800e2e0:	1ba2      	subs	r2, r4, r6
 800e2e2:	eb09 0106 	add.w	r1, r9, r6
 800e2e6:	4650      	mov	r0, sl
 800e2e8:	f009 fa4b 	bl	8017782 <memcpy>
			}
		}

		if( uxOffset == 0u )
 800e2ec:	f1b8 0f00 	cmp.w	r8, #0
 800e2f0:	d11e      	bne.n	800e330 <uxStreamBufferAdd+0xa8>
 800e2f2:	e017      	b.n	800e324 <uxStreamBufferAdd+0x9c>
		if( uxLeft <= uxRight )
 800e2f4:	428f      	cmp	r7, r1
 800e2f6:	bf34      	ite	cc
 800e2f8:	2200      	movcc	r2, #0
 800e2fa:	2201      	movcs	r2, #1
 800e2fc:	e024      	b.n	800e348 <uxStreamBufferAdd+0xc0>
 800e2fe:	2400      	movs	r4, #0
			pxBuffer->uxFront = uxNextHead;
		}
	}

	return uxCount;
}
 800e300:	4620      	mov	r0, r4
 800e302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( pucData != NULL )
 800e306:	b16a      	cbz	r2, 800e324 <uxStreamBufferAdd+0x9c>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800e308:	1bf6      	subs	r6, r6, r7
 800e30a:	42a6      	cmp	r6, r4
 800e30c:	bf28      	it	cs
 800e30e:	4626      	movcs	r6, r4
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800e310:	f100 0a14 	add.w	sl, r0, #20
 800e314:	4632      	mov	r2, r6
 800e316:	4649      	mov	r1, r9
 800e318:	eb0a 0007 	add.w	r0, sl, r7
 800e31c:	f009 fa31 	bl	8017782 <memcpy>
			if( uxCount > uxFirst )
 800e320:	42b4      	cmp	r4, r6
 800e322:	d8dd      	bhi.n	800e2e0 <uxStreamBufferAdd+0x58>
			uxNextHead += uxCount;
 800e324:	4427      	add	r7, r4
			if( uxNextHead >= pxBuffer->LENGTH )
 800e326:	692b      	ldr	r3, [r5, #16]
 800e328:	429f      	cmp	r7, r3
				uxNextHead -= pxBuffer->LENGTH;
 800e32a:	bf28      	it	cs
 800e32c:	1aff      	subcs	r7, r7, r3
			pxBuffer->uxHead = uxNextHead;
 800e32e:	60af      	str	r7, [r5, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800e330:	68e9      	ldr	r1, [r5, #12]
size_t uxTail = pxBuffer->uxTail;
 800e332:	682b      	ldr	r3, [r5, #0]
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800e334:	429f      	cmp	r7, r3
 800e336:	bf2c      	ite	cs
 800e338:	2200      	movcs	r2, #0
 800e33a:	2201      	movcc	r2, #1
 800e33c:	4299      	cmp	r1, r3
 800e33e:	bf2c      	ite	cs
 800e340:	2300      	movcs	r3, #0
 800e342:	2301      	movcc	r3, #1
 800e344:	4293      	cmp	r3, r2
 800e346:	d0d5      	beq.n	800e2f4 <uxStreamBufferAdd+0x6c>
 800e348:	2a00      	cmp	r2, #0
 800e34a:	d0d9      	beq.n	800e300 <uxStreamBufferAdd+0x78>
			pxBuffer->uxFront = uxNextHead;
 800e34c:	60ef      	str	r7, [r5, #12]
 800e34e:	e7d7      	b.n	800e300 <uxStreamBufferAdd+0x78>

0800e350 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800e350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
size_t uxHead = pxBuffer->uxHead;
 800e354:	6885      	ldr	r5, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 800e356:	6804      	ldr	r4, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800e358:	6906      	ldr	r6, [r0, #16]
 800e35a:	4435      	add	r5, r6
 800e35c:	1b2c      	subs	r4, r5, r4
	if ( uxCount >= pxBuffer->LENGTH )
 800e35e:	42a6      	cmp	r6, r4
		uxCount -= pxBuffer->LENGTH;
 800e360:	bf98      	it	ls
 800e362:	1ba4      	subls	r4, r4, r6
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
 800e364:	42a1      	cmp	r1, r4
 800e366:	d22f      	bcs.n	800e3c8 <uxStreamBufferGet+0x78>
	{
		uxSize -= uxOffset;
 800e368:	1a64      	subs	r4, r4, r1
 800e36a:	429c      	cmp	r4, r3
 800e36c:	bf28      	it	cs
 800e36e:	461c      	movcs	r4, r3
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0u )
 800e370:	b35c      	cbz	r4, 800e3ca <uxStreamBufferGet+0x7a>
	{
		uxNextTail = pxBuffer->uxTail;
 800e372:	6807      	ldr	r7, [r0, #0]

		if( uxOffset != 0u )
 800e374:	b119      	cbz	r1, 800e37e <uxStreamBufferGet+0x2e>
		{
			uxNextTail += uxOffset;
 800e376:	440f      	add	r7, r1
			if( uxNextTail >= pxBuffer->LENGTH )
 800e378:	42b7      	cmp	r7, r6
			{
				uxNextTail -= pxBuffer->LENGTH;
 800e37a:	bf28      	it	cs
 800e37c:	1bbf      	subcs	r7, r7, r6
 800e37e:	4690      	mov	r8, r2
 800e380:	460d      	mov	r5, r1
 800e382:	4681      	mov	r9, r0
			}
		}

		if( pucData != NULL )
 800e384:	b16a      	cbz	r2, 800e3a2 <uxStreamBufferGet+0x52>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800e386:	1bf6      	subs	r6, r6, r7
 800e388:	42a6      	cmp	r6, r4
 800e38a:	bf28      	it	cs
 800e38c:	4626      	movcs	r6, r4

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800e38e:	f100 0a14 	add.w	sl, r0, #20
 800e392:	4632      	mov	r2, r6
 800e394:	eb0a 0107 	add.w	r1, sl, r7
 800e398:	4640      	mov	r0, r8
 800e39a:	f009 f9f2 	bl	8017782 <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800e39e:	42b4      	cmp	r4, r6
 800e3a0:	d80b      	bhi.n	800e3ba <uxStreamBufferGet+0x6a>
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800e3a2:	9b08      	ldr	r3, [sp, #32]
 800e3a4:	b98b      	cbnz	r3, 800e3ca <uxStreamBufferGet+0x7a>
 800e3a6:	b985      	cbnz	r5, 800e3ca <uxStreamBufferGet+0x7a>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800e3a8:	4427      	add	r7, r4

			if( uxNextTail >= pxBuffer->LENGTH )
 800e3aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3ae:	429f      	cmp	r7, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
 800e3b0:	bf28      	it	cs
 800e3b2:	1aff      	subcs	r7, r7, r3
			}

			pxBuffer->uxTail = uxNextTail;
 800e3b4:	f8c9 7000 	str.w	r7, [r9]
 800e3b8:	e007      	b.n	800e3ca <uxStreamBufferGet+0x7a>
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800e3ba:	1ba2      	subs	r2, r4, r6
 800e3bc:	4651      	mov	r1, sl
 800e3be:	eb08 0006 	add.w	r0, r8, r6
 800e3c2:	f009 f9de 	bl	8017782 <memcpy>
 800e3c6:	e7ec      	b.n	800e3a2 <uxStreamBufferGet+0x52>
 800e3c8:	2400      	movs	r4, #0
		}
	}

	return uxCount;
}
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e3d0 <prvSocketSetMSS>:

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
uint32_t ulMSS = ipconfigTCP_MSS;

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800e3d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e3d2:	0e13      	lsrs	r3, r2, #24
 800e3d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e3d8:	0211      	lsls	r1, r2, #8
 800e3da:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800e3de:	430b      	orrs	r3, r1
 800e3e0:	0a12      	lsrs	r2, r2, #8
 800e3e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	4a08      	ldr	r2, [pc, #32]	; (800e40c <prvSocketSetMSS+0x3c>)
 800e3ea:	6952      	ldr	r2, [r2, #20]
 800e3ec:	4053      	eors	r3, r2
 800e3ee:	4a08      	ldr	r2, [pc, #32]	; (800e410 <prvSocketSetMSS+0x40>)
 800e3f0:	6852      	ldr	r2, [r2, #4]
 800e3f2:	4013      	ands	r3, r2
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e3f4:	2b00      	cmp	r3, #0
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e3f6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e3fa:	bf18      	it	ne
 800e3fc:	f44f 63af 	movne.w	r3, #1400	; 0x578
 800e400:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 800e404:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	20000010 	.word	0x20000010
 800e410:	2000065c 	.word	0x2000065c

0800e414 <prvTCPAddTxData>:
{
 800e414:	b510      	push	{r4, lr}
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800e416:	6f82      	ldr	r2, [r0, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 800e418:	6891      	ldr	r1, [r2, #8]
size_t uxMid = pxBuffer->uxMid;
 800e41a:	6854      	ldr	r4, [r2, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800e41c:	6913      	ldr	r3, [r2, #16]
 800e41e:	4419      	add	r1, r3
 800e420:	1b09      	subs	r1, r1, r4
	if ( uxCount >= pxBuffer->LENGTH )
 800e422:	428b      	cmp	r3, r1
		uxCount -= pxBuffer->LENGTH;
 800e424:	bf98      	it	ls
 800e426:	1ac9      	subls	r1, r1, r3
	if( lLength > 0 )
 800e428:	2900      	cmp	r1, #0
 800e42a:	dd1b      	ble.n	800e464 <prvTCPAddTxData+0x50>
 800e42c:	4604      	mov	r4, r0
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800e42e:	6852      	ldr	r2, [r2, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800e430:	30dc      	adds	r0, #220	; 0xdc
 800e432:	f001 fe11 	bl	8010058 <lTCPWindowTxAdd>
		if( lCount > 0 )
 800e436:	2800      	cmp	r0, #0
 800e438:	dd14      	ble.n	800e464 <prvTCPAddTxData+0x50>
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800e43a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 800e43c:	689a      	ldr	r2, [r3, #8]
size_t uxMid = pxBuffer->uxMid;
 800e43e:	685c      	ldr	r4, [r3, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800e440:	6919      	ldr	r1, [r3, #16]
 800e442:	440a      	add	r2, r1
 800e444:	1b12      	subs	r2, r2, r4
	if ( uxCount >= pxBuffer->LENGTH )
 800e446:	4291      	cmp	r1, r2
		uxCount -= pxBuffer->LENGTH;
 800e448:	bf98      	it	ls
 800e44a:	1a52      	subls	r2, r2, r1
	pxBuffer->uxMid += uxCount;
 800e44c:	685c      	ldr	r4, [r3, #4]
 800e44e:	4290      	cmp	r0, r2
 800e450:	bf94      	ite	ls
 800e452:	1822      	addls	r2, r4, r0
 800e454:	18a2      	addhi	r2, r4, r2
 800e456:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	4291      	cmp	r1, r2
 800e45c:	d802      	bhi.n	800e464 <prvTCPAddTxData+0x50>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	1a51      	subs	r1, r2, r1
 800e462:	6059      	str	r1, [r3, #4]
 800e464:	bd10      	pop	{r4, pc}
	...

0800e468 <prvTCPReturnPacket>:
{
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	b08a      	sub	sp, #40	; 0x28
 800e46e:	461d      	mov	r5, r3
	if( pxNetworkBuffer == NULL )
 800e470:	460e      	mov	r6, r1
 800e472:	2900      	cmp	r1, #0
 800e474:	f000 80a3 	beq.w	800e5be <prvTCPReturnPacket+0x156>
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e478:	69b4      	ldr	r4, [r6, #24]
		if( pxSocket != NULL )
 800e47a:	2800      	cmp	r0, #0
 800e47c:	f000 80d0 	beq.w	800e620 <prvTCPReturnPacket+0x1b8>
			if( pxSocket->u.xTCP.rxStream != NULL )
 800e480:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800e482:	2900      	cmp	r1, #0
 800e484:	f000 80a3 	beq.w	800e5ce <prvTCPReturnPacket+0x166>
size_t uxFront = pxBuffer->uxFront;
 800e488:	68cf      	ldr	r7, [r1, #12]
size_t uxTail = pxBuffer->uxTail;
 800e48a:	680b      	ldr	r3, [r1, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800e48c:	6909      	ldr	r1, [r1, #16]
 800e48e:	440b      	add	r3, r1
 800e490:	3b01      	subs	r3, #1
 800e492:	1bdb      	subs	r3, r3, r7
	if( uxCount >= pxBuffer->LENGTH )
 800e494:	4299      	cmp	r1, r3
 800e496:	f200 809d 	bhi.w	800e5d4 <prvTCPReturnPacket+0x16c>
		uxCount -= pxBuffer->LENGTH;
 800e49a:	eba3 0c01 	sub.w	ip, r3, r1
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800e49e:	f8d0 e0d0 	ldr.w	lr, [r0, #208]	; 0xd0
 800e4a2:	f8d0 70e0 	ldr.w	r7, [r0, #224]	; 0xe0
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800e4a6:	496d      	ldr	r1, [pc, #436]	; (800e65c <prvTCPReturnPacket+0x1f4>)
 800e4a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e4aa:	4019      	ands	r1, r3
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	f040 8093 	bne.w	800e5d8 <prvTCPReturnPacket+0x170>
 800e4b2:	4577      	cmp	r7, lr
 800e4b4:	bf28      	it	cs
 800e4b6:	4677      	movcs	r7, lr
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800e4b8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
 800e4bc:	428f      	cmp	r7, r1
 800e4be:	d202      	bcs.n	800e4c6 <prvTCPReturnPacket+0x5e>
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800e4c0:	458c      	cmp	ip, r1
 800e4c2:	bf28      	it	cs
 800e4c4:	460f      	movcs	r7, r1
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800e4c6:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800e4ca:	fa27 f303 	lsr.w	r3, r7, r3
 800e4ce:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800e4d2:	428b      	cmp	r3, r1
 800e4d4:	bf28      	it	cs
 800e4d6:	460b      	movcs	r3, r1
			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800e4d8:	0219      	lsls	r1, r3, #8
 800e4da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800e4de:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800e4e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800e4e6:	430b      	orrs	r3, r1
 800e4e8:	8623      	strh	r3, [r4, #48]	; 0x30
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800e4ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e4ee:	f36f 0300 	bfc	r3, #0, #1
 800e4f2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800e4f6:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
 800e4fa:	440f      	add	r7, r1
 800e4fc:	6447      	str	r7, [r0, #68]	; 0x44
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800e4fe:	f013 0f02 	tst.w	r3, #2
 800e502:	d06b      	beq.n	800e5dc <prvTCPReturnPacket+0x174>
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800e504:	b2db      	uxtb	r3, r3
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800e506:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800e50a:	f043 0304 	orr.w	r3, r3, #4
 800e50e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800e512:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800e516:	3b01      	subs	r3, #1
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800e518:	0e19      	lsrs	r1, r3, #24
 800e51a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800e51e:	021f      	lsls	r7, r3, #8
 800e520:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800e524:	4339      	orrs	r1, r7
 800e526:	0a1b      	lsrs	r3, r3, #8
 800e528:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e52c:	430b      	orrs	r3, r1
 800e52e:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800e532:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e536:	0e19      	lsrs	r1, r3, #24
 800e538:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800e53c:	0218      	lsls	r0, r3, #8
 800e53e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800e542:	4301      	orrs	r1, r0
 800e544:	0a1b      	lsrs	r3, r3, #8
 800e546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e54a:	430b      	orrs	r3, r1
 800e54c:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800e550:	2380      	movs	r3, #128	; 0x80
 800e552:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800e554:	0a13      	lsrs	r3, r2, #8
 800e556:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e55a:	8223      	strh	r3, [r4, #16]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800e55c:	4b40      	ldr	r3, [pc, #256]	; (800e660 <prvTCPReturnPacket+0x1f8>)
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	b90b      	cbnz	r3, 800e566 <prvTCPReturnPacket+0xfe>
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800e562:	f8d4 301e 	ldr.w	r3, [r4, #30]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800e566:	f8d4 101a 	ldr.w	r1, [r4, #26]
 800e56a:	f8c4 101e 	str.w	r1, [r4, #30]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800e56e:	f8c4 301a 	str.w	r3, [r4, #26]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800e572:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800e574:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800e576:	8461      	strh	r1, [r4, #34]	; 0x22
 800e578:	84a3      	strh	r3, [r4, #36]	; 0x24
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800e57a:	483a      	ldr	r0, [pc, #232]	; (800e664 <prvTCPReturnPacket+0x1fc>)
 800e57c:	8803      	ldrh	r3, [r0, #0]
 800e57e:	0a19      	lsrs	r1, r3, #8
 800e580:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800e584:	8261      	strh	r1, [r4, #18]
		usPacketIdentifier++;
 800e586:	3301      	adds	r3, #1
 800e588:	8003      	strh	r3, [r0, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800e58a:	2300      	movs	r3, #0
 800e58c:	7523      	strb	r3, [r4, #20]
 800e58e:	7563      	strb	r3, [r4, #21]
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800e590:	320e      	adds	r2, #14
 800e592:	61f2      	str	r2, [r6, #28]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800e594:	4627      	mov	r7, r4
 800e596:	f857 3f06 	ldr.w	r3, [r7, #6]!
 800e59a:	6023      	str	r3, [r4, #0]
 800e59c:	88bb      	ldrh	r3, [r7, #4]
 800e59e:	80a3      	strh	r3, [r4, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800e5a0:	4b2f      	ldr	r3, [pc, #188]	; (800e660 <prvTCPReturnPacket+0x1f8>)
 800e5a2:	6818      	ldr	r0, [r3, #0]
 800e5a4:	f8c4 0006 	str.w	r0, [r4, #6]
 800e5a8:	889b      	ldrh	r3, [r3, #4]
 800e5aa:	80bb      	strh	r3, [r7, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f002 fa82 	bl	8010ab8 <xNetworkInterfaceOutput>
		if( xReleaseAfterSend == pdFALSE )
 800e5b4:	2d00      	cmp	r5, #0
 800e5b6:	d042      	beq.n	800e63e <prvTCPReturnPacket+0x1d6>
}
 800e5b8:	b00a      	add	sp, #40	; 0x28
 800e5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800e5be:	f100 0382 	add.w	r3, r0, #130	; 0x82
 800e5c2:	9307      	str	r3, [sp, #28]
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800e5c4:	2346      	movs	r3, #70	; 0x46
 800e5c6:	9308      	str	r3, [sp, #32]
		xReleaseAfterSend = pdFALSE;
 800e5c8:	2500      	movs	r5, #0
		pxNetworkBuffer = &xTempBuffer;
 800e5ca:	ae01      	add	r6, sp, #4
 800e5cc:	e754      	b.n	800e478 <prvTCPReturnPacket+0x10>
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800e5ce:	f8d0 c06c 	ldr.w	ip, [r0, #108]	; 0x6c
 800e5d2:	e764      	b.n	800e49e <prvTCPReturnPacket+0x36>
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800e5d4:	469c      	mov	ip, r3
 800e5d6:	e762      	b.n	800e49e <prvTCPReturnPacket+0x36>
				ulSpace = 0u;
 800e5d8:	2700      	movs	r7, #0
 800e5da:	e76d      	b.n	800e4b8 <prvTCPReturnPacket+0x50>
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800e5dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800e5e0:	0e19      	lsrs	r1, r3, #24
 800e5e2:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800e5e6:	021f      	lsls	r7, r3, #8
 800e5e8:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800e5ec:	4339      	orrs	r1, r7
 800e5ee:	0a1b      	lsrs	r3, r3, #8
 800e5f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e5f4:	430b      	orrs	r3, r1
 800e5f6:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800e5fa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e5fe:	f013 0f01 	tst.w	r3, #1
 800e602:	d096      	beq.n	800e532 <prvTCPReturnPacket+0xca>
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800e604:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800e608:	f8d0 7108 	ldr.w	r7, [r0, #264]	; 0x108
 800e60c:	4439      	add	r1, r7
 800e60e:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 800e612:	42b9      	cmp	r1, r7
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800e614:	bf1c      	itt	ne
 800e616:	f023 0301 	bicne.w	r3, r3, #1
 800e61a:	f884 302f 	strbne.w	r3, [r4, #47]	; 0x2f
 800e61e:	e788      	b.n	800e532 <prvTCPReturnPacket+0xca>
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800e620:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 800e624:	f8d4 102a 	ldr.w	r1, [r4, #42]	; 0x2a
 800e628:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800e62c:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800e630:	2380      	movs	r3, #128	; 0x80
 800e632:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800e634:	0a13      	lsrs	r3, r2, #8
 800e636:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e63a:	8223      	strh	r3, [r4, #16]
 800e63c:	e791      	b.n	800e562 <prvTCPReturnPacket+0xfa>
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800e63e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800e640:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800e642:	8462      	strh	r2, [r4, #34]	; 0x22
 800e644:	84a3      	strh	r3, [r4, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800e646:	f8d4 301e 	ldr.w	r3, [r4, #30]
 800e64a:	f8c4 301a 	str.w	r3, [r4, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f8c4 3006 	str.w	r3, [r4, #6]
 800e654:	88a3      	ldrh	r3, [r4, #4]
 800e656:	80bb      	strh	r3, [r7, #4]
}
 800e658:	e7ae      	b.n	800e5b8 <prvTCPReturnPacket+0x150>
 800e65a:	bf00      	nop
 800e65c:	00040080 	.word	0x00040080
 800e660:	20000010 	.word	0x20000010
 800e664:	20000610 	.word	0x20000610

0800e668 <prvTCPSendReset>:
{
 800e668:	b508      	push	{r3, lr}
 800e66a:	4601      	mov	r1, r0
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e66c:	6983      	ldr	r3, [r0, #24]
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800e66e:	2214      	movs	r2, #20
 800e670:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800e674:	2250      	movs	r2, #80	; 0x50
 800e676:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800e67a:	2300      	movs	r3, #0
 800e67c:	2228      	movs	r2, #40	; 0x28
 800e67e:	4618      	mov	r0, r3
 800e680:	f7ff fef2 	bl	800e468 <prvTCPReturnPacket>
}
 800e684:	2000      	movs	r0, #0
 800e686:	bd08      	pop	{r3, pc}

0800e688 <prvTCPCreateWindow>:
{
 800e688:	b510      	push	{r4, lr}
 800e68a:	b082      	sub	sp, #8
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800e68c:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800e690:	f240 51b4 	movw	r1, #1460	; 0x5b4
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800e694:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
	vTCPWindowCreate(
 800e698:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e6a8:	fb01 f202 	mul.w	r2, r1, r2
 800e6ac:	fb01 f104 	mul.w	r1, r1, r4
 800e6b0:	30dc      	adds	r0, #220	; 0xdc
 800e6b2:	f001 fbc9 	bl	800fe48 <vTCPWindowCreate>
}
 800e6b6:	b002      	add	sp, #8
 800e6b8:	bd10      	pop	{r4, pc}
	...

0800e6bc <prvTCPNextTimeout>:
{
 800e6bc:	b510      	push	{r4, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	4604      	mov	r4, r0
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800e6c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e6c6:	9301      	str	r3, [sp, #4]
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800e6c8:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d006      	beq.n	800e6de <prvTCPNextTimeout+0x22>
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800e6d0:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 800e6d4:	b363      	cbz	r3, 800e730 <prvTCPNextTimeout+0x74>
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800e6d6:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
}
 800e6da:	b002      	add	sp, #8
 800e6dc:	bd10      	pop	{r4, pc}
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800e6de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e6e2:	f013 0f08 	tst.w	r3, #8
 800e6e6:	d014      	beq.n	800e712 <prvTCPNextTimeout+0x56>
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800e6e8:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d80c      	bhi.n	800e70a <prvTCPNextTimeout+0x4e>
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e6f6:	409a      	lsls	r2, r3
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e6f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e6fc:	fb03 f302 	mul.w	r3, r3, r2
 800e700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e704:	d20d      	bcs.n	800e722 <prvTCPNextTimeout+0x66>
 800e706:	2301      	movs	r3, #1
 800e708:	e00f      	b.n	800e72a <prvTCPNextTimeout+0x6e>
				ulDelayMs = 11000UL;
 800e70a:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800e70e:	9301      	str	r3, [sp, #4]
 800e710:	e002      	b.n	800e718 <prvTCPNextTimeout+0x5c>
			ulDelayMs = 500UL;
 800e712:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e716:	9301      	str	r3, [sp, #4]
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e71c:	9a01      	ldr	r2, [sp, #4]
 800e71e:	fb03 f302 	mul.w	r3, r3, r2
 800e722:	4a12      	ldr	r2, [pc, #72]	; (800e76c <prvTCPNextTimeout+0xb0>)
 800e724:	fba2 2303 	umull	r2, r3, r2, r3
 800e728:	099b      	lsrs	r3, r3, #6
 800e72a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800e72e:	e7d2      	b.n	800e6d6 <prvTCPNextTimeout+0x1a>
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800e730:	aa01      	add	r2, sp, #4
 800e732:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
 800e736:	30dc      	adds	r0, #220	; 0xdc
 800e738:	f001 fcfe 	bl	8010138 <xTCPWindowTxHasData>
		if( ulDelayMs == 0u )
 800e73c:	9b01      	ldr	r3, [sp, #4]
 800e73e:	b92b      	cbnz	r3, 800e74c <prvTCPNextTimeout+0x90>
			ulDelayMs = xResult ? 1UL : 20000UL;
 800e740:	2800      	cmp	r0, #0
 800e742:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e746:	bf18      	it	ne
 800e748:	2301      	movne	r3, #1
 800e74a:	9301      	str	r3, [sp, #4]
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800e74c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e750:	9a01      	ldr	r2, [sp, #4]
 800e752:	fb03 f302 	mul.w	r3, r3, r2
 800e756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e75a:	bf23      	ittte	cs
 800e75c:	4a03      	ldrcs	r2, [pc, #12]	; (800e76c <prvTCPNextTimeout+0xb0>)
 800e75e:	fba2 2303 	umullcs	r2, r3, r2, r3
 800e762:	099b      	lsrcs	r3, r3, #6
 800e764:	2301      	movcc	r3, #1
 800e766:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800e76a:	e7b4      	b.n	800e6d6 <prvTCPNextTimeout+0x1a>
 800e76c:	10624dd3 	.word	0x10624dd3

0800e770 <vTCPStateChange>:
{
 800e770:	b570      	push	{r4, r5, r6, lr}
 800e772:	4604      	mov	r4, r0
 800e774:	460d      	mov	r5, r1
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800e776:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d961      	bls.n	800e842 <vTCPStateChange+0xd2>
 800e77e:	2b08      	cmp	r3, #8
 800e780:	d05f      	beq.n	800e842 <vTCPStateChange+0xd2>
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800e782:	2904      	cmp	r1, #4
 800e784:	d817      	bhi.n	800e7b6 <vTCPStateChange+0x46>
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	f043 0220 	orr.w	r2, r3, #32
 800e78c:	6022      	str	r2, [r4, #0]
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800e78e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e790:	f012 0f04 	tst.w	r2, #4
 800e794:	d002      	beq.n	800e79c <vTCPStateChange+0x2c>
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800e796:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
 800e79a:	6023      	str	r3, [r4, #0]
	switch( uxStatus )
 800e79c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800e7a0:	2b0b      	cmp	r3, #11
 800e7a2:	f200 80ae 	bhi.w	800e902 <vTCPStateChange+0x192>
 800e7a6:	e8df f003 	tbb	[pc, r3]
 800e7aa:	ac2f      	.short	0xac2f
 800e7ac:	acacacac 	.word	0xacacacac
 800e7b0:	2f2f2fac 	.word	0x2f2f2fac
 800e7b4:	2fac      	.short	0x2fac
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e046      	b.n	800e848 <vTCPStateChange+0xd8>
					configASSERT( xParent != NULL );
 800e7ba:	f240 51c5 	movw	r1, #1477	; 0x5c5
 800e7be:	485b      	ldr	r0, [pc, #364]	; (800e92c <vTCPStateChange+0x1bc>)
 800e7c0:	f008 fd6e 	bl	80172a0 <vAssertCalled>
 800e7c4:	e05d      	b.n	800e882 <vTCPStateChange+0x112>
				if( xParent != NULL )
 800e7c6:	b11c      	cbz	r4, 800e7d0 <vTCPStateChange+0x60>
					xParent = pxSocket;
 800e7c8:	4626      	mov	r6, r4
 800e7ca:	e04c      	b.n	800e866 <vTCPStateChange+0xf6>
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800e7cc:	6574      	str	r4, [r6, #84]	; 0x54
 800e7ce:	e04d      	b.n	800e86c <vTCPStateChange+0xfc>
					xParent = pxSocket;
 800e7d0:	4626      	mov	r6, r4
 800e7d2:	e056      	b.n	800e882 <vTCPStateChange+0x112>
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800e7d4:	6823      	ldr	r3, [r4, #0]
 800e7d6:	f043 0208 	orr.w	r2, r3, #8
 800e7da:	6022      	str	r2, [r4, #0]
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800e7dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7de:	f012 0f02 	tst.w	r2, #2
 800e7e2:	d0db      	beq.n	800e79c <vTCPStateChange+0x2c>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800e7e4:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	e7d7      	b.n	800e79c <vTCPStateChange+0x2c>
		if( eTCPState == eCLOSED )
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	d174      	bne.n	800e8da <vTCPStateChange+0x16a>
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e7f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e7f4:	f013 0f06 	tst.w	r3, #6
 800e7f8:	d06f      	beq.n	800e8da <vTCPStateChange+0x16a>
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800e7fa:	f013 0f08 	tst.w	r3, #8
 800e7fe:	d16c      	bne.n	800e8da <vTCPStateChange+0x16a>
					FreeRTOS_closesocket( pxSocket );
 800e800:	4620      	mov	r0, r4
 800e802:	f7fe fce3 	bl	800d1cc <FreeRTOS_closesocket>
 800e806:	e068      	b.n	800e8da <vTCPStateChange+0x16a>
	switch( uxStatus )
 800e808:	2600      	movs	r6, #0
			pxSocket->u.xTCP.usTimeout = 0u;
 800e80a:	2300      	movs	r3, #0
 800e80c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800e810:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800e814:	f005 fe7c 	bl	8014510 <xTaskGetTickCount>
 800e818:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800e81a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800e81e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e822:	f36f 0341 	bfc	r3, #1, #1
 800e826:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800e82a:	2300      	movs	r3, #0
 800e82c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800e830:	f005 fe6e 	bl	8014510 <xTaskGetTickCount>
 800e834:	65e0      	str	r0, [r4, #92]	; 0x5c
	if( xParent != NULL )
 800e836:	2e00      	cmp	r6, #0
 800e838:	d077      	beq.n	800e92a <vTCPStateChange+0x1ba>
		vSocketWakeUpUser( xParent );
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7fe fda8 	bl	800d390 <vSocketWakeUpUser>
}
 800e840:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800e842:	2d04      	cmp	r5, #4
 800e844:	d9d2      	bls.n	800e7ec <vTCPStateChange+0x7c>
 800e846:	2300      	movs	r3, #0
 800e848:	2d08      	cmp	r5, #8
 800e84a:	d043      	beq.n	800e8d4 <vTCPStateChange+0x164>
	if( bBefore != bAfter )
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1cd      	bne.n	800e7ec <vTCPStateChange+0x7c>
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800e850:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e854:	f013 0f04 	tst.w	r3, #4
 800e858:	d0bc      	beq.n	800e7d4 <vTCPStateChange+0x64>
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e85a:	f013 0f08 	tst.w	r3, #8
 800e85e:	d1b2      	bne.n	800e7c6 <vTCPStateChange+0x56>
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800e860:	6d66      	ldr	r6, [r4, #84]	; 0x54
					configASSERT( xParent != NULL );
 800e862:	2e00      	cmp	r6, #0
 800e864:	d0a9      	beq.n	800e7ba <vTCPStateChange+0x4a>
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800e866:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d0af      	beq.n	800e7cc <vTCPStateChange+0x5c>
					xParent->xEventBits |= eSOCKET_ACCEPT;
 800e86c:	6833      	ldr	r3, [r6, #0]
 800e86e:	f043 0204 	orr.w	r2, r3, #4
 800e872:	6032      	str	r2, [r6, #0]
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800e874:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800e876:	f012 0f01 	tst.w	r2, #1
 800e87a:	d002      	beq.n	800e882 <vTCPStateChange+0x112>
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800e87c:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800e880:	6033      	str	r3, [r6, #0]
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	6563      	str	r3, [r4, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800e886:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800e88a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e88e:	f043 0302 	orr.w	r3, r3, #2
 800e892:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	switch( uxStatus )
 800e896:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800e89a:	2b0b      	cmp	r3, #11
 800e89c:	d8b8      	bhi.n	800e810 <vTCPStateChange+0xa0>
 800e89e:	a201      	add	r2, pc, #4	; (adr r2, 800e8a4 <vTCPStateChange+0x134>)
 800e8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a4:	0800e80b 	.word	0x0800e80b
 800e8a8:	0800e811 	.word	0x0800e811
 800e8ac:	0800e811 	.word	0x0800e811
 800e8b0:	0800e811 	.word	0x0800e811
 800e8b4:	0800e811 	.word	0x0800e811
 800e8b8:	0800e811 	.word	0x0800e811
 800e8bc:	0800e811 	.word	0x0800e811
 800e8c0:	0800e80b 	.word	0x0800e80b
 800e8c4:	0800e80b 	.word	0x0800e80b
 800e8c8:	0800e80b 	.word	0x0800e80b
 800e8cc:	0800e811 	.word	0x0800e811
 800e8d0:	0800e80b 	.word	0x0800e80b
	if( bBefore != bAfter )
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f47f af56 	bne.w	800e786 <vTCPStateChange+0x16>
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800e8da:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800e8de:	f005 fe17 	bl	8014510 <xTaskGetTickCount>
 800e8e2:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800e8e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800e8e8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e8ec:	f36f 0341 	bfc	r3, #1, #1
 800e8f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800e8fa:	f005 fe09 	bl	8014510 <xTaskGetTickCount>
 800e8fe:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e900:	bd70      	pop	{r4, r5, r6, pc}
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800e902:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800e906:	f005 fe03 	bl	8014510 <xTaskGetTickCount>
 800e90a:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800e90c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800e910:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800e914:	f36f 0341 	bfc	r3, #1, #1
 800e918:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800e922:	f005 fdf5 	bl	8014510 <xTaskGetTickCount>
 800e926:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e928:	bd70      	pop	{r4, r5, r6, pc}
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	0801a41c 	.word	0x0801a41c

0800e930 <prvTCPPrepareSend>:
{
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	b085      	sub	sp, #20
 800e936:	4605      	mov	r5, r0
 800e938:	4689      	mov	r9, r1
 800e93a:	4616      	mov	r6, r2
	if( ( *ppxNetworkBuffer ) != NULL )
 800e93c:	680b      	ldr	r3, [r1, #0]
 800e93e:	b37b      	cbz	r3, 800e9a0 <prvTCPPrepareSend+0x70>
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800e940:	699c      	ldr	r4, [r3, #24]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e942:	f105 0bdc 	add.w	fp, r5, #220	; 0xdc
	lStreamPos = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	9303      	str	r3, [sp, #12]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800e94a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e94e:	f043 0310 	orr.w	r3, r3, #16
 800e952:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	if( pxSocket->u.xTCP.txStream != NULL )
 800e956:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 810e 	beq.w	800eb7a <prvTCPPrepareSend+0x24a>
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800e95e:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 800e962:	2b01      	cmp	r3, #1
 800e964:	f240 808a 	bls.w	800ea7c <prvTCPPrepareSend+0x14c>
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800e968:	aa03      	add	r2, sp, #12
 800e96a:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 800e96e:	4658      	mov	r0, fp
 800e970:	f001 fc1c 	bl	80101ac <ulTCPWindowTxGet>
 800e974:	4682      	mov	sl, r0
 800e976:	4607      	mov	r7, r0
		if( lDataLen > 0 )
 800e978:	2800      	cmp	r0, #0
 800e97a:	f340 8100 	ble.w	800eb7e <prvTCPPrepareSend+0x24e>
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800e97e:	f8d9 8000 	ldr.w	r8, [r9]
	if( xBufferAllocFixedSize != pdFALSE )
 800e982:	4ba6      	ldr	r3, [pc, #664]	; (800ec1c <prvTCPPrepareSend+0x2ec>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	b173      	cbz	r3, 800e9a6 <prvTCPPrepareSend+0x76>
	if( xResize != pdFALSE )
 800e988:	f1b8 0f00 	cmp.w	r8, #0
 800e98c:	d05c      	beq.n	800ea48 <prvTCPPrepareSend+0x118>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800e98e:	f106 0336 	add.w	r3, r6, #54	; 0x36
 800e992:	4403      	add	r3, r0
 800e994:	f8c8 301c 	str.w	r3, [r8, #28]
			if( pxNewBuffer != NULL )
 800e998:	f1b8 0f00 	cmp.w	r8, #0
 800e99c:	d116      	bne.n	800e9cc <prvTCPPrepareSend+0x9c>
 800e99e:	e0b0      	b.n	800eb02 <prvTCPPrepareSend+0x1d2>
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800e9a0:	f100 0482 	add.w	r4, r0, #130	; 0x82
 800e9a4:	e7cd      	b.n	800e942 <prvTCPPrepareSend+0x12>
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800e9a6:	f106 0036 	add.w	r0, r6, #54	; 0x36
 800e9aa:	4450      	add	r0, sl
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800e9ac:	2846      	cmp	r0, #70	; 0x46
 800e9ae:	bfb8      	it	lt
 800e9b0:	2046      	movlt	r0, #70	; 0x46
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800e9b2:	f1b8 0f00 	cmp.w	r8, #0
 800e9b6:	f000 810d 	beq.w	800ebd4 <prvTCPPrepareSend+0x2a4>
	if( xResize != pdFALSE )
 800e9ba:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800e9be:	4283      	cmp	r3, r0
 800e9c0:	d344      	bcc.n	800ea4c <prvTCPPrepareSend+0x11c>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800e9c2:	f106 0336 	add.w	r3, r6, #54	; 0x36
 800e9c6:	4453      	add	r3, sl
 800e9c8:	f8c8 301c 	str.w	r3, [r8, #28]
				*ppxNetworkBuffer = pxNewBuffer;
 800e9cc:	f8c9 8000 	str.w	r8, [r9]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800e9d0:	f8d8 4018 	ldr.w	r4, [r8, #24]
				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e9d4:	f106 0236 	add.w	r2, r6, #54	; 0x36
 800e9d8:	4422      	add	r2, r4
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800e9da:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 800e9dc:	f8d0 e000 	ldr.w	lr, [r0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800e9e0:	6903      	ldr	r3, [r0, #16]
 800e9e2:	9903      	ldr	r1, [sp, #12]
 800e9e4:	4419      	add	r1, r3
 800e9e6:	eba1 010e 	sub.w	r1, r1, lr
	if ( uxCount >= pxBuffer->LENGTH )
 800e9ea:	428b      	cmp	r3, r1
		uxCount -= pxBuffer->LENGTH;
 800e9ec:	bf98      	it	ls
 800e9ee:	1ac9      	subls	r1, r1, r3
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	4653      	mov	r3, sl
 800e9f6:	f7ff fcab 	bl	800e350 <uxStreamBufferGet>
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800e9fa:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 800e9fe:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 800ea02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ea06:	045b      	lsls	r3, r3, #17
 800ea08:	0c5b      	lsrs	r3, r3, #17
 800ea0a:	2b40      	cmp	r3, #64	; 0x40
 800ea0c:	d137      	bne.n	800ea7e <prvTCPPrepareSend+0x14e>
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800ea0e:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800ea10:	6893      	ldr	r3, [r2, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800ea12:	6912      	ldr	r2, [r2, #16]
 800ea14:	4413      	add	r3, r2
 800ea16:	9903      	ldr	r1, [sp, #12]
 800ea18:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 800ea1a:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800ea1c:	bf98      	it	ls
 800ea1e:	1a9b      	subls	r3, r3, r2
					if( ulDistance == ulDataGot )
 800ea20:	4298      	cmp	r0, r3
 800ea22:	d12c      	bne.n	800ea7e <prvTCPPrepareSend+0x14e>
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800ea24:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ea28:	f043 0301 	orr.w	r3, r3, #1
 800ea2c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800ea30:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800ea34:	4453      	add	r3, sl
 800ea36:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800ea3a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800ea3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea42:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800ea46:	e01a      	b.n	800ea7e <prvTCPPrepareSend+0x14e>
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800ea48:	f240 50f2 	movw	r0, #1522	; 0x5f2
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	f001 fd97 	bl	8010580 <pxGetNetworkBufferWithDescriptor>
		if( pxReturn != NULL )
 800ea52:	2800      	cmp	r0, #0
 800ea54:	f000 808e 	beq.w	800eb74 <prvTCPPrepareSend+0x244>
			if( pxNetworkBuffer )
 800ea58:	f1b8 0f00 	cmp.w	r8, #0
 800ea5c:	d00c      	beq.n	800ea78 <prvTCPPrepareSend+0x148>
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800ea5e:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800ea62:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea66:	4604      	mov	r4, r0
 800ea68:	6980      	ldr	r0, [r0, #24]
 800ea6a:	f008 fe8a 	bl	8017782 <memcpy>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ea6e:	4640      	mov	r0, r8
 800ea70:	f001 fd60 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800ea74:	46a0      	mov	r8, r4
 800ea76:	e7a9      	b.n	800e9cc <prvTCPPrepareSend+0x9c>
 800ea78:	4680      	mov	r8, r0
 800ea7a:	e0b0      	b.n	800ebde <prvTCPPrepareSend+0x2ae>
	lDataLen = 0;
 800ea7c:	2700      	movs	r7, #0
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800ea7e:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
 800ea82:	2b05      	cmp	r3, #5
 800ea84:	f000 8081 	beq.w	800eb8a <prvTCPPrepareSend+0x25a>
	if( ( lDataLen > 0 ) ||
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	dd3c      	ble.n	800eb06 <prvTCPPrepareSend+0x1d6>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800ea8c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ea90:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ea94:	f106 0214 	add.w	r2, r6, #20
 800ea98:	0092      	lsls	r2, r2, #2
 800ea9a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800ea9e:	f043 0210 	orr.w	r2, r3, #16
 800eaa2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800eaa6:	f043 0318 	orr.w	r3, r3, #24
 800eaaa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800eaae:	3628      	adds	r6, #40	; 0x28
 800eab0:	4437      	add	r7, r6
}
 800eab2:	4638      	mov	r0, r7
 800eab4:	b005      	add	sp, #20
 800eab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800eaba:	4658      	mov	r0, fp
 800eabc:	f001 fb36 	bl	801012c <xTCPWindowTxDone>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d067      	beq.n	800eb94 <prvTCPPrepareSend+0x264>
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800eac4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800eac8:	f36f 1345 	bfc	r3, #5, #1
 800eacc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800ead0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ead4:	f043 0301 	orr.w	r3, r3, #1
 800ead8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800eadc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800eae0:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800eae4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800eae8:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800eaec:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800eaf0:	2106      	movs	r1, #6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f7ff fe3c 	bl	800e770 <vTCPStateChange>
 800eaf8:	e04c      	b.n	800eb94 <prvTCPPrepareSend+0x264>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800eafa:	2108      	movs	r1, #8
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7ff fe37 	bl	800e770 <vTCPStateChange>
	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800eb02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800eb06:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800eb0a:	f013 0f03 	tst.w	r3, #3
 800eb0e:	d0d0      	beq.n	800eab2 <prvTCPPrepareSend+0x182>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800eb10:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800eb14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800eb18:	f106 0214 	add.w	r2, r6, #20
 800eb1c:	0092      	lsls	r2, r2, #2
 800eb1e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800eb22:	f043 0210 	orr.w	r2, r3, #16
 800eb26:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if( lDataLen != 0l )
 800eb2a:	2f00      	cmp	r7, #0
 800eb2c:	d0bf      	beq.n	800eaae <prvTCPPrepareSend+0x17e>
 800eb2e:	e7ba      	b.n	800eaa6 <prvTCPPrepareSend+0x176>
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800eb30:	f005 fcee 	bl	8014510 <xTaskGetTickCount>
 800eb34:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800eb36:	1ac0      	subs	r0, r0, r3
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800eb38:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
					xMax = ( 3u * configTICK_RATE_HZ );
 800eb3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800eb40:	f644 6320 	movw	r3, #20000	; 0x4e20
 800eb44:	2900      	cmp	r1, #0
 800eb46:	bf18      	it	ne
 800eb48:	4613      	movne	r3, r2
				if( xAge > xMax )
 800eb4a:	4283      	cmp	r3, r0
 800eb4c:	d22e      	bcs.n	800ebac <prvTCPPrepareSend+0x27c>
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800eb4e:	f005 fcdf 	bl	8014510 <xTaskGetTickCount>
 800eb52:	65e8      	str	r0, [r5, #92]	; 0x5c
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800eb54:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800eb58:	f043 0302 	orr.w	r3, r3, #2
 800eb5c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800eb60:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800eb64:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800eb68:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
 800eb72:	e01b      	b.n	800ebac <prvTCPPrepareSend+0x27c>
				lDataLen = -1;
 800eb74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eb78:	e786      	b.n	800ea88 <prvTCPPrepareSend+0x158>
	lDataLen = 0;
 800eb7a:	2700      	movs	r7, #0
 800eb7c:	e77f      	b.n	800ea7e <prvTCPPrepareSend+0x14e>
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	db38      	blt.n	800ebf4 <prvTCPPrepareSend+0x2c4>
 800eb82:	f895 3053 	ldrb.w	r3, [r5, #83]	; 0x53
 800eb86:	2b05      	cmp	r3, #5
 800eb88:	d1bd      	bne.n	800eb06 <prvTCPPrepareSend+0x1d6>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800eb8a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800eb8e:	f013 0f20 	tst.w	r3, #32
 800eb92:	d192      	bne.n	800eaba <prvTCPPrepareSend+0x18a>
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800eb94:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800eb98:	2b03      	cmp	r3, #3
 800eb9a:	d8ae      	bhi.n	800eafa <prvTCPPrepareSend+0x1ca>
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800eb9c:	2f00      	cmp	r7, #0
 800eb9e:	f47f af73 	bne.w	800ea88 <prvTCPPrepareSend+0x158>
 800eba2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800eba6:	f013 0f01 	tst.w	r3, #1
 800ebaa:	d0c1      	beq.n	800eb30 <prvTCPPrepareSend+0x200>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800ebac:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800ebb0:	f013 0f03 	tst.w	r3, #3
 800ebb4:	f43f af7d 	beq.w	800eab2 <prvTCPPrepareSend+0x182>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800ebb8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ebbc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ebc0:	f106 0214 	add.w	r2, r6, #20
 800ebc4:	0092      	lsls	r2, r2, #2
 800ebc6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800ebca:	f043 0310 	orr.w	r3, r3, #16
 800ebce:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800ebd2:	e76c      	b.n	800eaae <prvTCPPrepareSend+0x17e>
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	f001 fcd3 	bl	8010580 <pxGetNetworkBufferWithDescriptor>
		if( pxReturn != NULL )
 800ebda:	4680      	mov	r8, r0
 800ebdc:	b138      	cbz	r0, 800ebee <prvTCPPrepareSend+0x2be>
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ebde:	2246      	movs	r2, #70	; 0x46
 800ebe0:	f105 0182 	add.w	r1, r5, #130	; 0x82
 800ebe4:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800ebe8:	f008 fdcb 	bl	8017782 <memcpy>
 800ebec:	e6ee      	b.n	800e9cc <prvTCPPrepareSend+0x9c>
				lDataLen = -1;
 800ebee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ebf2:	e749      	b.n	800ea88 <prvTCPPrepareSend+0x158>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800ebf4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800ebf8:	f013 0f03 	tst.w	r3, #3
 800ebfc:	f43f af59 	beq.w	800eab2 <prvTCPPrepareSend+0x182>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800ec00:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ec04:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ec08:	f106 0214 	add.w	r2, r6, #20
 800ec0c:	0092      	lsls	r2, r2, #2
 800ec0e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800ec12:	f043 0210 	orr.w	r2, r3, #16
 800ec16:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 800ec1a:	e744      	b.n	800eaa6 <prvTCPPrepareSend+0x176>
 800ec1c:	0801a4bc 	.word	0x0801a4bc

0800ec20 <prvTCPSendRepeated>:
{
 800ec20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec24:	4681      	mov	r9, r0
 800ec26:	4688      	mov	r8, r1
 800ec28:	2408      	movs	r4, #8
int32_t lResult = 0;
 800ec2a:	2600      	movs	r6, #0
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ec2c:	4637      	mov	r7, r6
 800ec2e:	463a      	mov	r2, r7
 800ec30:	4641      	mov	r1, r8
 800ec32:	4648      	mov	r0, r9
 800ec34:	f7ff fe7c 	bl	800e930 <prvTCPPrepareSend>
		if( xSendLength <= 0 )
 800ec38:	1e05      	subs	r5, r0, #0
 800ec3a:	dd09      	ble.n	800ec50 <prvTCPSendRepeated+0x30>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800ec3c:	463b      	mov	r3, r7
 800ec3e:	462a      	mov	r2, r5
 800ec40:	f8d8 1000 	ldr.w	r1, [r8]
 800ec44:	4648      	mov	r0, r9
 800ec46:	f7ff fc0f 	bl	800e468 <prvTCPReturnPacket>
		lResult += xSendLength;
 800ec4a:	442e      	add	r6, r5
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800ec4c:	3c01      	subs	r4, #1
 800ec4e:	d1ee      	bne.n	800ec2e <prvTCPSendRepeated+0xe>
}
 800ec50:	4630      	mov	r0, r6
 800ec52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800ec58 <xTCPSocketCheck>:
{
 800ec58:	b530      	push	{r4, r5, lr}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	4604      	mov	r4, r0
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800ec5e:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	f240 8145 	bls.w	800eef2 <xTCPSocketCheck+0x29a>
 800ec68:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f000 8129 	beq.w	800eec2 <xTCPSocketCheck+0x26a>
		prvTCPAddTxData( pxSocket );
 800ec70:	f7ff fbd0 	bl	800e414 <prvTCPAddTxData>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ec74:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f040 813e 	bne.w	800eef8 <xTCPSocketCheck+0x2a0>
 800ec7c:	e00e      	b.n	800ec9c <xTCPSocketCheck+0x44>
					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800ec7e:	2300      	movs	r3, #0
 800ec80:	2228      	movs	r2, #40	; 0x28
 800ec82:	4601      	mov	r1, r0
 800ec84:	4620      	mov	r0, r4
 800ec86:	f7ff fbef 	bl	800e468 <prvTCPReturnPacket>
 800ec8a:	e140      	b.n	800ef0e <xTCPSocketCheck+0x2b6>
BaseType_t xReady = pdFALSE;
 800ec8c:	2500      	movs	r5, #0
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ec8e:	f001 fc51 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	67e3      	str	r3, [r4, #124]	; 0x7c
	if( xReady == pdFALSE )
 800ec96:	2d00      	cmp	r5, #0
 800ec98:	f040 8102 	bne.w	800eea0 <xTCPSocketCheck+0x248>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800ec9c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	f200 8112 	bhi.w	800eeca <xTCPSocketCheck+0x272>
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d012      	beq.n	800ecd0 <xTCPSocketCheck+0x78>
		prvTCPNextTimeout( pxSocket );
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f7ff fd06 	bl	800e6bc <prvTCPNextTimeout>
		switch( pxSocket->u.xTCP.ucTCPState )
 800ecb0:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800ecb4:	2b08      	cmp	r3, #8
 800ecb6:	f200 80fa 	bhi.w	800eeae <xTCPSocketCheck+0x256>
 800ecba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ecbe:	00f5      	.short	0x00f5
 800ecc0:	00f800f5 	.word	0x00f800f5
 800ecc4:	00f800f8 	.word	0x00f800f8
 800ecc8:	00f800f5 	.word	0x00f800f5
 800eccc:	00f500f8 	.word	0x00f500f8
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800ecd0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	f200 80be 	bhi.w	800ee56 <xTCPSocketCheck+0x1fe>
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800ecda:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ecde:	f013 0f08 	tst.w	r3, #8
 800ece2:	d178      	bne.n	800edd6 <xTCPSocketCheck+0x17e>
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
 800ece4:	2300      	movs	r3, #0
 800ece6:	9302      	str	r3, [sp, #8]
 800ece8:	f8ad 300c 	strh.w	r3, [sp, #12]
	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800ecec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecee:	0e1a      	lsrs	r2, r3, #24
 800ecf0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800ecf4:	0219      	lsls	r1, r3, #8
 800ecf6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800ecfa:	430a      	orrs	r2, r1
 800ecfc:	0a1b      	lsrs	r3, r3, #8
 800ecfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed02:	4313      	orrs	r3, r2
 800ed04:	a804      	add	r0, sp, #16
 800ed06:	f840 3d0c 	str.w	r3, [r0, #-12]!
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800ed0a:	a902      	add	r1, sp, #8
 800ed0c:	f7fc fdf8 	bl	800b900 <eARPGetCacheEntry>
	switch( eReturned )
 800ed10:	2801      	cmp	r0, #1
 800ed12:	f040 80a5 	bne.w	800ee60 <xTCPSocketCheck+0x208>
		pxSocket->u.xTCP.ucRepCount = 0u;
 800ed16:	2500      	movs	r5, #0
 800ed18:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800ed1c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ed20:	f043 0308 	orr.w	r3, r3, #8
 800ed24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ed28:	2246      	movs	r2, #70	; 0x46
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800ed30:	f008 fd4c 	bl	80177cc <memset>
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800ed34:	9802      	ldr	r0, [sp, #8]
 800ed36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800ed3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ed3e:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800ed42:	2308      	movs	r3, #8
 800ed44:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 800ed48:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800ed4c:	2345      	movs	r3, #69	; 0x45
 800ed4e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800ed52:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
 800ed56:	2338      	movs	r3, #56	; 0x38
 800ed58:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800ed5c:	2380      	movs	r3, #128	; 0x80
 800ed5e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800ed62:	2306      	movs	r3, #6
 800ed64:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800ed68:	4b6f      	ldr	r3, [pc, #444]	; (800ef28 <xTCPSocketCheck+0x2d0>)
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800ed70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed72:	0e1a      	lsrs	r2, r3, #24
 800ed74:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800ed78:	0219      	lsls	r1, r3, #8
 800ed7a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	0a1b      	lsrs	r3, r3, #8
 800ed82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed86:	4313      	orrs	r3, r2
 800ed88:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800ed8c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800ed8e:	0a13      	lsrs	r3, r2, #8
 800ed90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed94:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed98:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800ed9a:	0a13      	lsrs	r3, r2, #8
 800ed9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eda0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800eda4:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800eda8:	4a60      	ldr	r2, [pc, #384]	; (800ef2c <xTCPSocketCheck+0x2d4>)
 800edaa:	6813      	ldr	r3, [r2, #0]
 800edac:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		ulNextInitialSequenceNumber += 0x102UL;
 800edb0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800edb4:	6013      	str	r3, [r2, #0]
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800edb6:	2350      	movs	r3, #80	; 0x50
 800edb8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800edbc:	2302      	movs	r3, #2
 800edbe:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		prvSocketSetMSS( pxSocket );
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7ff fb04 	bl	800e3d0 <prvSocketSetMSS>
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800edc8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800edcc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		prvTCPCreateWindow( pxSocket );
 800edd0:	4620      	mov	r0, r4
 800edd2:	f7ff fc59 	bl	800e688 <prvTCPCreateWindow>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800edd6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800edda:	2202      	movs	r2, #2
 800eddc:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800ede0:	2204      	movs	r2, #4
 800ede2:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800ede6:	0a1a      	lsrs	r2, r3, #8
 800ede8:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800edec:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800edf0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800edf4:	fb02 f203 	mul.w	r2, r2, r3
		while( uxWinSize > 0xfffful )
 800edf8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800edfc:	d339      	bcc.n	800ee72 <xTCPSocketCheck+0x21a>
 800edfe:	2300      	movs	r3, #0
			uxWinSize >>= 1;
 800ee00:	0852      	lsrs	r2, r2, #1
			ucFactor++;
 800ee02:	3301      	adds	r3, #1
 800ee04:	b2db      	uxtb	r3, r3
		while( uxWinSize > 0xfffful )
 800ee06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ee0a:	d2f9      	bcs.n	800ee00 <xTCPSocketCheck+0x1a8>
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800ee0c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800ee10:	2201      	movs	r2, #1
 800ee12:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800ee16:	2103      	movs	r1, #3
 800ee18:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800ee1c:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800ee20:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800ee24:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800ee28:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800ee2c:	2304      	movs	r3, #4
 800ee2e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800ee32:	2302      	movs	r3, #2
 800ee34:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ee38:	2380      	movs	r3, #128	; 0x80
 800ee3a:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			pxSocket->u.xTCP.ucRepCount++;
 800ee3e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800ee42:	4413      	add	r3, r2
 800ee44:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800ee48:	2300      	movs	r3, #0
 800ee4a:	2234      	movs	r2, #52	; 0x34
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f7ff fb0a 	bl	800e468 <prvTCPReturnPacket>
 800ee54:	e729      	b.n	800ecaa <xTCPSocketCheck+0x52>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ee56:	2108      	movs	r1, #8
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f7ff fc89 	bl	800e770 <vTCPStateChange>
 800ee5e:	e724      	b.n	800ecaa <xTCPSocketCheck+0x52>
		pxSocket->u.xTCP.ucRepCount++;
 800ee60:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800ee64:	3301      	adds	r3, #1
 800ee66:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800ee6a:	9801      	ldr	r0, [sp, #4]
 800ee6c:	f7fc fdd0 	bl	800ba10 <FreeRTOS_OutputARPRequest>
 800ee70:	e71b      	b.n	800ecaa <xTCPSocketCheck+0x52>
		ucFactor = 0u;
 800ee72:	2300      	movs	r3, #0
 800ee74:	e7ca      	b.n	800ee0c <xTCPSocketCheck+0x1b4>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ee76:	2108      	movs	r1, #8
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff fc79 	bl	800e770 <vTCPStateChange>
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800ee7e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ee82:	f013 0f04 	tst.w	r3, #4
 800ee86:	d00d      	beq.n	800eea4 <xTCPSocketCheck+0x24c>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ee88:	f013 0f08 	tst.w	r3, #8
 800ee8c:	d002      	beq.n	800ee94 <xTCPSocketCheck+0x23c>
					xResult = -1;
 800ee8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee92:	e00a      	b.n	800eeaa <xTCPSocketCheck+0x252>
						vSocketClose( pxSocket );
 800ee94:	4620      	mov	r0, r4
 800ee96:	f7fe f9b1 	bl	800d1fc <vSocketClose>
					xResult = -1;
 800ee9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee9e:	e004      	b.n	800eeaa <xTCPSocketCheck+0x252>
BaseType_t xResult = 0;
 800eea0:	2000      	movs	r0, #0
 800eea2:	e002      	b.n	800eeaa <xTCPSocketCheck+0x252>
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800eea4:	2001      	movs	r0, #1
 800eea6:	e000      	b.n	800eeaa <xTCPSocketCheck+0x252>
		switch( pxSocket->u.xTCP.ucTCPState )
 800eea8:	2000      	movs	r0, #0
}
 800eeaa:	b005      	add	sp, #20
 800eeac:	bd30      	pop	{r4, r5, pc}
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800eeae:	f005 fb2f 	bl	8014510 <xTaskGetTickCount>
 800eeb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800eeb4:	1ac0      	subs	r0, r0, r3
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800eeb6:	f247 5330 	movw	r3, #30000	; 0x7530
 800eeba:	4298      	cmp	r0, r3
 800eebc:	d8db      	bhi.n	800ee76 <xTCPSocketCheck+0x21e>
 800eebe:	2001      	movs	r0, #1
 800eec0:	e7f3      	b.n	800eeaa <xTCPSocketCheck+0x252>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800eec2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800eec4:	b9c0      	cbnz	r0, 800eef8 <xTCPSocketCheck+0x2a0>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800eec6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	f43f af00 	beq.w	800ecd0 <xTCPSocketCheck+0x78>
		pxNetworkBuffer = NULL;
 800eed0:	a904      	add	r1, sp, #16
 800eed2:	2300      	movs	r3, #0
 800eed4:	f841 3d08 	str.w	r3, [r1, #-8]!
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff fea1 	bl	800ec20 <prvTCPSendRepeated>
		if( pxNetworkBuffer != NULL )
 800eede:	9802      	ldr	r0, [sp, #8]
 800eee0:	2800      	cmp	r0, #0
 800eee2:	f43f aee2 	beq.w	800ecaa <xTCPSocketCheck+0x52>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800eee6:	f001 fb25 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
 800eeea:	e6de      	b.n	800ecaa <xTCPSocketCheck+0x52>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800eeec:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800eef0:	e6d9      	b.n	800eca6 <xTCPSocketCheck+0x4e>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800eef2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d0f9      	beq.n	800eeec <xTCPSocketCheck+0x294>
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800eef8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800eefc:	f013 0f20 	tst.w	r3, #32
 800ef00:	f47f aec4 	bne.w	800ec8c <xTCPSocketCheck+0x34>
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800ef04:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f47f aeb8 	bne.w	800ec7e <xTCPSocketCheck+0x26>
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f7ff fbd4 	bl	800e6bc <prvTCPNextTimeout>
 800ef14:	2801      	cmp	r0, #1
 800ef16:	bf94      	ite	ls
 800ef18:	2500      	movls	r5, #0
 800ef1a:	2501      	movhi	r5, #1
			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ef1c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	f43f aeb9 	beq.w	800ec96 <xTCPSocketCheck+0x3e>
 800ef24:	e6b3      	b.n	800ec8e <xTCPSocketCheck+0x36>
 800ef26:	bf00      	nop
 800ef28:	20000010 	.word	0x20000010
 800ef2c:	200006a0 	.word	0x200006a0

0800ef30 <prvTCPHandleFin>:
{
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4604      	mov	r4, r0
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800ef34:	698d      	ldr	r5, [r1, #24]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800ef36:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800ef3a:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
 800ef3e:	f012 0f01 	tst.w	r2, #1
 800ef42:	d004      	beq.n	800ef4e <prvTCPHandleFin+0x1e>
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800ef44:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800ef48:	3201      	adds	r2, #1
 800ef4a:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800ef4e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ef52:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ef56:	d129      	bne.n	800efac <prvTCPHandleFin+0x7c>
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800ef58:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800ef5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800ef60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800ef68:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800ef6c:	f012 0f01 	tst.w	r2, #1
 800ef70:	d033      	beq.n	800efda <prvTCPHandleFin+0xaa>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800ef72:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800ef76:	3301      	adds	r3, #1
 800ef78:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800ef7c:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	db36      	blt.n	800eff2 <prvTCPHandleFin+0xc2>
			pxTCPHeader->ucTCPFlags = 0u;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800ef8a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800ef8e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( pxTCPHeader->ucTCPFlags != 0u )
 800ef92:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800ef96:	b3c3      	cbz	r3, 800f00a <prvTCPHandleFin+0xda>
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800ef98:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
 800ef9c:	3028      	adds	r0, #40	; 0x28
	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800ef9e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 800efa2:	3314      	adds	r3, #20
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800efac:	0e1a      	lsrs	r2, r3, #24
 800efae:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800efb2:	0219      	lsls	r1, r3, #8
 800efb4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800efb8:	430a      	orrs	r2, r1
 800efba:	0a1b      	lsrs	r3, r3, #8
 800efbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800efc0:	4313      	orrs	r3, r2
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800efc2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800efc6:	3201      	adds	r2, #1
 800efc8:	4293      	cmp	r3, r2
 800efca:	d1cd      	bne.n	800ef68 <prvTCPHandleFin+0x38>
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800efcc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800efd0:	f043 0301 	orr.w	r3, r3, #1
 800efd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efd8:	e7c6      	b.n	800ef68 <prvTCPHandleFin+0x38>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800efda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800efde:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800efe2:	2311      	movs	r3, #17
 800efe4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		vTCPStateChange( pxSocket, eLAST_ACK );
 800efe8:	210a      	movs	r1, #10
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff fbc0 	bl	800e770 <vTCPStateChange>
 800eff0:	e7cb      	b.n	800ef8a <prvTCPHandleFin+0x5a>
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800eff2:	f012 0f02 	tst.w	r2, #2
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800eff6:	bf0c      	ite	eq
 800eff8:	2310      	moveq	r3, #16
				pxTCPHeader->ucTCPFlags = 0u;
 800effa:	2300      	movne	r3, #0
 800effc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f000:	2108      	movs	r1, #8
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff fbb4 	bl	800e770 <vTCPStateChange>
 800f008:	e7bf      	b.n	800ef8a <prvTCPHandleFin+0x5a>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e7c7      	b.n	800ef9e <prvTCPHandleFin+0x6e>
	...

0800f010 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	b089      	sub	sp, #36	; 0x24
 800f016:	9005      	str	r0, [sp, #20]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f018:	f8d0 8018 	ldr.w	r8, [r0, #24]
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800f01c:	f898 502f 	ldrb.w	r5, [r8, #47]	; 0x2f
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800f020:	f8d8 401e 	ldr.w	r4, [r8, #30]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800f024:	f8b8 1024 	ldrh.w	r1, [r8, #36]	; 0x24
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f028:	f8d8 001a 	ldr.w	r0, [r8, #26]
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800f02c:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 800f030:	0a1a      	lsrs	r2, r3, #8
 800f032:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f036:	0e06      	lsrs	r6, r0, #24
 800f038:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 800f03c:	0202      	lsls	r2, r0, #8
 800f03e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800f042:	4316      	orrs	r6, r2
 800f044:	0a00      	lsrs	r0, r0, #8
 800f046:	f400 427f 	and.w	r2, r0, #65280	; 0xff00
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800f04a:	0a08      	lsrs	r0, r1, #8
 800f04c:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800f050:	0e20      	lsrs	r0, r4, #24
 800f052:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800f056:	0227      	lsls	r7, r4, #8
 800f058:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800f05c:	4338      	orrs	r0, r7
 800f05e:	0a24      	lsrs	r4, r4, #8
 800f060:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
BaseType_t xResult = pdPASS;

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800f064:	b29b      	uxth	r3, r3
 800f066:	4332      	orrs	r2, r6
 800f068:	b289      	uxth	r1, r1
 800f06a:	4320      	orrs	r0, r4
 800f06c:	f7fe fc96 	bl	800d99c <pxTCPSocketLookup>

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800f070:	b160      	cbz	r0, 800f08c <xProcessReceivedTCPPacket+0x7c>
 800f072:	4604      	mov	r4, r0
 800f074:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
	switch( uxStatus )
 800f078:	2b0b      	cmp	r3, #11
 800f07a:	d816      	bhi.n	800f0aa <xProcessReceivedTCPPacket+0x9a>
 800f07c:	e8df f003 	tbb	[pc, r3]
 800f080:	15151506 	.word	0x15151506
 800f084:	06151515 	.word	0x06151515
 800f088:	06150606 	.word	0x06150606
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800f08c:	f005 031f 	and.w	r3, r5, #31
 800f090:	2b10      	cmp	r3, #16
 800f092:	d002      	beq.n	800f09a <xProcessReceivedTCPPacket+0x8a>
 800f094:	f015 0f04 	tst.w	r5, #4
 800f098:	d003      	beq.n	800f0a2 <xProcessReceivedTCPPacket+0x92>
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800f09a:	2000      	movs	r0, #0
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
}
 800f09c:	b009      	add	sp, #36	; 0x24
 800f09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			prvTCPSendReset( pxNetworkBuffer );
 800f0a2:	9805      	ldr	r0, [sp, #20]
 800f0a4:	f7ff fae0 	bl	800e668 <prvTCPSendReset>
 800f0a8:	e7f7      	b.n	800f09a <xProcessReceivedTCPPacket+0x8a>
		pxSocket->u.xTCP.ucRepCount = 0u;
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	f000 80c8 	beq.w	800f246 <xProcessReceivedTCPPacket+0x236>
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800f0b6:	f015 0f04 	tst.w	r5, #4
 800f0ba:	f040 8183 	bne.w	800f3c4 <xProcessReceivedTCPPacket+0x3b4>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800f0be:	f005 051f 	and.w	r5, r5, #31
 800f0c2:	2d02      	cmp	r5, #2
 800f0c4:	f000 8182 	beq.w	800f3cc <xProcessReceivedTCPPacket+0x3bc>
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800f0c8:	9a05      	ldr	r2, [sp, #20]
 800f0ca:	6992      	ldr	r2, [r2, #24]
 800f0cc:	f852 1f22 	ldr.w	r1, [r2, #34]!
 800f0d0:	6856      	ldr	r6, [r2, #4]
 800f0d2:	6895      	ldr	r5, [r2, #8]
 800f0d4:	68d0      	ldr	r0, [r2, #12]
 800f0d6:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
 800f0da:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 800f0de:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 800f0e2:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
 800f0e6:	6911      	ldr	r1, [r2, #16]
 800f0e8:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800f0ec:	f005 fa10 	bl	8014510 <xTaskGetTickCount>
 800f0f0:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800f0f2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800f0f6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800f0fa:	f36f 0341 	bfc	r3, #1, #1
 800f0fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800f102:	2300      	movs	r3, #0
 800f104:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800f108:	f005 fa02 	bl	8014510 <xTaskGetTickCount>
 800f10c:	65e0      	str	r0, [r4, #92]	; 0x5c
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800f10e:	f898 302e 	ldrb.w	r3, [r8, #46]	; 0x2e
 800f112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f116:	2b50      	cmp	r3, #80	; 0x50
 800f118:	f200 815c 	bhi.w	800f3d4 <xProcessReceivedTCPPacket+0x3c4>
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800f11c:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800f120:	0a13      	lsrs	r3, r2, #8
 800f122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f126:	b29b      	uxth	r3, r3
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800f128:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
 800f12c:	4093      	lsls	r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800f12e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800f132:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f136:	f8d9 6018 	ldr.w	r6, [r9, #24]
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800f13a:	f8d6 3026 	ldr.w	r3, [r6, #38]	; 0x26
 800f13e:	0e1a      	lsrs	r2, r3, #24
 800f140:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800f144:	0219      	lsls	r1, r3, #8
 800f146:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800f14a:	430a      	orrs	r2, r1
 800f14c:	0a1b      	lsrs	r3, r3, #8
 800f14e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f152:	ea42 0803 	orr.w	r8, r2, r3
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800f156:	f896 b02f 	ldrb.w	fp, [r6, #47]	; 0x2f
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800f15a:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
 800f15e:	089b      	lsrs	r3, r3, #2
 800f160:	f003 033c 	and.w	r3, r3, #60	; 0x3c
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800f164:	f103 0722 	add.w	r7, r3, #34	; 0x22
 800f168:	4437      	add	r7, r6
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800f16a:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800f16e:	f1a5 010e 	sub.w	r1, r5, #14
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800f172:	8a35      	ldrh	r5, [r6, #16]
 800f174:	0a2a      	lsrs	r2, r5, #8
 800f176:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800f17a:	b295      	uxth	r5, r2
 800f17c:	428d      	cmp	r5, r1
 800f17e:	bfa8      	it	ge
 800f180:	460d      	movge	r5, r1
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800f182:	3314      	adds	r3, #20
 800f184:	429d      	cmp	r5, r3
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800f186:	bfcc      	ite	gt
 800f188:	1aed      	subgt	r5, r5, r3
		lReceiveLength = 0;
 800f18a:	2500      	movle	r5, #0
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800f18c:	f01b 0f20 	tst.w	fp, #32
 800f190:	d009      	beq.n	800f1a6 <xProcessReceivedTCPPacket+0x196>
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800f192:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 800f194:	0a13      	lsrs	r3, r2, #8
 800f196:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f19a:	b29b      	uxth	r3, r3
		*ppucRecvData += lUrgentLength;
 800f19c:	441f      	add	r7, r3
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800f19e:	42ab      	cmp	r3, r5
 800f1a0:	bfd4      	ite	le
 800f1a2:	1aed      	suble	r5, r5, r3
 800f1a4:	1b6d      	subgt	r5, r5, r5
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800f1a6:	9502      	str	r5, [sp, #8]
	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800f1a8:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 800f1ac:	2a04      	cmp	r2, #4
 800f1ae:	d906      	bls.n	800f1be <xProcessReceivedTCPPacket+0x1ae>
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800f1b0:	f108 0301 	add.w	r3, r8, #1
 800f1b4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 800f1b8:	4299      	cmp	r1, r3
 800f1ba:	f000 81d6 	beq.w	800f56a <xProcessReceivedTCPPacket+0x55a>
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800f1be:	9b02      	ldr	r3, [sp, #8]
 800f1c0:	eb08 0a03 	add.w	sl, r8, r3
 800f1c4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800f1c8:	ebaa 0303 	sub.w	r3, sl, r3
 800f1cc:	2b00      	cmp	r3, #0
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800f1ce:	bfc8      	it	gt
 800f1d0:	f8c4 a0f4 	strgt.w	sl, [r4, #244]	; 0xf4
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f1d4:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
 800f1d8:	9303      	str	r3, [sp, #12]
	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800f1da:	9b02      	ldr	r3, [sp, #8]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 81e1 	beq.w	800f5a4 <xProcessReceivedTCPPacket+0x594>
 800f1e2:	2a03      	cmp	r2, #3
 800f1e4:	f240 81de 	bls.w	800f5a4 <xProcessReceivedTCPPacket+0x594>
		if ( pxSocket->u.xTCP.rxStream )
 800f1e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800f1ea:	2a00      	cmp	r2, #0
 800f1ec:	f000 81c4 	beq.w	800f578 <xProcessReceivedTCPPacket+0x568>
size_t uxHead = pxBuffer->uxHead;
 800f1f0:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 800f1f2:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800f1f4:	6912      	ldr	r2, [r2, #16]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d800      	bhi.n	800f202 <xProcessReceivedTCPPacket+0x1f2>
		uxCount -= pxBuffer->LENGTH;
 800f200:	1a9b      	subs	r3, r3, r2
	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800f202:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800f206:	f8d2 2026 	ldr.w	r2, [r2, #38]	; 0x26
 800f20a:	0e10      	lsrs	r0, r2, #24
 800f20c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800f210:	0211      	lsls	r1, r2, #8
 800f212:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800f216:	4308      	orrs	r0, r1
 800f218:	0a12      	lsrs	r2, r2, #8
 800f21a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800f21e:	9a02      	ldr	r2, [sp, #8]
 800f220:	4301      	orrs	r1, r0
 800f222:	9803      	ldr	r0, [sp, #12]
 800f224:	f000 fe60 	bl	800fee8 <lTCPWindowRxCheck>
		if( lOffset >= 0 )
 800f228:	1e01      	subs	r1, r0, #0
 800f22a:	f2c0 83f9 	blt.w	800fa20 <xProcessReceivedTCPPacket+0xa10>
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800f22e:	9b02      	ldr	r3, [sp, #8]
 800f230:	463a      	mov	r2, r7
 800f232:	4620      	mov	r0, r4
 800f234:	f7fe fbda 	bl	800d9ec <lTCPAddRxdata>
			if( lStored != ( int32_t ) ulReceiveLength )
 800f238:	4285      	cmp	r5, r0
 800f23a:	f000 83f1 	beq.w	800fa20 <xProcessReceivedTCPPacket+0xa10>
				prvTCPSendReset( pxNetworkBuffer );
 800f23e:	4648      	mov	r0, r9
 800f240:	f7ff fa12 	bl	800e668 <prvTCPSendReset>
 800f244:	e3bc      	b.n	800f9c0 <xProcessReceivedTCPPacket+0x9b0>
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800f246:	f005 031f 	and.w	r3, r5, #31
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d007      	beq.n	800f25e <xProcessReceivedTCPPacket+0x24e>
				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800f24e:	f015 0f04 	tst.w	r5, #4
 800f252:	f47f af22 	bne.w	800f09a <xProcessReceivedTCPPacket+0x8a>
					prvTCPSendReset( pxNetworkBuffer );
 800f256:	9805      	ldr	r0, [sp, #20]
 800f258:	f7ff fa06 	bl	800e668 <prvTCPSendReset>
 800f25c:	e71d      	b.n	800f09a <xProcessReceivedTCPPacket+0x8a>
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800f25e:	9d05      	ldr	r5, [sp, #20]
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f260:	69af      	ldr	r7, [r5, #24]
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f262:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f266:	f013 0f08 	tst.w	r3, #8
 800f26a:	d043      	beq.n	800f2f4 <xProcessReceivedTCPPacket+0x2e4>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f26c:	f043 0304 	orr.w	r3, r3, #4
 800f270:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f274:	6560      	str	r0, [r4, #84]	; 0x54
		}
	}

	if( pxReturn != NULL )
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800f276:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f278:	0a13      	lsrs	r3, r2, #8
 800f27a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f27e:	87a3      	strh	r3, [r4, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800f280:	f8d7 301a 	ldr.w	r3, [r7, #26]
 800f284:	0e1a      	lsrs	r2, r3, #24
 800f286:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800f28a:	0219      	lsls	r1, r3, #8
 800f28c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800f290:	430a      	orrs	r2, r1
 800f292:	0a1b      	lsrs	r3, r3, #8
 800f294:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f298:	4313      	orrs	r3, r2
 800f29a:	63a3      	str	r3, [r4, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800f29c:	4ebc      	ldr	r6, [pc, #752]	; (800f590 <xProcessReceivedTCPPacket+0x580>)
 800f29e:	6833      	ldr	r3, [r6, #0]
 800f2a0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800f2a4:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 800f2a8:	0e1a      	lsrs	r2, r3, #24
 800f2aa:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800f2ae:	0219      	lsls	r1, r3, #8
 800f2b0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	0a1b      	lsrs	r3, r3, #8
 800f2b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f7ff f884 	bl	800e3d0 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7ff f9dd 	bl	800e688 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 800f2ce:	6833      	ldr	r3, [r6, #0]
 800f2d0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800f2d4:	6033      	str	r3, [r6, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800f2d6:	2103      	movs	r1, #3
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f7ff fa49 	bl	800e770 <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800f2de:	2246      	movs	r2, #70	; 0x46
 800f2e0:	69a9      	ldr	r1, [r5, #24]
 800f2e2:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800f2e6:	f008 fa4c 	bl	8017782 <memcpy>
	if( xResult != pdFAIL )
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	f47f aefe 	bne.w	800f0ec <xProcessReceivedTCPPacket+0xdc>
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	e6d3      	b.n	800f09c <xProcessReceivedTCPPacket+0x8c>
		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800f2f4:	f8b0 204e 	ldrh.w	r2, [r0, #78]	; 0x4e
 800f2f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d249      	bcs.n	800f394 <xProcessReceivedTCPPacket+0x384>
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 800f300:	2206      	movs	r2, #6
 800f302:	2101      	movs	r1, #1
 800f304:	2002      	movs	r0, #2
 800f306:	f7fd fc61 	bl	800cbcc <FreeRTOS_socket>
 800f30a:	4606      	mov	r6, r0
			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800f30c:	1e43      	subs	r3, r0, #1
 800f30e:	f113 0f03 	cmn.w	r3, #3
 800f312:	d84e      	bhi.n	800f3b2 <xProcessReceivedTCPPacket+0x3a2>
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800f314:	69e3      	ldr	r3, [r4, #28]
 800f316:	61c3      	str	r3, [r0, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800f318:	6a23      	ldr	r3, [r4, #32]
 800f31a:	6203      	str	r3, [r0, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800f31c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f320:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800f324:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f326:	66c3      	str	r3, [r0, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800f328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f32a:	6703      	str	r3, [r0, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800f32c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f32e:	6643      	str	r3, [r0, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800f330:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f332:	6683      	str	r3, [r0, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800f334:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800f338:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800f33c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800f340:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800f344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f346:	b123      	cbz	r3, 800f352 <xProcessReceivedTCPPacket+0x342>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800f348:	6283      	str	r3, [r0, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800f34a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f34c:	f043 0305 	orr.w	r3, r3, #5
 800f350:	62c3      	str	r3, [r0, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800f352:	4b90      	ldr	r3, [pc, #576]	; (800f594 <xProcessReceivedTCPPacket+0x584>)
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	9307      	str	r3, [sp, #28]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f358:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800f35a:	0a13      	lsrs	r3, r2, #8
 800f35c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f360:	f8ad 301a 	strh.w	r3, [sp, #26]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800f364:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800f368:	f043 0304 	orr.w	r3, r3, #4
 800f36c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800f370:	6574      	str	r4, [r6, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800f372:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800f376:	3301      	adds	r3, #1
 800f378:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800f37c:	2301      	movs	r3, #1
 800f37e:	2208      	movs	r2, #8
 800f380:	a906      	add	r1, sp, #24
 800f382:	4630      	mov	r0, r6
 800f384:	f7fd fe9e 	bl	800d0c4 <vSocketBind>
 800f388:	b9b8      	cbnz	r0, 800f3ba <xProcessReceivedTCPPacket+0x3aa>
				pxReturn = pxNewSocket;
 800f38a:	4634      	mov	r4, r6
	if( pxReturn != NULL )
 800f38c:	2e00      	cmp	r6, #0
 800f38e:	f47f af72 	bne.w	800f276 <xProcessReceivedTCPPacket+0x266>
 800f392:	e00c      	b.n	800f3ae <xProcessReceivedTCPPacket+0x39e>
			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 800f394:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 800f396:	4c80      	ldr	r4, [pc, #512]	; (800f598 <xProcessReceivedTCPPacket+0x588>)
 800f398:	4880      	ldr	r0, [pc, #512]	; (800f59c <xProcessReceivedTCPPacket+0x58c>)
 800f39a:	2a01      	cmp	r2, #1
 800f39c:	bf18      	it	ne
 800f39e:	4620      	movne	r0, r4
 800f3a0:	9000      	str	r0, [sp, #0]
 800f3a2:	487f      	ldr	r0, [pc, #508]	; (800f5a0 <xProcessReceivedTCPPacket+0x590>)
 800f3a4:	f007 fad4 	bl	8016950 <lUDPLoggingPrintf>
			prvTCPSendReset( pxNetworkBuffer );
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f7ff f95d 	bl	800e668 <prvTCPSendReset>
		xResult = pdPASS;
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	e674      	b.n	800f09c <xProcessReceivedTCPPacket+0x8c>
				prvTCPSendReset( pxNetworkBuffer );
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7ff f958 	bl	800e668 <prvTCPSendReset>
 800f3b8:	e7f9      	b.n	800f3ae <xProcessReceivedTCPPacket+0x39e>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7fd ff1e 	bl	800d1fc <vSocketClose>
 800f3c0:	2400      	movs	r4, #0
 800f3c2:	e792      	b.n	800f2ea <xProcessReceivedTCPPacket+0x2da>
				vTCPStateChange( pxSocket, eCLOSED );
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	f7ff f9d3 	bl	800e770 <vTCPStateChange>
 800f3ca:	e666      	b.n	800f09a <xProcessReceivedTCPPacket+0x8a>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800f3cc:	2b04      	cmp	r3, #4
 800f3ce:	f63f ae64 	bhi.w	800f09a <xProcessReceivedTCPPacket+0x8a>
 800f3d2:	e679      	b.n	800f0c8 <xProcessReceivedTCPPacket+0xb8>
	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f3d4:	9b05      	ldr	r3, [sp, #20]
 800f3d6:	6999      	ldr	r1, [r3, #24]
	pucPtr = pxTCPHeader->ucOptdata;
 800f3d8:	f101 0336 	add.w	r3, r1, #54	; 0x36
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800f3dc:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 800f3e0:	0912      	lsrs	r2, r2, #4
 800f3e2:	3a05      	subs	r2, #5
 800f3e4:	eb03 0782 	add.w	r7, r3, r2, lsl #2
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f3e8:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 800f3ec:	9202      	str	r2, [sp, #8]
	while( pucPtr < pucLast )
 800f3ee:	42bb      	cmp	r3, r7
 800f3f0:	f4bf ae94 	bcs.w	800f11c <xProcessReceivedTCPPacket+0x10c>
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800f3f4:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	f43f ae8f 	beq.w	800f11c <xProcessReceivedTCPPacket+0x10c>
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800f3fe:	f04f 0b00 	mov.w	fp, #0
 800f402:	f8cd 8010 	str.w	r8, [sp, #16]
 800f406:	46b9      	mov	r9, r7
 800f408:	e088      	b.n	800f51c <xProcessReceivedTCPPacket+0x50c>
			pucPtr++;
 800f40a:	3301      	adds	r3, #1
 800f40c:	e082      	b.n	800f514 <xProcessReceivedTCPPacket+0x504>
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800f40e:	785a      	ldrb	r2, [r3, #1]
 800f410:	2a03      	cmp	r2, #3
 800f412:	d005      	beq.n	800f420 <xProcessReceivedTCPPacket+0x410>
			int len = ( int )pucPtr[ 1 ];
 800f414:	7859      	ldrb	r1, [r3, #1]
			if( len == 0 )
 800f416:	2900      	cmp	r1, #0
 800f418:	d17b      	bne.n	800f512 <xProcessReceivedTCPPacket+0x502>
 800f41a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f41e:	e67d      	b.n	800f11c <xProcessReceivedTCPPacket+0x10c>
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800f420:	789a      	ldrb	r2, [r3, #2]
 800f422:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800f426:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800f42a:	f042 0210 	orr.w	r2, r2, #16
 800f42e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800f432:	3303      	adds	r3, #3
 800f434:	e06e      	b.n	800f514 <xProcessReceivedTCPPacket+0x504>
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800f436:	785a      	ldrb	r2, [r3, #1]
 800f438:	2a04      	cmp	r2, #4
 800f43a:	d005      	beq.n	800f448 <xProcessReceivedTCPPacket+0x438>
			int len = ( int )pucPtr[ 1 ];
 800f43c:	4611      	mov	r1, r2
			if( len == 0 )
 800f43e:	2a00      	cmp	r2, #0
 800f440:	d167      	bne.n	800f512 <xProcessReceivedTCPPacket+0x502>
 800f442:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f446:	e669      	b.n	800f11c <xProcessReceivedTCPPacket+0x10c>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800f448:	7899      	ldrb	r1, [r3, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
 800f44a:	78da      	ldrb	r2, [r3, #3]
	return ( uint16_t )
 800f44c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800f450:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800f454:	428a      	cmp	r2, r1
 800f456:	d215      	bcs.n	800f484 <xProcessReceivedTCPPacket+0x474>
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800f458:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 800f45c:	f041 0101 	orr.w	r1, r1, #1
 800f460:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800f464:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800f468:	fbb1 f1f2 	udiv	r1, r1, r2
 800f46c:	fb02 f101 	mul.w	r1, r2, r1
 800f470:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800f474:	f8a4 219a 	strh.w	r2, [r4, #410]	; 0x19a
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800f478:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800f47c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800f480:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
				pucPtr += TCP_OPT_MSS_LEN;
 800f484:	3304      	adds	r3, #4
 800f486:	e045      	b.n	800f514 <xProcessReceivedTCPPacket+0x504>
 800f488:	3508      	adds	r5, #8
					while( len >= 8 )
 800f48a:	42b5      	cmp	r5, r6
 800f48c:	d038      	beq.n	800f500 <xProcessReceivedTCPPacket+0x4f0>
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800f48e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
			( ( ( uint32_t )apChr[1] ) << 16) |
 800f492:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 800f496:	0412      	lsls	r2, r2, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800f498:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 800f49c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800f4a0:	431a      	orrs	r2, r3
 800f4a2:	f815 0c02 	ldrb.w	r0, [r5, #-2]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800f4a6:	f815 1c08 	ldrb.w	r1, [r5, #-8]
			( ( ( uint32_t )apChr[1] ) << 16) |
 800f4aa:	f815 3c07 	ldrb.w	r3, [r5, #-7]
 800f4ae:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800f4b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 800f4b4:	f815 1c05 	ldrb.w	r1, [r5, #-5]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	f815 1c06 	ldrb.w	r1, [r5, #-6]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800f4be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f4c2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800f4c6:	9802      	ldr	r0, [sp, #8]
 800f4c8:	f000 fefa 	bl	80102c0 <ulTCPWindowTxSack>
 800f4cc:	4603      	mov	r3, r0
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800f4ce:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d0d9      	beq.n	800f488 <xProcessReceivedTCPPacket+0x478>
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d0d7      	beq.n	800f488 <xProcessReceivedTCPPacket+0x478>
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800f4d8:	f8cd b000 	str.w	fp, [sp]
 800f4dc:	465a      	mov	r2, fp
 800f4de:	4659      	mov	r1, fp
 800f4e0:	f7fe ff36 	bl	800e350 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	f043 0202 	orr.w	r2, r3, #2
 800f4ea:	6022      	str	r2, [r4, #0]
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800f4ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f4ee:	f012 0f02 	tst.w	r2, #2
 800f4f2:	d0c9      	beq.n	800f488 <xProcessReceivedTCPPacket+0x478>
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800f4f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f4f8:	f043 0302 	orr.w	r3, r3, #2
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	e7c3      	b.n	800f488 <xProcessReceivedTCPPacket+0x478>
 800f500:	f10a 0608 	add.w	r6, sl, #8
 800f504:	9b03      	ldr	r3, [sp, #12]
 800f506:	4433      	add	r3, r6
 800f508:	3f0a      	subs	r7, #10
 800f50a:	f028 0807 	bic.w	r8, r8, #7
 800f50e:	eba7 0108 	sub.w	r1, r7, r8
			pucPtr += len;
 800f512:	440b      	add	r3, r1
	while( pucPtr < pucLast )
 800f514:	4599      	cmp	r9, r3
 800f516:	d91f      	bls.n	800f558 <xProcessReceivedTCPPacket+0x548>
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	b302      	cbz	r2, 800f55e <xProcessReceivedTCPPacket+0x54e>
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800f51c:	2a01      	cmp	r2, #1
 800f51e:	f43f af74 	beq.w	800f40a <xProcessReceivedTCPPacket+0x3fa>
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800f522:	2a03      	cmp	r2, #3
 800f524:	f43f af73 	beq.w	800f40e <xProcessReceivedTCPPacket+0x3fe>
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800f528:	2a02      	cmp	r2, #2
 800f52a:	d084      	beq.n	800f436 <xProcessReceivedTCPPacket+0x426>
			int len = ( int )pucPtr[ 1 ];
 800f52c:	785f      	ldrb	r7, [r3, #1]
 800f52e:	4639      	mov	r1, r7
			if( len == 0 )
 800f530:	b1c7      	cbz	r7, 800f564 <xProcessReceivedTCPPacket+0x554>
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800f532:	2a05      	cmp	r2, #5
 800f534:	d1ed      	bne.n	800f512 <xProcessReceivedTCPPacket+0x502>
					len -= 2;
 800f536:	1eb9      	subs	r1, r7, #2
					pucPtr += 2;
 800f538:	1c9a      	adds	r2, r3, #2
 800f53a:	9203      	str	r2, [sp, #12]
					while( len >= 8 )
 800f53c:	2907      	cmp	r1, #7
 800f53e:	dd09      	ble.n	800f554 <xProcessReceivedTCPPacket+0x544>
 800f540:	f103 050a 	add.w	r5, r3, #10
 800f544:	f1a7 080a 	sub.w	r8, r7, #10
 800f548:	f028 0a07 	bic.w	sl, r8, #7
 800f54c:	f10a 0612 	add.w	r6, sl, #18
 800f550:	441e      	add	r6, r3
 800f552:	e79c      	b.n	800f48e <xProcessReceivedTCPPacket+0x47e>
					pucPtr += 2;
 800f554:	9b03      	ldr	r3, [sp, #12]
 800f556:	e7dc      	b.n	800f512 <xProcessReceivedTCPPacket+0x502>
 800f558:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f55c:	e5de      	b.n	800f11c <xProcessReceivedTCPPacket+0x10c>
 800f55e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f562:	e5db      	b.n	800f11c <xProcessReceivedTCPPacket+0x10c>
 800f564:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f568:	e5d8      	b.n	800f11c <xProcessReceivedTCPPacket+0x10c>
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f56a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f56e:	f043 0301 	orr.w	r3, r3, #1
 800f572:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f576:	e622      	b.n	800f1be <xProcessReceivedTCPPacket+0x1ae>
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800f578:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f57a:	e642      	b.n	800f202 <xProcessReceivedTCPPacket+0x1f2>
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800f57c:	2200      	movs	r2, #0
 800f57e:	4611      	mov	r1, r2
 800f580:	4620      	mov	r0, r4
 800f582:	f7fe fa33 	bl	800d9ec <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800f58c:	e24d      	b.n	800fa2a <xProcessReceivedTCPPacket+0xa1a>
 800f58e:	bf00      	nop
 800f590:	200006a0 	.word	0x200006a0
 800f594:	20000010 	.word	0x20000010
 800f598:	0801a450 	.word	0x0801a450
 800f59c:	0801b914 	.word	0x0801b914
 800f5a0:	0801a454 	.word	0x0801a454
		pxTCPWindow->ucOptionLength = 0u;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800f5aa:	9b05      	ldr	r3, [sp, #20]
 800f5ac:	699d      	ldr	r5, [r3, #24]
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800f5ae:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f5b2:	2b04      	cmp	r3, #4
 800f5b4:	d94b      	bls.n	800f64e <xProcessReceivedTCPPacket+0x63e>
 800f5b6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f5ba:	f013 0f01 	tst.w	r3, #1
 800f5be:	f000 8087 	beq.w	800f6d0 <xProcessReceivedTCPPacket+0x6c0>
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800f5c2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f5c6:	f36f 0300 	bfc	r3, #0, #1
 800f5ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800f5d4:	f04f 0904 	mov.w	r9, #4
 800f5d8:	f885 9037 	strb.w	r9, [r5, #55]	; 0x37
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800f5dc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800f5e0:	0a1b      	lsrs	r3, r3, #8
 800f5e2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800f5e6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800f5ea:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f5ee:	2360      	movs	r3, #96	; 0x60
 800f5f0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800f5f4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d02b      	beq.n	800f654 <xProcessReceivedTCPPacket+0x644>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800f5fc:	f01b 0f01 	tst.w	fp, #1
 800f600:	d014      	beq.n	800f62c <xProcessReceivedTCPPacket+0x61c>
 800f602:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 800f606:	2b00      	cmp	r3, #0
 800f608:	db10      	blt.n	800f62c <xProcessReceivedTCPPacket+0x61c>
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800f60a:	f8c4 a0f0 	str.w	sl, [r4, #240]	; 0xf0
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800f60e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f616:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800f61a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f61e:	d105      	bne.n	800f62c <xProcessReceivedTCPPacket+0x61c>
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800f620:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800f624:	f043 0302 	orr.w	r3, r3, #2
 800f628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		switch (pxSocket->u.xTCP.ucTCPState)
 800f62c:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f630:	1e9a      	subs	r2, r3, #2
 800f632:	2a08      	cmp	r2, #8
 800f634:	f200 817f 	bhi.w	800f936 <xProcessReceivedTCPPacket+0x926>
 800f638:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f63c:	004d0230 	.word	0x004d0230
 800f640:	00d80230 	.word	0x00d80230
 800f644:	01770177 	.word	0x01770177
 800f648:	017d017d 	.word	0x017d017d
 800f64c:	0177      	.short	0x0177
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800f64e:	f04f 0900 	mov.w	r9, #0
 800f652:	e7cf      	b.n	800f5f4 <xProcessReceivedTCPPacket+0x5e4>
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800f654:	f00b 021f 	and.w	r2, fp, #31
 800f658:	2a02      	cmp	r2, #2
 800f65a:	d034      	beq.n	800f6c6 <xProcessReceivedTCPPacket+0x6b6>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800f65c:	f01b 0f01 	tst.w	fp, #1
 800f660:	f040 8215 	bne.w	800fa8e <xProcessReceivedTCPPacket+0xa7e>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800f664:	9a05      	ldr	r2, [sp, #20]
 800f666:	6996      	ldr	r6, [r2, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800f668:	f896 202f 	ldrb.w	r2, [r6, #47]	; 0x2f
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800f66c:	2110      	movs	r1, #16
	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800f66e:	f002 0217 	and.w	r2, r2, #23
 800f672:	428a      	cmp	r2, r1
 800f674:	d17e      	bne.n	800f774 <xProcessReceivedTCPPacket+0x764>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800f676:	f8d6 2026 	ldr.w	r2, [r6, #38]	; 0x26
 800f67a:	0e11      	lsrs	r1, r2, #24
 800f67c:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 800f680:	0210      	lsls	r0, r2, #8
 800f682:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800f686:	4301      	orrs	r1, r0
 800f688:	0a12      	lsrs	r2, r2, #8
 800f68a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800f68e:	ea41 0502 	orr.w	r5, r1, r2
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800f692:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800f694:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800f698:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800f69a:	f8a4 2194 	strh.w	r2, [r4, #404]	; 0x194
		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d07a      	beq.n	800f798 <xProcessReceivedTCPPacket+0x788>
		else if( ulReceiveLength == 0u )
 800f6a2:	9b02      	ldr	r3, [sp, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f040 81d4 	bne.w	800fa52 <xProcessReceivedTCPPacket+0xa42>
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f6aa:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800f6ae:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800f6b8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f6bc:	2b02      	cmp	r3, #2
 800f6be:	f000 81cd 	beq.w	800fa5c <xProcessReceivedTCPPacket+0xa4c>
BaseType_t xSendLength = 0;
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	e1d4      	b.n	800fa70 <xProcessReceivedTCPPacket+0xa60>
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800f6c6:	2103      	movs	r1, #3
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7ff f851 	bl	800e770 <vTCPStateChange>
 800f6ce:	e795      	b.n	800f5fc <xProcessReceivedTCPPacket+0x5ec>
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800f6d0:	f04f 0900 	mov.w	r9, #0
 800f6d4:	e792      	b.n	800f5fc <xProcessReceivedTCPPacket+0x5ec>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800f6d6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f886 2036 	strb.w	r2, [r6, #54]	; 0x36
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	f886 2037 	strb.w	r2, [r6, #55]	; 0x37
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800f6e6:	0a1a      	lsrs	r2, r3, #8
 800f6e8:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800f6ec:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800f6f0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800f6f4:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800f6f8:	fb02 f203 	mul.w	r2, r2, r3
		while( uxWinSize > 0xfffful )
 800f6fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f700:	d336      	bcc.n	800f770 <xProcessReceivedTCPPacket+0x760>
 800f702:	2300      	movs	r3, #0
			uxWinSize >>= 1;
 800f704:	0852      	lsrs	r2, r2, #1
			ucFactor++;
 800f706:	3301      	adds	r3, #1
 800f708:	b2db      	uxtb	r3, r3
		while( uxWinSize > 0xfffful )
 800f70a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f70e:	d2f9      	bcs.n	800f704 <xProcessReceivedTCPPacket+0x6f4>
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800f710:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800f714:	2301      	movs	r3, #1
 800f716:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800f71a:	2203      	movs	r2, #3
 800f71c:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800f720:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800f724:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
 800f728:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800f72c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800f730:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800f734:	2104      	movs	r1, #4
 800f736:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800f73a:	2302      	movs	r3, #2
 800f73c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800f740:	2312      	movs	r3, #18
 800f742:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f746:	2380      	movs	r3, #128	; 0x80
 800f748:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800f74c:	4620      	mov	r0, r4
 800f74e:	f7ff f80f 	bl	800e770 <vTCPStateChange>
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800f752:	f108 0301 	add.w	r3, r8, #1
 800f756:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800f75a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800f75e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800f762:	3301      	adds	r3, #1
 800f764:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800f768:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800f76c:	2534      	movs	r5, #52	; 0x34
 800f76e:	e0e5      	b.n	800f93c <xProcessReceivedTCPPacket+0x92c>
		ucFactor = 0u;
 800f770:	2300      	movs	r3, #0
 800f772:	e7cd      	b.n	800f710 <xProcessReceivedTCPPacket+0x700>
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f774:	2108      	movs	r1, #8
 800f776:	4620      	mov	r0, r4
 800f778:	f7fe fffa 	bl	800e770 <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800f77c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800f780:	f043 0304 	orr.w	r3, r3, #4
 800f784:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800f788:	f109 0528 	add.w	r5, r9, #40	; 0x28
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f78c:	f109 0314 	add.w	r3, r9, #20
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 800f796:	e0cf      	b.n	800f938 <xProcessReceivedTCPPacket+0x928>
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800f798:	2310      	movs	r3, #16
 800f79a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800f79e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800f7a2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	9803      	ldr	r0, [sp, #12]
 800f7aa:	f000 fb26 	bl	800fdfa <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800f7ae:	3501      	adds	r5, #1
 800f7b0:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800f7b4:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800f7b8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800f7bc:	3301      	adds	r3, #1
 800f7be:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			pxTCPWindow->ulNextTxSequenceNumber++;
 800f7c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800f7cc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800f7d6:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f7da:	2b02      	cmp	r3, #2
 800f7dc:	f000 813e 	beq.w	800fa5c <xProcessReceivedTCPPacket+0xa4c>
 800f7e0:	9b02      	ldr	r3, [sp, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 813a 	bne.w	800fa5c <xProcessReceivedTCPPacket+0xa4c>
BaseType_t xSendLength = 0;
 800f7e8:	2500      	movs	r5, #0
 800f7ea:	e141      	b.n	800fa70 <xProcessReceivedTCPPacket+0xa60>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800f7ec:	9b05      	ldr	r3, [sp, #20]
 800f7ee:	699e      	ldr	r6, [r3, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800f7f0:	f896 502f 	ldrb.w	r5, [r6, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800f7f4:	f8d6 7026 	ldr.w	r7, [r6, #38]	; 0x26
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800f7f8:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800f7fa:	0a13      	lsrs	r3, r2, #8
 800f7fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f800:	b29b      	uxth	r3, r3
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800f802:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
 800f806:	4093      	lsls	r3, r2
	pxSocket->u.xTCP.ulWindowSize =
 800f808:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800f80c:	f015 0f10 	tst.w	r5, #16
 800f810:	d11f      	bne.n	800f852 <xProcessReceivedTCPPacket+0x842>
	if( pxSocket->u.xTCP.txStream != NULL )
 800f812:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f814:	b113      	cbz	r3, 800f81c <xProcessReceivedTCPPacket+0x80c>
		prvTCPAddTxData( pxSocket );
 800f816:	4620      	mov	r0, r4
 800f818:	f7fe fdfc 	bl	800e414 <prvTCPAddTxData>
	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800f81c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800f820:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800f824:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f828:	f013 0f20 	tst.w	r3, #32
 800f82c:	d102      	bne.n	800f834 <xProcessReceivedTCPPacket+0x824>
 800f82e:	f015 0f01 	tst.w	r5, #1
 800f832:	d056      	beq.n	800f8e2 <xProcessReceivedTCPPacket+0x8d2>
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800f834:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f838:	d036      	beq.n	800f8a8 <xProcessReceivedTCPPacket+0x898>
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800f83a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f83e:	f043 0320 	orr.w	r3, r3, #32
 800f842:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800f846:	9905      	ldr	r1, [sp, #20]
 800f848:	4620      	mov	r0, r4
 800f84a:	f7ff fb71 	bl	800ef30 <prvTCPHandleFin>
 800f84e:	4605      	mov	r5, r0
 800f850:	e072      	b.n	800f938 <xProcessReceivedTCPPacket+0x928>
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800f852:	f8d6 302a 	ldr.w	r3, [r6, #42]	; 0x2a
 800f856:	0e19      	lsrs	r1, r3, #24
 800f858:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800f85c:	021a      	lsls	r2, r3, #8
 800f85e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800f862:	4311      	orrs	r1, r2
 800f864:	0a1b      	lsrs	r3, r3, #8
 800f866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f86a:	4319      	orrs	r1, r3
 800f86c:	9803      	ldr	r0, [sp, #12]
 800f86e:	f000 fd1b 	bl	80102a8 <ulTCPWindowTxAck>
 800f872:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800f874:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f876:	2800      	cmp	r0, #0
 800f878:	d0d0      	beq.n	800f81c <xProcessReceivedTCPPacket+0x80c>
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d0cb      	beq.n	800f816 <xProcessReceivedTCPPacket+0x806>
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800f87e:	2100      	movs	r1, #0
 800f880:	9100      	str	r1, [sp, #0]
 800f882:	460a      	mov	r2, r1
 800f884:	f7fe fd64 	bl	800e350 <uxStreamBufferGet>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0c2      	beq.n	800f812 <xProcessReceivedTCPPacket+0x802>
				pxSocket->xEventBits |= eSOCKET_SEND;
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	f043 0202 	orr.w	r2, r3, #2
 800f892:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800f894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f896:	f012 0f02 	tst.w	r2, #2
 800f89a:	d0ba      	beq.n	800f812 <xProcessReceivedTCPPacket+0x802>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800f89c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f8a0:	f043 0302 	orr.w	r3, r3, #2
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	e7b4      	b.n	800f812 <xProcessReceivedTCPPacket+0x802>
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800f8a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	f000 fa71 	bl	800fd94 <xTCPWindowRxEmpty>
 800f8b2:	4605      	mov	r5, r0
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800f8b4:	4640      	mov	r0, r8
 800f8b6:	f000 fc39 	bl	801012c <xTCPWindowTxDone>
			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800f8ba:	b195      	cbz	r5, 800f8e2 <xProcessReceivedTCPPacket+0x8d2>
 800f8bc:	b188      	cbz	r0, 800f8e2 <xProcessReceivedTCPPacket+0x8d2>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800f8be:	0e3b      	lsrs	r3, r7, #24
 800f8c0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800f8c4:	023a      	lsls	r2, r7, #8
 800f8c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800f8ca:	431a      	orrs	r2, r3
 800f8cc:	0a3b      	lsrs	r3, r7, #8
 800f8ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f8d2:	4313      	orrs	r3, r2
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800f8d4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 800f8d8:	1a9b      	subs	r3, r3, r2
 800f8da:	9a02      	ldr	r2, [sp, #8]
 800f8dc:	4413      	add	r3, r2
		if( xMayClose != pdFALSE )
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	ddab      	ble.n	800f83a <xProcessReceivedTCPPacket+0x82a>
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800f8e2:	2310      	movs	r3, #16
 800f8e4:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		if( ulReceiveLength != 0u )
 800f8e8:	9b02      	ldr	r3, [sp, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f000 80df 	beq.w	800faae <xProcessReceivedTCPPacket+0xa9e>
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800f8f0:	f109 0528 	add.w	r5, r9, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f8f4:	f109 0314 	add.w	r3, r9, #20
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f8fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800f902:	f013 0f40 	tst.w	r3, #64	; 0x40
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800f906:	bf1c      	itt	ne
 800f908:	f8d4 3100 	ldrne.w	r3, [r4, #256]	; 0x100
 800f90c:	f8c4 30fc 	strne.w	r3, [r4, #252]	; 0xfc
		if( uxOptionsLength == 0u )
 800f910:	f1b9 0f00 	cmp.w	r9, #0
 800f914:	d110      	bne.n	800f938 <xProcessReceivedTCPPacket+0x928>
 800f916:	462e      	mov	r6, r5
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800f918:	2200      	movs	r2, #0
 800f91a:	a905      	add	r1, sp, #20
 800f91c:	4620      	mov	r0, r4
 800f91e:	f7ff f807 	bl	800e930 <prvTCPPrepareSend>
			if( lSendResult > 0 )
 800f922:	1e05      	subs	r5, r0, #0
 800f924:	dc0a      	bgt.n	800f93c <xProcessReceivedTCPPacket+0x92c>
 800f926:	4635      	mov	r5, r6
 800f928:	e006      	b.n	800f938 <xProcessReceivedTCPPacket+0x928>
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800f92a:	9905      	ldr	r1, [sp, #20]
 800f92c:	4620      	mov	r0, r4
 800f92e:	f7ff faff 	bl	800ef30 <prvTCPHandleFin>
 800f932:	4605      	mov	r5, r0
 800f934:	e000      	b.n	800f938 <xProcessReceivedTCPPacket+0x928>
BaseType_t xSendLength = 0;
 800f936:	2500      	movs	r5, #0
	if( xSendLength > 0 )
 800f938:	2d00      	cmp	r5, #0
 800f93a:	dd41      	ble.n	800f9c0 <xProcessReceivedTCPPacket+0x9b0>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800f93c:	9e05      	ldr	r6, [sp, #20]
 800f93e:	f8d6 e018 	ldr.w	lr, [r6, #24]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800f942:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800f946:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800f94a:	4439      	add	r1, r7
 800f94c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800f950:	1ac9      	subs	r1, r1, r3
 800f952:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	if( pxSocket->u.xTCP.rxStream != NULL )
 800f956:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f958:	2800      	cmp	r0, #0
 800f95a:	d03d      	beq.n	800f9d8 <xProcessReceivedTCPPacket+0x9c8>
size_t uxFront = pxBuffer->uxFront;
 800f95c:	68c3      	ldr	r3, [r0, #12]
size_t uxTail = pxBuffer->uxTail;
 800f95e:	6802      	ldr	r2, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800f960:	6900      	ldr	r0, [r0, #16]
 800f962:	4402      	add	r2, r0
 800f964:	3a01      	subs	r2, #1
 800f966:	1ad3      	subs	r3, r2, r3
	if( uxCount >= pxBuffer->LENGTH )
 800f968:	4298      	cmp	r0, r3
 800f96a:	d800      	bhi.n	800f96e <xProcessReceivedTCPPacket+0x95e>
		uxCount -= pxBuffer->LENGTH;
 800f96c:	1a1b      	subs	r3, r3, r0
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800f96e:	428b      	cmp	r3, r1
 800f970:	bf28      	it	cs
 800f972:	460b      	movcs	r3, r1
	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800f974:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	b16b      	cbz	r3, 800f998 <xProcessReceivedTCPPacket+0x988>
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800f97c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f97e:	1bdf      	subs	r7, r3, r7
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800f980:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800f984:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 800f988:	db06      	blt.n	800f998 <xProcessReceivedTCPPacket+0x988>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800f98a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800f98e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f992:	d101      	bne.n	800f998 <xProcessReceivedTCPPacket+0x988>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800f994:	2d28      	cmp	r5, #40	; 0x28
 800f996:	d021      	beq.n	800f9dc <xProcessReceivedTCPPacket+0x9cc>
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f998:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f99a:	b128      	cbz	r0, 800f9a8 <xProcessReceivedTCPPacket+0x998>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f99c:	4286      	cmp	r6, r0
 800f99e:	d001      	beq.n	800f9a4 <xProcessReceivedTCPPacket+0x994>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f9a0:	f000 fdc8 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
			pxSocket->u.xTCP.pxAckMessage = NULL;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	67e3      	str	r3, [r4, #124]	; 0x7c
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	9905      	ldr	r1, [sp, #20]
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f7fe fd5a 	bl	800e468 <prvTCPReturnPacket>
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800f9b4:	2d00      	cmp	r5, #0
 800f9b6:	dd03      	ble.n	800f9c0 <xProcessReceivedTCPPacket+0x9b0>
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800f9b8:	a905      	add	r1, sp, #20
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f7ff f930 	bl	800ec20 <prvTCPSendRepeated>
		if( pxNetworkBuffer != NULL )
 800f9c0:	9805      	ldr	r0, [sp, #20]
 800f9c2:	b118      	cbz	r0, 800f9cc <xProcessReceivedTCPPacket+0x9bc>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f9c4:	f000 fdb6 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	9305      	str	r3, [sp, #20]
		prvTCPNextTimeout ( pxSocket );
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f7fe fe75 	bl	800e6bc <prvTCPNextTimeout>
		xResult = pdPASS;
 800f9d2:	2001      	movs	r0, #1
	return xResult;
 800f9d4:	f7ff bb62 	b.w	800f09c <xProcessReceivedTCPPacket+0x8c>
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800f9d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f9da:	e7c8      	b.n	800f96e <xProcessReceivedTCPPacket+0x95e>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800f9dc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800f9e0:	2b05      	cmp	r3, #5
 800f9e2:	d1d9      	bne.n	800f998 <xProcessReceivedTCPPacket+0x988>
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800f9e4:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
 800f9e8:	2b10      	cmp	r3, #16
 800f9ea:	d1d5      	bne.n	800f998 <xProcessReceivedTCPPacket+0x988>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f9ec:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f9ee:	4286      	cmp	r6, r0
 800f9f0:	d004      	beq.n	800f9fc <xProcessReceivedTCPPacket+0x9ec>
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800f9f2:	b108      	cbz	r0, 800f9f8 <xProcessReceivedTCPPacket+0x9e8>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f9f4:	f000 fd9e 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800f9f8:	9b05      	ldr	r3, [sp, #20]
 800f9fa:	67e3      	str	r3, [r4, #124]	; 0x7c
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800f9fc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800fa00:	9a02      	ldr	r2, [sp, #8]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d302      	bcc.n	800fa0c <xProcessReceivedTCPPacket+0x9fc>
 800fa06:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 800fa0a:	da05      	bge.n	800fa18 <xProcessReceivedTCPPacket+0xa08>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
			*ppxNetworkBuffer = NULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	9305      	str	r3, [sp, #20]
 800fa16:	e7d3      	b.n	800f9c0 <xProcessReceivedTCPPacket+0x9b0>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800fa18:	2314      	movs	r3, #20
 800fa1a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800fa1e:	e7f8      	b.n	800fa12 <xProcessReceivedTCPPacket+0xa02>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800fa20:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f47f ada9 	bne.w	800f57c <xProcessReceivedTCPPacket+0x56c>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800fa2a:	9b05      	ldr	r3, [sp, #20]
 800fa2c:	699d      	ldr	r5, [r3, #24]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800fa2e:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
 800fa32:	46b9      	mov	r9, r7
		if( uxOptionsLength != 0u )
 800fa34:	2f00      	cmp	r7, #0
 800fa36:	f43f adba 	beq.w	800f5ae <xProcessReceivedTCPPacket+0x59e>
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800fa3a:	463a      	mov	r2, r7
 800fa3c:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 800fa40:	f105 0036 	add.w	r0, r5, #54	; 0x36
 800fa44:	f007 fe9d 	bl	8017782 <memcpy>
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fa48:	3714      	adds	r7, #20
 800fa4a:	00bf      	lsls	r7, r7, #2
 800fa4c:	f885 702e 	strb.w	r7, [r5, #46]	; 0x2e
 800fa50:	e5d0      	b.n	800f5f4 <xProcessReceivedTCPPacket+0x5e4>
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800fa52:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800fa56:	3301      	adds	r3, #1
 800fa58:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800fa62:	f109 0528 	add.w	r5, r9, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fa66:	f109 0314 	add.w	r3, r9, #20
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800fa70:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800fa74:	f013 0f10 	tst.w	r3, #16
 800fa78:	d104      	bne.n	800fa84 <xProcessReceivedTCPPacket+0xa74>
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800fa80:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		vTCPStateChange( pxSocket, eESTABLISHED );
 800fa84:	2105      	movs	r1, #5
 800fa86:	4620      	mov	r0, r4
 800fa88:	f7fe fe72 	bl	800e770 <vTCPStateChange>
 800fa8c:	e754      	b.n	800f938 <xProcessReceivedTCPPacket+0x928>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800fa8e:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f6bf adb9 	bge.w	800f60a <xProcessReceivedTCPPacket+0x5fa>
		switch (pxSocket->u.xTCP.ucTCPState)
 800fa98:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800fa9c:	9a05      	ldr	r2, [sp, #20]
 800fa9e:	6996      	ldr	r6, [r2, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800faa0:	f896 202f 	ldrb.w	r2, [r6, #47]	; 0x2f
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	bf14      	ite	ne
 800faa8:	2110      	movne	r1, #16
 800faaa:	2112      	moveq	r1, #18
 800faac:	e5df      	b.n	800f66e <xProcessReceivedTCPPacket+0x65e>
		if( uxOptionsLength == 0u )
 800faae:	f1b9 0f00 	cmp.w	r9, #0
 800fab2:	d185      	bne.n	800f9c0 <xProcessReceivedTCPPacket+0x9b0>
 800fab4:	2600      	movs	r6, #0
 800fab6:	e72f      	b.n	800f918 <xProcessReceivedTCPPacket+0x908>

0800fab8 <FreeRTOS_GetTCPStateName>:
	{
		if( ulState >= ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) )
		{
			ulState = ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) - 1u;
		}
		return pcStateNames[ ulState ];
 800fab8:	280c      	cmp	r0, #12
 800faba:	bf28      	it	cs
 800fabc:	200c      	movcs	r0, #12
	}
 800fabe:	4b02      	ldr	r3, [pc, #8]	; (800fac8 <FreeRTOS_GetTCPStateName+0x10>)
 800fac0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	0801a344 	.word	0x0801a344

0800facc <xTCPCheckNewClient>:
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800facc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800face:	0a19      	lsrs	r1, r3, #8
 800fad0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fad4:	4a10      	ldr	r2, [pc, #64]	; (800fb18 <xTCPCheckNewClient+0x4c>)
 800fad6:	68d3      	ldr	r3, [r2, #12]
 800fad8:	3208      	adds	r2, #8
 800fada:	4293      	cmp	r3, r2
 800fadc:	d019      	beq.n	800fb12 <xTCPCheckNewClient+0x46>
{
 800fade:	b430      	push	{r4, r5}
 800fae0:	b289      	uxth	r1, r1
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fae2:	4614      	mov	r4, r2
 800fae4:	e002      	b.n	800faec <xTCPCheckNewClient+0x20>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800fae6:	685b      	ldr	r3, [r3, #4]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fae8:	42a3      	cmp	r3, r4
 800faea:	d00f      	beq.n	800fb0c <xTCPCheckNewClient+0x40>
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	4291      	cmp	r1, r2
 800faf0:	d1f9      	bne.n	800fae6 <xTCPCheckNewClient+0x1a>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800faf2:	68da      	ldr	r2, [r3, #12]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800faf4:	f892 5027 	ldrb.w	r5, [r2, #39]	; 0x27
 800faf8:	2d06      	cmp	r5, #6
 800fafa:	d1f4      	bne.n	800fae6 <xTCPCheckNewClient+0x1a>
 800fafc:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
 800fb00:	f015 0f02 	tst.w	r5, #2
 800fb04:	d0ef      	beq.n	800fae6 <xTCPCheckNewClient+0x1a>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800fb06:	6542      	str	r2, [r0, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800fb08:	2001      	movs	r0, #1
				break;
 800fb0a:	e000      	b.n	800fb0e <xTCPCheckNewClient+0x42>
BaseType_t xResult = pdFALSE;
 800fb0c:	2000      	movs	r0, #0
			}
		}
	}
	return xResult;
}
 800fb0e:	bc30      	pop	{r4, r5}
 800fb10:	4770      	bx	lr
BaseType_t xResult = pdFALSE;
 800fb12:	2000      	movs	r0, #0
	return xResult;
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	20002990 	.word	0x20002990

0800fb1c <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800fb1c:	b410      	push	{r4}
	TCPSegment_t *pxSegment, *pxReturn = NULL;

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800fb1e:	f100 04ac 	add.w	r4, r0, #172	; 0xac

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800fb22:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800fb26:	429c      	cmp	r4, r3
 800fb28:	d00f      	beq.n	800fb4a <xTCPWindowRxFind+0x2e>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800fb2a:	68d8      	ldr	r0, [r3, #12]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800fb2c:	6802      	ldr	r2, [r0, #0]
 800fb2e:	4291      	cmp	r1, r2
 800fb30:	d008      	beq.n	800fb44 <xTCPWindowRxFind+0x28>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800fb32:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800fb34:	429c      	cmp	r4, r3
 800fb36:	d004      	beq.n	800fb42 <xTCPWindowRxFind+0x26>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800fb38:	68d8      	ldr	r0, [r3, #12]
			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800fb3a:	6802      	ldr	r2, [r0, #0]
 800fb3c:	428a      	cmp	r2, r1
 800fb3e:	d1f8      	bne.n	800fb32 <xTCPWindowRxFind+0x16>
 800fb40:	e000      	b.n	800fb44 <xTCPWindowRxFind+0x28>
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800fb42:	2000      	movs	r0, #0
				break;
			}
		}

		return pxReturn;
	}
 800fb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb48:	4770      	bx	lr
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800fb4a:	2000      	movs	r0, #0
		return pxReturn;
 800fb4c:	e7fa      	b.n	800fb44 <xTCPWindowRxFind+0x28>

0800fb4e <xTCPWindowPeekHead>:
	{
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800fb4e:	6803      	ldr	r3, [r0, #0]
 800fb50:	b113      	cbz	r3, 800fb58 <xTCPWindowPeekHead+0xa>
			pxReturn = NULL;
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800fb52:	68c3      	ldr	r3, [r0, #12]
 800fb54:	68d8      	ldr	r0, [r3, #12]
 800fb56:	4770      	bx	lr
			pxReturn = NULL;
 800fb58:	2000      	movs	r0, #0
		}

		return pxReturn;
	}
 800fb5a:	4770      	bx	lr

0800fb5c <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800fb5c:	b538      	push	{r3, r4, r5, lr}
 800fb5e:	4605      	mov	r5, r0
 800fb60:	460c      	mov	r4, r1
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800fb62:	3054      	adds	r0, #84	; 0x54
 800fb64:	f7ff fff3 	bl	800fb4e <xTCPWindowPeekHead>

		if( pxSegment == NULL )
 800fb68:	b1a0      	cbz	r0, 800fb94 <prvTCPWindowTxHasSpace+0x38>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800fb6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fb6c:	6a2a      	ldr	r2, [r5, #32]
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d312      	bcc.n	800fb98 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800fb72:	1a9b      	subs	r3, r3, r2

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800fb74:	6882      	ldr	r2, [r0, #8]
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800fb76:	42a3      	cmp	r3, r4
 800fb78:	bf94      	ite	ls
 800fb7a:	1ae0      	subls	r0, r4, r3
 800fb7c:	1b20      	subhi	r0, r4, r4
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800fb7e:	4290      	cmp	r0, r2
 800fb80:	bf34      	ite	cc
 800fb82:	2000      	movcc	r0, #0
 800fb84:	2001      	movcs	r0, #1

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800fb86:	b163      	cbz	r3, 800fba2 <prvTCPWindowTxHasSpace+0x46>
 800fb88:	4413      	add	r3, r2
 800fb8a:	68aa      	ldr	r2, [r5, #8]
			{
				xHasSpace = pdFALSE;
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	bf38      	it	cc
 800fb90:	2000      	movcc	r0, #0
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
			xHasSpace = pdFALSE;
 800fb94:	2000      	movs	r0, #0
			}
		}

		return xHasSpace;
 800fb96:	bd38      	pop	{r3, r4, r5, pc}
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800fb98:	6880      	ldr	r0, [r0, #8]
 800fb9a:	4284      	cmp	r4, r0
 800fb9c:	bf34      	ite	cc
 800fb9e:	2000      	movcc	r0, #0
 800fba0:	2001      	movcs	r0, #1
	}
 800fba2:	bd38      	pop	{r3, r4, r5, pc}

0800fba4 <xTCPWindowGetHead>:
	{
 800fba4:	b510      	push	{r4, lr}
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800fba6:	6803      	ldr	r3, [r0, #0]
 800fba8:	b12b      	cbz	r3, 800fbb6 <xTCPWindowGetHead+0x12>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800fbaa:	68c0      	ldr	r0, [r0, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800fbac:	68c4      	ldr	r4, [r0, #12]
			uxListRemove( pxItem );
 800fbae:	f003 fac7 	bl	8013140 <uxListRemove>
	}
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	bd10      	pop	{r4, pc}
			pxSegment = NULL;
 800fbb6:	2400      	movs	r4, #0
		return pxSegment;
 800fbb8:	e7fb      	b.n	800fbb2 <xTCPWindowGetHead+0xe>

0800fbba <vListInsertGeneric>:
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800fbba:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800fbbc:	6893      	ldr	r3, [r2, #8]
 800fbbe:	608b      	str	r3, [r1, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800fbc0:	6893      	ldr	r3, [r2, #8]
 800fbc2:	6059      	str	r1, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800fbc4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fbc6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fbc8:	6803      	ldr	r3, [r0, #0]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6003      	str	r3, [r0, #0]
 800fbce:	4770      	bx	lr

0800fbd0 <vTCPWindowFree>:
	{
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	4604      	mov	r4, r0
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800fbd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fbd6:	b113      	cbz	r3, 800fbde <vTCPWindowFree+0xe>
			uxListRemove( &( pxSegment->xQueueItem ) );
 800fbd8:	3018      	adds	r0, #24
 800fbda:	f003 fab1 	bl	8013140 <uxListRemove>
		pxSegment->ulSequenceNumber = 0u;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	6023      	str	r3, [r4, #0]
		pxSegment->lDataLength = 0l;
 800fbe2:	60a3      	str	r3, [r4, #8]
		pxSegment->u.ulFlags = 0u;
 800fbe4:	6163      	str	r3, [r4, #20]
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800fbe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fbe8:	b11b      	cbz	r3, 800fbf2 <vTCPWindowFree+0x22>
			uxListRemove( &( pxSegment->xListItem ) );
 800fbea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800fbee:	f003 faa7 	bl	8013140 <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fbf2:	4804      	ldr	r0, [pc, #16]	; (800fc04 <vTCPWindowFree+0x34>)
 800fbf4:	f100 0208 	add.w	r2, r0, #8
 800fbf8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800fbfc:	f7ff ffdd 	bl	800fbba <vListInsertGeneric>
 800fc00:	bd10      	pop	{r4, pc}
 800fc02:	bf00      	nop
 800fc04:	200006a4 	.word	0x200006a4

0800fc08 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	b083      	sub	sp, #12
 800fc0e:	9201      	str	r2, [sp, #4]
	uint32_t ulBytesConfirmed = 0u;
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800fc10:	f100 0798 	add.w	r7, r0, #152	; 0x98

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800fc14:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
		for(
 800fc18:	42a7      	cmp	r7, r4
 800fc1a:	d03c      	beq.n	800fc96 <prvTCPWindowTxCheckAck+0x8e>
 800fc1c:	4682      	mov	sl, r0
 800fc1e:	460d      	mov	r5, r1
 800fc20:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800fc24:	eba8 0301 	sub.w	r3, r8, r1
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	db3a      	blt.n	800fca2 <prvTCPWindowTxCheckAck+0x9a>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	9300      	str	r3, [sp, #0]
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800fc30:	ea6f 0b02 	mvn.w	fp, r2
 800fc34:	e043      	b.n	800fcbe <prvTCPWindowTxCheckAck+0xb6>
				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800fc36:	9b01      	ldr	r3, [sp, #4]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d159      	bne.n	800fcf0 <prvTCPWindowTxCheckAck+0xe8>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800fc3c:	f004 fc68 	bl	8014510 <xTaskGetTickCount>
 800fc40:	6933      	ldr	r3, [r6, #16]
 800fc42:	1ac0      	subs	r0, r0, r3
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );

					if( pxWindow->lSRTT >= mS )
 800fc44:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800fc48:	4298      	cmp	r0, r3
 800fc4a:	dc0f      	bgt.n	800fc6c <prvTCPWindowTxCheckAck+0x64>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800fc4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800fc50:	181b      	adds	r3, r3, r0
 800fc52:	bf48      	it	mi
 800fc54:	3307      	addmi	r3, #7
 800fc56:	10db      	asrs	r3, r3, #3
 800fc58:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800fc5c:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800fc60:	2b31      	cmp	r3, #49	; 0x31
 800fc62:	dc45      	bgt.n	800fcf0 <prvTCPWindowTxCheckAck+0xe8>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800fc64:	2332      	movs	r3, #50	; 0x32
 800fc66:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 800fc6a:	e041      	b.n	800fcf0 <prvTCPWindowTxCheckAck+0xe8>
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800fc6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fc70:	4403      	add	r3, r0
 800fc72:	005b      	lsls	r3, r3, #1
 800fc74:	bf48      	it	mi
 800fc76:	3307      	addmi	r3, #7
 800fc78:	10db      	asrs	r3, r3, #3
 800fc7a:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 800fc7e:	e7ed      	b.n	800fc5c <prvTCPWindowTxCheckAck+0x54>
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800fc80:	eb09 0305 	add.w	r3, r9, r5
 800fc84:	f8ca 3020 	str.w	r3, [sl, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 800fc88:	9b00      	ldr	r3, [sp, #0]
 800fc8a:	444b      	add	r3, r9
 800fc8c:	9300      	str	r3, [sp, #0]

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 800fc8e:	4630      	mov	r0, r6
 800fc90:	f7ff ff9e 	bl	800fbd0 <vTCPWindowFree>
 800fc94:	e00c      	b.n	800fcb0 <prvTCPWindowTxCheckAck+0xa8>
	uint32_t ulBytesConfirmed = 0u;
 800fc96:	2300      	movs	r3, #0
 800fc98:	9300      	str	r3, [sp, #0]

			ulSequenceNumber += ulDataLength;
		}

		return ulBytesConfirmed;
	}
 800fc9a:	9800      	ldr	r0, [sp, #0]
 800fc9c:	b003      	add	sp, #12
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t ulBytesConfirmed = 0u;
 800fca2:	2300      	movs	r3, #0
 800fca4:	9300      	str	r3, [sp, #0]
		return ulBytesConfirmed;
 800fca6:	e7f8      	b.n	800fc9a <prvTCPWindowTxCheckAck+0x92>
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800fca8:	f8da 3020 	ldr.w	r3, [sl, #32]
 800fcac:	429d      	cmp	r5, r3
 800fcae:	d0e7      	beq.n	800fc80 <prvTCPWindowTxCheckAck+0x78>
			ulSequenceNumber += ulDataLength;
 800fcb0:	444d      	add	r5, r9
		for(
 800fcb2:	42a7      	cmp	r7, r4
 800fcb4:	d0f1      	beq.n	800fc9a <prvTCPWindowTxCheckAck+0x92>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800fcb6:	eba8 0305 	sub.w	r3, r8, r5
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	dbed      	blt.n	800fc9a <prvTCPWindowTxCheckAck+0x92>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800fcbe:	68e6      	ldr	r6, [r4, #12]
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800fcc0:	6864      	ldr	r4, [r4, #4]
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800fcc2:	6833      	ldr	r3, [r6, #0]
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800fcc4:	43da      	mvns	r2, r3
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800fcc6:	42ea      	cmn	r2, r5
 800fcc8:	d5f3      	bpl.n	800fcb2 <prvTCPWindowTxCheckAck+0xaa>
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800fcca:	42ab      	cmp	r3, r5
 800fccc:	d1e5      	bne.n	800fc9a <prvTCPWindowTxCheckAck+0x92>
			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800fcce:	f8d6 9008 	ldr.w	r9, [r6, #8]
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800fcd2:	7db3      	ldrb	r3, [r6, #22]
 800fcd4:	f013 0f02 	tst.w	r3, #2
 800fcd8:	d1e6      	bne.n	800fca8 <prvTCPWindowTxCheckAck+0xa0>
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 800fcda:	eb09 0205 	add.w	r2, r9, r5
 800fcde:	eb1b 0f02 	cmn.w	fp, r2
 800fce2:	d5da      	bpl.n	800fc9a <prvTCPWindowTxCheckAck+0x92>
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 800fce4:	f043 0302 	orr.w	r3, r3, #2
 800fce8:	75b3      	strb	r3, [r6, #22]
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800fcea:	7d33      	ldrb	r3, [r6, #20]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d0a2      	beq.n	800fc36 <prvTCPWindowTxCheckAck+0x2e>
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800fcf0:	f8da 3020 	ldr.w	r3, [sl, #32]
 800fcf4:	429d      	cmp	r5, r3
 800fcf6:	d0c3      	beq.n	800fc80 <prvTCPWindowTxCheckAck+0x78>
			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800fcf8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0d8      	beq.n	800fcb0 <prvTCPWindowTxCheckAck+0xa8>
				uxListRemove( &pxSegment->xQueueItem );
 800fcfe:	f106 0018 	add.w	r0, r6, #24
 800fd02:	f003 fa1d 	bl	8013140 <uxListRemove>
 800fd06:	e7d3      	b.n	800fcb0 <prvTCPWindowTxCheckAck+0xa8>

0800fd08 <xTCPWindowNew>:
	{
 800fd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800fd0c:	4c1f      	ldr	r4, [pc, #124]	; (800fd8c <xTCPWindowNew+0x84>)
 800fd0e:	6824      	ldr	r4, [r4, #0]
 800fd10:	2c00      	cmp	r4, #0
 800fd12:	d038      	beq.n	800fd86 <xTCPWindowNew+0x7e>
 800fd14:	461d      	mov	r5, r3
 800fd16:	4617      	mov	r7, r2
 800fd18:	4688      	mov	r8, r1
 800fd1a:	4606      	mov	r6, r0
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800fd1c:	4b1b      	ldr	r3, [pc, #108]	; (800fd8c <xTCPWindowNew+0x84>)
 800fd1e:	f8d3 900c 	ldr.w	r9, [r3, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800fd22:	f8d9 400c 	ldr.w	r4, [r9, #12]
			configASSERT( pxItem != NULL );
 800fd26:	f1b9 0f00 	cmp.w	r9, #0
 800fd2a:	d01d      	beq.n	800fd68 <xTCPWindowNew+0x60>
			configASSERT( pxSegment != NULL );
 800fd2c:	b314      	cbz	r4, 800fd74 <xTCPWindowNew+0x6c>
			uxListRemove( pxItem );
 800fd2e:	4648      	mov	r0, r9
 800fd30:	f003 fa06 	bl	8013140 <uxListRemove>
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800fd34:	b325      	cbz	r5, 800fd80 <xTCPWindowNew+0x78>
 800fd36:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fd3a:	f100 0208 	add.w	r2, r0, #8
 800fd3e:	4649      	mov	r1, r9
 800fd40:	f7ff ff3b 	bl	800fbba <vListInsertGeneric>
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800fd44:	f004 fbe4 	bl	8014510 <xTaskGetTickCount>
 800fd48:	6120      	str	r0, [r4, #16]
			pxSegment->u.ulFlags = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	6163      	str	r3, [r4, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800fd4e:	1aed      	subs	r5, r5, r3
 800fd50:	bf18      	it	ne
 800fd52:	2501      	movne	r5, #1
 800fd54:	f365 0382 	bfi	r3, r5, #2, #1
 800fd58:	75a3      	strb	r3, [r4, #22]
			pxSegment->lMaxLength = lCount;
 800fd5a:	6067      	str	r7, [r4, #4]
			pxSegment->lDataLength = lCount;
 800fd5c:	60a7      	str	r7, [r4, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800fd5e:	f8c4 8000 	str.w	r8, [r4]
	}
 800fd62:	4620      	mov	r0, r4
 800fd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			configASSERT( pxItem != NULL );
 800fd68:	f240 11af 	movw	r1, #431	; 0x1af
 800fd6c:	4808      	ldr	r0, [pc, #32]	; (800fd90 <xTCPWindowNew+0x88>)
 800fd6e:	f007 fa97 	bl	80172a0 <vAssertCalled>
 800fd72:	e7db      	b.n	800fd2c <xTCPWindowNew+0x24>
			configASSERT( pxSegment != NULL );
 800fd74:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <xTCPWindowNew+0x88>)
 800fd7a:	f007 fa91 	bl	80172a0 <vAssertCalled>
 800fd7e:	e7d6      	b.n	800fd2e <xTCPWindowNew+0x26>
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800fd80:	f106 0090 	add.w	r0, r6, #144	; 0x90
 800fd84:	e7d9      	b.n	800fd3a <xTCPWindowNew+0x32>
			pxSegment = NULL;
 800fd86:	2400      	movs	r4, #0
		return pxSegment;
 800fd88:	e7eb      	b.n	800fd62 <xTCPWindowNew+0x5a>
 800fd8a:	bf00      	nop
 800fd8c:	200006a4 	.word	0x200006a4
 800fd90:	0801a484 	.word	0x0801a484

0800fd94 <xTCPWindowRxEmpty>:
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800fd94:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800fd98:	b92b      	cbnz	r3, 800fda6 <xTCPWindowRxEmpty+0x12>
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800fd9a:	6903      	ldr	r3, [r0, #16]
 800fd9c:	6980      	ldr	r0, [r0, #24]
 800fd9e:	1a18      	subs	r0, r3, r0
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800fda0:	43c0      	mvns	r0, r0
 800fda2:	0fc0      	lsrs	r0, r0, #31
 800fda4:	4770      	bx	lr
 800fda6:	2000      	movs	r0, #0
	}
 800fda8:	4770      	bx	lr

0800fdaa <vTCPWindowDestroy>:
	{
 800fdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdae:	4606      	mov	r6, r0
 800fdb0:	2501      	movs	r5, #1
				pxSegments = &( pxWindow->xTxSegments );
 800fdb2:	f100 0890 	add.w	r8, r0, #144	; 0x90
				pxSegments = &( pxWindow->xRxSegments );
 800fdb6:	f100 07a4 	add.w	r7, r0, #164	; 0xa4
 800fdba:	e009      	b.n	800fdd0 <vTCPWindowDestroy+0x26>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800fdbc:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800fdc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdc4:	d103      	bne.n	800fdce <vTCPWindowDestroy+0x24>
				pxSegments = &( pxWindow->xTxSegments );
 800fdc6:	4644      	mov	r4, r8
 800fdc8:	e00a      	b.n	800fde0 <vTCPWindowDestroy+0x36>
		for( xRound = 0; xRound < 2; xRound++ )
 800fdca:	2d01      	cmp	r5, #1
 800fdcc:	dc13      	bgt.n	800fdf6 <vTCPWindowDestroy+0x4c>
 800fdce:	3501      	adds	r5, #1
			if( xRound != 0 )
 800fdd0:	2d01      	cmp	r5, #1
 800fdd2:	d0f3      	beq.n	800fdbc <vTCPWindowDestroy+0x12>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800fdd4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 800fdd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fddc:	d1f5      	bne.n	800fdca <vTCPWindowDestroy+0x20>
				pxSegments = &( pxWindow->xRxSegments );
 800fdde:	463c      	mov	r4, r7
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d0f1      	beq.n	800fdca <vTCPWindowDestroy+0x20>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800fde6:	68e3      	ldr	r3, [r4, #12]
					vTCPWindowFree( pxSegment );
 800fde8:	68d8      	ldr	r0, [r3, #12]
 800fdea:	f7ff fef1 	bl	800fbd0 <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d1f8      	bne.n	800fde6 <vTCPWindowDestroy+0x3c>
 800fdf4:	e7e9      	b.n	800fdca <vTCPWindowDestroy+0x20>
	}
 800fdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdfa <vTCPWindowInit>:
{
 800fdfa:	b410      	push	{r4}
	pxWindow->u.ulFlags = 0ul;
 800fdfc:	2400      	movs	r4, #0
 800fdfe:	6004      	str	r4, [r0, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800fe00:	2401      	movs	r4, #1
 800fe02:	7004      	strb	r4, [r0, #0]
	if( ulMSS != 0ul )
 800fe04:	b193      	cbz	r3, 800fe2c <vTCPWindowInit+0x32>
 800fe06:	461c      	mov	r4, r3
		if( pxWindow->usMSSInit != 0u )
 800fe08:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 800fe0c:	b10b      	cbz	r3, 800fe12 <vTCPWindowInit+0x18>
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800fe0e:	f8a0 40be 	strh.w	r4, [r0, #190]	; 0xbe
		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800fe12:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 800fe16:	429c      	cmp	r4, r3
 800fe18:	d300      	bcc.n	800fe1c <vTCPWindowInit+0x22>
 800fe1a:	b93b      	cbnz	r3, 800fe2c <vTCPWindowInit+0x32>
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800fe1c:	6843      	ldr	r3, [r0, #4]
 800fe1e:	fbb3 f3f4 	udiv	r3, r3, r4
 800fe22:	fb04 f303 	mul.w	r3, r4, r3
 800fe26:	6043      	str	r3, [r0, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800fe28:	f8a0 40bc 	strh.w	r4, [r0, #188]	; 0xbc
	pxWindow->lSRTT = l500ms;
 800fe2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fe30:	6383      	str	r3, [r0, #56]	; 0x38
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800fe32:	60c1      	str	r1, [r0, #12]
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800fe34:	6101      	str	r1, [r0, #16]
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800fe36:	6181      	str	r1, [r0, #24]
	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800fe38:	61c2      	str	r2, [r0, #28]
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800fe3a:	6202      	str	r2, [r0, #32]
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800fe3c:	6342      	str	r2, [r0, #52]	; 0x34
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800fe3e:	6282      	str	r2, [r0, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800fe40:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800fe42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <vTCPWindowCreate>:
{
 800fe48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	468a      	mov	sl, r1
 800fe50:	4691      	mov	r9, r2
 800fe52:	4698      	mov	r8, r3
		if( xTCPSegments == NULL )
 800fe54:	4b22      	ldr	r3, [pc, #136]	; (800fee0 <vTCPWindowCreate+0x98>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	b1fb      	cbz	r3, 800fe9a <vTCPWindowCreate+0x52>
		vListInitialise( &pxWindow->xTxSegments );
 800fe5a:	f105 0090 	add.w	r0, r5, #144	; 0x90
 800fe5e:	f003 f93b 	bl	80130d8 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800fe62:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 800fe66:	f003 f937 	bl	80130d8 <vListInitialise>
		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800fe6a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800fe6e:	f003 f933 	bl	80130d8 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800fe72:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800fe76:	f003 f92f 	bl	80130d8 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800fe7a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800fe7e:	f003 f92b 	bl	80130d8 <vListInitialise>
	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800fe82:	f8c5 a004 	str.w	sl, [r5, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800fe86:	f8c5 9008 	str.w	r9, [r5, #8]
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800fe8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe8e:	4641      	mov	r1, r8
 800fe90:	4628      	mov	r0, r5
 800fe92:	f7ff ffb2 	bl	800fdfa <vTCPWindowInit>
 800fe96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &xSegmentList );
 800fe9a:	4812      	ldr	r0, [pc, #72]	; (800fee4 <vTCPWindowCreate+0x9c>)
 800fe9c:	f003 f91c 	bl	80130d8 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800fea0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800fea4:	f003 fb30 	bl	8013508 <pvPortMalloc>
 800fea8:	4606      	mov	r6, r0
 800feaa:	4b0d      	ldr	r3, [pc, #52]	; (800fee0 <vTCPWindowCreate+0x98>)
 800feac:	6018      	str	r0, [r3, #0]
		if( xTCPSegments == NULL )
 800feae:	2800      	cmp	r0, #0
 800feb0:	d0d3      	beq.n	800fe5a <vTCPWindowCreate+0x12>
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800feb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800feb6:	2100      	movs	r1, #0
 800feb8:	f007 fc88 	bl	80177cc <memset>
 800febc:	4634      	mov	r4, r6
 800febe:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fec2:	4f08      	ldr	r7, [pc, #32]	; (800fee4 <vTCPWindowCreate+0x9c>)
 800fec4:	f107 0b08 	add.w	fp, r7, #8
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800fec8:	63a4      	str	r4, [r4, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800feca:	6264      	str	r4, [r4, #36]	; 0x24
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fecc:	465a      	mov	r2, fp
 800fece:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800fed2:	4638      	mov	r0, r7
 800fed4:	f7ff fe71 	bl	800fbba <vListInsertGeneric>
 800fed8:	3440      	adds	r4, #64	; 0x40
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800feda:	42b4      	cmp	r4, r6
 800fedc:	d1f4      	bne.n	800fec8 <vTCPWindowCreate+0x80>
 800fede:	e7bc      	b.n	800fe5a <vTCPWindowCreate+0x12>
 800fee0:	200006b8 	.word	0x200006b8
 800fee4:	200006a4 	.word	0x200006a4

0800fee8 <lTCPWindowRxCheck>:
	{
 800fee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feec:	4605      	mov	r5, r0
 800feee:	460e      	mov	r6, r1
 800fef0:	4690      	mov	r8, r2
		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800fef2:	6907      	ldr	r7, [r0, #16]
		pxWindow->ucOptionLength = 0u;
 800fef4:	2200      	movs	r2, #0
 800fef6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		pxWindow->ulUserDataLength = 0ul;
 800fefa:	6302      	str	r2, [r0, #48]	; 0x30
		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800fefc:	428f      	cmp	r7, r1
 800fefe:	d00f      	beq.n	800ff20 <lTCPWindowRxCheck+0x38>
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800ff00:	1c4a      	adds	r2, r1, #1
 800ff02:	4297      	cmp	r7, r2
 800ff04:	f000 809a 	beq.w	801003c <lTCPWindowRxCheck+0x154>
			ulLast = ulSequenceNumber + ulLength;
 800ff08:	eb01 0408 	add.w	r4, r1, r8
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800ff0c:	1be2      	subs	r2, r4, r7
			if( lDistance <= 0 )
 800ff0e:	2a00      	cmp	r2, #0
 800ff10:	f340 8098 	ble.w	8010044 <lTCPWindowRxCheck+0x15c>
			else if( lDistance > ( int32_t ) ulSpace )
 800ff14:	429a      	cmp	r2, r3
 800ff16:	dd50      	ble.n	800ffba <lTCPWindowRxCheck+0xd2>
				lReturn = -1;
 800ff18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( ulLength > ulSpace )
 800ff20:	4598      	cmp	r8, r3
 800ff22:	f200 8087 	bhi.w	8010034 <lTCPWindowRxCheck+0x14c>
				ulCurrentSequenceNumber += ulLength;
 800ff26:	4447      	add	r7, r8
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800ff28:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800ff2c:	b91b      	cbnz	r3, 800ff36 <lTCPWindowRxCheck+0x4e>
				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800ff2e:	612f      	str	r7, [r5, #16]
				lReturn = 0;
 800ff30:	2000      	movs	r0, #0
 800ff32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800ff36:	eb01 0c08 	add.w	ip, r1, r8
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800ff3a:	f100 0eac 	add.w	lr, r0, #172	; 0xac
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ff3e:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800ff42:	459e      	cmp	lr, r3
 800ff44:	d021      	beq.n	800ff8a <lTCPWindowRxCheck+0xa2>
 800ff46:	4610      	mov	r0, r2
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800ff48:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ff4c:	e003      	b.n	800ff56 <lTCPWindowRxCheck+0x6e>
					pxBest = pxSegment;
 800ff4e:	4620      	mov	r0, r4
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ff50:	685b      	ldr	r3, [r3, #4]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ff52:	459e      	cmp	lr, r3
 800ff54:	d012      	beq.n	800ff7c <lTCPWindowRxCheck+0x94>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ff56:	68dc      	ldr	r4, [r3, #12]
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ff58:	6822      	ldr	r2, [r4, #0]
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800ff5a:	1b91      	subs	r1, r2, r6
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	dbf7      	blt.n	800ff50 <lTCPWindowRxCheck+0x68>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800ff60:	ebac 0102 	sub.w	r1, ip, r2
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ff64:	2900      	cmp	r1, #0
 800ff66:	dbf3      	blt.n	800ff50 <lTCPWindowRxCheck+0x68>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0f0      	beq.n	800ff4e <lTCPWindowRxCheck+0x66>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800ff6c:	6801      	ldr	r1, [r0, #0]
 800ff6e:	3901      	subs	r1, #1
 800ff70:	1a8a      	subs	r2, r1, r2
					pxBest = pxSegment;
 800ff72:	ea10 0022 	ands.w	r0, r0, r2, asr #32
 800ff76:	bf38      	it	cc
 800ff78:	4620      	movcc	r0, r4
 800ff7a:	e7e9      	b.n	800ff50 <lTCPWindowRxCheck+0x68>
					if( pxFound != NULL )
 800ff7c:	b138      	cbz	r0, 800ff8e <lTCPWindowRxCheck+0xa6>
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800ff7e:	6804      	ldr	r4, [r0, #0]
 800ff80:	6883      	ldr	r3, [r0, #8]
 800ff82:	441c      	add	r4, r3
						vTCPWindowFree( pxFound );
 800ff84:	f7ff fe24 	bl	800fbd0 <vTCPWindowFree>
 800ff88:	e008      	b.n	800ff9c <lTCPWindowRxCheck+0xb4>
				ulCurrentSequenceNumber += ulLength;
 800ff8a:	463c      	mov	r4, r7
 800ff8c:	e006      	b.n	800ff9c <lTCPWindowRxCheck+0xb4>
 800ff8e:	463c      	mov	r4, r7
 800ff90:	e004      	b.n	800ff9c <lTCPWindowRxCheck+0xb4>
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800ff92:	689a      	ldr	r2, [r3, #8]
 800ff94:	4414      	add	r4, r2
						vTCPWindowFree( pxFound );
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff fe1a 	bl	800fbd0 <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f7ff fdbc 	bl	800fb1c <xTCPWindowRxFind>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d1f3      	bne.n	800ff92 <lTCPWindowRxCheck+0xaa>
					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800ffaa:	42bc      	cmp	r4, r7
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800ffac:	bf1c      	itt	ne
 800ffae:	1be7      	subne	r7, r4, r7
 800ffb0:	632f      	strne	r7, [r5, #48]	; 0x30
 800ffb2:	4627      	mov	r7, r4
 800ffb4:	e7bb      	b.n	800ff2e <lTCPWindowRxCheck+0x46>
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	441c      	add	r4, r3
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f7ff fdad 	bl	800fb1c <xTCPWindowRxFind>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d1f6      	bne.n	800ffb6 <lTCPWindowRxCheck+0xce>
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800ffc8:	4b22      	ldr	r3, [pc, #136]	; (8010054 <lTCPWindowRxCheck+0x16c>)
 800ffca:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800ffce:	0e33      	lsrs	r3, r6, #24
 800ffd0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800ffd4:	0232      	lsls	r2, r6, #8
 800ffd6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	0a32      	lsrs	r2, r6, #8
 800ffde:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800ffe8:	0e23      	lsrs	r3, r4, #24
 800ffea:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800ffee:	0222      	lsls	r2, r4, #8
 800fff0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800fff4:	4313      	orrs	r3, r2
 800fff6:	0a24      	lsrs	r4, r4, #8
 800fff8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800fffc:	431c      	orrs	r4, r3
 800fffe:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 8010002:	230c      	movs	r3, #12
 8010004:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8010008:	4631      	mov	r1, r6
 801000a:	4628      	mov	r0, r5
 801000c:	f7ff fd86 	bl	800fb1c <xTCPWindowRxFind>
				if( pxFound != NULL )
 8010010:	b9e0      	cbnz	r0, 801004c <lTCPWindowRxCheck+0x164>
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8010012:	2301      	movs	r3, #1
 8010014:	4642      	mov	r2, r8
 8010016:	4631      	mov	r1, r6
 8010018:	4628      	mov	r0, r5
 801001a:	f7ff fe75 	bl	800fd08 <xTCPWindowNew>
					if( pxFound == NULL )
 801001e:	b110      	cbz	r0, 8010026 <lTCPWindowRxCheck+0x13e>
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 8010020:	1bf0      	subs	r0, r6, r7
 8010022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxWindow->ucOptionLength = 0u;
 8010026:	2300      	movs	r3, #0
 8010028:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
						lReturn = -1;
 801002c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				lReturn = -1;
 8010034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			lReturn = -1;
 801003c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				lReturn = -1;
 8010044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					lReturn = -1;
 801004c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8010050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010054:	0a050101 	.word	0x0a050101

08010058 <lTCPWindowTxAdd>:
	{
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	b083      	sub	sp, #12
 801005e:	4605      	mov	r5, r0
 8010060:	4616      	mov	r6, r2
 8010062:	469a      	mov	sl, r3
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 8010064:	460f      	mov	r7, r1
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 8010066:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
		if( pxSegment != NULL )
 8010068:	b313      	cbz	r3, 80100b0 <lTCPWindowTxAdd+0x58>
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 801006a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801006e:	685a      	ldr	r2, [r3, #4]
 8010070:	4590      	cmp	r8, r2
 8010072:	da20      	bge.n	80100b6 <lTCPWindowTxAdd+0x5e>
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 8010074:	7d98      	ldrb	r0, [r3, #22]
 8010076:	f010 0f01 	tst.w	r0, #1
 801007a:	d152      	bne.n	8010122 <lTCPWindowTxAdd+0xca>
 801007c:	f1b8 0f00 	cmp.w	r8, #0
 8010080:	d01b      	beq.n	80100ba <lTCPWindowTxAdd+0x62>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8010082:	eba2 0008 	sub.w	r0, r2, r8
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 8010086:	4288      	cmp	r0, r1
 8010088:	bfa8      	it	ge
 801008a:	4608      	movge	r0, r1
					pxSegment->lDataLength += lToWrite;
 801008c:	eb08 0400 	add.w	r4, r8, r0
 8010090:	609c      	str	r4, [r3, #8]
					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8010092:	42a2      	cmp	r2, r4
						pxWindow->pxHeadSegment = NULL;
 8010094:	bfdc      	itt	le
 8010096:	2300      	movle	r3, #0
 8010098:	67eb      	strle	r3, [r5, #124]	; 0x7c
					lBytesLeft -= lToWrite;
 801009a:	1a0f      	subs	r7, r1, r0
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 801009c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801009e:	4403      	add	r3, r0
 80100a0:	636b      	str	r3, [r5, #52]	; 0x34
		lPosition += lCount;
 80100a2:	4406      	add	r6, r0
		if( lPosition >= lMax )
 80100a4:	45b2      	cmp	sl, r6
 80100a6:	dc3f      	bgt.n	8010128 <lTCPWindowTxAdd+0xd0>
			lPosition -= lMax;
 80100a8:	eba6 060a 	sub.w	r6, r6, sl
					lDone += lToWrite;
 80100ac:	4680      	mov	r8, r0
 80100ae:	e004      	b.n	80100ba <lTCPWindowTxAdd+0x62>
	int32_t lDone = 0;
 80100b0:	f04f 0800 	mov.w	r8, #0
 80100b4:	e001      	b.n	80100ba <lTCPWindowTxAdd+0x62>
 80100b6:	f04f 0800 	mov.w	r8, #0
		while( lBytesLeft > 0 )
 80100ba:	2f00      	cmp	r7, #0
 80100bc:	dd2d      	ble.n	801011a <lTCPWindowTxAdd+0xc2>
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 80100be:	f04f 0900 	mov.w	r9, #0
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80100c2:	f105 0b54 	add.w	fp, r5, #84	; 0x54
 80100c6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80100ca:	9301      	str	r3, [sp, #4]
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 80100cc:	464b      	mov	r3, r9
 80100ce:	f8b5 20bc 	ldrh.w	r2, [r5, #188]	; 0xbc
 80100d2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80100d4:	4628      	mov	r0, r5
 80100d6:	f7ff fe17 	bl	800fd08 <xTCPWindowNew>
			if( pxSegment != NULL )
 80100da:	4604      	mov	r4, r0
 80100dc:	b1e8      	cbz	r0, 801011a <lTCPWindowTxAdd+0xc2>
 80100de:	6843      	ldr	r3, [r0, #4]
 80100e0:	42bb      	cmp	r3, r7
 80100e2:	bfa8      	it	ge
 80100e4:	463b      	movge	r3, r7
				pxSegment->lDataLength = lToWrite;
 80100e6:	6083      	str	r3, [r0, #8]
				pxSegment->lStreamPos = lPosition;
 80100e8:	60c6      	str	r6, [r0, #12]
				lBytesLeft -= lToWrite;
 80100ea:	1aff      	subs	r7, r7, r3
		lPosition += lCount;
 80100ec:	441e      	add	r6, r3
		if( lPosition >= lMax )
 80100ee:	45b2      	cmp	sl, r6
			lPosition -= lMax;
 80100f0:	bfd8      	it	le
 80100f2:	eba6 060a 	suble.w	r6, r6, sl
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80100f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80100f8:	441a      	add	r2, r3
 80100fa:	636a      	str	r2, [r5, #52]	; 0x34
				lDone += lToWrite;
 80100fc:	4498      	add	r8, r3
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80100fe:	9a01      	ldr	r2, [sp, #4]
 8010100:	f100 0118 	add.w	r1, r0, #24
 8010104:	4658      	mov	r0, fp
 8010106:	f7ff fd58 	bl	800fbba <vListInsertGeneric>
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 801010a:	68a2      	ldr	r2, [r4, #8]
 801010c:	6863      	ldr	r3, [r4, #4]
 801010e:	429a      	cmp	r2, r3
					pxWindow->pxHeadSegment = pxSegment;
 8010110:	bfa8      	it	ge
 8010112:	464c      	movge	r4, r9
 8010114:	67ec      	str	r4, [r5, #124]	; 0x7c
		while( lBytesLeft > 0 )
 8010116:	2f00      	cmp	r7, #0
 8010118:	dcd8      	bgt.n	80100cc <lTCPWindowTxAdd+0x74>
	}
 801011a:	4640      	mov	r0, r8
 801011c:	b003      	add	sp, #12
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int32_t lDone = 0;
 8010122:	f04f 0800 	mov.w	r8, #0
 8010126:	e7c8      	b.n	80100ba <lTCPWindowTxAdd+0x62>
					lDone += lToWrite;
 8010128:	4680      	mov	r8, r0
 801012a:	e7c6      	b.n	80100ba <lTCPWindowTxAdd+0x62>

0801012c <xTCPWindowTxDone>:
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 801012c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
	}
 8010130:	fab0 f080 	clz	r0, r0
 8010134:	0940      	lsrs	r0, r0, #5
 8010136:	4770      	bx	lr

08010138 <xTCPWindowTxHasData>:
	{
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		*pulDelay = 0u;
 801013a:	2300      	movs	r3, #0
 801013c:	6013      	str	r3, [r2, #0]
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 801013e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010140:	bb53      	cbnz	r3, 8010198 <xTCPWindowTxHasData+0x60>
 8010142:	4615      	mov	r5, r2
 8010144:	460e      	mov	r6, r1
 8010146:	4604      	mov	r4, r0
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8010148:	3068      	adds	r0, #104	; 0x68
 801014a:	f7ff fd00 	bl	800fb4e <xTCPWindowPeekHead>
			if( pxSegment != NULL )
 801014e:	4607      	mov	r7, r0
 8010150:	b160      	cbz	r0, 801016c <xTCPWindowTxHasData+0x34>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8010152:	f004 f9dd 	bl	8014510 <xTaskGetTickCount>
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	1ac0      	subs	r0, r0, r3
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 801015a:	7d3a      	ldrb	r2, [r7, #20]
 801015c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801015e:	4093      	lsls	r3, r2
				if( ulMaxAge > ulAge )
 8010160:	4298      	cmp	r0, r3
 8010162:	d21b      	bcs.n	801019c <xTCPWindowTxHasData+0x64>
					*pulDelay = ulMaxAge - ulAge;
 8010164:	1a1b      	subs	r3, r3, r0
 8010166:	602b      	str	r3, [r5, #0]
				xReturn = pdTRUE;
 8010168:	2001      	movs	r0, #1
 801016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801016c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8010170:	f7ff fced 	bl	800fb4e <xTCPWindowPeekHead>
				if( pxSegment == NULL )
 8010174:	4605      	mov	r5, r0
 8010176:	b198      	cbz	r0, 80101a0 <xTCPWindowTxHasData+0x68>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8010178:	4631      	mov	r1, r6
 801017a:	4620      	mov	r0, r4
 801017c:	f7ff fcee 	bl	800fb5c <prvTCPWindowTxHasSpace>
 8010180:	b180      	cbz	r0, 80101a4 <xTCPWindowTxHasData+0x6c>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8010182:	7823      	ldrb	r3, [r4, #0]
 8010184:	f013 0f02 	tst.w	r3, #2
 8010188:	d00e      	beq.n	80101a8 <xTCPWindowTxHasData+0x70>
 801018a:	68a8      	ldr	r0, [r5, #8]
 801018c:	686b      	ldr	r3, [r5, #4]
 801018e:	4298      	cmp	r0, r3
 8010190:	bfb4      	ite	lt
 8010192:	2000      	movlt	r0, #0
 8010194:	2001      	movge	r0, #1
 8010196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8010198:	2001      	movs	r0, #1
 801019a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdTRUE;
 801019c:	2001      	movs	r0, #1
 801019e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdFALSE;
 80101a0:	2000      	movs	r0, #0
 80101a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdFALSE;
 80101a4:	2000      	movs	r0, #0
 80101a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					xReturn = pdTRUE;
 80101a8:	2001      	movs	r0, #1
	}
 80101aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101ac <ulTCPWindowTxGet>:
	{
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	4605      	mov	r5, r0
 80101b2:	460f      	mov	r7, r1
 80101b4:	4616      	mov	r6, r2
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80101b6:	3040      	adds	r0, #64	; 0x40
 80101b8:	f7ff fcf4 	bl	800fba4 <xTCPWindowGetHead>
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80101bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80101be:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxSegment == NULL )
 80101c0:	4604      	mov	r4, r0
 80101c2:	b310      	cbz	r0, 801020a <ulTCPWindowTxGet+0x5e>
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 80101c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101c6:	b123      	cbz	r3, 80101d2 <ulTCPWindowTxGet+0x26>
 80101c8:	f240 5181 	movw	r1, #1409	; 0x581
 80101cc:	4835      	ldr	r0, [pc, #212]	; (80102a4 <ulTCPWindowTxGet+0xf8>)
 80101ce:	f007 f867 	bl	80172a0 <vAssertCalled>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80101d2:	f105 0270 	add.w	r2, r5, #112	; 0x70
 80101d6:	f104 0118 	add.w	r1, r4, #24
 80101da:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80101de:	f7ff fcec 	bl	800fbba <vListInsertGeneric>
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 80101e2:	7da3      	ldrb	r3, [r4, #22]
 80101e4:	f043 0301 	orr.w	r3, r3, #1
 80101e8:	75a3      	strb	r3, [r4, #22]
			( pxSegment->u.bits.ucTransmitCount )++;
 80101ea:	7d23      	ldrb	r3, [r4, #20]
 80101ec:	3301      	adds	r3, #1
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	7523      	strb	r3, [r4, #20]
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 80101f2:	2b04      	cmp	r3, #4
 80101f4:	d047      	beq.n	8010286 <ulTCPWindowTxGet+0xda>
	pxTimer->ulBorn = xTaskGetTickCount ( );
 80101f6:	f004 f98b 	bl	8014510 <xTaskGetTickCount>
 80101fa:	6120      	str	r0, [r4, #16]
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	62eb      	str	r3, [r5, #44]	; 0x2c
			*plPosition = pxSegment->lStreamPos;
 8010200:	68e3      	ldr	r3, [r4, #12]
 8010202:	6033      	str	r3, [r6, #0]
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8010204:	68a0      	ldr	r0, [r4, #8]
 8010206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 801020a:	f105 0868 	add.w	r8, r5, #104	; 0x68
 801020e:	4640      	mov	r0, r8
 8010210:	f7ff fc9d 	bl	800fb4e <xTCPWindowPeekHead>
			if( pxSegment != NULL )
 8010214:	4681      	mov	r9, r0
 8010216:	b148      	cbz	r0, 801022c <ulTCPWindowTxGet+0x80>
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8010218:	7d03      	ldrb	r3, [r0, #20]
 801021a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 801021c:	409c      	lsls	r4, r3
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 801021e:	f004 f977 	bl	8014510 <xTaskGetTickCount>
 8010222:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010226:	1ac0      	subs	r0, r0, r3
				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8010228:	42a0      	cmp	r0, r4
 801022a:	d815      	bhi.n	8010258 <ulTCPWindowTxGet+0xac>
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801022c:	f105 0454 	add.w	r4, r5, #84	; 0x54
 8010230:	4620      	mov	r0, r4
 8010232:	f7ff fc8c 	bl	800fb4e <xTCPWindowPeekHead>
				if( pxSegment == NULL )
 8010236:	b370      	cbz	r0, 8010296 <ulTCPWindowTxGet+0xea>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8010238:	782a      	ldrb	r2, [r5, #0]
 801023a:	f012 0f02 	tst.w	r2, #2
 801023e:	d003      	beq.n	8010248 <ulTCPWindowTxGet+0x9c>
 8010240:	6882      	ldr	r2, [r0, #8]
 8010242:	6843      	ldr	r3, [r0, #4]
 8010244:	429a      	cmp	r2, r3
 8010246:	db29      	blt.n	801029c <ulTCPWindowTxGet+0xf0>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8010248:	4639      	mov	r1, r7
 801024a:	4628      	mov	r0, r5
 801024c:	f7ff fc86 	bl	800fb5c <prvTCPWindowTxHasSpace>
 8010250:	b958      	cbnz	r0, 801026a <ulTCPWindowTxGet+0xbe>
 8010252:	2000      	movs	r0, #0
		return ulReturn;
 8010254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8010258:	4640      	mov	r0, r8
 801025a:	f7ff fca3 	bl	800fba4 <xTCPWindowGetHead>
 801025e:	4604      	mov	r4, r0
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 8010260:	2300      	movs	r3, #0
 8010262:	7543      	strb	r3, [r0, #21]
			if( pxSegment == NULL )
 8010264:	2800      	cmp	r0, #0
 8010266:	d1ad      	bne.n	80101c4 <ulTCPWindowTxGet+0x18>
 8010268:	e7e0      	b.n	801022c <ulTCPWindowTxGet+0x80>
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 801026a:	4620      	mov	r0, r4
 801026c:	f7ff fc9a 	bl	800fba4 <xTCPWindowGetHead>
 8010270:	4604      	mov	r4, r0
					if( pxWindow->pxHeadSegment == pxSegment )
 8010272:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8010274:	4298      	cmp	r0, r3
						pxWindow->pxHeadSegment = NULL;
 8010276:	bf04      	itt	eq
 8010278:	2300      	moveq	r3, #0
 801027a:	67eb      	streq	r3, [r5, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 801027c:	6803      	ldr	r3, [r0, #0]
 801027e:	6882      	ldr	r2, [r0, #8]
 8010280:	4413      	add	r3, r2
 8010282:	62ab      	str	r3, [r5, #40]	; 0x28
 8010284:	e79e      	b.n	80101c4 <ulTCPWindowTxGet+0x18>
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 8010286:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	68aa      	ldr	r2, [r5, #8]
 801028e:	429a      	cmp	r2, r3
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8010290:	bf88      	it	hi
 8010292:	60ab      	strhi	r3, [r5, #8]
 8010294:	e7af      	b.n	80101f6 <ulTCPWindowTxGet+0x4a>
 8010296:	2000      	movs	r0, #0
 8010298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029c:	2000      	movs	r0, #0
 801029e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a2:	bf00      	nop
 80102a4:	0801a484 	.word	0x0801a484

080102a8 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 80102a8:	b508      	push	{r3, lr}
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80102aa:	6a03      	ldr	r3, [r0, #32]
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 80102ac:	1a5a      	subs	r2, r3, r1

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 80102ae:	2a00      	cmp	r2, #0
 80102b0:	db01      	blt.n	80102b6 <ulTCPWindowTxAck+0xe>
		{
			ulReturn = 0UL;
 80102b2:	2000      	movs	r0, #0
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
		}

		return ulReturn;
	}
 80102b4:	bd08      	pop	{r3, pc}
 80102b6:	460a      	mov	r2, r1
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80102b8:	4619      	mov	r1, r3
 80102ba:	f7ff fca5 	bl	800fc08 <prvTCPWindowTxCheckAck>
 80102be:	bd08      	pop	{r3, pc}

080102c0 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 80102c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	4607      	mov	r7, r0
 80102c6:	460e      	mov	r6, r1
	uint32_t ulAckCount = 0UL;
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 80102c8:	f7ff fc9e 	bl	800fc08 <prvTCPWindowTxCheckAck>
 80102cc:	4680      	mov	r8, r0
		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 80102ce:	f107 0570 	add.w	r5, r7, #112	; 0x70
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80102d2:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80102d4:	42a5      	cmp	r5, r4
 80102d6:	d025      	beq.n	8010324 <ulTCPWindowTxSack+0x64>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 80102d8:	3e01      	subs	r6, #1
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 80102da:	f04f 0a00 	mov.w	sl, #0
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80102de:	f107 0940 	add.w	r9, r7, #64	; 0x40
 80102e2:	e001      	b.n	80102e8 <ulTCPWindowTxSack+0x28>
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80102e4:	42a5      	cmp	r5, r4
 80102e6:	d01d      	beq.n	8010324 <ulTCPWindowTxSack+0x64>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80102e8:	68e3      	ldr	r3, [r4, #12]
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80102ea:	6864      	ldr	r4, [r4, #4]
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 80102ec:	7d9a      	ldrb	r2, [r3, #22]
 80102ee:	f012 0f02 	tst.w	r2, #2
 80102f2:	d1f7      	bne.n	80102e4 <ulTCPWindowTxSack+0x24>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	1ab2      	subs	r2, r6, r2
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 80102f8:	2a00      	cmp	r2, #0
 80102fa:	dbf3      	blt.n	80102e4 <ulTCPWindowTxSack+0x24>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 80102fc:	7d5a      	ldrb	r2, [r3, #21]
 80102fe:	3201      	adds	r2, #1
 8010300:	b2d2      	uxtb	r2, r2
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 8010302:	755a      	strb	r2, [r3, #21]
 8010304:	2a03      	cmp	r2, #3
 8010306:	d1ed      	bne.n	80102e4 <ulTCPWindowTxSack+0x24>
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 8010308:	f883 a014 	strb.w	sl, [r3, #20]
				uxListRemove( &pxSegment->xQueueItem );
 801030c:	f103 0b18 	add.w	fp, r3, #24
 8010310:	4658      	mov	r0, fp
 8010312:	f002 ff15 	bl	8013140 <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8010316:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801031a:	4659      	mov	r1, fp
 801031c:	4648      	mov	r0, r9
 801031e:	f7ff fc4c 	bl	800fbba <vListInsertGeneric>
 8010322:	e7df      	b.n	80102e4 <ulTCPWindowTxSack+0x24>
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
	}
 8010324:	4640      	mov	r0, r8
 8010326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801032c <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 801032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032e:	b083      	sub	sp, #12
 8010330:	4604      	mov	r4, r0
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8010332:	6943      	ldr	r3, [r0, #20]
 8010334:	a802      	add	r0, sp, #8
 8010336:	f840 3d04 	str.w	r3, [r0, #-4]!

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 801033a:	69a5      	ldr	r5, [r4, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 801033c:	4629      	mov	r1, r5
 801033e:	f7fb fadf 	bl	800b900 <eARPGetCacheEntry>

	if( eReturned != eCantSendPacket )
 8010342:	2802      	cmp	r0, #2
 8010344:	d003      	beq.n	801034e <vProcessGeneratedUDPPacket+0x22>
	{
		if( eReturned == eARPCacheHit )
 8010346:	2801      	cmp	r0, #1
 8010348:	d006      	beq.n	8010358 <vProcessGeneratedUDPPacket+0x2c>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 801034a:	2800      	cmp	r0, #0
 801034c:	d041      	beq.n	80103d2 <vProcessGeneratedUDPPacket+0xa6>
	}
	else
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801034e:	4620      	mov	r0, r4
 8010350:	f000 f8f0 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
	}
}
 8010354:	b003      	add	sp, #12
 8010356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 8010358:	8c23      	ldrh	r3, [r4, #32]
 801035a:	b173      	cbz	r3, 801037a <vProcessGeneratedUDPPacket+0x4e>
				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801035c:	84ab      	strh	r3, [r5, #36]	; 0x24
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 801035e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8010360:	846b      	strh	r3, [r5, #34]	; 0x22
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 8010362:	69e3      	ldr	r3, [r4, #28]
 8010364:	3308      	adds	r3, #8
 8010366:	b29b      	uxth	r3, r3
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8010368:	0a1a      	lsrs	r2, r3, #8
 801036a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 801036e:	84eb      	strh	r3, [r5, #38]	; 0x26
				pxUDPHeader->usChecksum = 0u;
 8010370:	2300      	movs	r3, #0
 8010372:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8010376:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 801037a:	4e1e      	ldr	r6, [pc, #120]	; (80103f4 <vProcessGeneratedUDPPacket+0xc8>)
 801037c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801037e:	f8c5 0006 	str.w	r0, [r5, #6]
 8010382:	f8c5 100a 	str.w	r1, [r5, #10]
 8010386:	f8c5 200e 	str.w	r2, [r5, #14]
 801038a:	f8c5 3012 	str.w	r3, [r5, #18]
 801038e:	ce03      	ldmia	r6!, {r0, r1}
 8010390:	f8c5 0016 	str.w	r0, [r5, #22]
 8010394:	f8c5 101a 	str.w	r1, [r5, #26]
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 8010398:	8c23      	ldrh	r3, [r4, #32]
 801039a:	b9b3      	cbnz	r3, 80103ca <vProcessGeneratedUDPPacket+0x9e>
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 801039c:	2301      	movs	r3, #1
 801039e:	75eb      	strb	r3, [r5, #23]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 80103a0:	69e3      	ldr	r3, [r4, #28]
 80103a2:	3314      	adds	r3, #20
 80103a4:	822b      	strh	r3, [r5, #16]
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 80103a6:	8a2b      	ldrh	r3, [r5, #16]
 80103a8:	330e      	adds	r3, #14
 80103aa:	61e3      	str	r3, [r4, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80103ac:	8a2a      	ldrh	r2, [r5, #16]
 80103ae:	0a13      	lsrs	r3, r2, #8
 80103b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80103b4:	822b      	strh	r3, [r5, #16]
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 80103b6:	6963      	ldr	r3, [r4, #20]
 80103b8:	f8c5 301e 	str.w	r3, [r5, #30]
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 80103bc:	6962      	ldr	r2, [r4, #20]
 80103be:	4b0e      	ldr	r3, [pc, #56]	; (80103f8 <vProcessGeneratedUDPPacket+0xcc>)
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d112      	bne.n	80103ea <vProcessGeneratedUDPPacket+0xbe>
					pxIPHeader->ucTimeToLive = 0x01;
 80103c4:	2301      	movs	r3, #1
 80103c6:	75ab      	strb	r3, [r5, #22]
 80103c8:	e00f      	b.n	80103ea <vProcessGeneratedUDPPacket+0xbe>
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80103ca:	69e3      	ldr	r3, [r4, #28]
 80103cc:	331c      	adds	r3, #28
 80103ce:	822b      	strh	r3, [r5, #16]
 80103d0:	e7e9      	b.n	80103a6 <vProcessGeneratedUDPPacket+0x7a>
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 80103d2:	9901      	ldr	r1, [sp, #4]
 80103d4:	f7fb f9aa 	bl	800b72c <vARPRefreshCacheEntry>
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
 80103d8:	2100      	movs	r1, #0
 80103da:	2002      	movs	r0, #2
 80103dc:	f006 f9bc 	bl	8016758 <vExampleDebugStatUpdate>
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 80103e0:	9b01      	ldr	r3, [sp, #4]
 80103e2:	6163      	str	r3, [r4, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 80103e4:	4620      	mov	r0, r4
 80103e6:	f7fb fae7 	bl	800b9b8 <vARPGenerateRequestPacket>
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80103ea:	2101      	movs	r1, #1
 80103ec:	4620      	mov	r0, r4
 80103ee:	f000 fb63 	bl	8010ab8 <xNetworkInterfaceOutput>
 80103f2:	e7af      	b.n	8010354 <vProcessGeneratedUDPPacket+0x28>
 80103f4:	20000010 	.word	0x20000010
 80103f8:	fc0000e0 	.word	0xfc0000e0

080103fc <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 80103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fe:	4606      	mov	r6, r0
 8010400:	460f      	mov	r7, r1
BaseType_t xReturn = pdPASS;
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8010402:	6985      	ldr	r5, [r0, #24]

	pxSocket = pxUDPSocketLookup( usPort );
 8010404:	4608      	mov	r0, r1
 8010406:	f7fc ff51 	bl	800d2ac <pxUDPSocketLookup>

	if( pxSocket )
 801040a:	b328      	cbz	r0, 8010458 <xProcessReceivedUDPPacket+0x5c>
 801040c:	4604      	mov	r4, r0
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801040e:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8010412:	1da8      	adds	r0, r5, #6
 8010414:	f7fb f98a 	bl	800b72c <vARPRefreshCacheEntry>
		}
		#endif

		if( xReturn == pdPASS )
		{
			vTaskSuspendAll();
 8010418:	f004 f872 	bl	8014500 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
				{
					taskENTER_CRITICAL();
 801041c:	f002 feea 	bl	80131f4 <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8010420:	4631      	mov	r1, r6
 8010422:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010426:	f002 fe65 	bl	80130f4 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 801042a:	f002 ff05 	bl	8013238 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 801042e:	f004 f941 	bl	80146b4 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 8010432:	6860      	ldr	r0, [r4, #4]
 8010434:	b110      	cbz	r0, 801043c <xProcessReceivedUDPPacket+0x40>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 8010436:	2101      	movs	r1, #1
 8010438:	f002 fdde 	bl	8012ff8 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 801043c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801043e:	b363      	cbz	r3, 801049a <xProcessReceivedUDPPacket+0x9e>
 8010440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010442:	f012 0f01 	tst.w	r2, #1
 8010446:	d101      	bne.n	801044c <xProcessReceivedUDPPacket+0x50>
BaseType_t xReturn = pdPASS;
 8010448:	2001      	movs	r0, #1
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 801044c:	2101      	movs	r1, #1
 801044e:	6818      	ldr	r0, [r3, #0]
 8010450:	f002 fdd2 	bl	8012ff8 <xEventGroupSetBits>
BaseType_t xReturn = pdPASS;
 8010454:	2001      	movs	r0, #1
 8010456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 8010458:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 801045a:	0a13      	lsrs	r3, r2, #8
 801045c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010460:	b21b      	sxth	r3, r3
 8010462:	2b35      	cmp	r3, #53	; 0x35
 8010464:	d007      	beq.n	8010476 <xProcessReceivedUDPPacket+0x7a>
			else
		#endif

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010466:	f64e 3314 	movw	r3, #60180	; 0xeb14
 801046a:	429f      	cmp	r7, r3
 801046c:	d00c      	beq.n	8010488 <xProcessReceivedUDPPacket+0x8c>
 801046e:	429a      	cmp	r2, r3
 8010470:	d00a      	beq.n	8010488 <xProcessReceivedUDPPacket+0x8c>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 8010472:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
 8010474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8010476:	f8d5 101a 	ldr.w	r1, [r5, #26]
 801047a:	1da8      	adds	r0, r5, #6
 801047c:	f7fb f956 	bl	800b72c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 8010480:	4630      	mov	r0, r6
 8010482:	f7fb fe80 	bl	800c186 <ulDNSHandlePacket>
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8010488:	f8d5 101a 	ldr.w	r1, [r5, #26]
 801048c:	1da8      	adds	r0, r5, #6
 801048e:	f7fb f94d 	bl	800b72c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 8010492:	4630      	mov	r0, r6
 8010494:	f7fb fe77 	bl	800c186 <ulDNSHandlePacket>
 8010498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xReturn = pdPASS;
 801049a:	2001      	movs	r0, #1
 801049c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104a0 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 80104a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 80104a2:	4b1a      	ldr	r3, [pc, #104]	; (801050c <xNetworkBuffersInitialise+0x6c>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	b12b      	cbz	r3, 80104b4 <xNetworkBuffersInitialise+0x14>

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 80104a8:	4b18      	ldr	r3, [pc, #96]	; (801050c <xNetworkBuffersInitialise+0x6c>)
 80104aa:	6818      	ldr	r0, [r3, #0]
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
 80104ac:	3000      	adds	r0, #0
 80104ae:	bf18      	it	ne
 80104b0:	2001      	movne	r0, #1
 80104b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80104b4:	2119      	movs	r1, #25
 80104b6:	4608      	mov	r0, r1
 80104b8:	f003 fa54 	bl	8013964 <xQueueCreateCountingSemaphore>
 80104bc:	4b13      	ldr	r3, [pc, #76]	; (801050c <xNetworkBuffersInitialise+0x6c>)
 80104be:	6018      	str	r0, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 80104c0:	b1f8      	cbz	r0, 8010502 <xNetworkBuffersInitialise+0x62>
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 80104c2:	4c12      	ldr	r4, [pc, #72]	; (801050c <xNetworkBuffersInitialise+0x6c>)
 80104c4:	4912      	ldr	r1, [pc, #72]	; (8010510 <xNetworkBuffersInitialise+0x70>)
 80104c6:	6820      	ldr	r0, [r4, #0]
 80104c8:	f003 fd14 	bl	8013ef4 <vQueueAddToRegistry>
		if( xNetworkBufferSemaphore != NULL )
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d0ea      	beq.n	80104a8 <xNetworkBuffersInitialise+0x8>
			vListInitialise( &xFreeBuffersList );
 80104d2:	4810      	ldr	r0, [pc, #64]	; (8010514 <xNetworkBuffersInitialise+0x74>)
 80104d4:	f002 fe00 	bl	80130d8 <vListInitialise>
 80104d8:	4c0f      	ldr	r4, [pc, #60]	; (8010518 <xNetworkBuffersInitialise+0x78>)
 80104da:	f504 7761 	add.w	r7, r4, #900	; 0x384
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 80104de:	2600      	movs	r6, #0
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80104e0:	4d0c      	ldr	r5, [pc, #48]	; (8010514 <xNetworkBuffersInitialise+0x74>)
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 80104e2:	61a6      	str	r6, [r4, #24]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80104e4:	4620      	mov	r0, r4
 80104e6:	f002 fe02 	bl	80130ee <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80104ea:	60e4      	str	r4, [r4, #12]
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80104ec:	4621      	mov	r1, r4
 80104ee:	4628      	mov	r0, r5
 80104f0:	f002 fe0c 	bl	801310c <vListInsert>
 80104f4:	3424      	adds	r4, #36	; 0x24
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80104f6:	42bc      	cmp	r4, r7
 80104f8:	d1f3      	bne.n	80104e2 <xNetworkBuffersInitialise+0x42>
			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80104fa:	2219      	movs	r2, #25
 80104fc:	4b07      	ldr	r3, [pc, #28]	; (801051c <xNetworkBuffersInitialise+0x7c>)
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	e7d2      	b.n	80104a8 <xNetworkBuffersInitialise+0x8>
		configASSERT( xNetworkBufferSemaphore );
 8010502:	2187      	movs	r1, #135	; 0x87
 8010504:	4806      	ldr	r0, [pc, #24]	; (8010520 <xNetworkBuffersInitialise+0x80>)
 8010506:	f006 fecb 	bl	80172a0 <vAssertCalled>
 801050a:	e7da      	b.n	80104c2 <xNetworkBuffersInitialise+0x22>
 801050c:	20000a58 	.word	0x20000a58
 8010510:	0801a514 	.word	0x0801a514
 8010514:	200006c0 	.word	0x200006c0
 8010518:	200006d4 	.word	0x200006d4
 801051c:	200006bc 	.word	0x200006bc
 8010520:	0801a4c0 	.word	0x0801a4c0

08010524 <vReleaseNetworkBuffer>:
void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 8010524:	b120      	cbz	r0, 8010530 <vReleaseNetworkBuffer+0xc>
{
 8010526:	b508      	push	{r3, lr}
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
		vPortFree( ( void * ) pucEthernetBuffer );
 8010528:	380a      	subs	r0, #10
 801052a:	f003 f853 	bl	80135d4 <vPortFree>
 801052e:	bd08      	pop	{r3, pc}
 8010530:	4770      	bx	lr
	...

08010534 <vReleaseNetworkBufferAndDescriptor>:
	return pxReturn;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010534:	b510      	push	{r4, lr}
 8010536:	4604      	mov	r4, r0
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8010538:	6980      	ldr	r0, [r0, #24]
 801053a:	f7ff fff3 	bl	8010524 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 801053e:	2300      	movs	r3, #0
 8010540:	61a3      	str	r3, [r4, #24]

	taskENTER_CRITICAL();
 8010542:	f002 fe57 	bl	80131f4 <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );

		if( xListItemAlreadyInFreeList == pdFALSE )
 8010546:	6922      	ldr	r2, [r4, #16]
 8010548:	4b0b      	ldr	r3, [pc, #44]	; (8010578 <vReleaseNetworkBufferAndDescriptor+0x44>)
 801054a:	429a      	cmp	r2, r3
 801054c:	d011      	beq.n	8010572 <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801054e:	4621      	mov	r1, r4
 8010550:	4618      	mov	r0, r3
 8010552:	f002 fdcf 	bl	80130f4 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 8010556:	f002 fe6f 	bl	8013238 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 801055a:	2300      	movs	r3, #0
 801055c:	461a      	mov	r2, r3
 801055e:	4619      	mov	r1, r3
 8010560:	4806      	ldr	r0, [pc, #24]	; (801057c <vReleaseNetworkBufferAndDescriptor+0x48>)
 8010562:	6800      	ldr	r0, [r0, #0]
 8010564:	f003 fa1c 	bl	80139a0 <xQueueGenericSend>
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
 8010568:	2100      	movs	r1, #0
 801056a:	2014      	movs	r0, #20
 801056c:	f006 f8f4 	bl	8016758 <vExampleDebugStatUpdate>
}
 8010570:	bd10      	pop	{r4, pc}
	taskEXIT_CRITICAL();
 8010572:	f002 fe61 	bl	8013238 <vPortExitCritical>
 8010576:	e7f7      	b.n	8010568 <vReleaseNetworkBufferAndDescriptor+0x34>
 8010578:	200006c0 	.word	0x200006c0
 801057c:	20000a58 	.word	0x20000a58

08010580 <pxGetNetworkBufferWithDescriptor>:
{
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	460a      	mov	r2, r1
	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 8010584:	1e43      	subs	r3, r0, #1
 8010586:	2b44      	cmp	r3, #68	; 0x44
 8010588:	d936      	bls.n	80105f8 <pxGetNetworkBufferWithDescriptor+0x78>
	xRequestedSizeBytes += 2u;
 801058a:	1c84      	adds	r4, r0, #2
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 801058c:	f014 0f03 	tst.w	r4, #3
 8010590:	d002      	beq.n	8010598 <pxGetNetworkBufferWithDescriptor+0x18>
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8010592:	f044 0403 	orr.w	r4, r4, #3
 8010596:	3401      	adds	r4, #1
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8010598:	2300      	movs	r3, #0
 801059a:	4619      	mov	r1, r3
 801059c:	4822      	ldr	r0, [pc, #136]	; (8010628 <pxGetNetworkBufferWithDescriptor+0xa8>)
 801059e:	6800      	ldr	r0, [r0, #0]
 80105a0:	f003 fb9e 	bl	8013ce0 <xQueueGenericReceive>
 80105a4:	2801      	cmp	r0, #1
 80105a6:	d138      	bne.n	801061a <pxGetNetworkBufferWithDescriptor+0x9a>
		taskENTER_CRITICAL();
 80105a8:	f002 fe24 	bl	80131f4 <vPortEnterCritical>
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80105ac:	4e1f      	ldr	r6, [pc, #124]	; (801062c <pxGetNetworkBufferWithDescriptor+0xac>)
 80105ae:	68f3      	ldr	r3, [r6, #12]
 80105b0:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 80105b2:	4628      	mov	r0, r5
 80105b4:	f002 fdc4 	bl	8013140 <uxListRemove>
		taskEXIT_CRITICAL();
 80105b8:	f002 fe3e 	bl	8013238 <vPortExitCritical>
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80105bc:	6833      	ldr	r3, [r6, #0]
		if( uxMinimumFreeNetworkBuffers > uxCount )
 80105be:	4a1c      	ldr	r2, [pc, #112]	; (8010630 <pxGetNetworkBufferWithDescriptor+0xb0>)
 80105c0:	6812      	ldr	r2, [r2, #0]
 80105c2:	4293      	cmp	r3, r2
			uxMinimumFreeNetworkBuffers = uxCount;
 80105c4:	bf3c      	itt	cc
 80105c6:	4a1a      	ldrcc	r2, [pc, #104]	; (8010630 <pxGetNetworkBufferWithDescriptor+0xb0>)
 80105c8:	6013      	strcc	r3, [r2, #0]
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 80105ca:	69ab      	ldr	r3, [r5, #24]
 80105cc:	b123      	cbz	r3, 80105d8 <pxGetNetworkBufferWithDescriptor+0x58>
 80105ce:	f44f 7189 	mov.w	r1, #274	; 0x112
 80105d2:	4818      	ldr	r0, [pc, #96]	; (8010634 <pxGetNetworkBufferWithDescriptor+0xb4>)
 80105d4:	f006 fe64 	bl	80172a0 <vAssertCalled>
		if( xRequestedSizeBytes > 0 )
 80105d8:	b984      	cbnz	r4, 80105fc <pxGetNetworkBufferWithDescriptor+0x7c>
	if( pxReturn == NULL )
 80105da:	b1f5      	cbz	r5, 801061a <pxGetNetworkBufferWithDescriptor+0x9a>
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
 80105dc:	4b12      	ldr	r3, [pc, #72]	; (8010628 <pxGetNetworkBufferWithDescriptor+0xa8>)
 80105de:	6818      	ldr	r0, [r3, #0]
 80105e0:	f003 fc76 	bl	8013ed0 <uxQueueMessagesWaiting>
 80105e4:	4601      	mov	r1, r0
 80105e6:	2003      	movs	r0, #3
 80105e8:	f006 f8b6 	bl	8016758 <vExampleDebugStatUpdate>
 80105ec:	2100      	movs	r1, #0
 80105ee:	2013      	movs	r0, #19
 80105f0:	f006 f8b2 	bl	8016758 <vExampleDebugStatUpdate>
}
 80105f4:	4628      	mov	r0, r5
 80105f6:	bd70      	pop	{r4, r5, r6, pc}
	xRequestedSizeBytes += 2u;
 80105f8:	2448      	movs	r4, #72	; 0x48
 80105fa:	e7cd      	b.n	8010598 <pxGetNetworkBufferWithDescriptor+0x18>
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 80105fc:	f104 000a 	add.w	r0, r4, #10
 8010600:	f002 ff82 	bl	8013508 <pvPortMalloc>
 8010604:	61a8      	str	r0, [r5, #24]
			if( pxReturn->pucEthernetBuffer == NULL )
 8010606:	b128      	cbz	r0, 8010614 <pxGetNetworkBufferWithDescriptor+0x94>
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8010608:	6005      	str	r5, [r0, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 801060a:	69ab      	ldr	r3, [r5, #24]
 801060c:	330a      	adds	r3, #10
 801060e:	61ab      	str	r3, [r5, #24]
				pxReturn->xDataLength = xRequestedSizeBytes;
 8010610:	61ec      	str	r4, [r5, #28]
 8010612:	e7e2      	b.n	80105da <pxGetNetworkBufferWithDescriptor+0x5a>
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 8010614:	4628      	mov	r0, r5
 8010616:	f7ff ff8d 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
		iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 801061a:	2100      	movs	r1, #0
 801061c:	2006      	movs	r0, #6
 801061e:	f006 f89b 	bl	8016758 <vExampleDebugStatUpdate>
 8010622:	2500      	movs	r5, #0
 8010624:	e7e6      	b.n	80105f4 <pxGetNetworkBufferWithDescriptor+0x74>
 8010626:	bf00      	nop
 8010628:	20000a58 	.word	0x20000a58
 801062c:	200006c0 	.word	0x200006c0
 8010630:	200006bc 	.word	0x200006bc
 8010634:	0801a4c0 	.word	0x0801a4c0

08010638 <uxGetNumberOfFreeNetworkBuffers>:
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
	return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
}
 8010638:	4b01      	ldr	r3, [pc, #4]	; (8010640 <uxGetNumberOfFreeNetworkBuffers+0x8>)
 801063a:	6818      	ldr	r0, [r3, #0]
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	200006c0 	.word	0x200006c0

08010644 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
	return uxMinimumFreeNetworkBuffers;
}
 8010644:	4b01      	ldr	r3, [pc, #4]	; (801064c <uxGetMinimumFreeNetworkBuffers+0x8>)
 8010646:	6818      	ldr	r0, [r3, #0]
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	200006bc 	.word	0x200006bc

08010650 <prvNetworkInterfaceInput>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	b082      	sub	sp, #8
xNetworkBufferDescriptor_t *pxDescriptor;
uint16_t usReceivedLength;
__IO ETH_DMADescTypeDef *xDMARxDescriptor;
uint32_t ulSegCount;
xIPStackEvent_t xRxEvent = { eNetworkRxEvent, NULL };
 8010654:	2301      	movs	r3, #1
 8010656:	f88d 3000 	strb.w	r3, [sp]
 801065a:	2300      	movs	r3, #0
 801065c:	9301      	str	r3, [sp, #4]
const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( 250 );

	/* get received frame */
	if( HAL_ETH_GetReceivedFrame( &xETH ) != HAL_OK )
 801065e:	482d      	ldr	r0, [pc, #180]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 8010660:	f7f2 f8f6 	bl	8002850 <HAL_ETH_GetReceivedFrame>
 8010664:	2800      	cmp	r0, #0
 8010666:	d14e      	bne.n	8010706 <prvNetworkInterfaceInput+0xb6>
		usReceivedLength = 0;
	}
	else
	{
		/* Obtain the size of the packet and put it into the "usReceivedLength" variable. */
		usReceivedLength = xETH.RxFrameInfos.length;
 8010668:	4b2a      	ldr	r3, [pc, #168]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 801066a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801066c:	b2ac      	uxth	r4, r5

		if( usReceivedLength > 0 )
 801066e:	2c00      	cmp	r4, #0
 8010670:	d035      	beq.n	80106de <prvNetworkInterfaceInput+0x8e>
		{
			/* Create a buffer of the required length. */
			pxDescriptor = pxGetNetworkBufferWithDescriptor( usReceivedLength, xDescriptorWaitTime );
 8010672:	21fa      	movs	r1, #250	; 0xfa
 8010674:	4620      	mov	r0, r4
 8010676:	f7ff ff83 	bl	8010580 <pxGetNetworkBufferWithDescriptor>

			if( pxDescriptor != NULL )
 801067a:	4606      	mov	r6, r0
 801067c:	b350      	cbz	r0, 80106d4 <prvNetworkInterfaceInput+0x84>
			{
				xDMARxDescriptor = xETH.RxFrameInfos.FSRxDesc;

				/* Copy remaining data. */
				if( usReceivedLength > pxDescriptor->xDataLength )
 801067e:	69c3      	ldr	r3, [r0, #28]
 8010680:	429c      	cmp	r4, r3
				{
					usReceivedLength = pxDescriptor->xDataLength;
 8010682:	bf88      	it	hi
 8010684:	b29c      	uxthhi	r4, r3
				}

				memcpy( pxDescriptor->pucEthernetBuffer, ( uint8_t * ) xETH.RxFrameInfos.buffer, usReceivedLength);
 8010686:	4622      	mov	r2, r4
 8010688:	4b22      	ldr	r3, [pc, #136]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 801068a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801068c:	6980      	ldr	r0, [r0, #24]
 801068e:	f007 f878 	bl	8017782 <memcpy>

				xRxEvent.pvData = ( void * ) pxDescriptor;
 8010692:	9601      	str	r6, [sp, #4]

				/* Pass the data to the TCP/IP task for processing. */
				if( xSendEventStructToIPTask( &xRxEvent, xDescriptorWaitTime ) == pdFALSE )
 8010694:	21fa      	movs	r1, #250	; 0xfa
 8010696:	4668      	mov	r0, sp
 8010698:	f7fb fec6 	bl	800c428 <xSendEventStructToIPTask>
 801069c:	b9a8      	cbnz	r0, 80106ca <prvNetworkInterfaceInput+0x7a>
				{
					/* Could not send the descriptor into the TCP/IP stack, it
					must be released. */
					vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 801069e:	4630      	mov	r0, r6
 80106a0:	f7ff ff48 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
					iptraceETHERNET_RX_EVENT_LOST();
 80106a4:	2100      	movs	r1, #0
 80106a6:	200a      	movs	r0, #10
 80106a8:	f006 f856 	bl	8016758 <vExampleDebugStatUpdate>
				{
					iptraceNETWORK_INTERFACE_RECEIVE();
				}

				/* Release descriptors to DMA.  Point to first descriptor. */
				xDMARxDescriptor = xETH.RxFrameInfos.FSRxDesc;
 80106ac:	4a19      	ldr	r2, [pc, #100]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 80106ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
				ulSegCount = xETH.RxFrameInfos.SegCount;
 80106b0:	6b91      	ldr	r1, [r2, #56]	; 0x38

				/* Set Own bit in RX descriptors: gives the buffers back to
				DMA. */
				while( ulSegCount != 0 )
 80106b2:	b131      	cbz	r1, 80106c2 <prvNetworkInterfaceInput+0x72>
				{
					xDMARxDescriptor->Status |= ETH_DMARXDESC_OWN;
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80106ba:	601a      	str	r2, [r3, #0]
					xDMARxDescriptor = ( ETH_DMADescTypeDef * ) xDMARxDescriptor->Buffer2NextDescAddr;
 80106bc:	68db      	ldr	r3, [r3, #12]
				while( ulSegCount != 0 )
 80106be:	3901      	subs	r1, #1
 80106c0:	d1f8      	bne.n	80106b4 <prvNetworkInterfaceInput+0x64>
					ulSegCount--;
				}

				/* Clear Segment_Count */
				xETH.RxFrameInfos.SegCount = 0;
 80106c2:	2200      	movs	r2, #0
 80106c4:	4b13      	ldr	r3, [pc, #76]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 80106c6:	639a      	str	r2, [r3, #56]	; 0x38
 80106c8:	e00c      	b.n	80106e4 <prvNetworkInterfaceInput+0x94>
					iptraceNETWORK_INTERFACE_RECEIVE();
 80106ca:	2100      	movs	r1, #0
 80106cc:	4608      	mov	r0, r1
 80106ce:	f006 f843 	bl	8016758 <vExampleDebugStatUpdate>
 80106d2:	e7eb      	b.n	80106ac <prvNetworkInterfaceInput+0x5c>
			}
			else
			{
				FreeRTOS_printf( ( "prvNetworkInterfaceInput: pxGetNetworkBuffer failed length %u\n", usReceivedLength ) );
 80106d4:	4621      	mov	r1, r4
 80106d6:	4810      	ldr	r0, [pc, #64]	; (8010718 <prvNetworkInterfaceInput+0xc8>)
 80106d8:	f006 f93a 	bl	8016950 <lUDPLoggingPrintf>
 80106dc:	e002      	b.n	80106e4 <prvNetworkInterfaceInput+0x94>
			}
		}
		else
		{
			FreeRTOS_printf( ( "prvNetworkInterfaceInput: zero-sized packet?\n" ) );
 80106de:	480f      	ldr	r0, [pc, #60]	; (801071c <prvNetworkInterfaceInput+0xcc>)
 80106e0:	f006 f936 	bl	8016950 <lUDPLoggingPrintf>
			pxDescriptor = NULL;
		}

		/* When Rx Buffer unavailable flag is set clear it and resume
		reception. */
		if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 80106e4:	4b0b      	ldr	r3, [pc, #44]	; (8010714 <prvNetworkInterfaceInput+0xc4>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f241 0214 	movw	r2, #4116	; 0x1014
 80106ec:	589a      	ldr	r2, [r3, r2]
 80106ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80106f2:	d009      	beq.n	8010708 <prvNetworkInterfaceInput+0xb8>
		{
			/* Clear RBUS ETHERNET DMA flag. */
			xETH.Instance->DMASR = ETH_DMASR_RBUS;
 80106f4:	2180      	movs	r1, #128	; 0x80
 80106f6:	f241 0214 	movw	r2, #4116	; 0x1014
 80106fa:	5099      	str	r1, [r3, r2]

			/* Resume DMA reception. */
			xETH.Instance->DMARPDR = 0;
 80106fc:	2100      	movs	r1, #0
 80106fe:	f241 0208 	movw	r2, #4104	; 0x1008
 8010702:	5099      	str	r1, [r3, r2]
 8010704:	e000      	b.n	8010708 <prvNetworkInterfaceInput+0xb8>
		usReceivedLength = 0;
 8010706:	2400      	movs	r4, #0
		}
	}

	return ( usReceivedLength > 0 );
}
 8010708:	1c20      	adds	r0, r4, #0
 801070a:	bf18      	it	ne
 801070c:	2001      	movne	r0, #1
 801070e:	b002      	add	sp, #8
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	bf00      	nop
 8010714:	20000a70 	.word	0x20000a70
 8010718:	0801a604 	.word	0x0801a604
 801071c:	0801a644 	.word	0x0801a644

08010720 <prvEthernetUpdateConfig>:
	ulACRValue = ulAdvertise;
}
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8010720:	b530      	push	{r4, r5, lr}
 8010722:	b085      	sub	sp, #20
 8010724:	4604      	mov	r4, r0
__IO uint32_t ulTimeout = 0;
 8010726:	2300      	movs	r3, #0
 8010728:	9303      	str	r3, [sp, #12]
uint32_t ulRegValue = 0;
 801072a:	9302      	str	r3, [sp, #8]

	FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS %d Force %d\n",
 801072c:	4b4d      	ldr	r3, [pc, #308]	; (8010864 <prvEthernetUpdateConfig+0x144>)
 801072e:	6819      	ldr	r1, [r3, #0]
 8010730:	4602      	mov	r2, r0
 8010732:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8010736:	484c      	ldr	r0, [pc, #304]	; (8010868 <prvEthernetUpdateConfig+0x148>)
 8010738:	f006 f90a 	bl	8016950 <lUDPLoggingPrintf>
		( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ,
		xForce ) );

	if( ( xForce != pdFALSE ) || ( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) )
 801073c:	b92c      	cbnz	r4, 801074a <prvEthernetUpdateConfig+0x2a>
 801073e:	4b49      	ldr	r3, [pc, #292]	; (8010864 <prvEthernetUpdateConfig+0x144>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f013 0f04 	tst.w	r3, #4
 8010746:	f000 8089 	beq.w	801085c <prvEthernetUpdateConfig+0x13c>
	{
		/* Restart the auto-negotiation. */
		if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 801074a:	4b48      	ldr	r3, [pc, #288]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d068      	beq.n	8010824 <prvEthernetUpdateConfig+0x104>
		{
			/* Enable Auto-Negotiation. */
			HAL_ETH_WritePHYRegister( &xETH, PHY_BCR, ulBCRvalue | BMCR_ANRESTART );
 8010752:	4b47      	ldr	r3, [pc, #284]	; (8010870 <prvEthernetUpdateConfig+0x150>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	4c45      	ldr	r4, [pc, #276]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 8010758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801075c:	2100      	movs	r1, #0
 801075e:	4620      	mov	r0, r4
 8010760:	f7f2 f92a 	bl	80029b8 <HAL_ETH_WritePHYRegister>
			HAL_ETH_WritePHYRegister( &xETH, PHY_REG_04_ADVERTISE, ulACRValue);
 8010764:	4b43      	ldr	r3, [pc, #268]	; (8010874 <prvEthernetUpdateConfig+0x154>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	2104      	movs	r1, #4
 801076a:	4620      	mov	r0, r4
 801076c:	f7f2 f924 	bl	80029b8 <HAL_ETH_WritePHYRegister>

			/* Wait until the auto-negotiation will be completed */
			do
			{
				ulTimeout++;
				HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &ulRegValue );
 8010770:	4625      	mov	r5, r4
 8010772:	2401      	movs	r4, #1
				ulTimeout++;
 8010774:	9b03      	ldr	r3, [sp, #12]
 8010776:	3301      	adds	r3, #1
 8010778:	9303      	str	r3, [sp, #12]
				HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &ulRegValue );
 801077a:	aa02      	add	r2, sp, #8
 801077c:	4621      	mov	r1, r4
 801077e:	4628      	mov	r0, r5
 8010780:	f7f2 f8ce 	bl	8002920 <HAL_ETH_ReadPHYRegister>
			} while( ( ( ulRegValue & PHY_AUTONEGO_COMPLETE) == 0 ) && ( ulTimeout < PHY_READ_TO ) );
 8010784:	9b02      	ldr	r3, [sp, #8]
 8010786:	f013 0f20 	tst.w	r3, #32
 801078a:	d104      	bne.n	8010796 <prvEthernetUpdateConfig+0x76>
 801078c:	9a03      	ldr	r2, [sp, #12]
 801078e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010792:	429a      	cmp	r2, r3
 8010794:	d9ee      	bls.n	8010774 <prvEthernetUpdateConfig+0x54>

			HAL_ETH_WritePHYRegister( &xETH, PHY_BCR, ulBCRvalue & ~BMCR_ANRESTART );
 8010796:	4b36      	ldr	r3, [pc, #216]	; (8010870 <prvEthernetUpdateConfig+0x150>)
 8010798:	681a      	ldr	r2, [r3, #0]
 801079a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801079e:	2100      	movs	r1, #0
 80107a0:	4832      	ldr	r0, [pc, #200]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 80107a2:	f7f2 f909 	bl	80029b8 <HAL_ETH_WritePHYRegister>

			if( ulTimeout < PHY_READ_TO )
 80107a6:	9a03      	ldr	r2, [sp, #12]
 80107a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d843      	bhi.n	8010838 <prvEthernetUpdateConfig+0x118>
			{
				/* Reset Timeout counter. */
				ulTimeout = 0;
 80107b0:	2300      	movs	r3, #0
 80107b2:	9303      	str	r3, [sp, #12]

				/* Read the result of the auto-negotiation. */
				HAL_ETH_ReadPHYRegister( &xETH, PHY_SR, &ulRegValue);
 80107b4:	aa02      	add	r2, sp, #8
 80107b6:	2110      	movs	r1, #16
 80107b8:	482c      	ldr	r0, [pc, #176]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 80107ba:	f7f2 f8b1 	bl	8002920 <HAL_ETH_ReadPHYRegister>
				if( ( ulRegValue & PHY_LINK_STATUS ) != 0 )
 80107be:	9902      	ldr	r1, [sp, #8]
 80107c0:	f011 0501 	ands.w	r5, r1, #1
				{
					ulPHYLinkStatus |= BMSR_LINK_STATUS;
 80107c4:	4a27      	ldr	r2, [pc, #156]	; (8010864 <prvEthernetUpdateConfig+0x144>)
 80107c6:	6813      	ldr	r3, [r2, #0]
 80107c8:	bf14      	ite	ne
 80107ca:	f043 0304 	orrne.w	r3, r3, #4
				}
				else
				{
					ulPHYLinkStatus &= ~( BMSR_LINK_STATUS );
 80107ce:	f023 0304 	biceq.w	r3, r3, #4
 80107d2:	6013      	str	r3, [r2, #0]
				}

				FreeRTOS_printf( ( ">> Autonego ready: %08x: %s duplex %u mbit %s status\n",
 80107d4:	f001 0404 	and.w	r4, r1, #4
 80107d8:	f001 0302 	and.w	r3, r1, #2
 80107dc:	2b00      	cmp	r3, #0
 80107de:	bf14      	ite	ne
 80107e0:	230a      	movne	r3, #10
 80107e2:	2364      	moveq	r3, #100	; 0x64
 80107e4:	4a24      	ldr	r2, [pc, #144]	; (8010878 <prvEthernetUpdateConfig+0x158>)
 80107e6:	4825      	ldr	r0, [pc, #148]	; (801087c <prvEthernetUpdateConfig+0x15c>)
 80107e8:	2d00      	cmp	r5, #0
 80107ea:	bf08      	it	eq
 80107ec:	4610      	moveq	r0, r2
 80107ee:	9000      	str	r0, [sp, #0]
 80107f0:	4823      	ldr	r0, [pc, #140]	; (8010880 <prvEthernetUpdateConfig+0x160>)
 80107f2:	4a24      	ldr	r2, [pc, #144]	; (8010884 <prvEthernetUpdateConfig+0x164>)
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	bf08      	it	eq
 80107f8:	4602      	moveq	r2, r0
 80107fa:	4823      	ldr	r0, [pc, #140]	; (8010888 <prvEthernetUpdateConfig+0x168>)
 80107fc:	f006 f8a8 	bl	8016950 <lUDPLoggingPrintf>
					(ulRegValue & PHY_SPEED_STATUS) ? 10 : 100,
					(ulRegValue & PHY_LINK_STATUS) ? "high" : "low" ) );

				/* Configure the MAC with the Duplex Mode fixed by the
				auto-negotiation process. */
				if( ( ulRegValue & PHY_DUPLEX_STATUS ) != ( uint32_t ) RESET )
 8010800:	9b02      	ldr	r3, [sp, #8]
 8010802:	f013 0f04 	tst.w	r3, #4
				{
					/* Set Ethernet duplex mode to Full-duplex following the
					auto-negotiation. */
					xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8010806:	bf14      	ite	ne
 8010808:	f44f 6100 	movne.w	r1, #2048	; 0x800
				}
				else
				{
					/* Set Ethernet duplex mode to Half-duplex following the
					auto-negotiation. */
					xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 801080c:	2100      	moveq	r1, #0
 801080e:	4a17      	ldr	r2, [pc, #92]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 8010810:	60d1      	str	r1, [r2, #12]
				}

				/* Configure the MAC with the speed fixed by the
				auto-negotiation process. */
				if( ( ulRegValue & PHY_SPEED_STATUS) != 0 )
 8010812:	f013 0f02 	tst.w	r3, #2
				{
					/* Set Ethernet speed to 10M following the
					auto-negotiation. */
					xETH.Init.Speed = ETH_SPEED_10M;
 8010816:	bf14      	ite	ne
 8010818:	2200      	movne	r2, #0
				}
				else
				{
					/* Set Ethernet speed to 100M following the
					auto-negotiation. */
					xETH.Init.Speed = ETH_SPEED_100M;
 801081a:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 801081e:	4b13      	ldr	r3, [pc, #76]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 8010820:	609a      	str	r2, [r3, #8]
 8010822:	e009      	b.n	8010838 <prvEthernetUpdateConfig+0x118>
			/* Check parameters */
			assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
			assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

			/* Set MAC Speed and Duplex Mode to PHY */
			usValue = ( uint16_t ) ( xETH.Init.DuplexMode >> 3 ) | ( uint16_t ) ( xETH.Init.Speed >> 1 );
 8010824:	4811      	ldr	r0, [pc, #68]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 8010826:	68c2      	ldr	r2, [r0, #12]
 8010828:	6883      	ldr	r3, [r0, #8]
 801082a:	085b      	lsrs	r3, r3, #1
 801082c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
			HAL_ETH_WritePHYRegister( &xETH, PHY_BCR, usValue );
 8010830:	b292      	uxth	r2, r2
 8010832:	2100      	movs	r1, #0
 8010834:	f7f2 f8c0 	bl	80029b8 <HAL_ETH_WritePHYRegister>
		}

		/* ETHERNET MAC Re-Configuration */
		HAL_ETH_ConfigMAC( &xETH, (ETH_MACInitTypeDef *) NULL);
 8010838:	4c0c      	ldr	r4, [pc, #48]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 801083a:	2100      	movs	r1, #0
 801083c:	4620      	mov	r0, r4
 801083e:	f7f2 f97f 	bl	8002b40 <HAL_ETH_ConfigMAC>

		/* Restart MAC interface */
		HAL_ETH_Start( &xETH);
 8010842:	4620      	mov	r0, r4
 8010844:	f7f2 f904 	bl	8002a50 <HAL_ETH_Start>

		FreeRTOS_printf( ( "MACCR = %08x DMABMR = %08x\n",
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	6819      	ldr	r1, [r3, #0]
 801084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	480e      	ldr	r0, [pc, #56]	; (801088c <prvEthernetUpdateConfig+0x16c>)
 8010854:	f006 f87c 	bl	8016950 <lUDPLoggingPrintf>
	else
	{
		/* Stop MAC interface */
		HAL_ETH_Stop( &xETH );
	}
}
 8010858:	b005      	add	sp, #20
 801085a:	bd30      	pop	{r4, r5, pc}
		HAL_ETH_Stop( &xETH );
 801085c:	4803      	ldr	r0, [pc, #12]	; (801086c <prvEthernetUpdateConfig+0x14c>)
 801085e:	f7f2 f933 	bl	8002ac8 <HAL_ETH_Stop>
}
 8010862:	e7f9      	b.n	8010858 <prvEthernetUpdateConfig+0x138>
 8010864:	20000a68 	.word	0x20000a68
 8010868:	0801a584 	.word	0x0801a584
 801086c:	20000a70 	.word	0x20000a70
 8010870:	20000a60 	.word	0x20000a60
 8010874:	20000a5c 	.word	0x20000a5c
 8010878:	0801a580 	.word	0x0801a580
 801087c:	0801a578 	.word	0x0801a578
 8010880:	0801a570 	.word	0x0801a570
 8010884:	0801a568 	.word	0x0801a568
 8010888:	0801a5b0 	.word	0x0801a5b0
 801088c:	0801a5e8 	.word	0x0801a5e8

08010890 <prvEMACHandlerTask>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void *pvParameters )
{
 8010890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010894:	b085      	sub	sp, #20
const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );

	/* Remove compiler warnings about unused parameters. */
	( void ) pvParameters;

	vTaskSetTimeOutState( &xPhyTime );
 8010896:	a802      	add	r0, sp, #8
 8010898:	f004 f92e 	bl	8014af8 <vTaskSetTimeOutState>
	xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
 801089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108a0:	9301      	str	r3, [sp, #4]
BaseType_t xResult = 0;
 80108a2:	2600      	movs	r6, #0
UBaseType_t uxLastMinBufferCount = 0;
 80108a4:	4637      	mov	r7, r6
		if( uxLastMinBufferCount != uxCurrentCount )
		{
			/* The logging produced below may be helpful
			while tuning +TCP: see how many buffers are in use. */
			uxLastMinBufferCount = uxCurrentCount;
			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 80108a6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8010994 <prvEMACHandlerTask+0x104>
				FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
			}
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 80108aa:	4c37      	ldr	r4, [pc, #220]	; (8010988 <prvEMACHandlerTask+0xf8>)
			xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
			xResult = 0;
		}
		else if( xTaskCheckForTimeOut( &xPhyTime, &xPhyRemTime ) != pdFALSE )
		{
			HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &xStatus );
 80108ac:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8010998 <prvEMACHandlerTask+0x108>
 80108b0:	e01e      	b.n	80108f0 <prvEMACHandlerTask+0x60>
			ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 80108b2:	2164      	movs	r1, #100	; 0x64
 80108b4:	2000      	movs	r0, #0
 80108b6:	f004 fc15 	bl	80150e4 <ulTaskNotifyTake>
 80108ba:	e029      	b.n	8010910 <prvEMACHandlerTask+0x80>
		if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	f013 0f02 	tst.w	r3, #2
 80108c2:	d003      	beq.n	80108cc <prvEMACHandlerTask+0x3c>
			ulISREvents &= ~EMAC_IF_TX_EVENT;
 80108c4:	6823      	ldr	r3, [r4, #0]
 80108c6:	f023 0302 	bic.w	r3, r3, #2
 80108ca:	6023      	str	r3, [r4, #0]
		if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	f013 0f04 	tst.w	r3, #4
 80108d2:	d003      	beq.n	80108dc <prvEMACHandlerTask+0x4c>
			ulISREvents &= ~EMAC_IF_ERR_EVENT;
 80108d4:	6823      	ldr	r3, [r4, #0]
 80108d6:	f023 0304 	bic.w	r3, r3, #4
 80108da:	6023      	str	r3, [r4, #0]
		if( xResult > 0 )
 80108dc:	2e00      	cmp	r6, #0
 80108de:	dd28      	ble.n	8010932 <prvEMACHandlerTask+0xa2>
			vTaskSetTimeOutState( &xPhyTime );
 80108e0:	a802      	add	r0, sp, #8
 80108e2:	f004 f909 	bl	8014af8 <vTaskSetTimeOutState>
			xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
 80108e6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80108ea:	9301      	str	r3, [sp, #4]
			xResult = 0;
 80108ec:	2600      	movs	r6, #0
 80108ee:	462f      	mov	r7, r5
		uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 80108f0:	f7ff fea8 	bl	8010644 <uxGetMinimumFreeNetworkBuffers>
 80108f4:	4605      	mov	r5, r0
		if( uxLastMinBufferCount != uxCurrentCount )
 80108f6:	4287      	cmp	r7, r0
 80108f8:	d006      	beq.n	8010908 <prvEMACHandlerTask+0x78>
			FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 80108fa:	f7ff fe9d 	bl	8010638 <uxGetNumberOfFreeNetworkBuffers>
 80108fe:	462a      	mov	r2, r5
 8010900:	4601      	mov	r1, r0
 8010902:	4640      	mov	r0, r8
 8010904:	f006 f824 	bl	8016950 <lUDPLoggingPrintf>
		if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	f013 0f07 	tst.w	r3, #7
 801090e:	d0d0      	beq.n	80108b2 <prvEMACHandlerTask+0x22>
		if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 8010910:	6823      	ldr	r3, [r4, #0]
 8010912:	f013 0f01 	tst.w	r3, #1
 8010916:	d0d1      	beq.n	80108bc <prvEMACHandlerTask+0x2c>
			ulISREvents &= ~EMAC_IF_RX_EVENT;
 8010918:	6823      	ldr	r3, [r4, #0]
 801091a:	f023 0301 	bic.w	r3, r3, #1
 801091e:	6023      	str	r3, [r4, #0]
			xResult = prvNetworkInterfaceInput();
 8010920:	f7ff fe96 	bl	8010650 <prvNetworkInterfaceInput>
			if( xResult > 0 )
 8010924:	1e06      	subs	r6, r0, #0
 8010926:	ddc9      	ble.n	80108bc <prvEMACHandlerTask+0x2c>
			  	while( prvNetworkInterfaceInput() > 0 )
 8010928:	f7ff fe92 	bl	8010650 <prvNetworkInterfaceInput>
 801092c:	2800      	cmp	r0, #0
 801092e:	dcfb      	bgt.n	8010928 <prvEMACHandlerTask+0x98>
 8010930:	e7c4      	b.n	80108bc <prvEMACHandlerTask+0x2c>
		else if( xTaskCheckForTimeOut( &xPhyTime, &xPhyRemTime ) != pdFALSE )
 8010932:	a901      	add	r1, sp, #4
 8010934:	a802      	add	r0, sp, #8
 8010936:	f004 f8f5 	bl	8014b24 <xTaskCheckForTimeOut>
 801093a:	2800      	cmp	r0, #0
 801093c:	d0d7      	beq.n	80108ee <prvEMACHandlerTask+0x5e>
			HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_01_BMSR, &xStatus );
 801093e:	466a      	mov	r2, sp
 8010940:	2101      	movs	r1, #1
 8010942:	4648      	mov	r0, r9
 8010944:	f7f1 ffec 	bl	8002920 <HAL_ETH_ReadPHYRegister>
			if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != ( xStatus & BMSR_LINK_STATUS ) )
 8010948:	9900      	ldr	r1, [sp, #0]
 801094a:	4b10      	ldr	r3, [pc, #64]	; (801098c <prvEMACHandlerTask+0xfc>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	404b      	eors	r3, r1
 8010950:	f013 0f04 	tst.w	r3, #4
 8010954:	d10d      	bne.n	8010972 <prvEMACHandlerTask+0xe2>
				ulPHYLinkStatus = xStatus;
				FreeRTOS_printf( ( "prvEMACHandlerTask: PHY LS now %d\n", ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) );
				prvEthernetUpdateConfig( pdFALSE );
			}

			vTaskSetTimeOutState( &xPhyTime );
 8010956:	a802      	add	r0, sp, #8
 8010958:	f004 f8ce 	bl	8014af8 <vTaskSetTimeOutState>
			if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 801095c:	4b0b      	ldr	r3, [pc, #44]	; (801098c <prvEMACHandlerTask+0xfc>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f013 0f04 	tst.w	r3, #4
			{
				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_HIGH_CHECK_TIME_MS );
 8010964:	bf14      	ite	ne
 8010966:	f643 2398 	movwne	r3, #15000	; 0x3a98
			}
			else
			{
				xPhyRemTime = pdMS_TO_TICKS( PHY_LS_LOW_CHECK_TIME_MS );
 801096a:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	e7bd      	b.n	80108ee <prvEMACHandlerTask+0x5e>
				ulPHYLinkStatus = xStatus;
 8010972:	4b06      	ldr	r3, [pc, #24]	; (801098c <prvEMACHandlerTask+0xfc>)
 8010974:	6019      	str	r1, [r3, #0]
				FreeRTOS_printf( ( "prvEMACHandlerTask: PHY LS now %d\n", ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 ) );
 8010976:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801097a:	4805      	ldr	r0, [pc, #20]	; (8010990 <prvEMACHandlerTask+0x100>)
 801097c:	f005 ffe8 	bl	8016950 <lUDPLoggingPrintf>
				prvEthernetUpdateConfig( pdFALSE );
 8010980:	2000      	movs	r0, #0
 8010982:	f7ff fecd 	bl	8010720 <prvEthernetUpdateConfig>
 8010986:	e7e6      	b.n	8010956 <prvEMACHandlerTask+0xc6>
 8010988:	20000a64 	.word	0x20000a64
 801098c:	20000a68 	.word	0x20000a68
 8010990:	0801a544 	.word	0x0801a544
 8010994:	0801a520 	.word	0x0801a520
 8010998:	20000a70 	.word	0x20000a70

0801099c <HAL_ETH_RxCpltCallback>:
{
 801099c:	b500      	push	{lr}
 801099e:	b083      	sub	sp, #12
BaseType_t xHigherPriorityTaskWoken = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	9301      	str	r3, [sp, #4]
    ulISREvents |= EMAC_IF_RX_EVENT;
 80109a4:	4a0b      	ldr	r2, [pc, #44]	; (80109d4 <HAL_ETH_RxCpltCallback+0x38>)
 80109a6:	6813      	ldr	r3, [r2, #0]
 80109a8:	f043 0301 	orr.w	r3, r3, #1
 80109ac:	6013      	str	r3, [r2, #0]
	if( xEMACTaskHandle != NULL )
 80109ae:	4b0a      	ldr	r3, [pc, #40]	; (80109d8 <HAL_ETH_RxCpltCallback+0x3c>)
 80109b0:	6818      	ldr	r0, [r3, #0]
 80109b2:	b160      	cbz	r0, 80109ce <HAL_ETH_RxCpltCallback+0x32>
		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80109b4:	a901      	add	r1, sp, #4
 80109b6:	f004 fc3b 	bl	8015230 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80109ba:	9b01      	ldr	r3, [sp, #4]
 80109bc:	b13b      	cbz	r3, 80109ce <HAL_ETH_RxCpltCallback+0x32>
 80109be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109c2:	4b06      	ldr	r3, [pc, #24]	; (80109dc <HAL_ETH_RxCpltCallback+0x40>)
 80109c4:	601a      	str	r2, [r3, #0]
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	f3bf 8f6f 	isb	sy
}
 80109ce:	b003      	add	sp, #12
 80109d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80109d4:	20000a64 	.word	0x20000a64
 80109d8:	20000a6c 	.word	0x20000a6c
 80109dc:	e000ed04 	.word	0xe000ed04

080109e0 <HAL_ETH_TxCpltCallback>:
{
 80109e0:	4770      	bx	lr
	...

080109e4 <xNetworkInterfaceInitialise>:
	if( xEMACTaskHandle == NULL )
 80109e4:	4b25      	ldr	r3, [pc, #148]	; (8010a7c <xNetworkInterfaceInitialise+0x98>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	b123      	cbz	r3, 80109f4 <xNetworkInterfaceInitialise+0x10>
	return ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0;
 80109ea:	4b25      	ldr	r3, [pc, #148]	; (8010a80 <xNetworkInterfaceInitialise+0x9c>)
 80109ec:	6818      	ldr	r0, [r3, #0]
}
 80109ee:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80109f2:	4770      	bx	lr
{
 80109f4:	b570      	push	{r4, r5, r6, lr}
 80109f6:	b082      	sub	sp, #8
		xETH.Instance = ETH;
 80109f8:	4c22      	ldr	r4, [pc, #136]	; (8010a84 <xNetworkInterfaceInitialise+0xa0>)
 80109fa:	4b23      	ldr	r3, [pc, #140]	; (8010a88 <xNetworkInterfaceInitialise+0xa4>)
 80109fc:	6023      	str	r3, [r4, #0]
		xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80109fe:	2501      	movs	r5, #1
 8010a00:	6065      	str	r5, [r4, #4]
		xETH.Init.Speed = ETH_SPEED_100M;
 8010a02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a06:	60a3      	str	r3, [r4, #8]
		xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8010a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a0c:	60e3      	str	r3, [r4, #12]
		xETH.Init.PhyAddress = 1;
 8010a0e:	8225      	strh	r5, [r4, #16]
		xETH.Init.MACAddr = ( uint8_t *) ucMACAddress;
 8010a10:	4b1e      	ldr	r3, [pc, #120]	; (8010a8c <xNetworkInterfaceInitialise+0xa8>)
 8010a12:	6163      	str	r3, [r4, #20]
		xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8010a14:	61a5      	str	r5, [r4, #24]
		xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8010a16:	2600      	movs	r6, #0
 8010a18:	61e6      	str	r6, [r4, #28]
		xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8010a1a:	6226      	str	r6, [r4, #32]
		hal_eth_init_status = HAL_ETH_Init( &xETH );
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	f7f1 fd9f 	bl	8002560 <HAL_ETH_Init>
		__HAL_ETH_DMA_ENABLE_IT( &xETH , ETH_DMA_ALL_INTS );
 8010a22:	6821      	ldr	r1, [r4, #0]
 8010a24:	f241 021c 	movw	r2, #4124	; 0x101c
 8010a28:	5888      	ldr	r0, [r1, r2]
 8010a2a:	4b19      	ldr	r3, [pc, #100]	; (8010a90 <xNetworkInterfaceInitialise+0xac>)
 8010a2c:	4303      	orrs	r3, r0
 8010a2e:	508b      	str	r3, [r1, r2]
		HAL_ETH_DMATxDescListInit( &xETH, DMATxDscrTab, Tx_Buff[ 0 ], ETH_TXBUFNB );
 8010a30:	2302      	movs	r3, #2
 8010a32:	4a18      	ldr	r2, [pc, #96]	; (8010a94 <xNetworkInterfaceInitialise+0xb0>)
 8010a34:	4918      	ldr	r1, [pc, #96]	; (8010a98 <xNetworkInterfaceInitialise+0xb4>)
 8010a36:	4620      	mov	r0, r4
 8010a38:	f7f1 fd15 	bl	8002466 <HAL_ETH_DMATxDescListInit>
		HAL_ETH_DMARxDescListInit( &xETH, DMARxDscrTab, Rx_Buff[ 0 ], ETH_RXBUFNB );
 8010a3c:	2304      	movs	r3, #4
 8010a3e:	4a17      	ldr	r2, [pc, #92]	; (8010a9c <xNetworkInterfaceInitialise+0xb8>)
 8010a40:	4917      	ldr	r1, [pc, #92]	; (8010aa0 <xNetworkInterfaceInitialise+0xbc>)
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7f1 fd52 	bl	80024ec <HAL_ETH_DMARxDescListInit>
	( *(__IO uint32_t *)( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 8010a48:	4a16      	ldr	r2, [pc, #88]	; (8010aa4 <xNetworkInterfaceInitialise+0xc0>)
 8010a4a:	4b17      	ldr	r3, [pc, #92]	; (8010aa8 <xNetworkInterfaceInitialise+0xc4>)
 8010a4c:	601a      	str	r2, [r3, #0]
	( *(__IO uint32_t *) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 8010a4e:	4a17      	ldr	r2, [pc, #92]	; (8010aac <xNetworkInterfaceInitialise+0xc8>)
 8010a50:	3304      	adds	r3, #4
 8010a52:	601a      	str	r2, [r3, #0]
		prvEthernetUpdateConfig( pdTRUE );
 8010a54:	4628      	mov	r0, r5
 8010a56:	f7ff fe63 	bl	8010720 <prvEthernetUpdateConfig>
		xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 8010a5a:	4b08      	ldr	r3, [pc, #32]	; (8010a7c <xNetworkInterfaceInitialise+0x98>)
 8010a5c:	9301      	str	r3, [sp, #4]
 8010a5e:	2306      	movs	r3, #6
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4633      	mov	r3, r6
 8010a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a68:	4911      	ldr	r1, [pc, #68]	; (8010ab0 <xNetworkInterfaceInitialise+0xcc>)
 8010a6a:	4812      	ldr	r0, [pc, #72]	; (8010ab4 <xNetworkInterfaceInitialise+0xd0>)
 8010a6c:	f003 fb00 	bl	8014070 <xTaskCreate>
	return ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0;
 8010a70:	4b03      	ldr	r3, [pc, #12]	; (8010a80 <xNetworkInterfaceInitialise+0x9c>)
 8010a72:	6818      	ldr	r0, [r3, #0]
}
 8010a74:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010a78:	b002      	add	sp, #8
 8010a7a:	bd70      	pop	{r4, r5, r6, pc}
 8010a7c:	20000a6c 	.word	0x20000a6c
 8010a80:	20000a68 	.word	0x20000a68
 8010a84:	20000a70 	.word	0x20000a70
 8010a88:	40028000 	.word	0x40028000
 8010a8c:	08026d74 	.word	0x08026d74
 8010a90:	3801e7fb 	.word	0x3801e7fb
 8010a94:	20004248 	.word	0x20004248
 8010a98:	200029b8 	.word	0x200029b8
 8010a9c:	200029f8 	.word	0x200029f8
 8010aa0:	200041c8 	.word	0x200041c8
 8010aa4:	8000fc00 	.word	0x8000fc00
 8010aa8:	40028048 	.word	0x40028048
 8010aac:	005e0001 	.word	0x005e0001
 8010ab0:	0801a6d0 	.word	0x0801a6d0
 8010ab4:	08010891 	.word	0x08010891

08010ab8 <xNetworkInterfaceOutput>:
{
 8010ab8:	b570      	push	{r4, r5, r6, lr}
 8010aba:	4604      	mov	r4, r0
 8010abc:	460e      	mov	r6, r1
		pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 8010abe:	6983      	ldr	r3, [r0, #24]
		if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ipPROTOCOL_ICMP )
 8010ac0:	7dda      	ldrb	r2, [r3, #23]
 8010ac2:	2a01      	cmp	r2, #1
 8010ac4:	d01e      	beq.n	8010b04 <xNetworkInterfaceOutput+0x4c>
	if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 8010ac6:	4b17      	ldr	r3, [pc, #92]	; (8010b24 <xNetworkInterfaceOutput+0x6c>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f013 0f04 	tst.w	r3, #4
 8010ace:	d01f      	beq.n	8010b10 <xNetworkInterfaceOutput+0x58>
		pxDmaTxDesc = xETH.TxDesc;
 8010ad0:	4b15      	ldr	r3, [pc, #84]	; (8010b28 <xNetworkInterfaceOutput+0x70>)
 8010ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		if( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) != 0 )
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	db1e      	blt.n	8010b18 <xNetworkInterfaceOutput+0x60>
			ulTransmitSize = pxDescriptor->xDataLength;
 8010ada:	69e5      	ldr	r5, [r4, #28]
 8010adc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010ae0:	4295      	cmp	r5, r2
 8010ae2:	bf28      	it	cs
 8010ae4:	4615      	movcs	r5, r2
			memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
 8010ae6:	6898      	ldr	r0, [r3, #8]
 8010ae8:	462a      	mov	r2, r5
 8010aea:	69a1      	ldr	r1, [r4, #24]
 8010aec:	f006 fe49 	bl	8017782 <memcpy>
			HAL_ETH_TransmitFrame( &xETH, ulTransmitSize );
 8010af0:	4629      	mov	r1, r5
 8010af2:	480d      	ldr	r0, [pc, #52]	; (8010b28 <xNetworkInterfaceOutput+0x70>)
 8010af4:	f7f1 fe24 	bl	8002740 <HAL_ETH_TransmitFrame>
			iptraceNETWORK_INTERFACE_TRANSMIT();
 8010af8:	2100      	movs	r1, #0
 8010afa:	2001      	movs	r0, #1
 8010afc:	f005 fe2c 	bl	8016758 <vExampleDebugStatUpdate>
			xReturn = pdPASS;
 8010b00:	2501      	movs	r5, #1
 8010b02:	e006      	b.n	8010b12 <xNetworkInterfaceOutput+0x5a>
			pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t )0u;
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8010b0e:	e7da      	b.n	8010ac6 <xNetworkInterfaceOutput+0xe>
		xReturn = pdFAIL;
 8010b10:	2500      	movs	r5, #0
		if( bReleaseAfterSend != pdFALSE )
 8010b12:	b91e      	cbnz	r6, 8010b1c <xNetworkInterfaceOutput+0x64>
}
 8010b14:	4628      	mov	r0, r5
 8010b16:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdFAIL;
 8010b18:	2500      	movs	r5, #0
 8010b1a:	e7fa      	b.n	8010b12 <xNetworkInterfaceOutput+0x5a>
			vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f7ff fd09 	bl	8010534 <vReleaseNetworkBufferAndDescriptor>
	return xReturn;
 8010b22:	e7f7      	b.n	8010b14 <xNetworkInterfaceOutput+0x5c>
 8010b24:	20000a68 	.word	0x20000a68
 8010b28:	20000a70 	.word	0x20000a70

08010b2c <vMACBProbePhy>:
{
 8010b2c:	b530      	push	{r4, r5, lr}
 8010b2e:	b089      	sub	sp, #36	; 0x24
TickType_t xRemTime = 0;
 8010b30:	2500      	movs	r5, #0
 8010b32:	9500      	str	r5, [sp, #0]
	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_03_PHYSID2, &ulLower);
 8010b34:	4c3d      	ldr	r4, [pc, #244]	; (8010c2c <vMACBProbePhy+0x100>)
 8010b36:	aa05      	add	r2, sp, #20
 8010b38:	2103      	movs	r1, #3
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7f1 fef0 	bl	8002920 <HAL_ETH_ReadPHYRegister>
	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_02_PHYSID1, &ulUpper);
 8010b40:	aa04      	add	r2, sp, #16
 8010b42:	2102      	movs	r1, #2
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7f1 feeb 	bl	8002920 <HAL_ETH_ReadPHYRegister>
	ulMACPhyID = ( ( ulUpper << 16 ) & 0xFFFF0000 ) | ( ulLower & 0xFFF0 );
 8010b4a:	9905      	ldr	r1, [sp, #20]
 8010b4c:	f021 010f 	bic.w	r1, r1, #15
 8010b50:	0409      	lsls	r1, r1, #16
 8010b52:	0c09      	lsrs	r1, r1, #16
	FreeRTOS_printf( ( "PHY ID %X\n", ulMACPhyID ) );
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010b5a:	4835      	ldr	r0, [pc, #212]	; (8010c30 <vMACBProbePhy+0x104>)
 8010b5c:	f005 fef8 	bl	8016950 <lUDPLoggingPrintf>
	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_00_BMCR, &ulConfig);
 8010b60:	aa06      	add	r2, sp, #24
 8010b62:	4629      	mov	r1, r5
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7f1 fedb 	bl	8002920 <HAL_ETH_ReadPHYRegister>
	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulConfig | BMCR_RESET );
 8010b6a:	9a06      	ldr	r2, [sp, #24]
 8010b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b70:	4629      	mov	r1, r5
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7f1 ff20 	bl	80029b8 <HAL_ETH_WritePHYRegister>
	xRemTime = ( TickType_t ) pdMS_TO_TICKS( 1000UL );
 8010b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b7c:	9300      	str	r3, [sp, #0]
	vTaskSetTimeOutState( &xPhyTime );
 8010b7e:	a801      	add	r0, sp, #4
 8010b80:	f003 ffba 	bl	8014af8 <vTaskSetTimeOutState>
		HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_00_BMCR, &ulValue);
 8010b84:	4625      	mov	r5, r4
 8010b86:	2400      	movs	r4, #0
 8010b88:	aa03      	add	r2, sp, #12
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f7f1 fec7 	bl	8002920 <HAL_ETH_ReadPHYRegister>
		if( ( ulValue & BMCR_RESET ) == 0 )
 8010b92:	9b03      	ldr	r3, [sp, #12]
 8010b94:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010b98:	d009      	beq.n	8010bae <vMACBProbePhy+0x82>
		if( xTaskCheckForTimeOut( &xPhyTime, &xRemTime ) != pdFALSE )
 8010b9a:	4669      	mov	r1, sp
 8010b9c:	a801      	add	r0, sp, #4
 8010b9e:	f003 ffc1 	bl	8014b24 <xTaskCheckForTimeOut>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d0f0      	beq.n	8010b88 <vMACBProbePhy+0x5c>
			FreeRTOS_printf( ( "BMCR_RESET timed out\n" ) );
 8010ba6:	4823      	ldr	r0, [pc, #140]	; (8010c34 <vMACBProbePhy+0x108>)
 8010ba8:	f005 fed2 	bl	8016950 <lUDPLoggingPrintf>
			break;
 8010bac:	e002      	b.n	8010bb4 <vMACBProbePhy+0x88>
			FreeRTOS_printf( ( "BMCR_RESET ready\n" ) );
 8010bae:	4822      	ldr	r0, [pc, #136]	; (8010c38 <vMACBProbePhy+0x10c>)
 8010bb0:	f005 fece 	bl	8016950 <lUDPLoggingPrintf>
	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_00_BMCR, ulConfig & ~BMCR_RESET);
 8010bb4:	ad08      	add	r5, sp, #32
 8010bb6:	f855 2d08 	ldr.w	r2, [r5, #-8]!
 8010bba:	4c1c      	ldr	r4, [pc, #112]	; (8010c2c <vMACBProbePhy+0x100>)
 8010bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f7f1 fef8 	bl	80029b8 <HAL_ETH_WritePHYRegister>
	vTaskDelay( pdMS_TO_TICKS( 50ul ) );
 8010bc8:	2032      	movs	r0, #50	; 0x32
 8010bca:	f003 fdf3 	bl	80147b4 <vTaskDelay>
	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_04_ADVERTISE, ulAdvertise);
 8010bce:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010bd2:	2104      	movs	r1, #4
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f7f1 feef 	bl	80029b8 <HAL_ETH_WritePHYRegister>
	HAL_ETH_ReadPHYRegister(&xETH, PHY_REG_00_BMCR, &ulConfig);
 8010bda:	462a      	mov	r2, r5
 8010bdc:	2100      	movs	r1, #0
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7f1 fe9e 	bl	8002920 <HAL_ETH_ReadPHYRegister>
	ulConfig &= ~( BMCR_ANRESTART | BMCR_ANENABLE | BMCR_SPEED100 | BMCR_FULLDPLX );
 8010be4:	9b06      	ldr	r3, [sp, #24]
 8010be6:	f423 534c 	bic.w	r3, r3, #13056	; 0x3300
	ulConfig |= (BMCR_ANRESTART | BMCR_ANENABLE);
 8010bea:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8010bee:	9306      	str	r3, [sp, #24]
	HAL_ETH_ReadPHYRegister( &xETH, PHY_REG_19_PHYCR, &ulPhyControl );
 8010bf0:	aa07      	add	r2, sp, #28
 8010bf2:	2119      	movs	r1, #25
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f7f1 fe93 	bl	8002920 <HAL_ETH_ReadPHYRegister>
	ulPhyControl &= ~( PHYCR_MDIX_EN|PHYCR_MDIX_FORCE );
 8010bfa:	9a07      	ldr	r2, [sp, #28]
 8010bfc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
		ulPhyControl |= PHYCR_MDIX_EN;
 8010c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010c04:	9207      	str	r2, [sp, #28]
	HAL_ETH_WritePHYRegister( &xETH, PHY_REG_19_PHYCR, ulPhyControl );
 8010c06:	2119      	movs	r1, #25
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7f1 fed5 	bl	80029b8 <HAL_ETH_WritePHYRegister>
	FreeRTOS_printf( ( "+TCP: advertise: %lX config %lX\n", ulAdvertise, ulConfig ) );
 8010c0e:	9a06      	ldr	r2, [sp, #24]
 8010c10:	f240 11e1 	movw	r1, #481	; 0x1e1
 8010c14:	4809      	ldr	r0, [pc, #36]	; (8010c3c <vMACBProbePhy+0x110>)
 8010c16:	f005 fe9b 	bl	8016950 <lUDPLoggingPrintf>
	ulBCRvalue = ulConfig;
 8010c1a:	9a06      	ldr	r2, [sp, #24]
 8010c1c:	4b08      	ldr	r3, [pc, #32]	; (8010c40 <vMACBProbePhy+0x114>)
 8010c1e:	601a      	str	r2, [r3, #0]
	ulACRValue = ulAdvertise;
 8010c20:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010c24:	4b07      	ldr	r3, [pc, #28]	; (8010c44 <vMACBProbePhy+0x118>)
 8010c26:	601a      	str	r2, [r3, #0]
}
 8010c28:	b009      	add	sp, #36	; 0x24
 8010c2a:	bd30      	pop	{r4, r5, pc}
 8010c2c:	20000a70 	.word	0x20000a70
 8010c30:	0801a674 	.word	0x0801a674
 8010c34:	0801a694 	.word	0x0801a694
 8010c38:	0801a680 	.word	0x0801a680
 8010c3c:	0801a6ac 	.word	0x0801a6ac
 8010c40:	20000a60 	.word	0x20000a60
 8010c44:	20000a5c 	.word	0x20000a5c

08010c48 <xGetPhyLinkStatus>:
	if( ( ulPHYLinkStatus & BMSR_LINK_STATUS ) != 0 )
 8010c48:	4b02      	ldr	r3, [pc, #8]	; (8010c54 <xGetPhyLinkStatus+0xc>)
 8010c4a:	6818      	ldr	r0, [r3, #0]
}
 8010c4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	20000a68 	.word	0x20000a68

08010c58 <ETH_IRQHandler>:
	}
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8010c58:	b508      	push	{r3, lr}
	HAL_ETH_IRQHandler( &xETH );
 8010c5a:	4802      	ldr	r0, [pc, #8]	; (8010c64 <ETH_IRQHandler+0xc>)
 8010c5c:	f7f1 fe40 	bl	80028e0 <HAL_ETH_IRQHandler>
 8010c60:	bd08      	pop	{r3, pc}
 8010c62:	bf00      	nop
 8010c64:	20000a70 	.word	0x20000a70

08010c68 <FreeRTOS_CreateTCPServer>:
static char *strnew( const char *pcString );
/* Remove slashes at the end of a path. */
static void prvRemoveSlash( char *pcDir );

TCPServer_t *FreeRTOS_CreateTCPServer( const struct xSERVER_CONFIG *pxConfigs, BaseType_t xCount )
{
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	b08d      	sub	sp, #52	; 0x34
 8010c6e:	4605      	mov	r5, r0
 8010c70:	4688      	mov	r8, r1
TCPServer_t *pxServer;
SocketSet_t xSocketSet;

	/* Create a new server.
	xPort / xPortAlt : Make the service available on 1 or 2 public port numbers. */
	xSocketSet = FreeRTOS_CreateSocketSet();
 8010c72:	f7fc f843 	bl	800ccfc <FreeRTOS_CreateSocketSet>

	if( xSocketSet != NULL )
 8010c76:	9002      	str	r0, [sp, #8]
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f000 80a9 	beq.w	8010dd0 <FreeRTOS_CreateTCPServer+0x168>
 8010c7e:	4606      	mov	r6, r0
	{
	BaseType_t xSize;

		xSize = sizeof( *pxServer ) - sizeof( pxServer->xServers ) + xCount * sizeof( pxServer->xServers[ 0 ] );
 8010c80:	eb08 0448 	add.w	r4, r8, r8, lsl #1
 8010c84:	00a4      	lsls	r4, r4, #2
 8010c86:	f504 5489 	add.w	r4, r4, #4384	; 0x1120

		pxServer = ( TCPServer_t * ) pvPortMallocLarge( xSize );
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f002 fc3c 	bl	8013508 <pvPortMalloc>
		if( pxServer != NULL )
 8010c90:	9003      	str	r0, [sp, #12]
 8010c92:	2800      	cmp	r0, #0
 8010c94:	f000 8095 	beq.w	8010dc2 <FreeRTOS_CreateTCPServer+0x15a>
		{
		struct freertos_sockaddr xAddress;
		BaseType_t xNoTimeout = 0;
 8010c98:	2100      	movs	r1, #0
 8010c9a:	9105      	str	r1, [sp, #20]
		BaseType_t xIndex;

			memset( pxServer, '\0', xSize );
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	f006 fd94 	bl	80177cc <memset>
			pxServer->xServerCount = xCount;
 8010ca4:	f241 1318 	movw	r3, #4376	; 0x1118
 8010ca8:	f844 8003 	str.w	r8, [r4, r3]
			pxServer->xSocketSet = xSocketSet;
 8010cac:	4623      	mov	r3, r4
 8010cae:	601e      	str	r6, [r3, #0]

			for( xIndex = 0; xIndex < xCount; xIndex++ )
 8010cb0:	f1b8 0f00 	cmp.w	r8, #0
 8010cb4:	f340 8088 	ble.w	8010dc8 <FreeRTOS_CreateTCPServer+0x160>
 8010cb8:	f504 5689 	add.w	r6, r4, #4384	; 0x1120
 8010cbc:	2700      	movs	r7, #0
 8010cbe:	e017      	b.n	8010cf0 <FreeRTOS_CreateTCPServer+0x88>
							WinProperties_t xWinProps;

								memset( &xWinProps, '\0', sizeof( xWinProps ) );
								/* The parent socket itself won't get connected.  The properties below
								will be inherited by each new child socket. */
								xWinProps.lTxBufSize = ipconfigHTTP_TX_BUFSIZE;
 8010cc0:	f241 131c 	movw	r3, #4380	; 0x111c
 8010cc4:	9308      	str	r3, [sp, #32]
								xWinProps.lTxWinSize = ipconfigHTTP_TX_WINSIZE;
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	9309      	str	r3, [sp, #36]	; 0x24
								xWinProps.lRxBufSize = ipconfigHTTP_RX_BUFSIZE;
 8010cca:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8010cce:	930a      	str	r3, [sp, #40]	; 0x28
								xWinProps.lRxWinSize = ipconfigHTTP_RX_WINSIZE;
 8010cd0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c

								/* Set the window and buffer sizes. */
								FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProps,	sizeof( xWinProps ) );
 8010cd4:	2310      	movs	r3, #16
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	ab08      	add	r3, sp, #32
 8010cda:	220d      	movs	r2, #13
 8010cdc:	2100      	movs	r1, #0
 8010cde:	4620      	mov	r0, r4
 8010ce0:	f7fc ff42 	bl	800db68 <FreeRTOS_setsockopt>
 8010ce4:	e03d      	b.n	8010d62 <FreeRTOS_CreateTCPServer+0xfa>
			for( xIndex = 0; xIndex < xCount; xIndex++ )
 8010ce6:	3701      	adds	r7, #1
 8010ce8:	3510      	adds	r5, #16
 8010cea:	360c      	adds	r6, #12
 8010cec:	45b8      	cmp	r8, r7
 8010cee:	d06b      	beq.n	8010dc8 <FreeRTOS_CreateTCPServer+0x160>
 8010cf0:	46aa      	mov	sl, r5
			BaseType_t xPortNumber = pxConfigs[ xIndex ].xPortNumber;
 8010cf2:	f8d5 9004 	ldr.w	r9, [r5, #4]
				if( xPortNumber > 0 )
 8010cf6:	f1b9 0f00 	cmp.w	r9, #0
 8010cfa:	ddf4      	ble.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
					xSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8010cfc:	2206      	movs	r2, #6
 8010cfe:	2101      	movs	r1, #1
 8010d00:	2002      	movs	r0, #2
 8010d02:	f7fb ff63 	bl	800cbcc <FreeRTOS_socket>
 8010d06:	4604      	mov	r4, r0
					FreeRTOS_printf( ( "TCP socket on port %d\n", ( int )xPortNumber ) );
 8010d08:	4649      	mov	r1, r9
 8010d0a:	4833      	ldr	r0, [pc, #204]	; (8010dd8 <FreeRTOS_CreateTCPServer+0x170>)
 8010d0c:	f005 fe20 	bl	8016950 <lUDPLoggingPrintf>
					if( xSocket != FREERTOS_NO_SOCKET )
 8010d10:	2c00      	cmp	r4, #0
 8010d12:	d0e8      	beq.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
						xAddress.sin_addr = FreeRTOS_GetIPAddress(); // Single NIC, currently not used
 8010d14:	f7fb fea0 	bl	800ca58 <FreeRTOS_GetIPAddress>
 8010d18:	9007      	str	r0, [sp, #28]
						xAddress.sin_port = FreeRTOS_htons( xPortNumber );
 8010d1a:	ea4f 2329 	mov.w	r3, r9, asr #8
 8010d1e:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
 8010d22:	f8ad 901a 	strh.w	r9, [sp, #26]
						FreeRTOS_bind( xSocket, &xAddress, sizeof( xAddress ) );
 8010d26:	2208      	movs	r2, #8
 8010d28:	a906      	add	r1, sp, #24
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f7fc f913 	bl	800cf56 <FreeRTOS_bind>
						FreeRTOS_listen( xSocket, pxConfigs[ xIndex ].xBackLog );
 8010d30:	68a9      	ldr	r1, [r5, #8]
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7fc fd83 	bl	800d83e <FreeRTOS_listen>
						FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xNoTimeout, sizeof( BaseType_t ) );
 8010d38:	f04f 0904 	mov.w	r9, #4
 8010d3c:	f8cd 9000 	str.w	r9, [sp]
 8010d40:	ab05      	add	r3, sp, #20
 8010d42:	2200      	movs	r2, #0
 8010d44:	4611      	mov	r1, r2
 8010d46:	4620      	mov	r0, r4
 8010d48:	f7fc ff0e 	bl	800db68 <FreeRTOS_setsockopt>
						FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xNoTimeout, sizeof( BaseType_t ) );
 8010d4c:	f8cd 9000 	str.w	r9, [sp]
 8010d50:	ab05      	add	r3, sp, #20
 8010d52:	2201      	movs	r2, #1
 8010d54:	2100      	movs	r1, #0
 8010d56:	4620      	mov	r0, r4
 8010d58:	f7fc ff06 	bl	800db68 <FreeRTOS_setsockopt>
							if( pxConfigs[ xIndex ].eType == eSERVER_HTTP )
 8010d5c:	782b      	ldrb	r3, [r5, #0]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d0ae      	beq.n	8010cc0 <FreeRTOS_CreateTCPServer+0x58>
							}
						}
						#endif

						FreeRTOS_FD_SET( xSocket, xSocketSet, eSELECT_READ|eSELECT_EXCEPT );
 8010d62:	2205      	movs	r2, #5
 8010d64:	9902      	ldr	r1, [sp, #8]
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7fb ffe6 	bl	800cd38 <FreeRTOS_FD_SET>
 8010d6c:	46b1      	mov	r9, r6
						pxServer->xServers[ xIndex ].xSocket = xSocket;
 8010d6e:	60b4      	str	r4, [r6, #8]
						pxServer->xServers[ xIndex ].eType = pxConfigs[ xIndex ].eType;
 8010d70:	f89a 3000 	ldrb.w	r3, [sl]
 8010d74:	7033      	strb	r3, [r6, #0]
						pxServer->xServers[ xIndex ].pcRootDir = strnew( pxConfigs[ xIndex ].pcRootDir );
 8010d76:	f8da a00c 	ldr.w	sl, [sl, #12]
static char *strnew( const char *pcString )
{
BaseType_t xLength;
char *pxBuffer;

	xLength = strlen( pcString ) + 1;
 8010d7a:	4650      	mov	r0, sl
 8010d7c:	f7ef fa32 	bl	80001e4 <strlen>
 8010d80:	f100 0b01 	add.w	fp, r0, #1
	pxBuffer = ( char * ) pvPortMalloc( xLength );
 8010d84:	4658      	mov	r0, fp
 8010d86:	f002 fbbf 	bl	8013508 <pvPortMalloc>
	if( pxBuffer != NULL )
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	b118      	cbz	r0, 8010d96 <FreeRTOS_CreateTCPServer+0x12e>
	{
		memcpy( pxBuffer, pcString, xLength );
 8010d8e:	465a      	mov	r2, fp
 8010d90:	4651      	mov	r1, sl
 8010d92:	f006 fcf6 	bl	8017782 <memcpy>
						pxServer->xServers[ xIndex ].pcRootDir = strnew( pxConfigs[ xIndex ].pcRootDir );
 8010d96:	f8c9 4004 	str.w	r4, [r9, #4]
}
/*-----------------------------------------------------------*/

static void prvRemoveSlash( char *pcDir )
{
BaseType_t xLength = strlen( pcDir );
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f7ef fa22 	bl	80001e4 <strlen>

	while( ( xLength > 0 ) && ( pcDir[ xLength - 1 ] == '/' ) )
 8010da0:	2800      	cmp	r0, #0
 8010da2:	dda0      	ble.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
 8010da4:	3801      	subs	r0, #1
 8010da6:	1823      	adds	r3, r4, r0
 8010da8:	5c22      	ldrb	r2, [r4, r0]
 8010daa:	2a2f      	cmp	r2, #47	; 0x2f
 8010dac:	d19b      	bne.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
 8010dae:	4620      	mov	r0, r4
	{
		pcDir[ --xLength ] = '\0';
 8010db0:	2100      	movs	r1, #0
 8010db2:	7019      	strb	r1, [r3, #0]
	while( ( xLength > 0 ) && ( pcDir[ xLength - 1 ] == '/' ) )
 8010db4:	4298      	cmp	r0, r3
 8010db6:	d096      	beq.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
 8010db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dbc:	2a2f      	cmp	r2, #47	; 0x2f
 8010dbe:	d0f8      	beq.n	8010db2 <FreeRTOS_CreateTCPServer+0x14a>
 8010dc0:	e791      	b.n	8010ce6 <FreeRTOS_CreateTCPServer+0x7e>
			FreeRTOS_DeleteSocketSet( xSocketSet );
 8010dc2:	9802      	ldr	r0, [sp, #8]
 8010dc4:	f7fb ffaf 	bl	800cd26 <FreeRTOS_DeleteSocketSet>
}
 8010dc8:	9803      	ldr	r0, [sp, #12]
 8010dca:	b00d      	add	sp, #52	; 0x34
 8010dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxServer = NULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	9303      	str	r3, [sp, #12]
	return pxServer;
 8010dd4:	e7f8      	b.n	8010dc8 <FreeRTOS_CreateTCPServer+0x160>
 8010dd6:	bf00      	nop
 8010dd8:	0801a6d8 	.word	0x0801a6d8

08010ddc <FreeRTOS_TCPServerWork>:
{
 8010ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de0:	b087      	sub	sp, #28
 8010de2:	4604      	mov	r4, r0
	xRc = FreeRTOS_select( pxServer->xSocketSet, xBlockingTime );
 8010de4:	6800      	ldr	r0, [r0, #0]
 8010de6:	f7fb ffed 	bl	800cdc4 <FreeRTOS_select>
	if( xRc != 0 )
 8010dea:	2800      	cmp	r0, #0
 8010dec:	d066      	beq.n	8010ebc <FreeRTOS_TCPServerWork+0xe0>
		for( xIndex = 0; xIndex < pxServer->xServerCount; xIndex++ )
 8010dee:	f241 1318 	movw	r3, #4376	; 0x1118
 8010df2:	58e3      	ldr	r3, [r4, r3]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	dd61      	ble.n	8010ebc <FreeRTOS_TCPServerWork+0xe0>
 8010df8:	f504 5589 	add.w	r5, r4, #4384	; 0x1120
 8010dfc:	2600      	movs	r6, #0
 8010dfe:	e039      	b.n	8010e74 <FreeRTOS_TCPServerWork+0x98>
			pcType = "FTP";
 8010e00:	4b3b      	ldr	r3, [pc, #236]	; (8010ef0 <FreeRTOS_TCPServerWork+0x114>)
 8010e02:	9300      	str	r3, [sp, #0]
			fDeleteFunc = vFTPClientDelete;
 8010e04:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8010f00 <FreeRTOS_TCPServerWork+0x124>
			fWorkFunc = xFTPClientWork;
 8010e08:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8010f04 <FreeRTOS_TCPServerWork+0x128>
			xSize = sizeof( FTPClient_t );
 8010e0c:	f240 4304 	movw	r3, #1028	; 0x404
 8010e10:	9301      	str	r3, [sp, #4]
		pxClient = ( TCPClient_t* ) pvPortMallocLarge( xSize );
 8010e12:	9801      	ldr	r0, [sp, #4]
 8010e14:	f002 fb78 	bl	8013508 <pvPortMalloc>
	if( pxClient != NULL )
 8010e18:	4681      	mov	r9, r0
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d03f      	beq.n	8010e9e <FreeRTOS_TCPServerWork+0xc2>
		memset( pxClient, '\0', xSize );
 8010e1e:	9a01      	ldr	r2, [sp, #4]
 8010e20:	2100      	movs	r1, #0
 8010e22:	f006 fcd3 	bl	80177cc <memset>
		pxClient->eType = pxServer->xServers[ xIndex ].eType;
 8010e26:	f898 3000 	ldrb.w	r3, [r8]
 8010e2a:	f889 3000 	strb.w	r3, [r9]
		pxClient->pcRootDir = pxServer->xServers[ xIndex ].pcRootDir;
 8010e2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e32:	f8c9 300c 	str.w	r3, [r9, #12]
		pxClient->pxParent = pxServer;
 8010e36:	f8c9 4004 	str.w	r4, [r9, #4]
		pxClient->xSocket = xNexSocket;
 8010e3a:	f8c9 7008 	str.w	r7, [r9, #8]
		pxClient->pxNextClient = pxServer->pxClients;
 8010e3e:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e42:	58e2      	ldr	r2, [r4, r3]
 8010e44:	f8c9 2018 	str.w	r2, [r9, #24]
		pxClient->fWorkFunction = fWorkFunc;
 8010e48:	f8c9 b010 	str.w	fp, [r9, #16]
		pxClient->fDeleteFunction = fDeleteFunc;
 8010e4c:	f8c9 a014 	str.w	sl, [r9, #20]
		pxServer->pxClients = pxClient;
 8010e50:	f844 9003 	str.w	r9, [r4, r3]
		FreeRTOS_FD_SET( xNexSocket, pxServer->xSocketSet, eSELECT_READ|eSELECT_EXCEPT );
 8010e54:	2205      	movs	r2, #5
 8010e56:	6821      	ldr	r1, [r4, #0]
 8010e58:	4638      	mov	r0, r7
 8010e5a:	f7fb ff6d 	bl	800cd38 <FreeRTOS_FD_SET>
	FreeRTOS_printf( ( "TPC-server: new %s client\n", pcType ) );
 8010e5e:	9900      	ldr	r1, [sp, #0]
 8010e60:	4824      	ldr	r0, [pc, #144]	; (8010ef4 <FreeRTOS_TCPServerWork+0x118>)
 8010e62:	f005 fd75 	bl	8016950 <lUDPLoggingPrintf>
		for( xIndex = 0; xIndex < pxServer->xServerCount; xIndex++ )
 8010e66:	3601      	adds	r6, #1
 8010e68:	350c      	adds	r5, #12
 8010e6a:	f241 1318 	movw	r3, #4376	; 0x1118
 8010e6e:	58e3      	ldr	r3, [r4, r3]
 8010e70:	42b3      	cmp	r3, r6
 8010e72:	dd23      	ble.n	8010ebc <FreeRTOS_TCPServerWork+0xe0>
 8010e74:	46a8      	mov	r8, r5
			if( pxServer->xServers[ xIndex ].xSocket == FREERTOS_NO_SOCKET )
 8010e76:	68a8      	ldr	r0, [r5, #8]
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d0f4      	beq.n	8010e66 <FreeRTOS_TCPServerWork+0x8a>
			xSocketLength = sizeof( xAddress );
 8010e7c:	aa06      	add	r2, sp, #24
 8010e7e:	2308      	movs	r3, #8
 8010e80:	f842 3d0c 	str.w	r3, [r2, #-12]!
			xNexSocket = FreeRTOS_accept( pxServer->xServers[ xIndex ].xSocket, &xAddress, &xSocketLength);
 8010e84:	a904      	add	r1, sp, #16
 8010e86:	f7fc fa9f 	bl	800d3c8 <FreeRTOS_accept>
 8010e8a:	4607      	mov	r7, r0
			if( ( xNexSocket != FREERTOS_NO_SOCKET ) && ( xNexSocket != FREERTOS_INVALID_SOCKET ) )
 8010e8c:	1e43      	subs	r3, r0, #1
 8010e8e:	f113 0f03 	cmn.w	r3, #3
 8010e92:	d8e8      	bhi.n	8010e66 <FreeRTOS_TCPServerWork+0x8a>
		if( pxServer->xServers[ xIndex ].eType == eSERVER_HTTP )
 8010e94:	782b      	ldrb	r3, [r5, #0]
 8010e96:	2b01      	cmp	r3, #1
 8010e98:	d007      	beq.n	8010eaa <FreeRTOS_TCPServerWork+0xce>
		if( pxServer->xServers[ xIndex ].eType == eSERVER_FTP )
 8010e9a:	2b02      	cmp	r3, #2
 8010e9c:	d0b0      	beq.n	8010e00 <FreeRTOS_TCPServerWork+0x24>
		FreeRTOS_closesocket( xNexSocket );
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	f7fc f994 	bl	800d1cc <FreeRTOS_closesocket>
		pcType = "closed";
 8010ea4:	4b14      	ldr	r3, [pc, #80]	; (8010ef8 <FreeRTOS_TCPServerWork+0x11c>)
 8010ea6:	9300      	str	r3, [sp, #0]
 8010ea8:	e7d9      	b.n	8010e5e <FreeRTOS_TCPServerWork+0x82>
			pcType = "HTTP";
 8010eaa:	4b14      	ldr	r3, [pc, #80]	; (8010efc <FreeRTOS_TCPServerWork+0x120>)
 8010eac:	9300      	str	r3, [sp, #0]
			fDeleteFunc = vHTTPClientDelete;
 8010eae:	f8df a058 	ldr.w	sl, [pc, #88]	; 8010f08 <FreeRTOS_TCPServerWork+0x12c>
			fWorkFunc = xHTTPClientWork;
 8010eb2:	f8df b058 	ldr.w	fp, [pc, #88]	; 8010f0c <FreeRTOS_TCPServerWork+0x130>
			xSize = sizeof( HTTPClient_t );
 8010eb6:	23f4      	movs	r3, #244	; 0xf4
 8010eb8:	9301      	str	r3, [sp, #4]
 8010eba:	e7aa      	b.n	8010e12 <FreeRTOS_TCPServerWork+0x36>
	ppxClient = &pxServer->pxClients;
 8010ebc:	f504 5488 	add.w	r4, r4, #4352	; 0x1100
 8010ec0:	341c      	adds	r4, #28
	while( ( * ppxClient ) != NULL )
 8010ec2:	e007      	b.n	8010ed4 <FreeRTOS_TCPServerWork+0xf8>
			*ppxClient = pxThis->pxNextClient;
 8010ec4:	69ab      	ldr	r3, [r5, #24]
 8010ec6:	6023      	str	r3, [r4, #0]
			pxThis->fDeleteFunction( pxThis );
 8010ec8:	696b      	ldr	r3, [r5, #20]
 8010eca:	4628      	mov	r0, r5
 8010ecc:	4798      	blx	r3
			vPortFreeLarge( pxThis );
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f002 fb80 	bl	80135d4 <vPortFree>
	while( ( * ppxClient ) != NULL )
 8010ed4:	6825      	ldr	r5, [r4, #0]
 8010ed6:	b13d      	cbz	r5, 8010ee8 <FreeRTOS_TCPServerWork+0x10c>
		xRc = pxThis->fWorkFunction( pxThis );
 8010ed8:	692b      	ldr	r3, [r5, #16]
 8010eda:	4628      	mov	r0, r5
 8010edc:	4798      	blx	r3
		if (xRc < 0 )
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	dbf0      	blt.n	8010ec4 <FreeRTOS_TCPServerWork+0xe8>
			ppxClient = &( pxThis->pxNextClient );
 8010ee2:	f105 0418 	add.w	r4, r5, #24
 8010ee6:	e7f5      	b.n	8010ed4 <FreeRTOS_TCPServerWork+0xf8>
}
 8010ee8:	b007      	add	sp, #28
 8010eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eee:	bf00      	nop
 8010ef0:	0801a6f8 	.word	0x0801a6f8
 8010ef4:	0801a704 	.word	0x0801a704
 8010ef8:	0801a6fc 	.word	0x0801a6fc
 8010efc:	0801a6f0 	.word	0x0801a6f0
 8010f00:	08011515 	.word	0x08011515
 8010f04:	0801187d 	.word	0x0801187d
 8010f08:	08012cc9 	.word	0x08012cc9
 8010f0c:	08012ced 	.word	0x08012ced

08010f10 <FreeRTOS_TCPServerSignalFromISR>:
#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Same as above: this function may be called from an ISR,
	for instance a GPIO interrupt. */
	BaseType_t FreeRTOS_TCPServerSignalFromISR( TCPServer_t *pxServer, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010f10:	b538      	push	{r3, r4, r5, lr}
	BaseType_t xIndex;
	BaseType_t xResult = pdFALSE;
		for( xIndex = 0; xIndex < pxServer->xServerCount; xIndex++ )
 8010f12:	f241 1318 	movw	r3, #4376	; 0x1118
 8010f16:	58c5      	ldr	r5, [r0, r3]
 8010f18:	2d00      	cmp	r5, #0
 8010f1a:	dd15      	ble.n	8010f48 <FreeRTOS_TCPServerSignalFromISR+0x38>
		{
			if( pxServer->xServers[ xIndex ].xSocket != FREERTOS_NO_SOCKET )
 8010f1c:	f241 1328 	movw	r3, #4392	; 0x1128
 8010f20:	58c4      	ldr	r4, [r0, r3]
 8010f22:	b954      	cbnz	r4, 8010f3a <FreeRTOS_TCPServerSignalFromISR+0x2a>
 8010f24:	f500 5289 	add.w	r2, r0, #4384	; 0x1120
 8010f28:	3214      	adds	r2, #20
 8010f2a:	2300      	movs	r3, #0
		for( xIndex = 0; xIndex < pxServer->xServerCount; xIndex++ )
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	42ab      	cmp	r3, r5
 8010f30:	d008      	beq.n	8010f44 <FreeRTOS_TCPServerSignalFromISR+0x34>
			if( pxServer->xServers[ xIndex ].xSocket != FREERTOS_NO_SOCKET )
 8010f32:	f852 4b0c 	ldr.w	r4, [r2], #12
 8010f36:	2c00      	cmp	r4, #0
 8010f38:	d0f8      	beq.n	8010f2c <FreeRTOS_TCPServerSignalFromISR+0x1c>
			{
				FreeRTOS_SignalSocketFromISR( pxServer->xServers[ xIndex ].xSocket, pxHigherPriorityTaskWoken );
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7fd f976 	bl	800e22c <FreeRTOS_SignalSocketFromISR>
				xResult = pdTRUE;
 8010f40:	2001      	movs	r0, #1
				break;
 8010f42:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xResult = pdFALSE;
 8010f44:	2000      	movs	r0, #0
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	2000      	movs	r0, #0
			}
		}

		return xResult;
	}
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}

08010f4c <prvSendReply>:
	}
	return xResult;
}

static BaseType_t prvSendReply( Socket_t xSocket, const char *pcBuffer, BaseType_t xLength )
{
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	4605      	mov	r5, r0
 8010f50:	460c      	mov	r4, r1
BaseType_t xResult;

	if( xLength == 0 )
 8010f52:	4610      	mov	r0, r2
 8010f54:	b912      	cbnz	r2, 8010f5c <prvSendReply+0x10>
	{
		xLength = strlen( pcBuffer );
 8010f56:	4608      	mov	r0, r1
 8010f58:	f7ef f944 	bl	80001e4 <strlen>
	}
	xResult = FreeRTOS_send( xSocket, ( const void * )pcBuffer, ( size_t ) xLength, 0 );
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4602      	mov	r2, r0
 8010f60:	4621      	mov	r1, r4
 8010f62:	4628      	mov	r0, r5
 8010f64:	f7fc fb90 	bl	800d688 <FreeRTOS_send>
 8010f68:	4606      	mov	r6, r0
	if( cChar >= '0' && cChar <= '9' )
 8010f6a:	7823      	ldrb	r3, [r4, #0]
 8010f6c:	3b30      	subs	r3, #48	; 0x30
	if( IsDigit( ( int ) pcBuffer[ 0 ] ) &&
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	2b09      	cmp	r3, #9
 8010f72:	d829      	bhi.n	8010fc8 <prvSendReply+0x7c>
	if( cChar >= '0' && cChar <= '9' )
 8010f74:	7863      	ldrb	r3, [r4, #1]
 8010f76:	3b30      	subs	r3, #48	; 0x30
	if( IsDigit( ( int ) pcBuffer[ 0 ] ) &&
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	2b09      	cmp	r3, #9
 8010f7c:	d824      	bhi.n	8010fc8 <prvSendReply+0x7c>
	if( cChar >= '0' && cChar <= '9' )
 8010f7e:	78a3      	ldrb	r3, [r4, #2]
 8010f80:	3b30      	subs	r3, #48	; 0x30
		IsDigit( ( int ) pcBuffer[ 1 ] ) &&
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	2b09      	cmp	r3, #9
 8010f86:	d81f      	bhi.n	8010fc8 <prvSendReply+0x7c>
	if( cChar >= '0' && cChar <= '9' )
 8010f88:	78e3      	ldrb	r3, [r4, #3]
 8010f8a:	3b30      	subs	r3, #48	; 0x30
		IsDigit( ( int ) pcBuffer[ 2 ] ) &&
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b09      	cmp	r3, #9
 8010f90:	d81a      	bhi.n	8010fc8 <prvSendReply+0x7c>
		IsDigit( ( int ) pcBuffer[ 3 ] ) )
	{
		const char *last = pcBuffer + strlen( pcBuffer );
 8010f92:	4620      	mov	r0, r4
 8010f94:	f7ef f926 	bl	80001e4 <strlen>
 8010f98:	4420      	add	r0, r4
		int iLength;
		while( ( last > pcBuffer ) && ( ( last[ -1 ] == ftpASCII_CR ) || ( last[ -1 ] == ftpASCII_LF ) ) )
 8010f9a:	4284      	cmp	r4, r0
 8010f9c:	d20e      	bcs.n	8010fbc <prvSendReply+0x70>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	e001      	b.n	8010fa8 <prvSendReply+0x5c>
 8010fa4:	4299      	cmp	r1, r3
 8010fa6:	d008      	beq.n	8010fba <prvSendReply+0x6e>
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3b01      	subs	r3, #1
 8010fac:	461a      	mov	r2, r3
 8010fae:	781d      	ldrb	r5, [r3, #0]
 8010fb0:	2d0d      	cmp	r5, #13
 8010fb2:	d0f7      	beq.n	8010fa4 <prvSendReply+0x58>
 8010fb4:	2d0a      	cmp	r5, #10
 8010fb6:	d0f5      	beq.n	8010fa4 <prvSendReply+0x58>
 8010fb8:	e000      	b.n	8010fbc <prvSendReply+0x70>
		{
			last--;
 8010fba:	4610      	mov	r0, r2
		}
		iLength = ( int )( last - pcBuffer );
 8010fbc:	1b01      	subs	r1, r0, r4
		FF_PRINTF( "   %-*.*s", iLength, iLength, pcBuffer );
 8010fbe:	4623      	mov	r3, r4
 8010fc0:	460a      	mov	r2, r1
 8010fc2:	4802      	ldr	r0, [pc, #8]	; (8010fcc <prvSendReply+0x80>)
 8010fc4:	f005 fcc4 	bl	8016950 <lUDPLoggingPrintf>
	}
	return xResult;
}
 8010fc8:	4630      	mov	r0, r6
 8010fca:	bd70      	pop	{r4, r5, r6, pc}
 8010fcc:	0801aa44 	.word	0x0801aa44

08010fd0 <prvTransferStart>:
{
 8010fd0:	b500      	push	{lr}
 8010fd2:	b083      	sub	sp, #12
	if( pxClient->bits1.bIsListen != pdFALSE_UNSIGNED )
 8010fd4:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
 8010fd8:	f013 0f01 	tst.w	r3, #1
 8010fdc:	d11a      	bne.n	8011014 <prvTransferStart+0x44>
		xAddress.sin_addr = FreeRTOS_htonl( pxClient->ulClientIP );
 8010fde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fe0:	0e1a      	lsrs	r2, r3, #24
 8010fe2:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8010fe6:	0219      	lsls	r1, r3, #8
 8010fe8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8010fec:	430a      	orrs	r2, r1
 8010fee:	0a1b      	lsrs	r3, r3, #8
 8010ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	9301      	str	r3, [sp, #4]
		xAddress.sin_port = FreeRTOS_htons( pxClient->usClientPort );
 8010ff8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8010ffa:	0a13      	lsrs	r3, r2, #8
 8010ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011000:	f8ad 3002 	strh.w	r3, [sp, #2]
		xResult = FreeRTOS_connect( pxClient->xTransferSocket, &xAddress, sizeof( xAddress ) );
 8011004:	2208      	movs	r2, #8
 8011006:	4669      	mov	r1, sp
 8011008:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801100a:	f7fc fefb 	bl	800de04 <FreeRTOS_connect>
}
 801100e:	b003      	add	sp, #12
 8011010:	f85d fb04 	ldr.w	pc, [sp], #4
		xResult = FreeRTOS_listen( pxClient->xTransferSocket, 1 );
 8011014:	2101      	movs	r1, #1
 8011016:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011018:	f7fc fc11 	bl	800d83e <FreeRTOS_listen>
 801101c:	e7f7      	b.n	801100e <prvTransferStart+0x3e>

0801101e <prvTransferCloseFile>:
{
 801101e:	b510      	push	{r4, lr}
 8011020:	4604      	mov	r4, r0
	if( pxClient->pxWriteHandle != NULL )
 8011022:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8011026:	b120      	cbz	r0, 8011032 <prvTransferCloseFile+0x14>
		ff_fclose( pxClient->pxWriteHandle );
 8011028:	f7f7 ff8e 	bl	8008f48 <ff_fclose>
		pxClient->pxWriteHandle = NULL;
 801102c:	2300      	movs	r3, #0
 801102e:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
	if( pxClient->pxReadHandle != NULL )
 8011032:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 8011036:	b120      	cbz	r0, 8011042 <prvTransferCloseFile+0x24>
		ff_fclose( pxClient->pxReadHandle );
 8011038:	f7f7 ff86 	bl	8008f48 <ff_fclose>
		pxClient->pxReadHandle = NULL;
 801103c:	2300      	movs	r3, #0
 801103e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
	pxClient->ulRecvBytes = 0ul;
 8011042:	2300      	movs	r3, #0
 8011044:	6223      	str	r3, [r4, #32]
	pxClient->xStartTime = 0ul;
 8011046:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011048:	bd10      	pop	{r4, pc}

0801104a <prvStoreFileWork>:
	{
 801104a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	4604      	mov	r4, r0
			xRc = FreeRTOS_recv( pxClient->xTransferSocket, ( void * ) &pcBuffer,
 8011052:	f04f 0811 	mov.w	r8, #17
 8011056:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 801105a:	4643      	mov	r3, r8
 801105c:	463a      	mov	r2, r7
 801105e:	a901      	add	r1, sp, #4
 8011060:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011062:	f7fc fa47 	bl	800d4f4 <FreeRTOS_recv>
			if( xRc <= 0 )
 8011066:	1e05      	subs	r5, r0, #0
 8011068:	dd1a      	ble.n	80110a0 <prvStoreFileWork+0x56>
			pxClient->ulRecvBytes += xRc;
 801106a:	6a23      	ldr	r3, [r4, #32]
 801106c:	442b      	add	r3, r5
 801106e:	6223      	str	r3, [r4, #32]
			xWritten = ff_fwrite( pcBuffer, 1, xRc, pxClient->pxWriteHandle );
 8011070:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8011074:	462a      	mov	r2, r5
 8011076:	2101      	movs	r1, #1
 8011078:	9801      	ldr	r0, [sp, #4]
 801107a:	f7f7 ffa3 	bl	8008fc4 <ff_fwrite>
 801107e:	4606      	mov	r6, r0
			FreeRTOS_recv( pxClient->xTransferSocket, ( void * ) NULL, xRc, 0 );
 8011080:	2300      	movs	r3, #0
 8011082:	462a      	mov	r2, r5
 8011084:	4619      	mov	r1, r3
 8011086:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011088:	f7fc fa34 	bl	800d4f4 <FreeRTOS_recv>
			if( xWritten != xRc )
 801108c:	42b5      	cmp	r5, r6
 801108e:	d0e4      	beq.n	801105a <prvStoreFileWork+0x10>
				pxClient->bits1.bHadError = pdTRUE_UNSIGNED;
 8011090:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011094:	f043 0310 	orr.w	r3, r3, #16
 8011098:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
				xRc = -1;
 801109c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	}
 80110a0:	4628      	mov	r0, r5
 80110a2:	b002      	add	sp, #8
 80110a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110a8 <prvTransferCloseSocket>:
{
 80110a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110aa:	b08b      	sub	sp, #44	; 0x2c
 80110ac:	4604      	mov	r4, r0
	if( pxClient->xTransferSocket != FREERTOS_NO_SOCKET )
 80110ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80110b0:	b1e8      	cbz	r0, 80110ee <prvTransferCloseSocket+0x46>
		BaseType_t xRxSize = FreeRTOS_rx_size( pxClient->xTransferSocket );
 80110b2:	f7fc ff32 	bl	800df1a <FreeRTOS_rx_size>
		if( xRxSize > 0 )
 80110b6:	1e06      	subs	r6, r0, #0
 80110b8:	dd19      	ble.n	80110ee <prvTransferCloseSocket+0x46>
			prvStoreFileWork( pxClient );
 80110ba:	4620      	mov	r0, r4
 80110bc:	f7ff ffc5 	bl	801104a <prvStoreFileWork>
			xStatus = FreeRTOS_connstatus( pxClient->xTransferSocket );
 80110c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80110c2:	f7fc ff21 	bl	800df08 <FreeRTOS_connstatus>
 80110c6:	4607      	mov	r7, r0
			xRxSize2 = FreeRTOS_rx_size( pxClient->xTransferSocket );
 80110c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80110ca:	f7fc ff26 	bl	800df1a <FreeRTOS_rx_size>
 80110ce:	4605      	mov	r5, r0
			FreeRTOS_printf( ( "FTP: WARNING: %s: RX size = %ld -> %ld (%s)\n",
 80110d0:	4638      	mov	r0, r7
 80110d2:	f7fe fcf1 	bl	800fab8 <FreeRTOS_GetTCPStateName>
 80110d6:	f204 2339 	addw	r3, r4, #569	; 0x239
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	462b      	mov	r3, r5
 80110de:	4632      	mov	r2, r6
 80110e0:	4601      	mov	r1, r0
 80110e2:	4868      	ldr	r0, [pc, #416]	; (8011284 <prvTransferCloseSocket+0x1dc>)
 80110e4:	f005 fc34 	bl	8016950 <lUDPLoggingPrintf>
			if( xRxSize2 > 1 )
 80110e8:	2d01      	cmp	r5, #1
 80110ea:	f300 80c1 	bgt.w	8011270 <prvTransferCloseSocket+0x1c8>
	if( ( pxClient->pxWriteHandle != NULL ) || ( pxClient->pxReadHandle != NULL ) )
 80110ee:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 80110f2:	b343      	cbz	r3, 8011146 <prvTransferCloseSocket+0x9e>
		if( pxClient->bits1.bHadError == pdFALSE_UNSIGNED )
 80110f4:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80110f8:	f013 0f10 	tst.w	r3, #16
			xLength = snprintf( pxClient->pcClientAck, sizeof( pxClient->pcClientAck ),
 80110fc:	6a23      	ldr	r3, [r4, #32]
 80110fe:	bf0c      	ite	eq
 8011100:	4a61      	ldreq	r2, [pc, #388]	; (8011288 <prvTransferCloseSocket+0x1e0>)
			xLength = snprintf( pxClient->pcClientAck, sizeof( pxClient->pcClientAck ),
 8011102:	4a62      	ldrne	r2, [pc, #392]	; (801128c <prvTransferCloseSocket+0x1e4>)
 8011104:	2180      	movs	r1, #128	; 0x80
 8011106:	f204 307a 	addw	r0, r4, #890	; 0x37a
 801110a:	f005 ff66 	bl	8016fda <snprintf>
 801110e:	4602      	mov	r2, r0
		prvSendReply( pxClient->xSocket, pxClient->pcClientAck, xLength );
 8011110:	f204 317a 	addw	r1, r4, #890	; 0x37a
 8011114:	68a0      	ldr	r0, [r4, #8]
 8011116:	f7ff ff19 	bl	8010f4c <prvSendReply>
			xDelta = xTaskGetTickCount( ) - pxClient->xStartTime;
 801111a:	f003 f9f9 	bl	8014510 <xTaskGetTickCount>
 801111e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			ulAverage = ulGetAverage( pxClient->ulRecvBytes, xDelta );
 8011120:	6a25      	ldr	r5, [r4, #32]
		if( xDeltaMs == 0ul )
 8011122:	1ac0      	subs	r0, r0, r3
 8011124:	d073      	beq.n	801120e <prvTransferCloseSocket+0x166>
		else if( ulAmount >= ( ~0ul / 10ul ) )
 8011126:	4b5a      	ldr	r3, [pc, #360]	; (8011290 <prvTransferCloseSocket+0x1e8>)
 8011128:	429d      	cmp	r5, r3
 801112a:	d811      	bhi.n	8011150 <prvTransferCloseSocket+0xa8>
		else if( ulAmount >= ( ~0ul / 100ul ) )
 801112c:	4b59      	ldr	r3, [pc, #356]	; (8011294 <prvTransferCloseSocket+0x1ec>)
 801112e:	429d      	cmp	r5, r3
 8011130:	d83a      	bhi.n	80111a8 <prvTransferCloseSocket+0x100>
		else if( ulAmount >= ( ~0ul / 1000ul ) )
 8011132:	4b59      	ldr	r3, [pc, #356]	; (8011298 <prvTransferCloseSocket+0x1f0>)
 8011134:	429d      	cmp	r5, r3
 8011136:	d841      	bhi.n	80111bc <prvTransferCloseSocket+0x114>
			ulAverage = ( ( ulAmount * 1000ul ) / xDeltaMs );
 8011138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801113c:	fb03 f305 	mul.w	r3, r3, r5
 8011140:	fbb3 f0f0 	udiv	r0, r3, r0
 8011144:	e00a      	b.n	801115c <prvTransferCloseSocket+0xb4>
	if( ( pxClient->pxWriteHandle != NULL ) || ( pxClient->pxReadHandle != NULL ) )
 8011146:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 801114a:	2b00      	cmp	r3, #0
 801114c:	d1d2      	bne.n	80110f4 <prvTransferCloseSocket+0x4c>
 801114e:	e072      	b.n	8011236 <prvTransferCloseSocket+0x18e>
			ulAverage = ( ulAmount / ( xDeltaMs / 1000ul ) );
 8011150:	4b52      	ldr	r3, [pc, #328]	; (801129c <prvTransferCloseSocket+0x1f4>)
 8011152:	fba3 3000 	umull	r3, r0, r3, r0
 8011156:	0980      	lsrs	r0, r0, #6
 8011158:	fbb5 f0f0 	udiv	r0, r5, r0
			FreeRTOS_printf( ("FTP: %s: '%s' %lu Bytes (%s/sec)\n",
 801115c:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 8011160:	4b4f      	ldr	r3, [pc, #316]	; (80112a0 <prvTransferCloseSocket+0x1f8>)
 8011162:	4e50      	ldr	r6, [pc, #320]	; (80112a4 <prvTransferCloseSocket+0x1fc>)
 8011164:	2a00      	cmp	r2, #0
 8011166:	bf18      	it	ne
 8011168:	461e      	movne	r6, r3
 801116a:	f204 2739 	addw	r7, r4, #569	; 0x239
 801116e:	f020 4240 	bic.w	r2, r0, #3221225472	; 0xc0000000
		ulMB = ( ulAmount / SIZE_1_MB );
 8011172:	ea4f 5e12 	mov.w	lr, r2, lsr #20
		if (ulGB != 0ul )
 8011176:	0f83      	lsrs	r3, r0, #30
 8011178:	d12a      	bne.n	80111d0 <prvTransferCloseSocket+0x128>
		ulAmount -= ( ulMB * SIZE_1_MB );
 801117a:	494b      	ldr	r1, [pc, #300]	; (80112a8 <prvTransferCloseSocket+0x200>)
 801117c:	4001      	ands	r1, r0
 801117e:	1a52      	subs	r2, r2, r1
		ulKB = ( ulAmount / SIZE_1_KB );
 8011180:	0a91      	lsrs	r1, r2, #10
		else if( ulMB != 0ul )
 8011182:	f1be 0f00 	cmp.w	lr, #0
 8011186:	d12f      	bne.n	80111e8 <prvTransferCloseSocket+0x140>
 8011188:	f3c2 0309 	ubfx	r3, r2, #0, #10
		else if( ulKB != 0ul )
 801118c:	2900      	cmp	r1, #0
 801118e:	d045      	beq.n	801121c <prvTransferCloseSocket+0x174>
			snprintf(pcBuffer, xBufferSize, "%lu.%02lu KB", ulKB, (100 * ulByte) / SIZE_1_KB );
 8011190:	2264      	movs	r2, #100	; 0x64
 8011192:	fb02 f203 	mul.w	r2, r2, r3
 8011196:	0a92      	lsrs	r2, r2, #10
 8011198:	9200      	str	r2, [sp, #0]
 801119a:	460b      	mov	r3, r1
 801119c:	4a43      	ldr	r2, [pc, #268]	; (80112ac <prvTransferCloseSocket+0x204>)
 801119e:	2120      	movs	r1, #32
 80111a0:	a802      	add	r0, sp, #8
 80111a2:	f005 ff1a 	bl	8016fda <snprintf>
 80111a6:	e03e      	b.n	8011226 <prvTransferCloseSocket+0x17e>
			ulAverage = ( ( ulAmount * 10ul ) / ( xDeltaMs / 100ul ) );
 80111a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	4a40      	ldr	r2, [pc, #256]	; (80112b0 <prvTransferCloseSocket+0x208>)
 80111b0:	fba2 2000 	umull	r2, r0, r2, r0
 80111b4:	0940      	lsrs	r0, r0, #5
 80111b6:	fbb3 f0f0 	udiv	r0, r3, r0
 80111ba:	e7cf      	b.n	801115c <prvTransferCloseSocket+0xb4>
			ulAverage = ( ( ulAmount * 100ul ) / ( xDeltaMs / 10ul ) );
 80111bc:	2364      	movs	r3, #100	; 0x64
 80111be:	fb03 f305 	mul.w	r3, r3, r5
 80111c2:	4a3c      	ldr	r2, [pc, #240]	; (80112b4 <prvTransferCloseSocket+0x20c>)
 80111c4:	fba2 2000 	umull	r2, r0, r2, r0
 80111c8:	08c0      	lsrs	r0, r0, #3
 80111ca:	fbb3 f0f0 	udiv	r0, r3, r0
 80111ce:	e7c5      	b.n	801115c <prvTransferCloseSocket+0xb4>
			snprintf( pcBuffer, xBufferSize, "%lu.%02lu GB", ulGB, (100 * ulMB) / SIZE_1_KB );
 80111d0:	2264      	movs	r2, #100	; 0x64
 80111d2:	fb02 fe0e 	mul.w	lr, r2, lr
 80111d6:	ea4f 229e 	mov.w	r2, lr, lsr #10
 80111da:	9200      	str	r2, [sp, #0]
 80111dc:	4a36      	ldr	r2, [pc, #216]	; (80112b8 <prvTransferCloseSocket+0x210>)
 80111de:	2120      	movs	r1, #32
 80111e0:	a802      	add	r0, sp, #8
 80111e2:	f005 fefa 	bl	8016fda <snprintf>
 80111e6:	e01e      	b.n	8011226 <prvTransferCloseSocket+0x17e>
			snprintf( pcBuffer, xBufferSize, "%lu.%02lu MB", ulMB, (100 * ulKB) / SIZE_1_KB );
 80111e8:	2364      	movs	r3, #100	; 0x64
 80111ea:	fb03 f101 	mul.w	r1, r3, r1
 80111ee:	0a89      	lsrs	r1, r1, #10
 80111f0:	9100      	str	r1, [sp, #0]
 80111f2:	4673      	mov	r3, lr
 80111f4:	4a31      	ldr	r2, [pc, #196]	; (80112bc <prvTransferCloseSocket+0x214>)
 80111f6:	2120      	movs	r1, #32
 80111f8:	a802      	add	r0, sp, #8
 80111fa:	f005 feee 	bl	8016fda <snprintf>
 80111fe:	e012      	b.n	8011226 <prvTransferCloseSocket+0x17e>
			pxClient->bits1.bEmptyFile = pdFALSE_UNSIGNED;
 8011200:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011204:	f36f 03c3 	bfc	r3, #3, #1
 8011208:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
 801120c:	e028      	b.n	8011260 <prvTransferCloseSocket+0x1b8>
			FreeRTOS_printf( ("FTP: %s: '%s' %lu Bytes (%s/sec)\n",
 801120e:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 8011212:	b37b      	cbz	r3, 8011274 <prvTransferCloseSocket+0x1cc>
 8011214:	f204 2739 	addw	r7, r4, #569	; 0x239
 8011218:	2300      	movs	r3, #0
 801121a:	4e21      	ldr	r6, [pc, #132]	; (80112a0 <prvTransferCloseSocket+0x1f8>)
			snprintf( pcBuffer, xBufferSize, "%lu bytes", ulByte );
 801121c:	4a28      	ldr	r2, [pc, #160]	; (80112c0 <prvTransferCloseSocket+0x218>)
 801121e:	2120      	movs	r1, #32
 8011220:	a802      	add	r0, sp, #8
 8011222:	f005 feda 	bl	8016fda <snprintf>
			FreeRTOS_printf( ("FTP: %s: '%s' %lu Bytes (%s/sec)\n",
 8011226:	ab02      	add	r3, sp, #8
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	462b      	mov	r3, r5
 801122c:	463a      	mov	r2, r7
 801122e:	4631      	mov	r1, r6
 8011230:	4824      	ldr	r0, [pc, #144]	; (80112c4 <prvTransferCloseSocket+0x21c>)
 8011232:	f005 fb8d 	bl	8016950 <lUDPLoggingPrintf>
	if( pxClient->xTransferSocket != FREERTOS_NO_SOCKET )
 8011236:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011238:	b190      	cbz	r0, 8011260 <prvTransferCloseSocket+0x1b8>
		FreeRTOS_FD_CLR( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_ALL );
 801123a:	6863      	ldr	r3, [r4, #4]
 801123c:	220f      	movs	r2, #15
 801123e:	6819      	ldr	r1, [r3, #0]
 8011240:	f7fb fd9e 	bl	800cd80 <FreeRTOS_FD_CLR>
		FreeRTOS_closesocket( pxClient->xTransferSocket );
 8011244:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011246:	f7fb ffc1 	bl	800d1cc <FreeRTOS_closesocket>
		pxClient->xTransferSocket = FREERTOS_NO_SOCKET;
 801124a:	2300      	movs	r3, #0
 801124c:	6363      	str	r3, [r4, #52]	; 0x34
		if( pxClient->ulRecvBytes == 0ul )
 801124e:	6a23      	ldr	r3, [r4, #32]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d1d5      	bne.n	8011200 <prvTransferCloseSocket+0x158>
			pxClient->bits1.bEmptyFile = pdTRUE_UNSIGNED;
 8011254:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011258:	f043 0308 	orr.w	r3, r3, #8
 801125c:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
	pxClient->bits1.bIsListen = pdFALSE_UNSIGNED;
 8011260:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
	pxClient->bits1.bHadError = pdFALSE_UNSIGNED;
 8011264:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8011268:	f36f 1304 	bfc	r3, #4, #1
 801126c:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
}
 8011270:	b00b      	add	sp, #44	; 0x2c
 8011272:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FreeRTOS_printf( ("FTP: %s: '%s' %lu Bytes (%s/sec)\n",
 8011274:	f204 2739 	addw	r7, r4, #569	; 0x239
			ulAverage = 0ul;
 8011278:	2000      	movs	r0, #0
		ulMB = ( ulAmount / SIZE_1_MB );
 801127a:	4686      	mov	lr, r0
			FreeRTOS_printf( ("FTP: %s: '%s' %lu Bytes (%s/sec)\n",
 801127c:	4602      	mov	r2, r0
 801127e:	4e09      	ldr	r6, [pc, #36]	; (80112a4 <prvTransferCloseSocket+0x1fc>)
 8011280:	e77b      	b.n	801117a <prvTransferCloseSocket+0xd2>
 8011282:	bf00      	nop
 8011284:	0801ab3c 	.word	0x0801ab3c
 8011288:	0801ab6c 	.word	0x0801ab6c
 801128c:	0801ab9c 	.word	0x0801ab9c
 8011290:	19999998 	.word	0x19999998
 8011294:	028f5c27 	.word	0x028f5c27
 8011298:	00418936 	.word	0x00418936
 801129c:	10624dd3 	.word	0x10624dd3
 80112a0:	0801ab2c 	.word	0x0801ab2c
 80112a4:	0801ab34 	.word	0x0801ab34
 80112a8:	3ff00000 	.word	0x3ff00000
 80112ac:	0801abec 	.word	0x0801abec
 80112b0:	51eb851f 	.word	0x51eb851f
 80112b4:	cccccccd 	.word	0xcccccccd
 80112b8:	0801abcc 	.word	0x0801abcc
 80112bc:	0801abdc 	.word	0x0801abdc
 80112c0:	0801abfc 	.word	0x0801abfc
 80112c4:	0801ac08 	.word	0x0801ac08

080112c8 <prvTransferConnect>:
{
 80112c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112cc:	b08a      	sub	sp, #40	; 0x28
 80112ce:	4605      	mov	r5, r0
 80112d0:	4688      	mov	r8, r1
	prvTransferCloseSocket( pxClient );
 80112d2:	f7ff fee9 	bl	80110a8 <prvTransferCloseSocket>
	pxClient->bits1.bEmptyFile = pdFALSE_UNSIGNED;
 80112d6:	f895 3400 	ldrb.w	r3, [r5, #1024]	; 0x400
 80112da:	f36f 03c3 	bfc	r3, #3, #1
 80112de:	f885 3400 	strb.w	r3, [r5, #1024]	; 0x400
	xSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80112e2:	2206      	movs	r2, #6
 80112e4:	2101      	movs	r1, #1
 80112e6:	2002      	movs	r0, #2
 80112e8:	f7fb fc70 	bl	800cbcc <FreeRTOS_socket>
	if( ( xSocket != FREERTOS_NO_SOCKET ) && ( xSocket != FREERTOS_INVALID_SOCKET ) )
 80112ec:	1e43      	subs	r3, r0, #1
 80112ee:	f113 0f03 	cmn.w	r3, #3
 80112f2:	d85f      	bhi.n	80113b4 <prvTransferConnect+0xec>
 80112f4:	4604      	mov	r4, r0
	BaseType_t xSmallTimeout = pdMS_TO_TICKS( 100 );
 80112f6:	2364      	movs	r3, #100	; 0x64
 80112f8:	9302      	str	r3, [sp, #8]
		xAddress.sin_addr = FreeRTOS_GetIPAddress( );	/* Single NIC, currently not used */
 80112fa:	f7fb fbad 	bl	800ca58 <FreeRTOS_GetIPAddress>
 80112fe:	9005      	str	r0, [sp, #20]
		xAddress.sin_port = FreeRTOS_htons( 0 );		/* Bind to any available port number */
 8011300:	2600      	movs	r6, #0
 8011302:	f8ad 6012 	strh.w	r6, [sp, #18]
		FreeRTOS_bind( xSocket, &xAddress, sizeof( xAddress ) );
 8011306:	2208      	movs	r2, #8
 8011308:	a904      	add	r1, sp, #16
 801130a:	4620      	mov	r0, r4
 801130c:	f7fb fe23 	bl	800cf56 <FreeRTOS_bind>
			xWinProps.lTxBufSize = ipconfigFTP_TX_BUFSIZE;
 8011310:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8011314:	9306      	str	r3, [sp, #24]
			xWinProps.lTxWinSize = ipconfigFTP_TX_WINSIZE;
 8011316:	2302      	movs	r3, #2
 8011318:	9307      	str	r3, [sp, #28]
			xWinProps.lRxBufSize = ipconfigFTP_RX_BUFSIZE;
 801131a:	f642 53a0 	movw	r3, #11680	; 0x2da0
 801131e:	9308      	str	r3, [sp, #32]
			xWinProps.lRxWinSize = ipconfigFTP_RX_WINSIZE;
 8011320:	2704      	movs	r7, #4
 8011322:	9709      	str	r7, [sp, #36]	; 0x24
			FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProps,	sizeof( xWinProps ) );
 8011324:	2310      	movs	r3, #16
 8011326:	9300      	str	r3, [sp, #0]
 8011328:	ab06      	add	r3, sp, #24
 801132a:	220d      	movs	r2, #13
 801132c:	4631      	mov	r1, r6
 801132e:	4620      	mov	r0, r4
 8011330:	f7fc fc1a 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xSmallTimeout, sizeof( BaseType_t ) );
 8011334:	9700      	str	r7, [sp, #0]
 8011336:	ab02      	add	r3, sp, #8
 8011338:	4632      	mov	r2, r6
 801133a:	4631      	mov	r1, r6
 801133c:	4620      	mov	r0, r4
 801133e:	f7fc fc13 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xSmallTimeout, sizeof( BaseType_t ) );
 8011342:	9700      	str	r7, [sp, #0]
 8011344:	ab02      	add	r3, sp, #8
 8011346:	2201      	movs	r2, #1
 8011348:	4631      	mov	r1, r6
 801134a:	4620      	mov	r0, r4
 801134c:	f7fc fc0c 	bl	800db68 <FreeRTOS_setsockopt>
		if( xDoListen != pdFALSE )
 8011350:	f1b8 0f00 	cmp.w	r8, #0
 8011354:	d110      	bne.n	8011378 <prvTransferConnect+0xb0>
		pxClient->bits1.bIsListen = xDoListen;
 8011356:	f895 3400 	ldrb.w	r3, [r5, #1024]	; 0x400
 801135a:	f36f 0300 	bfc	r3, #0, #1
 801135e:	f885 3400 	strb.w	r3, [r5, #1024]	; 0x400
		pxClient->xTransferSocket = xSocket;
 8011362:	636c      	str	r4, [r5, #52]	; 0x34
			FreeRTOS_FD_SET( xSocket, pxClient->pxParent->xSocketSet, eSELECT_EXCEPT | eSELECT_READ | eSELECT_WRITE );
 8011364:	686b      	ldr	r3, [r5, #4]
 8011366:	2207      	movs	r2, #7
 8011368:	6819      	ldr	r1, [r3, #0]
 801136a:	4620      	mov	r0, r4
 801136c:	f7fb fce4 	bl	800cd38 <FreeRTOS_FD_SET>
			xResult = pdTRUE;
 8011370:	2001      	movs	r0, #1
}
 8011372:	b00a      	add	sp, #40	; 0x28
 8011374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BaseType_t xTrueValue = pdTRUE;
 8011378:	ab0a      	add	r3, sp, #40	; 0x28
 801137a:	2201      	movs	r2, #1
 801137c:	f843 2d1c 	str.w	r2, [r3, #-28]!
			FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_REUSE_LISTEN_SOCKET, ( void * ) &xTrueValue, sizeof( xTrueValue ) );
 8011380:	9700      	str	r7, [sp, #0]
 8011382:	220b      	movs	r2, #11
 8011384:	4631      	mov	r1, r6
 8011386:	4620      	mov	r0, r4
 8011388:	f7fc fbee 	bl	800db68 <FreeRTOS_setsockopt>
		pxClient->bits1.bIsListen = xDoListen;
 801138c:	f895 3400 	ldrb.w	r3, [r5, #1024]	; 0x400
 8011390:	f368 0300 	bfi	r3, r8, #0, #1
 8011394:	f885 3400 	strb.w	r3, [r5, #1024]	; 0x400
		pxClient->xTransferSocket = xSocket;
 8011398:	636c      	str	r4, [r5, #52]	; 0x34
			FreeRTOS_FD_SET( xSocket, pxClient->pxParent->xSocketSet, eSELECT_EXCEPT | eSELECT_READ );
 801139a:	686b      	ldr	r3, [r5, #4]
 801139c:	2205      	movs	r2, #5
 801139e:	6819      	ldr	r1, [r3, #0]
 80113a0:	4620      	mov	r0, r4
 80113a2:	f7fb fcc9 	bl	800cd38 <FreeRTOS_FD_SET>
			xResult = prvTransferStart( pxClient );
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7ff fe12 	bl	8010fd0 <prvTransferStart>
			if( xResult >= 0 )
 80113ac:	2800      	cmp	r0, #0
				xResult = pdTRUE;
 80113ae:	bfa8      	it	ge
 80113b0:	2001      	movge	r0, #1
 80113b2:	e7de      	b.n	8011372 <prvTransferConnect+0xaa>
		FreeRTOS_printf( ( "FreeRTOS_socket() failed\n" ) );
 80113b4:	4802      	ldr	r0, [pc, #8]	; (80113c0 <prvTransferConnect+0xf8>)
 80113b6:	f005 facb 	bl	8016950 <lUDPLoggingPrintf>
		xResult = -pdFREERTOS_ERRNO_ENOMEM;
 80113ba:	f06f 000b 	mvn.w	r0, #11
	return xResult;
 80113be:	e7d8      	b.n	8011372 <prvTransferConnect+0xaa>
 80113c0:	0801ac2c 	.word	0x0801ac2c

080113c4 <prvTransferCheck>:
{
 80113c4:	b530      	push	{r4, r5, lr}
 80113c6:	b08b      	sub	sp, #44	; 0x2c
 80113c8:	4604      	mov	r4, r0
	xRxSize = FreeRTOS_rx_size( pxClient->xTransferSocket );
 80113ca:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80113cc:	f7fc fda5 	bl	800df1a <FreeRTOS_rx_size>
	if( pxClient->bits1.bClientConnected == pdFALSE_UNSIGNED )
 80113d0:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80113d4:	f013 0f04 	tst.w	r3, #4
 80113d8:	d164      	bne.n	80114a4 <prvTransferCheck+0xe0>
 80113da:	4605      	mov	r5, r0
		socklen_t xSocketLength = sizeof( xAddress );
 80113dc:	2208      	movs	r2, #8
 80113de:	9203      	str	r2, [sp, #12]
			if( pxClient->bits1.bIsListen != pdFALSE_UNSIGNED )
 80113e0:	f013 0f01 	tst.w	r3, #1
 80113e4:	d011      	beq.n	801140a <prvTransferCheck+0x46>
				xNexSocket = FreeRTOS_accept( pxClient->xTransferSocket, &xAddress, &xSocketLength);
 80113e6:	aa03      	add	r2, sp, #12
 80113e8:	a904      	add	r1, sp, #16
 80113ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80113ec:	f7fb ffec 	bl	800d3c8 <FreeRTOS_accept>
				if( ( ( xNexSocket != FREERTOS_NO_SOCKET ) && ( xNexSocket != FREERTOS_INVALID_SOCKET ) ) ||
 80113f0:	3801      	subs	r0, #1
 80113f2:	f110 0f03 	cmn.w	r0, #3
 80113f6:	d901      	bls.n	80113fc <prvTransferCheck+0x38>
 80113f8:	2d00      	cmp	r5, #0
 80113fa:	dd11      	ble.n	8011420 <prvTransferCheck+0x5c>
					pxClient->bits1.bClientConnected = pdTRUE_UNSIGNED;
 80113fc:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011400:	f043 0304 	orr.w	r3, r3, #4
 8011404:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
 8011408:	e00a      	b.n	8011420 <prvTransferCheck+0x5c>
				if( FreeRTOS_issocketconnected( pxClient->xTransferSocket ) > 0 ||
 801140a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801140c:	f7fc fcea 	bl	800dde4 <FreeRTOS_issocketconnected>
 8011410:	2800      	cmp	r0, #0
 8011412:	dd11      	ble.n	8011438 <prvTransferCheck+0x74>
					pxClient->bits1.bClientConnected = pdTRUE_UNSIGNED;
 8011414:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011418:	f043 0304 	orr.w	r3, r3, #4
 801141c:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
			if(	pxClient->bits1.bClientConnected != pdFALSE_UNSIGNED )
 8011420:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011424:	f013 0f04 	tst.w	r3, #4
 8011428:	d109      	bne.n	801143e <prvTransferCheck+0x7a>
	if ( pxClient->bits1.bClientConnected != pdFALSE_UNSIGNED )
 801142a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 801142e:	f013 0f04 	tst.w	r3, #4
 8011432:	d137      	bne.n	80114a4 <prvTransferCheck+0xe0>
}
 8011434:	b00b      	add	sp, #44	; 0x2c
 8011436:	bd30      	pop	{r4, r5, pc}
				if( FreeRTOS_issocketconnected( pxClient->xTransferSocket ) > 0 ||
 8011438:	2d00      	cmp	r5, #0
 801143a:	dceb      	bgt.n	8011414 <prvTransferCheck+0x50>
 801143c:	e7f0      	b.n	8011420 <prvTransferCheck+0x5c>
				pxClient->bits1.bEmptyFile = pdFALSE_UNSIGNED;
 801143e:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8011442:	f36f 03c3 	bfc	r3, #3, #1
 8011446:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
					FreeRTOS_GetRemoteAddress( pxClient->xTransferSocket, &xRemoteAddress );
 801144a:	a906      	add	r1, sp, #24
 801144c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801144e:	f7fc fb43 	bl	800dad8 <FreeRTOS_GetRemoteAddress>
					FreeRTOS_GetLocalAddress( pxClient->xTransferSocket, &xLocalAddress );
 8011452:	a908      	add	r1, sp, #32
 8011454:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011456:	f7fb ff8f 	bl	800d378 <FreeRTOS_GetLocalAddress>
					FreeRTOS_printf( ( "%s Connected from %u to %u\n",
 801145a:	f894 0400 	ldrb.w	r0, [r4, #1024]	; 0x400
 801145e:	f000 0001 	and.w	r0, r0, #1
 8011462:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8011466:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801146a:	0a13      	lsrs	r3, r2, #8
 801146c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011470:	0a0a      	lsrs	r2, r1, #8
 8011472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011476:	b29b      	uxth	r3, r3
 8011478:	b292      	uxth	r2, r2
 801147a:	4923      	ldr	r1, [pc, #140]	; (8011508 <prvTransferCheck+0x144>)
 801147c:	4d23      	ldr	r5, [pc, #140]	; (801150c <prvTransferCheck+0x148>)
 801147e:	2800      	cmp	r0, #0
 8011480:	bf18      	it	ne
 8011482:	4629      	movne	r1, r5
 8011484:	4822      	ldr	r0, [pc, #136]	; (8011510 <prvTransferCheck+0x14c>)
 8011486:	f005 fa63 	bl	8016950 <lUDPLoggingPrintf>
				FreeRTOS_FD_CLR( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE );
 801148a:	6863      	ldr	r3, [r4, #4]
 801148c:	2202      	movs	r2, #2
 801148e:	6819      	ldr	r1, [r3, #0]
 8011490:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011492:	f7fb fc75 	bl	800cd80 <FreeRTOS_FD_CLR>
				FreeRTOS_FD_SET( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_READ|eSELECT_EXCEPT );
 8011496:	6863      	ldr	r3, [r4, #4]
 8011498:	2205      	movs	r2, #5
 801149a:	6819      	ldr	r1, [r3, #0]
 801149c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801149e:	f7fb fc4b 	bl	800cd38 <FreeRTOS_FD_SET>
 80114a2:	e7c2      	b.n	801142a <prvTransferCheck+0x66>
		if( pxClient->pcConnectionAck[ 0 ] != '\0' )
 80114a4:	f894 32fa 	ldrb.w	r3, [r4, #762]	; 0x2fa
 80114a8:	b983      	cbnz	r3, 80114cc <prvTransferCheck+0x108>
		if( ( FreeRTOS_issocketconnected( pxClient->xTransferSocket ) == pdFALSE ) && FreeRTOS_rx_size( pxClient->xTransferSocket ) == 0 )
 80114aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80114ac:	f7fc fc9a 	bl	800dde4 <FreeRTOS_issocketconnected>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d1bf      	bne.n	8011434 <prvTransferCheck+0x70>
 80114b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80114b6:	f7fc fd30 	bl	800df1a <FreeRTOS_rx_size>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d1ba      	bne.n	8011434 <prvTransferCheck+0x70>
			prvTransferCloseSocket( pxClient );
 80114be:	4620      	mov	r0, r4
 80114c0:	f7ff fdf2 	bl	80110a8 <prvTransferCloseSocket>
			prvTransferCloseFile( pxClient );
 80114c4:	4620      	mov	r0, r4
 80114c6:	f7ff fdaa 	bl	801101e <prvTransferCloseFile>
}
 80114ca:	e7b3      	b.n	8011434 <prvTransferCheck+0x70>
			FreeRTOS_GetRemoteAddress( pxClient->xTransferSocket, &xRemoteAddress );
 80114cc:	a908      	add	r1, sp, #32
 80114ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80114d0:	f7fc fb02 	bl	800dad8 <FreeRTOS_GetRemoteAddress>
			xRemotePort = FreeRTOS_ntohs( xRemoteAddress.sin_port );
 80114d4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
			xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80114d8:	6860      	ldr	r0, [r4, #4]
			xRemotePort = FreeRTOS_ntohs( xRemoteAddress.sin_port );
 80114da:	0a13      	lsrs	r3, r2, #8
 80114dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	9300      	str	r3, [sp, #0]
			xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80114e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80114e6:	f204 22fa 	addw	r2, r4, #762	; 0x2fa
 80114ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80114ee:	3004      	adds	r0, #4
 80114f0:	f005 fd73 	bl	8016fda <snprintf>
			prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80114f4:	6861      	ldr	r1, [r4, #4]
 80114f6:	4602      	mov	r2, r0
 80114f8:	3104      	adds	r1, #4
 80114fa:	68a0      	ldr	r0, [r4, #8]
 80114fc:	f7ff fd26 	bl	8010f4c <prvSendReply>
			pxClient->pcConnectionAck[ 0 ] = '\0';
 8011500:	2300      	movs	r3, #0
 8011502:	f884 32fa 	strb.w	r3, [r4, #762]	; 0x2fa
 8011506:	e7d0      	b.n	80114aa <prvTransferCheck+0xe6>
 8011508:	0801ab08 	.word	0x0801ab08
 801150c:	0801ab00 	.word	0x0801ab00
 8011510:	0801ab10 	.word	0x0801ab10

08011514 <vFTPClientDelete>:
{
 8011514:	b510      	push	{r4, lr}
 8011516:	4604      	mov	r4, r0
	prvTransferCloseSocket( pxClient );
 8011518:	f7ff fdc6 	bl	80110a8 <prvTransferCloseSocket>
	prvTransferCloseFile( pxClient );
 801151c:	4620      	mov	r0, r4
 801151e:	f7ff fd7e 	bl	801101e <prvTransferCloseFile>
	if( pxClient->xSocket != FREERTOS_NO_SOCKET )
 8011522:	68a0      	ldr	r0, [r4, #8]
 8011524:	b148      	cbz	r0, 801153a <vFTPClientDelete+0x26>
		FreeRTOS_FD_CLR( pxClient->xSocket, pxClient->pxParent->xSocketSet, eSELECT_ALL );
 8011526:	6863      	ldr	r3, [r4, #4]
 8011528:	220f      	movs	r2, #15
 801152a:	6819      	ldr	r1, [r3, #0]
 801152c:	f7fb fc28 	bl	800cd80 <FreeRTOS_FD_CLR>
		FreeRTOS_closesocket( pxClient->xSocket );
 8011530:	68a0      	ldr	r0, [r4, #8]
 8011532:	f7fb fe4b 	bl	800d1cc <FreeRTOS_closesocket>
		pxClient->xSocket = FREERTOS_NO_SOCKET;
 8011536:	2300      	movs	r3, #0
 8011538:	60a3      	str	r3, [r4, #8]
 801153a:	bd10      	pop	{r4, pc}

0801153c <xMakeAbsolute>:
 * pxClient->pcRootDir  +  pxClient->pcCurrentDir  +  pcFileName
 *
 * 'pcCurrentDir' will not be applied for an absolute path like in "DELE /.htaccess"
 */
BaseType_t xMakeAbsolute( FTPClient_t *pxClient, char *pcBuffer, BaseType_t xBufferLength, const char *pcFileName )
{
 801153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011540:	b083      	sub	sp, #12
 8011542:	4605      	mov	r5, r0
 8011544:	4689      	mov	r9, r1
 8011546:	4617      	mov	r7, r2
 8011548:	4698      	mov	r8, r3
BaseType_t xLength = strlen( pxClient->pcRootDir );
 801154a:	68c6      	ldr	r6, [r0, #12]
 801154c:	4630      	mov	r0, r6
 801154e:	f7ee fe49 	bl	80001e4 <strlen>
 8011552:	4682      	mov	sl, r0

	if( pcFileName[ 0 ] != '/' )
 8011554:	f898 3000 	ldrb.w	r3, [r8]
 8011558:	2b2f      	cmp	r3, #47	; 0x2f
 801155a:	d03c      	beq.n	80115d6 <xMakeAbsolute+0x9a>
	{
	char *pcNewDirBuffer = pcNEW_DIR;
 801155c:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8011560:	f50b 5480 	add.w	r4, fp, #4096	; 0x1000
 8011564:	3404      	adds	r4, #4
	BaseType_t xCurLength;

		xCurLength = strlen( pxClient->pcCurrentDir );
 8011566:	f505 76bc 	add.w	r6, r5, #376	; 0x178
 801156a:	4630      	mov	r0, r6
 801156c:	f7ee fe3a 	bl	80001e4 <strlen>
		if( pcBuffer == pcNEW_DIR )
 8011570:	454c      	cmp	r4, r9
		{
			/* In one call, the result already goes into pcNEW_DIR.
			Use pcFILE_BUFFER in that case */
			pcNewDirBuffer = pcFILE_BUFFER;
 8011572:	bf08      	it	eq
 8011574:	f60b 0404 	addweq	r4, fp, #2052	; 0x804
		}
		snprintf( pcNewDirBuffer, sizeof( pcNEW_DIR ), "%s%s%s",
			pxClient->pcCurrentDir,
			pxClient->pcCurrentDir[ xCurLength - 1 ] == '/' ? "" : "/",
 8011578:	4428      	add	r0, r5
		snprintf( pcNewDirBuffer, sizeof( pcNEW_DIR ), "%s%s%s",
 801157a:	f890 1177 	ldrb.w	r1, [r0, #375]	; 0x177
 801157e:	4a1b      	ldr	r2, [pc, #108]	; (80115ec <xMakeAbsolute+0xb0>)
 8011580:	4b1b      	ldr	r3, [pc, #108]	; (80115f0 <xMakeAbsolute+0xb4>)
 8011582:	292f      	cmp	r1, #47	; 0x2f
 8011584:	bf18      	it	ne
 8011586:	4613      	movne	r3, r2
 8011588:	f8cd 8004 	str.w	r8, [sp, #4]
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	4633      	mov	r3, r6
 8011590:	4a18      	ldr	r2, [pc, #96]	; (80115f4 <xMakeAbsolute+0xb8>)
 8011592:	21c1      	movs	r1, #193	; 0xc1
 8011594:	4620      	mov	r0, r4
 8011596:	f005 fd20 	bl	8016fda <snprintf>
			pcFileName );
		pcFileName = pcNewDirBuffer;
	}
	if( strncasecmp( pxClient->pcRootDir, pcFileName, xLength ) == 0 )
 801159a:	68ee      	ldr	r6, [r5, #12]
 801159c:	4652      	mov	r2, sl
 801159e:	4621      	mov	r1, r4
 80115a0:	4630      	mov	r0, r6
 80115a2:	f006 fb4d 	bl	8017c40 <strncasecmp>
 80115a6:	b160      	cbz	r0, 80115c2 <xMakeAbsolute+0x86>
	{
		xLength = snprintf( pcBuffer, xBufferLength, "%s", pcFileName );
	}
	else
	{
		xLength = snprintf( pcBuffer, xBufferLength, "%s/%s",
 80115a8:	4639      	mov	r1, r7
 80115aa:	7823      	ldrb	r3, [r4, #0]
 80115ac:	2b2f      	cmp	r3, #47	; 0x2f
 80115ae:	d010      	beq.n	80115d2 <xMakeAbsolute+0x96>
 80115b0:	9400      	str	r4, [sp, #0]
 80115b2:	4633      	mov	r3, r6
 80115b4:	4a10      	ldr	r2, [pc, #64]	; (80115f8 <xMakeAbsolute+0xbc>)
 80115b6:	4648      	mov	r0, r9
 80115b8:	f005 fd0f 	bl	8016fda <snprintf>
			}
		}
	#endif

	return xLength;
}
 80115bc:	b003      	add	sp, #12
 80115be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pcFileName = pcNewDirBuffer;
 80115c2:	46a0      	mov	r8, r4
		xLength = snprintf( pcBuffer, xBufferLength, "%s", pcFileName );
 80115c4:	4643      	mov	r3, r8
 80115c6:	4a0d      	ldr	r2, [pc, #52]	; (80115fc <xMakeAbsolute+0xc0>)
 80115c8:	4639      	mov	r1, r7
 80115ca:	4648      	mov	r0, r9
 80115cc:	f005 fd05 	bl	8016fda <snprintf>
 80115d0:	e7f4      	b.n	80115bc <xMakeAbsolute+0x80>
		pcFileName = pcNewDirBuffer;
 80115d2:	46a0      	mov	r8, r4
 80115d4:	e007      	b.n	80115e6 <xMakeAbsolute+0xaa>
	if( strncasecmp( pxClient->pcRootDir, pcFileName, xLength ) == 0 )
 80115d6:	4602      	mov	r2, r0
 80115d8:	4641      	mov	r1, r8
 80115da:	4630      	mov	r0, r6
 80115dc:	f006 fb30 	bl	8017c40 <strncasecmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d0ef      	beq.n	80115c4 <xMakeAbsolute+0x88>
		xLength = snprintf( pcBuffer, xBufferLength, "%s/%s",
 80115e4:	4639      	mov	r1, r7
 80115e6:	f108 0401 	add.w	r4, r8, #1
 80115ea:	e7e1      	b.n	80115b0 <xMakeAbsolute+0x74>
 80115ec:	080193b0 	.word	0x080193b0
 80115f0:	0801b914 	.word	0x0801b914
 80115f4:	0801b61c 	.word	0x0801b61c
 80115f8:	080193e8 	.word	0x080193e8
 80115fc:	0801b620 	.word	0x0801b620

08011600 <prvSizeDateFile>:
{
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	b096      	sub	sp, #88	; 0x58
 8011604:	4605      	mov	r5, r0
 8011606:	4616      	mov	r6, r2
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcFileName );
 8011608:	f200 2439 	addw	r4, r0, #569	; 0x239
 801160c:	460b      	mov	r3, r1
 801160e:	22c1      	movs	r2, #193	; 0xc1
 8011610:	4621      	mov	r1, r4
 8011612:	f7ff ff93 	bl	801153c <xMakeAbsolute>
	pcPtr = strrchr( pxClient->pcFileName, '/' );
 8011616:	212f      	movs	r1, #47	; 0x2f
 8011618:	4620      	mov	r0, r4
 801161a:	f006 fb73 	bl	8017d04 <strrchr>
	if( ( pcPtr != NULL ) && ( pcPtr[ 1 ] != '\0' ) )
 801161e:	b108      	cbz	r0, 8011624 <prvSizeDateFile+0x24>
 8011620:	7843      	ldrb	r3, [r0, #1]
 8011622:	b95b      	cbnz	r3, 801163c <prvSizeDateFile+0x3c>
		FreeRTOS_printf( ("ftp::sizeDateFile: Invalid file name: %s ?\n", pxClient->pcFileName ) );
 8011624:	4621      	mov	r1, r4
 8011626:	4829      	ldr	r0, [pc, #164]	; (80116cc <prvSizeDateFile+0xcc>)
 8011628:	f005 f992 	bl	8016950 <lUDPLoggingPrintf>
		prvSendReply( pxClient->xSocket, REPL_450, 0 );	/* "Requested file action not taken". */
 801162c:	2200      	movs	r2, #0
 801162e:	4928      	ldr	r1, [pc, #160]	; (80116d0 <prvSizeDateFile+0xd0>)
 8011630:	68a8      	ldr	r0, [r5, #8]
 8011632:	f7ff fc8b 	bl	8010f4c <prvSendReply>
 8011636:	2000      	movs	r0, #0
}
 8011638:	b016      	add	sp, #88	; 0x58
 801163a:	bd70      	pop	{r4, r5, r6, pc}
		int32_t iRc = ff_stat( pxClient->pcFileName, &xStatBuf );
 801163c:	a907      	add	r1, sp, #28
 801163e:	4620      	mov	r0, r4
 8011640:	f7f7 fd98 	bl	8009174 <ff_stat>
		if (iRc < 0 )
 8011644:	2800      	cmp	r0, #0
 8011646:	db26      	blt.n	8011696 <prvSizeDateFile+0x96>
		if( iRc == 0 )
 8011648:	2800      	cmp	r0, #0
 801164a:	d12f      	bne.n	80116ac <prvSizeDateFile+0xac>
			if( xSendDate != pdFALSE )
 801164c:	2e00      	cmp	r6, #0
 801164e:	d032      	beq.n	80116b6 <prvSizeDateFile+0xb6>
					time_t secs = xStatBuf.st_mtime;
 8011650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011652:	9306      	str	r3, [sp, #24]
					FreeRTOS_gmtime_r( &secs, &tmStruct );
 8011654:	a90d      	add	r1, sp, #52	; 0x34
 8011656:	a806      	add	r0, sp, #24
 8011658:	f7f8 fa9e 	bl	8009b98 <FreeRTOS_gmtime_r>
					xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "213 %04u%02u%02u%02u%02u%02u\r\n",
 801165c:	6868      	ldr	r0, [r5, #4]
 801165e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011660:	9304      	str	r3, [sp, #16]
 8011662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011664:	9303      	str	r3, [sp, #12]
 8011666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011668:	9302      	str	r3, [sp, #8]
 801166a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801166c:	9301      	str	r3, [sp, #4]
 801166e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011670:	3301      	adds	r3, #1
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011676:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801167a:	4a16      	ldr	r2, [pc, #88]	; (80116d4 <prvSizeDateFile+0xd4>)
 801167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011680:	3004      	adds	r0, #4
 8011682:	f005 fcaa 	bl	8016fda <snprintf>
 8011686:	4602      	mov	r2, r0
			prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 8011688:	6869      	ldr	r1, [r5, #4]
 801168a:	3104      	adds	r1, #4
 801168c:	68a8      	ldr	r0, [r5, #8]
 801168e:	f7ff fc5d 	bl	8010f4c <prvSendReply>
 8011692:	2001      	movs	r0, #1
 8011694:	e7d0      	b.n	8011638 <prvSizeDateFile+0x38>
	pvResult = pvTaskGetThreadLocalStoragePointer( NULL, ffconfigCWD_THREAD_LOCAL_INDEX );
 8011696:	2100      	movs	r1, #0
 8011698:	4608      	mov	r0, r1
 801169a:	f003 fa91 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
			FreeRTOS_printf( ("In %s: %s\n", pxClient->pcFileName,
 801169e:	f006 fac5 	bl	8017c2c <strerror>
 80116a2:	4602      	mov	r2, r0
 80116a4:	4621      	mov	r1, r4
 80116a6:	480c      	ldr	r0, [pc, #48]	; (80116d8 <prvSizeDateFile+0xd8>)
 80116a8:	f005 f952 	bl	8016950 <lUDPLoggingPrintf>
			FreeRTOS_printf( ("ftp::sizeDateFile: No such file %s\n", pxClient->pcFileName ) );
 80116ac:	4621      	mov	r1, r4
 80116ae:	480b      	ldr	r0, [pc, #44]	; (80116dc <prvSizeDateFile+0xdc>)
 80116b0:	f005 f94e 	bl	8016950 <lUDPLoggingPrintf>
 80116b4:	e7ba      	b.n	801162c <prvSizeDateFile+0x2c>
				xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "213 %lu\r\n", xStatBuf.st_size );
 80116b6:	6868      	ldr	r0, [r5, #4]
 80116b8:	9b08      	ldr	r3, [sp, #32]
 80116ba:	4a09      	ldr	r2, [pc, #36]	; (80116e0 <prvSizeDateFile+0xe0>)
 80116bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80116c0:	3004      	adds	r0, #4
 80116c2:	f005 fc8a 	bl	8016fda <snprintf>
 80116c6:	4602      	mov	r2, r0
 80116c8:	e7de      	b.n	8011688 <prvSizeDateFile+0x88>
 80116ca:	bf00      	nop
 80116cc:	0801aaac 	.word	0x0801aaac
 80116d0:	0801aad8 	.word	0x0801aad8
 80116d4:	0801aa5c 	.word	0x0801aa5c
 80116d8:	0801aa50 	.word	0x0801aa50
 80116dc:	0801aa88 	.word	0x0801aa88
 80116e0:	0801aa7c 	.word	0x0801aa7c

080116e4 <prvChangeDir>:
{
 80116e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e6:	b083      	sub	sp, #12
 80116e8:	4604      	mov	r4, r0
 80116ea:	460d      	mov	r5, r1
	if( pcDirectory[ 0 ] == '.' )
 80116ec:	780b      	ldrb	r3, [r1, #0]
 80116ee:	2b2e      	cmp	r3, #46	; 0x2e
 80116f0:	d049      	beq.n	8011786 <prvChangeDir+0xa2>
		if(pcDirectory[ 0 ] != '/' )
 80116f2:	2b2f      	cmp	r3, #47	; 0x2f
 80116f4:	d06c      	beq.n	80117d0 <prvChangeDir+0xec>
			xCurLength = strlen( pxClient->pcCurrentDir );
 80116f6:	f504 77bc 	add.w	r7, r4, #376	; 0x178
 80116fa:	4638      	mov	r0, r7
 80116fc:	f7ee fd72 	bl	80001e4 <strlen>
			snprintf( pcFILE_BUFFER, sizeof( pcFILE_BUFFER ), "%s%s%s",
 8011700:	6866      	ldr	r6, [r4, #4]
				pxClient->pcCurrentDir[ xCurLength - 1 ] == '/' ? "" : "/",
 8011702:	4420      	add	r0, r4
			snprintf( pcFILE_BUFFER, sizeof( pcFILE_BUFFER ), "%s%s%s",
 8011704:	f890 1177 	ldrb.w	r1, [r0, #375]	; 0x177
 8011708:	4a44      	ldr	r2, [pc, #272]	; (801181c <prvChangeDir+0x138>)
 801170a:	4b45      	ldr	r3, [pc, #276]	; (8011820 <prvChangeDir+0x13c>)
 801170c:	292f      	cmp	r1, #47	; 0x2f
 801170e:	bf18      	it	ne
 8011710:	4613      	movne	r3, r2
 8011712:	9501      	str	r5, [sp, #4]
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	463b      	mov	r3, r7
 8011718:	4a42      	ldr	r2, [pc, #264]	; (8011824 <prvChangeDir+0x140>)
 801171a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801171e:	f606 0004 	addw	r0, r6, #2052	; 0x804
 8011722:	f005 fc5a 	bl	8016fda <snprintf>
	xIsRootDir = ( pcFILE_BUFFER[ 0 ] == '/' ) && ( pcFILE_BUFFER[ 1 ] == '\0' );
 8011726:	6861      	ldr	r1, [r4, #4]
 8011728:	f8b1 5804 	ldrh.w	r5, [r1, #2052]	; 0x804
	xMakeAbsolute( pxClient, pcNEW_DIR, sizeof( pcNEW_DIR ), pcFILE_BUFFER );
 801172c:	f601 0304 	addw	r3, r1, #2052	; 0x804
 8011730:	22c1      	movs	r2, #193	; 0xc1
 8011732:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8011736:	3104      	adds	r1, #4
 8011738:	4620      	mov	r0, r4
 801173a:	f7ff feff 	bl	801153c <xMakeAbsolute>
	if( ( ( xIsRootDir == pdFALSE ) || ( FF_FS_Count() == 0 ) ) &&	( ff_finddir( pcNEW_DIR ) == pdFALSE ) )
 801173e:	2d2f      	cmp	r5, #47	; 0x2f
 8011740:	d050      	beq.n	80117e4 <prvChangeDir+0x100>
 8011742:	6860      	ldr	r0, [r4, #4]
 8011744:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8011748:	3004      	adds	r0, #4
 801174a:	f7f8 f806 	bl	800975a <ff_finddir>
	if( xValid == pdFALSE )
 801174e:	2800      	cmp	r0, #0
 8011750:	d04d      	beq.n	80117ee <prvChangeDir+0x10a>
		memcpy( pxClient->pcCurrentDir, pcNEW_DIR, sizeof( pxClient->pcCurrentDir ) );
 8011752:	6866      	ldr	r6, [r4, #4]
 8011754:	f506 5580 	add.w	r5, r6, #4096	; 0x1000
 8011758:	3504      	adds	r5, #4
 801175a:	22c1      	movs	r2, #193	; 0xc1
 801175c:	4629      	mov	r1, r5
 801175e:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 8011762:	f006 f80e 	bl	8017782 <memcpy>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "250 Changed to %s\r\n", pcNEW_DIR );
 8011766:	462b      	mov	r3, r5
 8011768:	4a2f      	ldr	r2, [pc, #188]	; (8011828 <prvChangeDir+0x144>)
 801176a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801176e:	1d30      	adds	r0, r6, #4
 8011770:	f005 fc33 	bl	8016fda <snprintf>
		prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 8011774:	6861      	ldr	r1, [r4, #4]
 8011776:	4602      	mov	r2, r0
 8011778:	3104      	adds	r1, #4
 801177a:	68a0      	ldr	r0, [r4, #8]
 801177c:	f7ff fbe6 	bl	8010f4c <prvSendReply>
		xResult = pdTRUE;
 8011780:	2001      	movs	r0, #1
}
 8011782:	b003      	add	sp, #12
 8011784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( ( pcDirectory[ 1 ] == '.' ) &&
 8011786:	784b      	ldrb	r3, [r1, #1]
 8011788:	2b2e      	cmp	r3, #46	; 0x2e
 801178a:	d01d      	beq.n	80117c8 <prvChangeDir+0xe4>
	if( xIsDotDir != 0 )
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1b2      	bne.n	80116f6 <prvChangeDir+0x12>
		strcpy( pcFILE_BUFFER, pxClient->pcCurrentDir );
 8011790:	6860      	ldr	r0, [r4, #4]
 8011792:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 8011796:	f600 0004 	addw	r0, r0, #2052	; 0x804
 801179a:	f006 f859 	bl	8017850 <strcpy>
		if( pcDirectory[ 1 ] == '.' )
 801179e:	786b      	ldrb	r3, [r5, #1]
 80117a0:	2b2e      	cmp	r3, #46	; 0x2e
 80117a2:	d1c0      	bne.n	8011726 <prvChangeDir+0x42>
			char *p = strrchr( pcFILE_BUFFER, '/' );
 80117a4:	6866      	ldr	r6, [r4, #4]
 80117a6:	f606 0504 	addw	r5, r6, #2052	; 0x804
 80117aa:	212f      	movs	r1, #47	; 0x2f
 80117ac:	4628      	mov	r0, r5
 80117ae:	f006 faa9 	bl	8017d04 <strrchr>
			if( p != NULL )
 80117b2:	4603      	mov	r3, r0
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d0b6      	beq.n	8011726 <prvChangeDir+0x42>
				if( p == pcFILE_BUFFER )
 80117b8:	4285      	cmp	r5, r0
					p[ 1 ] = '\0';
 80117ba:	bf07      	ittee	eq
 80117bc:	2300      	moveq	r3, #0
 80117be:	f886 3805 	strbeq.w	r3, [r6, #2053]	; 0x805
					p[ 0 ] = '\0';
 80117c2:	2200      	movne	r2, #0
 80117c4:	701a      	strbne	r2, [r3, #0]
 80117c6:	e7ae      	b.n	8011726 <prvChangeDir+0x42>
		if( ( pcDirectory[ 1 ] == '.' ) &&
 80117c8:	788b      	ldrb	r3, [r1, #2]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d0e0      	beq.n	8011790 <prvChangeDir+0xac>
 80117ce:	e792      	b.n	80116f6 <prvChangeDir+0x12>
			snprintf( pcFILE_BUFFER, sizeof( pcFILE_BUFFER ), "%s", pcDirectory );
 80117d0:	6860      	ldr	r0, [r4, #4]
 80117d2:	462b      	mov	r3, r5
 80117d4:	4a15      	ldr	r2, [pc, #84]	; (801182c <prvChangeDir+0x148>)
 80117d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117da:	f600 0004 	addw	r0, r0, #2052	; 0x804
 80117de:	f005 fbfc 	bl	8016fda <snprintf>
 80117e2:	e7a0      	b.n	8011726 <prvChangeDir+0x42>
	if( ( ( xIsRootDir == pdFALSE ) || ( FF_FS_Count() == 0 ) ) &&	( ff_finddir( pcNEW_DIR ) == pdFALSE ) )
 80117e4:	f7f8 f8e2 	bl	80099ac <FF_FS_Count>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d1b2      	bne.n	8011752 <prvChangeDir+0x6e>
 80117ec:	e7a9      	b.n	8011742 <prvChangeDir+0x5e>
		FreeRTOS_printf( ("FTP: chdir \"%s\": No such dir\n", pcNEW_DIR ) );
 80117ee:	f241 0504 	movw	r5, #4100	; 0x1004
 80117f2:	6861      	ldr	r1, [r4, #4]
 80117f4:	4429      	add	r1, r5
 80117f6:	480e      	ldr	r0, [pc, #56]	; (8011830 <prvChangeDir+0x14c>)
 80117f8:	f005 f8aa 	bl	8016950 <lUDPLoggingPrintf>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80117fc:	6860      	ldr	r0, [r4, #4]
 80117fe:	1943      	adds	r3, r0, r5
 8011800:	4a0c      	ldr	r2, [pc, #48]	; (8011834 <prvChangeDir+0x150>)
 8011802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011806:	3004      	adds	r0, #4
 8011808:	f005 fbe7 	bl	8016fda <snprintf>
		prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 801180c:	6861      	ldr	r1, [r4, #4]
 801180e:	4602      	mov	r2, r0
 8011810:	3104      	adds	r1, #4
 8011812:	68a0      	ldr	r0, [r4, #8]
 8011814:	f7ff fb9a 	bl	8010f4c <prvSendReply>
		xResult = pdFALSE;
 8011818:	2000      	movs	r0, #0
 801181a:	e7b2      	b.n	8011782 <prvChangeDir+0x9e>
 801181c:	080193b0 	.word	0x080193b0
 8011820:	0801b914 	.word	0x0801b914
 8011824:	0801b61c 	.word	0x0801b61c
 8011828:	0801aa30 	.word	0x0801aa30
 801182c:	0801b620 	.word	0x0801b620
 8011830:	0801a9ec 	.word	0x0801a9ec
 8011834:	0801aa0c 	.word	0x0801aa0c

08011838 <xMakeRelative>:
/*-----------------------------------------------------------*/

BaseType_t xMakeRelative( FTPClient_t *pxClient, char *pcBuffer, BaseType_t xBufferLength, const char *pcFileName )
{
 8011838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801183c:	460f      	mov	r7, r1
 801183e:	4690      	mov	r8, r2
 8011840:	461c      	mov	r4, r3
BaseType_t xLength = strlen( pxClient->pcRootDir );
 8011842:	68c5      	ldr	r5, [r0, #12]
 8011844:	4628      	mov	r0, r5
 8011846:	f7ee fccd 	bl	80001e4 <strlen>
 801184a:	4606      	mov	r6, r0

	if( strncasecmp ( pxClient->pcRootDir, pcFileName, xLength ) == 0 )
 801184c:	4602      	mov	r2, r0
 801184e:	4621      	mov	r1, r4
 8011850:	4628      	mov	r0, r5
 8011852:	f006 f9f5 	bl	8017c40 <strncasecmp>
 8011856:	b138      	cbz	r0, 8011868 <xMakeRelative+0x30>
	{
		xLength = snprintf( pcBuffer, xBufferLength, "%s", pcFileName + xLength );
	}
	else
	{
		xLength = snprintf( pcBuffer, xBufferLength, "%s", pcFileName );
 8011858:	4623      	mov	r3, r4
 801185a:	4a07      	ldr	r2, [pc, #28]	; (8011878 <xMakeRelative+0x40>)
 801185c:	4641      	mov	r1, r8
 801185e:	4638      	mov	r0, r7
 8011860:	f005 fbbb 	bl	8016fda <snprintf>
	}

	return xLength;
}
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xLength = snprintf( pcBuffer, xBufferLength, "%s", pcFileName + xLength );
 8011868:	19a3      	adds	r3, r4, r6
 801186a:	4a03      	ldr	r2, [pc, #12]	; (8011878 <xMakeRelative+0x40>)
 801186c:	4641      	mov	r1, r8
 801186e:	4638      	mov	r0, r7
 8011870:	f005 fbb3 	bl	8016fda <snprintf>
 8011874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011878:	0801b620 	.word	0x0801b620

0801187c <xFTPClientWork>:
{
 801187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	b09d      	sub	sp, #116	; 0x74
 8011882:	4604      	mov	r4, r0
	if( pxClient->bits.bHelloSent == pdFALSE_UNSIGNED )
 8011884:	f890 33fc 	ldrb.w	r3, [r0, #1020]	; 0x3fc
 8011888:	f013 0f01 	tst.w	r3, #1
 801188c:	d014      	beq.n	80118b8 <xFTPClientWork+0x3c>
	xRc = FreeRTOS_recv( pxClient->xSocket, ( void * )pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), 0 );
 801188e:	6861      	ldr	r1, [r4, #4]
 8011890:	2300      	movs	r3, #0
 8011892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011896:	3104      	adds	r1, #4
 8011898:	68a0      	ldr	r0, [r4, #8]
 801189a:	f7fb fe2b 	bl	800d4f4 <FreeRTOS_recv>
	if( xRc > 0 )
 801189e:	f1b0 0800 	subs.w	r8, r0, #0
 80118a2:	f340 8638 	ble.w	8012516 <xFTPClientWork+0xc9a>
		if( xRc < ( BaseType_t ) sizeof( pcCOMMAND_BUFFER ) )
 80118a6:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
 80118aa:	da03      	bge.n	80118b4 <xFTPClientWork+0x38>
			pcCOMMAND_BUFFER[ xRc ] = '\0';
 80118ac:	6863      	ldr	r3, [r4, #4]
 80118ae:	4443      	add	r3, r8
 80118b0:	2200      	movs	r2, #0
 80118b2:	711a      	strb	r2, [r3, #4]
			pcCOMMAND_BUFFER[ --xRc ] = '\0';
 80118b4:	2000      	movs	r0, #0
 80118b6:	e023      	b.n	8011900 <xFTPClientWork+0x84>
		pxClient->bits.bHelloSent = pdTRUE_UNSIGNED;
 80118b8:	f043 0301 	orr.w	r3, r3, #1
 80118bc:	f880 33fc 	strb.w	r3, [r0, #1020]	; 0x3fc
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80118c0:	6845      	ldr	r5, [r0, #4]
 80118c2:	4ea0      	ldr	r6, [pc, #640]	; (8011b44 <xFTPClientWork+0x2c8>)
 80118c4:	3504      	adds	r5, #4
 80118c6:	f106 0e20 	add.w	lr, r6, #32
 80118ca:	4637      	mov	r7, r6
 80118cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80118ce:	6028      	str	r0, [r5, #0]
 80118d0:	6069      	str	r1, [r5, #4]
 80118d2:	60aa      	str	r2, [r5, #8]
 80118d4:	60eb      	str	r3, [r5, #12]
 80118d6:	463e      	mov	r6, r7
 80118d8:	3510      	adds	r5, #16
 80118da:	4577      	cmp	r7, lr
 80118dc:	d1f5      	bne.n	80118ca <xFTPClientWork+0x4e>
 80118de:	ce07      	ldmia	r6!, {r0, r1, r2}
 80118e0:	6028      	str	r0, [r5, #0]
 80118e2:	6069      	str	r1, [r5, #4]
 80118e4:	60aa      	str	r2, [r5, #8]
 80118e6:	7833      	ldrb	r3, [r6, #0]
 80118e8:	732b      	strb	r3, [r5, #12]
		prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80118ea:	6861      	ldr	r1, [r4, #4]
 80118ec:	222c      	movs	r2, #44	; 0x2c
 80118ee:	3104      	adds	r1, #4
 80118f0:	68a0      	ldr	r0, [r4, #8]
 80118f2:	f7ff fb2b 	bl	8010f4c <prvSendReply>
 80118f6:	e7ca      	b.n	801188e <xFTPClientWork+0x12>
			pcCOMMAND_BUFFER[ --xRc ] = '\0';
 80118f8:	4413      	add	r3, r2
 80118fa:	7118      	strb	r0, [r3, #4]
 80118fc:	4690      	mov	r8, r2
		while( xRc && ( ( pcCOMMAND_BUFFER[ xRc - 1 ] == ftpASCII_CR ) || ( pcCOMMAND_BUFFER[ xRc - 1 ] == ftpASCII_LF ) ) )
 80118fe:	b14a      	cbz	r2, 8011914 <xFTPClientWork+0x98>
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8011906:	1899      	adds	r1, r3, r2
 8011908:	7909      	ldrb	r1, [r1, #4]
 801190a:	290d      	cmp	r1, #13
 801190c:	d0f4      	beq.n	80118f8 <xFTPClientWork+0x7c>
 801190e:	290a      	cmp	r1, #10
 8011910:	d0f2      	beq.n	80118f8 <xFTPClientWork+0x7c>
 8011912:	e001      	b.n	8011918 <xFTPClientWork+0x9c>
			pcCOMMAND_BUFFER[ --xRc ] = '\0';
 8011914:	f04f 0800 	mov.w	r8, #0
		pcRestCommand = pcCOMMAND_BUFFER;
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	f103 0904 	add.w	r9, r3, #4
 801191e:	4d8a      	ldr	r5, [pc, #552]	; (8011b48 <xFTPClientWork+0x2cc>)
		for( xIndex = 0; xIndex < FTP_CMD_COUNT - 1; xIndex++, pxCommand++ )
 8011920:	2600      	movs	r6, #0
 8011922:	e003      	b.n	801192c <xFTPClientWork+0xb0>
 8011924:	3601      	adds	r6, #1
 8011926:	3510      	adds	r5, #16
 8011928:	2e26      	cmp	r6, #38	; 0x26
 801192a:	d012      	beq.n	8011952 <xFTPClientWork+0xd6>
			xLength = pxCommand->xCommandLength;
 801192c:	f855 2c04 	ldr.w	r2, [r5, #-4]
			if( ( xRc >= xLength ) && ( memcmp( ( const void * ) pxCommand->pcCommandName, ( const void * ) pcCOMMAND_BUFFER, xLength ) == 0 ) )
 8011930:	4542      	cmp	r2, r8
 8011932:	dcf7      	bgt.n	8011924 <xFTPClientWork+0xa8>
 8011934:	4617      	mov	r7, r2
 8011936:	4649      	mov	r1, r9
 8011938:	4628      	mov	r0, r5
 801193a:	f005 ff13 	bl	8017764 <memcmp>
 801193e:	2800      	cmp	r0, #0
 8011940:	d1f0      	bne.n	8011924 <xFTPClientWork+0xa8>
				pcRestCommand += xLength;
 8011942:	444f      	add	r7, r9
 8011944:	46b9      	mov	r9, r7
				while( ( *pcRestCommand == ' ' ) || ( *pcRestCommand == '\t' ) )
 8011946:	f817 3b01 	ldrb.w	r3, [r7], #1
 801194a:	2b20      	cmp	r3, #32
 801194c:	d0fa      	beq.n	8011944 <xFTPClientWork+0xc8>
 801194e:	2b09      	cmp	r3, #9
 8011950:	d0f8      	beq.n	8011944 <xFTPClientWork+0xc8>
	if( ( pxFTPCommand->ucCommandType != ECMD_PASS ) && ( pxFTPCommand->ucCommandType != ECMD_PORT ) )
 8011952:	4b7e      	ldr	r3, [pc, #504]	; (8011b4c <xFTPClientWork+0x2d0>)
 8011954:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8011958:	7add      	ldrb	r5, [r3, #11]
 801195a:	2d01      	cmp	r5, #1
 801195c:	d008      	beq.n	8011970 <xFTPClientWork+0xf4>
 801195e:	2d08      	cmp	r5, #8
 8011960:	d006      	beq.n	8011970 <xFTPClientWork+0xf4>
		FreeRTOS_printf( ( "       %s %s\n", pxFTPCommand->pcCommandName, pcRestCommand ) );
 8011962:	464a      	mov	r2, r9
 8011964:	4978      	ldr	r1, [pc, #480]	; (8011b48 <xFTPClientWork+0x2cc>)
 8011966:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 801196a:	4879      	ldr	r0, [pc, #484]	; (8011b50 <xFTPClientWork+0x2d4>)
 801196c:	f004 fff0 	bl	8016950 <lUDPLoggingPrintf>
	if( ( pxFTPCommand->checkLogin != pdFALSE ) && ( pxClient->bits.bLoggedIn == pdFALSE_UNSIGNED ) )
 8011970:	4b76      	ldr	r3, [pc, #472]	; (8011b4c <xFTPClientWork+0x2d0>)
 8011972:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8011976:	7b1b      	ldrb	r3, [r3, #12]
 8011978:	b12b      	cbz	r3, 8011986 <xFTPClientWork+0x10a>
 801197a:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 801197e:	f013 0f02 	tst.w	r3, #2
 8011982:	f000 8763 	beq.w	801284c <xFTPClientWork+0xfd0>
	else if( ( pxFTPCommand->checkNullArg != pdFALSE ) && ( ( pcRestCommand == NULL ) || ( pcRestCommand[ 0 ] == '\0' ) ) )
 8011986:	4b71      	ldr	r3, [pc, #452]	; (8011b4c <xFTPClientWork+0x2d0>)
 8011988:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 801198c:	7b73      	ldrb	r3, [r6, #13]
 801198e:	b143      	cbz	r3, 80119a2 <xFTPClientWork+0x126>
 8011990:	f1b9 0f00 	cmp.w	r9, #0
 8011994:	f000 878a 	beq.w	80128ac <xFTPClientWork+0x1030>
 8011998:	f899 3000 	ldrb.w	r3, [r9]
 801199c:	2b00      	cmp	r3, #0
 801199e:	f000 879b 	beq.w	80128d8 <xFTPClientWork+0x105c>
		switch( pxFTPCommand->ucCommandType )
 80119a2:	2d26      	cmp	r5, #38	; 0x26
 80119a4:	f200 85b5 	bhi.w	8012512 <xFTPClientWork+0xc96>
 80119a8:	e8df f015 	tbh	[pc, r5, lsl #1]
 80119ac:	00300027 	.word	0x00300027
 80119b0:	017805b3 	.word	0x017805b3
 80119b4:	05b303ac 	.word	0x05b303ac
 80119b8:	05b303b2 	.word	0x05b303b2
 80119bc:	00c40131 	.word	0x00c40131
 80119c0:	05b3009c 	.word	0x05b3009c
 80119c4:	03bf05b3 	.word	0x03bf05b3
 80119c8:	05b303bf 	.word	0x05b303bf
 80119cc:	05b305b3 	.word	0x05b305b3
 80119d0:	017f006d 	.word	0x017f006d
 80119d4:	05b301d3 	.word	0x05b301d3
 80119d8:	02f402fc 	.word	0x02f402fc
 80119dc:	03440272 	.word	0x03440272
 80119e0:	00560344 	.word	0x00560344
 80119e4:	05b303bf 	.word	0x05b303bf
 80119e8:	00490268 	.word	0x00490268
 80119ec:	05b307d1 	.word	0x05b307d1
 80119f0:	009405b3 	.word	0x009405b3
 80119f4:	05b305b3 	.word	0x05b305b3
 80119f8:	05ad      	.short	0x05ad
			pxClient->bits.bStatusUser = pdTRUE_UNSIGNED;
 80119fa:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 80119fe:	f043 0304 	orr.w	r3, r3, #4
 8011a02:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
				pcMyReply = REPL_331_ANON;
 8011a06:	4e53      	ldr	r6, [pc, #332]	; (8011b54 <xFTPClientWork+0x2d8>)
 8011a08:	f000 bf23 	b.w	8012852 <xFTPClientWork+0xfd6>
			pxClient->ulRestartOffset = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	61e3      	str	r3, [r4, #28]
			if( pxClient->bits.bStatusUser == pdFALSE_UNSIGNED )
 8011a10:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011a14:	f013 0f04 	tst.w	r3, #4
 8011a18:	d102      	bne.n	8011a20 <xFTPClientWork+0x1a4>
				pcMyReply = REPL_503;	/* "503 Bad sequence of commands.\r\n". */
 8011a1a:	4e4f      	ldr	r6, [pc, #316]	; (8011b58 <xFTPClientWork+0x2dc>)
 8011a1c:	f000 bf19 	b.w	8012852 <xFTPClientWork+0xfd6>
				pxClient->bits.bStatusUser = pdFALSE_UNSIGNED;
 8011a20:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
					pxClient->bits.bLoggedIn = pdTRUE_UNSIGNED;  /* Client has now logged in. */
 8011a24:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8011a28:	f043 0302 	orr.w	r3, r3, #2
 8011a2c:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
				strcpy( pxClient->pcCurrentDir, ( const char * ) "/" );
 8011a30:	4b4a      	ldr	r3, [pc, #296]	; (8011b5c <xFTPClientWork+0x2e0>)
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
 8011a38:	4e49      	ldr	r6, [pc, #292]	; (8011b60 <xFTPClientWork+0x2e4>)
 8011a3a:	f000 bf0a 	b.w	8012852 <xFTPClientWork+0xfd6>
			snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "215 UNIX Type: L8\r\n" );
 8011a3e:	6867      	ldr	r7, [r4, #4]
 8011a40:	4d48      	ldr	r5, [pc, #288]	; (8011b64 <xFTPClientWork+0x2e8>)
 8011a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a44:	6078      	str	r0, [r7, #4]
 8011a46:	60b9      	str	r1, [r7, #8]
 8011a48:	60fa      	str	r2, [r7, #12]
 8011a4a:	613b      	str	r3, [r7, #16]
 8011a4c:	6828      	ldr	r0, [r5, #0]
 8011a4e:	6178      	str	r0, [r7, #20]
			pcMyReply = pcCOMMAND_BUFFER;
 8011a50:	6866      	ldr	r6, [r4, #4]
 8011a52:	3604      	adds	r6, #4
 8011a54:	f000 befd 	b.w	8012852 <xFTPClientWork+0xfd6>
			xMakeRelative( pxClient, pcFILE_BUFFER, sizeof( pcFILE_BUFFER ), pxClient->pcCurrentDir );
 8011a58:	6861      	ldr	r1, [r4, #4]
 8011a5a:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 8011a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a62:	f601 0104 	addw	r1, r1, #2052	; 0x804
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7ff fee6 	bl	8011838 <xMakeRelative>
			snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), REPL_257_PWD, pcFILE_BUFFER );
 8011a6c:	6860      	ldr	r0, [r4, #4]
 8011a6e:	f600 0304 	addw	r3, r0, #2052	; 0x804
 8011a72:	4a3d      	ldr	r2, [pc, #244]	; (8011b68 <xFTPClientWork+0x2ec>)
 8011a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a78:	3004      	adds	r0, #4
 8011a7a:	f005 faae 	bl	8016fda <snprintf>
			pcMyReply = pcCOMMAND_BUFFER;
 8011a7e:	6866      	ldr	r6, [r4, #4]
 8011a80:	3604      	adds	r6, #4
 8011a82:	f000 bee6 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8011a86:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011a8a:	f013 0f10 	tst.w	r3, #16
 8011a8e:	f040 8752 	bne.w	8012936 <xFTPClientWork+0x10ba>
				while( *pcPtr == ' ' )
 8011a92:	f899 3000 	ldrb.w	r3, [r9]
 8011a96:	2b20      	cmp	r3, #32
 8011a98:	d11a      	bne.n	8011ad0 <xFTPClientWork+0x254>
 8011a9a:	4648      	mov	r0, r9
 8011a9c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011aa0:	2b20      	cmp	r3, #32
 8011aa2:	d0fb      	beq.n	8011a9c <xFTPClientWork+0x220>
				if( ( *pcPtr >= '0' ) && ( *pcPtr <= '9' ) )
 8011aa4:	3b30      	subs	r3, #48	; 0x30
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b09      	cmp	r3, #9
 8011aaa:	f200 8746 	bhi.w	801293a <xFTPClientWork+0x10be>
					sscanf( pcPtr, "%lu", &pxClient->ulRestartOffset );
 8011aae:	f104 021c 	add.w	r2, r4, #28
 8011ab2:	492e      	ldr	r1, [pc, #184]	; (8011b6c <xFTPClientWork+0x2f0>)
 8011ab4:	f005 fe92 	bl	80177dc <siscanf>
					snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011ab8:	6860      	ldr	r0, [r4, #4]
 8011aba:	69e3      	ldr	r3, [r4, #28]
 8011abc:	4a2c      	ldr	r2, [pc, #176]	; (8011b70 <xFTPClientWork+0x2f4>)
 8011abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ac2:	3004      	adds	r0, #4
 8011ac4:	f005 fa89 	bl	8016fda <snprintf>
					pcMyReply = pcCOMMAND_BUFFER;
 8011ac8:	6866      	ldr	r6, [r4, #4]
 8011aca:	3604      	adds	r6, #4
 8011acc:	f000 bec1 	b.w	8012852 <xFTPClientWork+0xfd6>
				while( *pcPtr == ' ' )
 8011ad0:	4648      	mov	r0, r9
 8011ad2:	e7e7      	b.n	8011aa4 <xFTPClientWork+0x228>
			if( pxClient->xTransferSocket != FREERTOS_NO_SOCKET )
 8011ad4:	6b62      	ldr	r2, [r4, #52]	; 0x34
				pcMyReply = REPL_200;
 8011ad6:	4b27      	ldr	r3, [pc, #156]	; (8011b74 <xFTPClientWork+0x2f8>)
 8011ad8:	4e27      	ldr	r6, [pc, #156]	; (8011b78 <xFTPClientWork+0x2fc>)
 8011ada:	2a00      	cmp	r2, #0
 8011adc:	bf08      	it	eq
 8011ade:	461e      	moveq	r6, r3
 8011ae0:	f000 beb7 	b.w	8012852 <xFTPClientWork+0xfd6>
	if( pcType != NULL )
 8011ae4:	f1b9 0f00 	cmp.w	r9, #0
 8011ae8:	f000 874e 	beq.w	8012988 <xFTPClientWork+0x110c>
		BaseType_t xLength = strlen( pcType );
 8011aec:	4648      	mov	r0, r9
 8011aee:	f7ee fb79 	bl	80001e4 <strlen>
		if( xLength == 0 )
 8011af2:	2800      	cmp	r0, #0
 8011af4:	f000 874a 	beq.w	801298c <xFTPClientWork+0x1110>
		switch( pcType[ 0 ] ) {
 8011af8:	f899 3000 	ldrb.w	r3, [r9]
 8011afc:	2b49      	cmp	r3, #73	; 0x49
 8011afe:	f000 86ed 	beq.w	80128dc <xFTPClientWork+0x1060>
 8011b02:	2b4c      	cmp	r3, #76	; 0x4c
 8011b04:	d009      	beq.n	8011b1a <xFTPClientWork+0x29e>
 8011b06:	2b41      	cmp	r3, #65	; 0x41
 8011b08:	d002      	beq.n	8011b10 <xFTPClientWork+0x294>
					pcMyReply = REPL_500;
 8011b0a:	4e1c      	ldr	r6, [pc, #112]	; (8011b7c <xFTPClientWork+0x300>)
 8011b0c:	f000 bea1 	b.w	8012852 <xFTPClientWork+0xfd6>
			xResult = TMODE_ASCII;
 8011b10:	2302      	movs	r3, #2
					pxClient->xTransType = xType;
 8011b12:	63a3      	str	r3, [r4, #56]	; 0x38
					pcMyReply = REPL_200;
 8011b14:	4e17      	ldr	r6, [pc, #92]	; (8011b74 <xFTPClientWork+0x2f8>)
 8011b16:	f000 be9c 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( xLength >= 3 )
 8011b1a:	2802      	cmp	r0, #2
 8011b1c:	f340 8738 	ble.w	8012990 <xFTPClientWork+0x1114>
				if( pcType[ 2 ] == '7' )
 8011b20:	f899 3002 	ldrb.w	r3, [r9, #2]
 8011b24:	3b37      	subs	r3, #55	; 0x37
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	f240 86da 	bls.w	80128e2 <xFTPClientWork+0x1066>
					pcMyReply = REPL_500;
 8011b2e:	4e13      	ldr	r6, [pc, #76]	; (8011b7c <xFTPClientWork+0x300>)
 8011b30:	f000 be8f 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( prvTransferConnect( pxClient, pdTRUE ) == pdFALSE )
 8011b34:	2101      	movs	r1, #1
 8011b36:	4620      	mov	r0, r4
 8011b38:	f7ff fbc6 	bl	80112c8 <prvTransferConnect>
 8011b3c:	bb10      	cbnz	r0, 8011b84 <xFTPClientWork+0x308>
				pcMyReply = REPL_502;
 8011b3e:	4e10      	ldr	r6, [pc, #64]	; (8011b80 <xFTPClientWork+0x304>)
 8011b40:	f000 be87 	b.w	8012852 <xFTPClientWork+0xfd6>
 8011b44:	0801af34 	.word	0x0801af34
 8011b48:	0801a724 	.word	0x0801a724
 8011b4c:	0801a720 	.word	0x0801a720
 8011b50:	0801af64 	.word	0x0801af64
 8011b54:	0801ae00 	.word	0x0801ae00
 8011b58:	0801aea8 	.word	0x0801aea8
 8011b5c:	080193b0 	.word	0x080193b0
 8011b60:	0801af10 	.word	0x0801af10
 8011b64:	0801af74 	.word	0x0801af74
 8011b68:	0801af88 	.word	0x0801af88
 8011b6c:	0801af94 	.word	0x0801af94
 8011b70:	0801af98 	.word	0x0801af98
 8011b74:	0801ade0 	.word	0x0801ade0
 8011b78:	0801aee8 	.word	0x0801aee8
 8011b7c:	0801ae7c 	.word	0x0801ae7c
 8011b80:	0801aec8 	.word	0x0801aec8
				FreeRTOS_GetLocalAddress( pxClient->xTransferSocket, &xLocalAddress );
 8011b84:	a915      	add	r1, sp, #84	; 0x54
 8011b86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b88:	f7fb fbf6 	bl	800d378 <FreeRTOS_GetLocalAddress>
				FreeRTOS_GetRemoteAddress( pxClient->xSocket, &xRemoteAddress );
 8011b8c:	a918      	add	r1, sp, #96	; 0x60
 8011b8e:	68a0      	ldr	r0, [r4, #8]
 8011b90:	f7fb ffa2 	bl	800dad8 <FreeRTOS_GetRemoteAddress>
				ulIP = FreeRTOS_ntohl( xLocalAddress.sin_addr );
 8011b94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b96:	0e13      	lsrs	r3, r2, #24
 8011b98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011b9c:	0211      	lsls	r1, r2, #8
 8011b9e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8011ba2:	4319      	orrs	r1, r3
 8011ba4:	0a13      	lsrs	r3, r2, #8
 8011ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011baa:	430b      	orrs	r3, r1
				pxClient->ulClientIP = FreeRTOS_ntohl( xRemoteAddress.sin_addr );
 8011bac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011bae:	0e11      	lsrs	r1, r2, #24
 8011bb0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 8011bb4:	0210      	lsls	r0, r2, #8
 8011bb6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8011bba:	4301      	orrs	r1, r0
 8011bbc:	0a12      	lsrs	r2, r2, #8
 8011bbe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8011bc2:	430a      	orrs	r2, r1
 8011bc4:	62a2      	str	r2, [r4, #40]	; 0x28
				ulPort = FreeRTOS_ntohs( xLocalAddress.sin_port );
 8011bc6:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8011bca:	0a0a      	lsrs	r2, r1, #8
 8011bcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011bd0:	b292      	uxth	r2, r2
				pxClient->usClientPort = FreeRTOS_ntohs( xRemoteAddress.sin_port );
 8011bd2:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
 8011bd6:	0a01      	lsrs	r1, r0, #8
 8011bd8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8011bdc:	8621      	strh	r1, [r4, #48]	; 0x30
				snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), REPL_227_D,
 8011bde:	6860      	ldr	r0, [r4, #4]
 8011be0:	b2d1      	uxtb	r1, r2
 8011be2:	9104      	str	r1, [sp, #16]
 8011be4:	0a12      	lsrs	r2, r2, #8
 8011be6:	9203      	str	r2, [sp, #12]
 8011be8:	b2da      	uxtb	r2, r3
 8011bea:	9202      	str	r2, [sp, #8]
 8011bec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011bf0:	9201      	str	r2, [sp, #4]
 8011bf2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011bf6:	9200      	str	r2, [sp, #0]
 8011bf8:	0e1b      	lsrs	r3, r3, #24
 8011bfa:	4ac2      	ldr	r2, [pc, #776]	; (8011f04 <xFTPClientWork+0x688>)
 8011bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011c00:	3004      	adds	r0, #4
 8011c02:	f005 f9ea 	bl	8016fda <snprintf>
				pcMyReply = pcCOMMAND_BUFFER;
 8011c06:	6866      	ldr	r6, [r4, #4]
 8011c08:	3604      	adds	r6, #4
 8011c0a:	f000 be22 	b.w	8012852 <xFTPClientWork+0xfd6>
	if (sscanf (pcCommand, "%u%c%u%c%u%c%u%c%u%c%u", &h1, &sep, &h2, &sep, &h3, &sep, &h4, &sep, &p1, &sep, &p2) != 11)
 8011c0e:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8011c12:	aa18      	add	r2, sp, #96	; 0x60
 8011c14:	9208      	str	r2, [sp, #32]
 8011c16:	9307      	str	r3, [sp, #28]
 8011c18:	aa15      	add	r2, sp, #84	; 0x54
 8011c1a:	9206      	str	r2, [sp, #24]
 8011c1c:	9305      	str	r3, [sp, #20]
 8011c1e:	aa12      	add	r2, sp, #72	; 0x48
 8011c20:	9204      	str	r2, [sp, #16]
 8011c22:	9303      	str	r3, [sp, #12]
 8011c24:	aa10      	add	r2, sp, #64	; 0x40
 8011c26:	9202      	str	r2, [sp, #8]
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8011c2c:	9200      	str	r2, [sp, #0]
 8011c2e:	aa0e      	add	r2, sp, #56	; 0x38
 8011c30:	49b5      	ldr	r1, [pc, #724]	; (8011f08 <xFTPClientWork+0x68c>)
 8011c32:	4648      	mov	r0, r9
 8011c34:	f005 fdd2 	bl	80177dc <siscanf>
 8011c38:	280b      	cmp	r0, #11
 8011c3a:	d007      	beq.n	8011c4c <xFTPClientWork+0x3d0>
				FreeRTOS_printf( ("       PORT %lxip:%ld\n", ulIPAddress, uxPort ) );
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	4611      	mov	r1, r2
 8011c40:	48b2      	ldr	r0, [pc, #712]	; (8011f0c <xFTPClientWork+0x690>)
 8011c42:	f004 fe85 	bl	8016950 <lUDPLoggingPrintf>
					pcMyReply = REPL_501;
 8011c46:	4eb2      	ldr	r6, [pc, #712]	; (8011f10 <xFTPClientWork+0x694>)
 8011c48:	f000 be03 	b.w	8012852 <xFTPClientWork+0xfd6>
			( ( uint32_t ) h2 << 16 ) |
 8011c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c4e:	041d      	lsls	r5, r3, #16
			( ( uint32_t ) h1 << 24 ) |
 8011c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c52:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
			( ( uint32_t ) h3 << 8 ) |
 8011c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c58:	431d      	orrs	r5, r3
 8011c5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c5c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		uxResult = ( p1 << 8 ) | p2;
 8011c60:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c64:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
				FreeRTOS_printf( ("       PORT %lxip:%ld\n", ulIPAddress, uxPort ) );
 8011c68:	4632      	mov	r2, r6
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	48a7      	ldr	r0, [pc, #668]	; (8011f0c <xFTPClientWork+0x690>)
 8011c6e:	f004 fe6f 	bl	8016950 <lUDPLoggingPrintf>
				if( uxPort == 0u )
 8011c72:	2e00      	cmp	r6, #0
 8011c74:	f000 8663 	beq.w	801293e <xFTPClientWork+0x10c2>
				else if( prvTransferConnect( pxClient, pdFALSE ) == pdFALSE )
 8011c78:	2100      	movs	r1, #0
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f7ff fb24 	bl	80112c8 <prvTransferConnect>
 8011c80:	b910      	cbnz	r0, 8011c88 <xFTPClientWork+0x40c>
					pcMyReply = REPL_501;
 8011c82:	4ea3      	ldr	r6, [pc, #652]	; (8011f10 <xFTPClientWork+0x694>)
 8011c84:	f000 bde5 	b.w	8012852 <xFTPClientWork+0xfd6>
					pxClient->usClientPort = ( uint16_t ) uxPort;
 8011c88:	8626      	strh	r6, [r4, #48]	; 0x30
					pxClient->ulClientIP = ulIPAddress;
 8011c8a:	62a5      	str	r5, [r4, #40]	; 0x28
					FreeRTOS_printf( ("Client address %lxip:%lu\n", ulIPAddress, uxPort ) );
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	4629      	mov	r1, r5
 8011c90:	48a0      	ldr	r0, [pc, #640]	; (8011f14 <xFTPClientWork+0x698>)
 8011c92:	f004 fe5d 	bl	8016950 <lUDPLoggingPrintf>
					pcMyReply = REPL_200;
 8011c96:	4ea0      	ldr	r6, [pc, #640]	; (8011f18 <xFTPClientWork+0x69c>)
 8011c98:	f000 bddb 	b.w	8012852 <xFTPClientWork+0xfd6>
			prvChangeDir( pxClient, pcRestCommand );
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7ff fd20 	bl	80116e4 <prvChangeDir>
 8011ca4:	2600      	movs	r6, #0
 8011ca6:	f000 bdd4 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8011caa:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011cae:	f013 0f10 	tst.w	r3, #16
 8011cb2:	d002      	beq.n	8011cba <xFTPClientWork+0x43e>
				pcMyReply = REPL_553_READ_ONLY;
 8011cb4:	4e99      	ldr	r6, [pc, #612]	; (8011f1c <xFTPClientWork+0x6a0>)
 8011cb6:	f000 bdd3 	b.w	8012860 <xFTPClientWork+0xfe4>
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcFileName );
 8011cba:	f204 2539 	addw	r5, r4, #569	; 0x239
 8011cbe:	464b      	mov	r3, r9
 8011cc0:	22c1      	movs	r2, #193	; 0xc1
 8011cc2:	4629      	mov	r1, r5
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f7ff fc39 	bl	801153c <xMakeAbsolute>
	fh = ff_fopen( pxClient->pcFileName, "rb" );
 8011cca:	4995      	ldr	r1, [pc, #596]	; (8011f20 <xFTPClientWork+0x6a4>)
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f7f7 f916 	bl	8008efe <ff_fopen>
	if( fh != NULL )
 8011cd2:	b1d0      	cbz	r0, 8011d0a <xFTPClientWork+0x48e>
		ff_fclose( fh );
 8011cd4:	f7f7 f938 	bl	8008f48 <ff_fclose>
		snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011cd8:	6860      	ldr	r0, [r4, #4]
 8011cda:	462b      	mov	r3, r5
 8011cdc:	4a91      	ldr	r2, [pc, #580]	; (8011f24 <xFTPClientWork+0x6a8>)
 8011cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ce2:	3004      	adds	r0, #4
 8011ce4:	f005 f979 	bl	8016fda <snprintf>
		myReply = pcCOMMAND_BUFFER;
 8011ce8:	6861      	ldr	r1, [r4, #4]
 8011cea:	3104      	adds	r1, #4
		pxClient->bits.bInRename = pdTRUE_UNSIGNED;
 8011cec:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011cf0:	f043 0308 	orr.w	r3, r3, #8
 8011cf4:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
	if( myReply )
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	f000 85b9 	beq.w	8012870 <xFTPClientWork+0xff4>
		prvSendReply( pxClient->xSocket, myReply, 0 );
 8011cfe:	2200      	movs	r2, #0
 8011d00:	68a0      	ldr	r0, [r4, #8]
 8011d02:	f7ff f923 	bl	8010f4c <prvSendReply>
 8011d06:	f000 bdb3 	b.w	8012870 <xFTPClientWork+0xff4>
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	4608      	mov	r0, r1
 8011d0e:	f002 ff57 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
	else if( stdioGET_ERRNO() == pdFREERTOS_ERRNO_EISDIR )
 8011d12:	2815      	cmp	r0, #21
 8011d14:	d110      	bne.n	8011d38 <xFTPClientWork+0x4bc>
		snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011d16:	6860      	ldr	r0, [r4, #4]
 8011d18:	462b      	mov	r3, r5
 8011d1a:	4a83      	ldr	r2, [pc, #524]	; (8011f28 <xFTPClientWork+0x6ac>)
 8011d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011d20:	3004      	adds	r0, #4
 8011d22:	f005 f95a 	bl	8016fda <snprintf>
		myReply = pcCOMMAND_BUFFER;
 8011d26:	6861      	ldr	r1, [r4, #4]
 8011d28:	3104      	adds	r1, #4
		pxClient->bits.bInRename = pdTRUE_UNSIGNED;
 8011d2a:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011d2e:	f043 0308 	orr.w	r3, r3, #8
 8011d32:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
 8011d36:	e7df      	b.n	8011cf8 <xFTPClientWork+0x47c>
 8011d38:	2100      	movs	r1, #0
 8011d3a:	4608      	mov	r0, r1
 8011d3c:	f002 ff40 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
		FreeRTOS_printf( ("ftp::renameFrom[%s]\n%s\n", pxClient->pcFileName, strerror( stdioGET_ERRNO() ) ) );
 8011d40:	f005 ff74 	bl	8017c2c <strerror>
 8011d44:	4602      	mov	r2, r0
 8011d46:	4629      	mov	r1, r5
 8011d48:	4878      	ldr	r0, [pc, #480]	; (8011f2c <xFTPClientWork+0x6b0>)
 8011d4a:	f004 fe01 	bl	8016950 <lUDPLoggingPrintf>
		myReply = REPL_451;		/* "451 Requested action aborted. Local error in processing." */
 8011d4e:	4978      	ldr	r1, [pc, #480]	; (8011f30 <xFTPClientWork+0x6b4>)
 8011d50:	e7d5      	b.n	8011cfe <xFTPClientWork+0x482>
			if( pxClient->bits.bInRename == pdFALSE_UNSIGNED )
 8011d52:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011d56:	f013 0f08 	tst.w	r3, #8
 8011d5a:	d102      	bne.n	8011d62 <xFTPClientWork+0x4e6>
				pcMyReply = REPL_503;	/* "503 Bad sequence of commands. */
 8011d5c:	4e75      	ldr	r6, [pc, #468]	; (8011f34 <xFTPClientWork+0x6b8>)
 8011d5e:	f000 bd78 	b.w	8012852 <xFTPClientWork+0xfd6>
	xMakeAbsolute( pxClient, pcNEW_DIR, sizeof( pcNEW_DIR ), pcFileName );
 8011d62:	f241 0604 	movw	r6, #4100	; 0x1004
 8011d66:	6861      	ldr	r1, [r4, #4]
 8011d68:	464b      	mov	r3, r9
 8011d6a:	22c1      	movs	r2, #193	; 0xc1
 8011d6c:	4431      	add	r1, r6
 8011d6e:	4620      	mov	r0, r4
 8011d70:	f7ff fbe4 	bl	801153c <xMakeAbsolute>
	iResult = ff_rename( pxClient->pcFileName, pcNEW_DIR, pdFALSE );
 8011d74:	f204 2539 	addw	r5, r4, #569	; 0x239
 8011d78:	6861      	ldr	r1, [r4, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4431      	add	r1, r6
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f7f7 f9b7 	bl	80090f2 <ff_rename>
	if( iResult < 0 )
 8011d84:	2800      	cmp	r0, #0
 8011d86:	db18      	blt.n	8011dba <xFTPClientWork+0x53e>
		FreeRTOS_printf( ( "ftp::renameTo[%s,%s]: Ok\n", pxClient->pcFileName, pcNEW_DIR ) );
 8011d88:	f241 0604 	movw	r6, #4100	; 0x1004
 8011d8c:	6862      	ldr	r2, [r4, #4]
 8011d8e:	4432      	add	r2, r6
 8011d90:	4629      	mov	r1, r5
 8011d92:	4869      	ldr	r0, [pc, #420]	; (8011f38 <xFTPClientWork+0x6bc>)
 8011d94:	f004 fddc 	bl	8016950 <lUDPLoggingPrintf>
		snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011d98:	6860      	ldr	r0, [r4, #4]
 8011d9a:	1983      	adds	r3, r0, r6
 8011d9c:	4a67      	ldr	r2, [pc, #412]	; (8011f3c <xFTPClientWork+0x6c0>)
 8011d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011da2:	3004      	adds	r0, #4
 8011da4:	f005 f919 	bl	8016fda <snprintf>
		myReply = pcCOMMAND_BUFFER;
 8011da8:	6861      	ldr	r1, [r4, #4]
 8011daa:	3104      	adds	r1, #4
	prvSendReply( pxClient->xSocket, myReply, 0 );
 8011dac:	2200      	movs	r2, #0
 8011dae:	68a0      	ldr	r0, [r4, #8]
 8011db0:	f7ff f8cc 	bl	8010f4c <prvSendReply>
 8011db4:	2600      	movs	r6, #0
 8011db6:	f000 bd4c 	b.w	8012852 <xFTPClientWork+0xfd6>
 8011dba:	2100      	movs	r1, #0
 8011dbc:	4608      	mov	r0, r1
 8011dbe:	f002 feff 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
	switch( iResult )
 8011dc2:	2811      	cmp	r0, #17
 8011dc4:	d848      	bhi.n	8011e58 <xFTPClientWork+0x5dc>
 8011dc6:	a301      	add	r3, pc, #4	; (adr r3, 8011dcc <xFTPClientWork+0x550>)
 8011dc8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8011dcc:	08011d89 	.word	0x08011d89
 8011dd0:	08011e59 	.word	0x08011e59
 8011dd4:	08011e43 	.word	0x08011e43
 8011dd8:	08011e59 	.word	0x08011e59
 8011ddc:	08011e59 	.word	0x08011e59
 8011de0:	08011e2f 	.word	0x08011e2f
 8011de4:	08011e43 	.word	0x08011e43
 8011de8:	08011e59 	.word	0x08011e59
 8011dec:	08011e59 	.word	0x08011e59
 8011df0:	08011e59 	.word	0x08011e59
 8011df4:	08011e59 	.word	0x08011e59
 8011df8:	08011e59 	.word	0x08011e59
 8011dfc:	08011e59 	.word	0x08011e59
 8011e00:	08011e59 	.word	0x08011e59
 8011e04:	08011e59 	.word	0x08011e59
 8011e08:	08011e59 	.word	0x08011e59
 8011e0c:	08011e59 	.word	0x08011e59
 8011e10:	08011e15 	.word	0x08011e15
		snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011e14:	6860      	ldr	r0, [r4, #4]
 8011e16:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	4a48      	ldr	r2, [pc, #288]	; (8011f40 <xFTPClientWork+0x6c4>)
 8011e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e22:	3004      	adds	r0, #4
 8011e24:	f005 f8d9 	bl	8016fda <snprintf>
		myReply = pcCOMMAND_BUFFER;
 8011e28:	6861      	ldr	r1, [r4, #4]
 8011e2a:	3104      	adds	r1, #4
 8011e2c:	e7be      	b.n	8011dac <xFTPClientWork+0x530>
		FreeRTOS_printf( ("ftp::renameTo[%s,%s]: Error creating DirEnt\n",
 8011e2e:	6862      	ldr	r2, [r4, #4]
 8011e30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8011e34:	3204      	adds	r2, #4
 8011e36:	4629      	mov	r1, r5
 8011e38:	4842      	ldr	r0, [pc, #264]	; (8011f44 <xFTPClientWork+0x6c8>)
 8011e3a:	f004 fd89 	bl	8016950 <lUDPLoggingPrintf>
		myReply = REPL_553;
 8011e3e:	4942      	ldr	r1, [pc, #264]	; (8011f48 <xFTPClientWork+0x6cc>)
 8011e40:	e7b4      	b.n	8011dac <xFTPClientWork+0x530>
		snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011e42:	6860      	ldr	r0, [r4, #4]
 8011e44:	462b      	mov	r3, r5
 8011e46:	4a41      	ldr	r2, [pc, #260]	; (8011f4c <xFTPClientWork+0x6d0>)
 8011e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e4c:	3004      	adds	r0, #4
 8011e4e:	f005 f8c4 	bl	8016fda <snprintf>
		myReply = pcCOMMAND_BUFFER;
 8011e52:	6861      	ldr	r1, [r4, #4]
 8011e54:	3104      	adds	r1, #4
 8011e56:	e7a9      	b.n	8011dac <xFTPClientWork+0x530>
		FreeRTOS_printf( ("ftp::renameTo[%s,%s]: %s\n", pxClient->pcFileName, pcNEW_DIR,
 8011e58:	6866      	ldr	r6, [r4, #4]
 8011e5a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8011e5e:	3604      	adds	r6, #4
 8011e60:	2100      	movs	r1, #0
 8011e62:	4608      	mov	r0, r1
 8011e64:	f002 feac 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
 8011e68:	f005 fee0 	bl	8017c2c <strerror>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	4632      	mov	r2, r6
 8011e70:	4629      	mov	r1, r5
 8011e72:	4837      	ldr	r0, [pc, #220]	; (8011f50 <xFTPClientWork+0x6d4>)
 8011e74:	f004 fd6c 	bl	8016950 <lUDPLoggingPrintf>
		myReply = REPL_451;	/* "451 Requested action aborted. Local error in processing." */
 8011e78:	492d      	ldr	r1, [pc, #180]	; (8011f30 <xFTPClientWork+0x6b4>)
 8011e7a:	e797      	b.n	8011dac <xFTPClientWork+0x530>
			if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8011e7c:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
				pcMyReply = REPL_202;
 8011e80:	f013 0f10 	tst.w	r3, #16
 8011e84:	4b33      	ldr	r3, [pc, #204]	; (8011f54 <xFTPClientWork+0x6d8>)
 8011e86:	4e25      	ldr	r6, [pc, #148]	; (8011f1c <xFTPClientWork+0x6a0>)
 8011e88:	bf08      	it	eq
 8011e8a:	461e      	moveq	r6, r3
 8011e8c:	f000 bce1 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8011e90:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8011e94:	f013 0f10 	tst.w	r3, #16
 8011e98:	d002      	beq.n	8011ea0 <xFTPClientWork+0x624>
				pcMyReply = REPL_553_READ_ONLY;
 8011e9a:	4e20      	ldr	r6, [pc, #128]	; (8011f1c <xFTPClientWork+0x6a0>)
 8011e9c:	f000 bcd9 	b.w	8012852 <xFTPClientWork+0xfd6>
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcFileName );
 8011ea0:	f204 2639 	addw	r6, r4, #569	; 0x239
 8011ea4:	464b      	mov	r3, r9
 8011ea6:	22c1      	movs	r2, #193	; 0xc1
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f7ff fb46 	bl	801153c <xMakeAbsolute>
	iRc = ff_remove( pxClient->pcFileName );
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	f7f7 f900 	bl	80090b6 <ff_remove>
	if (iRc >= 0 )
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	db10      	blt.n	8011edc <xFTPClientWork+0x660>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011eba:	6860      	ldr	r0, [r4, #4]
 8011ebc:	4633      	mov	r3, r6
 8011ebe:	4a26      	ldr	r2, [pc, #152]	; (8011f58 <xFTPClientWork+0x6dc>)
 8011ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ec4:	3004      	adds	r0, #4
 8011ec6:	f005 f888 	bl	8016fda <snprintf>
	prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 8011eca:	6861      	ldr	r1, [r4, #4]
 8011ecc:	4602      	mov	r2, r0
 8011ece:	3104      	adds	r1, #4
 8011ed0:	68a0      	ldr	r0, [r4, #8]
 8011ed2:	f7ff f83b 	bl	8010f4c <prvSendReply>
 8011ed6:	2600      	movs	r6, #0
 8011ed8:	f000 bcbb 	b.w	8012852 <xFTPClientWork+0xfd6>
 8011edc:	2100      	movs	r1, #0
 8011ede:	4608      	mov	r0, r1
 8011ee0:	f002 fe6e 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
		switch( iErrorNo )
 8011ee4:	2815      	cmp	r0, #21
 8011ee6:	d04f      	beq.n	8011f88 <xFTPClientWork+0x70c>
 8011ee8:	dc05      	bgt.n	8011ef6 <xFTPClientWork+0x67a>
 8011eea:	2802      	cmp	r0, #2
 8011eec:	d03a      	beq.n	8011f64 <xFTPClientWork+0x6e8>
 8011eee:	2814      	cmp	r0, #20
 8011ef0:	d04e      	beq.n	8011f90 <xFTPClientWork+0x714>
		const char *errMsg = "other error";
 8011ef2:	4d1a      	ldr	r5, [pc, #104]	; (8011f5c <xFTPClientWork+0x6e0>)
 8011ef4:	e037      	b.n	8011f66 <xFTPClientWork+0x6ea>
		switch( iErrorNo )
 8011ef6:	281e      	cmp	r0, #30
 8011ef8:	d048      	beq.n	8011f8c <xFTPClientWork+0x710>
 8011efa:	2878      	cmp	r0, #120	; 0x78
 8011efc:	d1f9      	bne.n	8011ef2 <xFTPClientWork+0x676>
			case pdFREERTOS_ERRNO_EALREADY:	errMsg = "File still open"; break;	/* -30	File is in use. */
 8011efe:	4d18      	ldr	r5, [pc, #96]	; (8011f60 <xFTPClientWork+0x6e4>)
 8011f00:	e031      	b.n	8011f66 <xFTPClientWork+0x6ea>
 8011f02:	bf00      	nop
 8011f04:	0801afc8 	.word	0x0801afc8
 8011f08:	0801affc 	.word	0x0801affc
 8011f0c:	0801b014 	.word	0x0801b014
 8011f10:	0801ad88 	.word	0x0801ad88
 8011f14:	0801b02c 	.word	0x0801b02c
 8011f18:	0801ade0 	.word	0x0801ade0
 8011f1c:	0801ad68 	.word	0x0801ad68
 8011f20:	0801b048 	.word	0x0801b048
 8011f24:	0801b04c 	.word	0x0801b04c
 8011f28:	0801b064 	.word	0x0801b064
 8011f2c:	0801b084 	.word	0x0801b084
 8011f30:	0801ac48 	.word	0x0801ac48
 8011f34:	0801aea8 	.word	0x0801aea8
 8011f38:	0801b09c 	.word	0x0801b09c
 8011f3c:	0801b0b8 	.word	0x0801b0b8
 8011f40:	0801b0d8 	.word	0x0801b0d8
 8011f44:	0801b0f4 	.word	0x0801b0f4
 8011f48:	0801ac84 	.word	0x0801ac84
 8011f4c:	0801b124 	.word	0x0801b124
 8011f50:	0801b13c 	.word	0x0801b13c
 8011f54:	0801ae40 	.word	0x0801ae40
 8011f58:	0801b158 	.word	0x0801b158
 8011f5c:	0801aca8 	.word	0x0801aca8
 8011f60:	0801acc4 	.word	0x0801acc4
			case pdFREERTOS_ERRNO_ENOENT:	errMsg = "No such file"; break;		/* -31	File was not found. */
 8011f64:	4db7      	ldr	r5, [pc, #732]	; (8012244 <xFTPClientWork+0x9c8>)
		FreeRTOS_printf( ( "ftp::delFile: '%s' because %s\n",
 8011f66:	f005 fe61 	bl	8017c2c <strerror>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	48b6      	ldr	r0, [pc, #728]	; (8012248 <xFTPClientWork+0x9cc>)
 8011f70:	f004 fcee 	bl	8016950 <lUDPLoggingPrintf>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8011f74:	6860      	ldr	r0, [r4, #4]
 8011f76:	9500      	str	r5, [sp, #0]
 8011f78:	4633      	mov	r3, r6
 8011f7a:	4ab4      	ldr	r2, [pc, #720]	; (801224c <xFTPClientWork+0x9d0>)
 8011f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011f80:	3004      	adds	r0, #4
 8011f82:	f005 f82a 	bl	8016fda <snprintf>
 8011f86:	e7a0      	b.n	8011eca <xFTPClientWork+0x64e>
			case pdFREERTOS_ERRNO_EISDIR:	errMsg = "Is a dir"; break;			/* -32	Tried to FF_Open() a Directory. */
 8011f88:	4db1      	ldr	r5, [pc, #708]	; (8012250 <xFTPClientWork+0x9d4>)
 8011f8a:	e7ec      	b.n	8011f66 <xFTPClientWork+0x6ea>
			case pdFREERTOS_ERRNO_EROFS:	errMsg = "Read-only"; break;		/* -33	Tried to FF_Open() a file marked read only. */
 8011f8c:	4db1      	ldr	r5, [pc, #708]	; (8012254 <xFTPClientWork+0x9d8>)
 8011f8e:	e7ea      	b.n	8011f66 <xFTPClientWork+0x6ea>
			case pdFREERTOS_ERRNO_ENOTDIR:	errMsg = "Invalid path"; break;		/* -34	The path of the file was not found. */
 8011f90:	4db1      	ldr	r5, [pc, #708]	; (8012258 <xFTPClientWork+0x9dc>)
 8011f92:	e7e8      	b.n	8011f66 <xFTPClientWork+0x6ea>
			prvSizeDateFile( pxClient, pcRestCommand, pdTRUE );
 8011f94:	2201      	movs	r2, #1
 8011f96:	4649      	mov	r1, r9
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f7ff fb31 	bl	8011600 <prvSizeDateFile>
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	f000 bc57 	b.w	8012852 <xFTPClientWork+0xfd6>
			if( pxClient->pxWriteHandle != NULL )
 8011fa4:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	f000 84de 	beq.w	801296a <xFTPClientWork+0x10ee>
				xMakeAbsolute( pxClient, pcNEW_DIR, sizeof( pcNEW_DIR ), pcRestCommand );
 8011fae:	f241 0504 	movw	r5, #4100	; 0x1004
 8011fb2:	6861      	ldr	r1, [r4, #4]
 8011fb4:	464b      	mov	r3, r9
 8011fb6:	22c1      	movs	r2, #193	; 0xc1
 8011fb8:	4429      	add	r1, r5
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f7ff fabe 	bl	801153c <xMakeAbsolute>
				if( strcmp( pcNEW_DIR, pcRestCommand ) == 0 )
 8011fc0:	6860      	ldr	r0, [r4, #4]
 8011fc2:	4649      	mov	r1, r9
 8011fc4:	4428      	add	r0, r5
 8011fc6:	f7ee f903 	bl	80001d0 <strcmp>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	f040 84c6 	bne.w	801295c <xFTPClientWork+0x10e0>
					for( xCount = 0; xCount < 3 && pxClient->pxWriteHandle; xCount++ )
 8011fd0:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 84c1 	beq.w	801295c <xFTPClientWork+0x10e0>
						prvStoreFileWork( pxClient );
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f7ff f835 	bl	801104a <prvStoreFileWork>
					for( xCount = 0; xCount < 3 && pxClient->pxWriteHandle; xCount++ )
 8011fe0:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f000 84b9 	beq.w	801295c <xFTPClientWork+0x10e0>
						prvStoreFileWork( pxClient );
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7ff f82d 	bl	801104a <prvStoreFileWork>
					for( xCount = 0; xCount < 3 && pxClient->pxWriteHandle; xCount++ )
 8011ff0:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f000 84b1 	beq.w	801295c <xFTPClientWork+0x10e0>
						prvStoreFileWork( pxClient );
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f7ff f825 	bl	801104a <prvStoreFileWork>
					if( pxClient->pxWriteHandle != NULL )
 8012000:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8012004:	2b00      	cmp	r3, #0
 8012006:	f000 84a9 	beq.w	801295c <xFTPClientWork+0x10e0>
						snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "213 %lu\r\n", pxClient->ulRecvBytes );
 801200a:	6860      	ldr	r0, [r4, #4]
 801200c:	6a23      	ldr	r3, [r4, #32]
 801200e:	4a93      	ldr	r2, [pc, #588]	; (801225c <xFTPClientWork+0x9e0>)
 8012010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012014:	3004      	adds	r0, #4
 8012016:	f004 ffe0 	bl	8016fda <snprintf>
						pcMyReply = pcCOMMAND_BUFFER;
 801201a:	6861      	ldr	r1, [r4, #4]
 801201c:	1d0e      	adds	r6, r1, #4
				strcpy( pcRestCommand, pcNEW_DIR );
 801201e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8012022:	3104      	adds	r1, #4
 8012024:	4648      	mov	r0, r9
 8012026:	f005 fc13 	bl	8017850 <strcpy>
			if( pcMyReply == NULL )
 801202a:	2e00      	cmp	r6, #0
 801202c:	f040 8411 	bne.w	8012852 <xFTPClientWork+0xfd6>
 8012030:	f000 bc9b 	b.w	801296a <xFTPClientWork+0x10ee>
			if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8012034:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8012038:	f013 0f10 	tst.w	r3, #16
 801203c:	d005      	beq.n	801204a <xFTPClientWork+0x7ce>
				pcMyReply = REPL_553_READ_ONLY;
 801203e:	4e88      	ldr	r6, [pc, #544]	; (8012260 <xFTPClientWork+0x9e4>)
	if( pxFTPCommand->ucCommandType != ECMD_RNFR )
 8012040:	2d13      	cmp	r5, #19
 8012042:	f000 840d 	beq.w	8012860 <xFTPClientWork+0xfe4>
 8012046:	f000 bc04 	b.w	8012852 <xFTPClientWork+0xfd6>
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcDirectory );
 801204a:	f204 2739 	addw	r7, r4, #569	; 0x239
 801204e:	464b      	mov	r3, r9
 8012050:	22c1      	movs	r2, #193	; 0xc1
 8012052:	4639      	mov	r1, r7
 8012054:	4620      	mov	r0, r4
 8012056:	f7ff fa71 	bl	801153c <xMakeAbsolute>
	if( xDoRemove )
 801205a:	2d19      	cmp	r5, #25
 801205c:	d132      	bne.n	80120c4 <xFTPClientWork+0x848>
		iRc = ff_rmdir( pxClient->pcFileName );
 801205e:	4638      	mov	r0, r7
 8012060:	f7f7 f80b 	bl	800907a <ff_rmdir>
	if( iRc >= 0 )
 8012064:	2800      	cmp	r0, #0
 8012066:	f280 843f 	bge.w	80128e8 <xFTPClientWork+0x106c>
 801206a:	2100      	movs	r1, #0
 801206c:	4608      	mov	r0, r1
 801206e:	f002 fda7 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
 8012072:	4606      	mov	r6, r0
		switch( iErrorNo )
 8012074:	2814      	cmp	r0, #20
 8012076:	f000 843c 	beq.w	80128f2 <xFTPClientWork+0x1076>
 801207a:	f300 847d 	bgt.w	8012978 <xFTPClientWork+0x10fc>
 801207e:	2811      	cmp	r0, #17
 8012080:	d03b      	beq.n	80120fa <xFTPClientWork+0x87e>
			default:						errMsg = strerror( iErrorNo ); break;
 8012082:	4630      	mov	r0, r6
 8012084:	f005 fdd2 	bl	8017c2c <strerror>
 8012088:	4681      	mov	r9, r0
			xFTPCode = 552;
 801208a:	2e1c      	cmp	r6, #28
 801208c:	f240 2309 	movw	r3, #521	; 0x209
 8012090:	bf08      	it	eq
 8012092:	f44f 730a 	moveq.w	r3, #552	; 0x228
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 8012096:	6860      	ldr	r0, [r4, #4]
 8012098:	9302      	str	r3, [sp, #8]
 801209a:	f8cd 9004 	str.w	r9, [sp, #4]
 801209e:	9700      	str	r7, [sp, #0]
 80120a0:	4a70      	ldr	r2, [pc, #448]	; (8012264 <xFTPClientWork+0x9e8>)
 80120a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80120a6:	3004      	adds	r0, #4
 80120a8:	f004 ff97 	bl	8016fda <snprintf>
 80120ac:	4606      	mov	r6, r0
		FreeRTOS_printf( ( "%sdir '%s': %s\n", xDoRemove ? "rm" : "mk", pxClient->pcFileName, errMsg ) );
 80120ae:	464b      	mov	r3, r9
 80120b0:	463a      	mov	r2, r7
 80120b2:	496d      	ldr	r1, [pc, #436]	; (8012268 <xFTPClientWork+0x9ec>)
 80120b4:	486d      	ldr	r0, [pc, #436]	; (801226c <xFTPClientWork+0x9f0>)
 80120b6:	2d19      	cmp	r5, #25
 80120b8:	bf08      	it	eq
 80120ba:	4601      	moveq	r1, r0
 80120bc:	486c      	ldr	r0, [pc, #432]	; (8012270 <xFTPClientWork+0x9f4>)
 80120be:	f004 fc47 	bl	8016950 <lUDPLoggingPrintf>
 80120c2:	e00f      	b.n	80120e4 <xFTPClientWork+0x868>
			iRc = ff_mkdir( pxClient->pcFileName );
 80120c4:	4638      	mov	r0, r7
 80120c6:	f7f6 ffb2 	bl	800902e <ff_mkdir>
	if( iRc >= 0 )
 80120ca:	2800      	cmp	r0, #0
 80120cc:	dbcd      	blt.n	801206a <xFTPClientWork+0x7ee>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "257 \"%s\" directory %s\r\n",
 80120ce:	6860      	ldr	r0, [r4, #4]
 80120d0:	3004      	adds	r0, #4
 80120d2:	4b68      	ldr	r3, [pc, #416]	; (8012274 <xFTPClientWork+0x9f8>)
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	463b      	mov	r3, r7
 80120d8:	4a67      	ldr	r2, [pc, #412]	; (8012278 <xFTPClientWork+0x9fc>)
 80120da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80120de:	f004 ff7c 	bl	8016fda <snprintf>
 80120e2:	4606      	mov	r6, r0
	prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80120e4:	6861      	ldr	r1, [r4, #4]
 80120e6:	4632      	mov	r2, r6
 80120e8:	3104      	adds	r1, #4
 80120ea:	68a0      	ldr	r0, [r4, #8]
 80120ec:	f7fe ff2e 	bl	8010f4c <prvSendReply>
	if( pxFTPCommand->ucCommandType != ECMD_RNFR )
 80120f0:	2d13      	cmp	r5, #19
 80120f2:	f000 83bd 	beq.w	8012870 <xFTPClientWork+0xff4>
 80120f6:	2600      	movs	r6, #0
 80120f8:	e3ab      	b.n	8012852 <xFTPClientWork+0xfd6>
			case pdFREERTOS_ERRNO_EEXIST:	errMsg = "Directory already exists"; break;
 80120fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 801229c <xFTPClientWork+0xa20>
	BaseType_t xFTPCode = 521;
 80120fe:	f240 2309 	movw	r3, #521	; 0x209
 8012102:	e7c8      	b.n	8012096 <xFTPClientWork+0x81a>
			prvChangeDir( pxClient, ".." );
 8012104:	495d      	ldr	r1, [pc, #372]	; (801227c <xFTPClientWork+0xa00>)
 8012106:	4620      	mov	r0, r4
 8012108:	f7ff faec 	bl	80116e4 <prvChangeDir>
 801210c:	2600      	movs	r6, #0
 801210e:	e3a0      	b.n	8012852 <xFTPClientWork+0xfd6>
			prvSendReply( pxClient->xSocket, REPL_221, 0 );
 8012110:	2200      	movs	r2, #0
 8012112:	495b      	ldr	r1, [pc, #364]	; (8012280 <xFTPClientWork+0xa04>)
 8012114:	68a0      	ldr	r0, [r4, #8]
 8012116:	f7fe ff19 	bl	8010f4c <prvSendReply>
			pxClient->bits.bLoggedIn = pdFALSE_UNSIGNED;
 801211a:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 801211e:	f36f 0341 	bfc	r3, #1, #1
 8012122:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
 8012126:	2600      	movs	r6, #0
 8012128:	e393      	b.n	8012852 <xFTPClientWork+0xfd6>
			if( ( pxClient->xTransferSocket == FREERTOS_NO_SOCKET ) &&
 801212a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801212c:	b15b      	cbz	r3, 8012146 <xFTPClientWork+0x8ca>
					prvTransferCheck( pxClient );
 801212e:	4620      	mov	r0, r4
 8012130:	f7ff f948 	bl	80113c4 <prvTransferCheck>
				switch( pxFTPCommand->ucCommandType )
 8012134:	2d0e      	cmp	r5, #14
 8012136:	d00f      	beq.n	8012158 <xFTPClientWork+0x8dc>
 8012138:	2d1c      	cmp	r5, #28
 801213a:	d015      	beq.n	8012168 <xFTPClientWork+0x8ec>
 801213c:	2d0d      	cmp	r5, #13
 801213e:	f000 80af 	beq.w	80122a0 <xFTPClientWork+0xa24>
 8012142:	2600      	movs	r6, #0
 8012144:	e383      	b.n	801284e <xFTPClientWork+0xfd2>
			if( ( pxClient->xTransferSocket == FREERTOS_NO_SOCKET ) &&
 8012146:	2d0e      	cmp	r5, #14
 8012148:	f040 8403 	bne.w	8012952 <xFTPClientWork+0x10d6>
				  ( pxClient->bits1.bEmptyFile == pdFALSE_UNSIGNED ) ) )
 801214c:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
				( ( pxFTPCommand->ucCommandType != ECMD_STOR ) ||
 8012150:	f013 0f08 	tst.w	r3, #8
 8012154:	f000 83f5 	beq.w	8012942 <xFTPClientWork+0x10c6>
					if( pxClient->bits.bReadOnly != pdFALSE_UNSIGNED )
 8012158:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 801215c:	f013 0f10 	tst.w	r3, #16
 8012160:	f000 8134 	beq.w	80123cc <xFTPClientWork+0xb50>
						pcMyReply = REPL_553_READ_ONLY;
 8012164:	4e3e      	ldr	r6, [pc, #248]	; (8012260 <xFTPClientWork+0x9e4>)
 8012166:	e374      	b.n	8012852 <xFTPClientWork+0xfd6>
	if( pxClient->bits1.bIsListen != pdFALSE_UNSIGNED )
 8012168:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 801216c:	f013 0f01 	tst.w	r3, #1
 8012170:	d02e      	beq.n	80121d0 <xFTPClientWork+0x954>
		snprintf( pxClient->pcConnectionAck, sizeof( pxClient->pcConnectionAck ),
 8012172:	4a44      	ldr	r2, [pc, #272]	; (8012284 <xFTPClientWork+0xa08>)
 8012174:	2180      	movs	r1, #128	; 0x80
 8012176:	f204 20fa 	addw	r0, r4, #762	; 0x2fa
 801217a:	f004 ff2e 	bl	8016fda <snprintf>
	pxClient->xDirCount = 0;
 801217e:	2600      	movs	r6, #0
 8012180:	63e6      	str	r6, [r4, #60]	; 0x3c
	xMakeAbsolute( pxClient, pcNEW_DIR, sizeof( pcNEW_DIR ), pxClient->pcCurrentDir );
 8012182:	f504 77bc 	add.w	r7, r4, #376	; 0x178
 8012186:	f241 0504 	movw	r5, #4100	; 0x1004
 801218a:	6861      	ldr	r1, [r4, #4]
 801218c:	463b      	mov	r3, r7
 801218e:	22c1      	movs	r2, #193	; 0xc1
 8012190:	4429      	add	r1, r5
 8012192:	4620      	mov	r0, r4
 8012194:	f7ff f9d2 	bl	801153c <xMakeAbsolute>
	xFindResult = ff_findfirst( pcNEW_DIR, &pxClient->xFindData );
 8012198:	6860      	ldr	r0, [r4, #4]
 801219a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 801219e:	4428      	add	r0, r5
 80121a0:	f7f7 f9a0 	bl	80094e4 <ff_findfirst>
 80121a4:	4605      	mov	r5, r0
	pxClient->bits1.bDirHasEntry = ( xFindResult >= 0 );
 80121a6:	42b0      	cmp	r0, r6
 80121a8:	bfb4      	ite	lt
 80121aa:	2200      	movlt	r2, #0
 80121ac:	2201      	movge	r2, #1
 80121ae:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80121b2:	f362 0341 	bfi	r3, r2, #1, #1
 80121b6:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
 80121ba:	4631      	mov	r1, r6
 80121bc:	4630      	mov	r0, r6
 80121be:	f002 fcff 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
 80121c2:	4602      	mov	r2, r0
	if( ( xFindResult < 0 ) && ( iErrorNo == pdFREERTOS_ERRNO_ENMFILE ) )
 80121c4:	42b5      	cmp	r5, r6
 80121c6:	db24      	blt.n	8012212 <xFTPClientWork+0x996>
	pxClient->pcClientAck[ 0 ] = '\0';
 80121c8:	2600      	movs	r6, #0
 80121ca:	f884 637a 	strb.w	r6, [r4, #890]	; 0x37a
 80121ce:	e340      	b.n	8012852 <xFTPClientWork+0xfd6>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80121d0:	6866      	ldr	r6, [r4, #4]
 80121d2:	4d2d      	ldr	r5, [pc, #180]	; (8012288 <xFTPClientWork+0xa0c>)
 80121d4:	3604      	adds	r6, #4
 80121d6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80121da:	462f      	mov	r7, r5
 80121dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80121de:	6030      	str	r0, [r6, #0]
 80121e0:	6071      	str	r1, [r6, #4]
 80121e2:	60b2      	str	r2, [r6, #8]
 80121e4:	60f3      	str	r3, [r6, #12]
 80121e6:	463d      	mov	r5, r7
 80121e8:	3610      	adds	r6, #16
 80121ea:	4577      	cmp	r7, lr
 80121ec:	d1f5      	bne.n	80121da <xFTPClientWork+0x95e>
 80121ee:	cd03      	ldmia	r5!, {r0, r1}
 80121f0:	6030      	str	r0, [r6, #0]
 80121f2:	6071      	str	r1, [r6, #4]
 80121f4:	782b      	ldrb	r3, [r5, #0]
 80121f6:	7233      	strb	r3, [r6, #8]
		prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80121f8:	6861      	ldr	r1, [r4, #4]
 80121fa:	2238      	movs	r2, #56	; 0x38
 80121fc:	3104      	adds	r1, #4
 80121fe:	68a0      	ldr	r0, [r4, #8]
 8012200:	f7fe fea4 	bl	8010f4c <prvSendReply>
		pxClient->pcConnectionAck[ 0 ] = '\0';
 8012204:	2300      	movs	r3, #0
 8012206:	f884 32fa 	strb.w	r3, [r4, #762]	; 0x2fa
		prvTransferStart( pxClient );
 801220a:	4620      	mov	r0, r4
 801220c:	f7fe fee0 	bl	8010fd0 <prvTransferStart>
 8012210:	e7b5      	b.n	801217e <xFTPClientWork+0x902>
	if( ( xFindResult < 0 ) && ( iErrorNo == pdFREERTOS_ERRNO_ENMFILE ) )
 8012212:	2859      	cmp	r0, #89	; 0x59
 8012214:	d10c      	bne.n	8012230 <xFTPClientWork+0x9b4>
		FreeRTOS_printf( ("prvListSendPrep: Empty directory? (%s)\n", pxClient->pcCurrentDir ) );
 8012216:	4639      	mov	r1, r7
 8012218:	481c      	ldr	r0, [pc, #112]	; (801228c <xFTPClientWork+0xa10>)
 801221a:	f004 fb99 	bl	8016950 <lUDPLoggingPrintf>
		prvSendReply( pxClient->xTransferSocket, "total 0\r\n", 0 );
 801221e:	4632      	mov	r2, r6
 8012220:	491b      	ldr	r1, [pc, #108]	; (8012290 <xFTPClientWork+0xa14>)
 8012222:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012224:	f7fe fe92 	bl	8010f4c <prvSendReply>
		pxClient->xDirCount++;
 8012228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801222a:	3301      	adds	r3, #1
 801222c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801222e:	e7cb      	b.n	80121c8 <xFTPClientWork+0x94c>
		FreeRTOS_printf( ( "prvListSendPrep: rc = %ld iErrorNo = %d\n", xFindResult, iErrorNo ) );
 8012230:	4629      	mov	r1, r5
 8012232:	4818      	ldr	r0, [pc, #96]	; (8012294 <xFTPClientWork+0xa18>)
 8012234:	f004 fb8c 	bl	8016950 <lUDPLoggingPrintf>
		prvSendReply( pxClient->xSocket, REPL_451, 0 );
 8012238:	2200      	movs	r2, #0
 801223a:	4917      	ldr	r1, [pc, #92]	; (8012298 <xFTPClientWork+0xa1c>)
 801223c:	68a0      	ldr	r0, [r4, #8]
 801223e:	f7fe fe85 	bl	8010f4c <prvSendReply>
 8012242:	e7c1      	b.n	80121c8 <xFTPClientWork+0x94c>
 8012244:	0801acb4 	.word	0x0801acb4
 8012248:	0801b170 	.word	0x0801b170
 801224c:	0801b190 	.word	0x0801b190
 8012250:	0801acd4 	.word	0x0801acd4
 8012254:	0801ace0 	.word	0x0801ace0
 8012258:	0801acec 	.word	0x0801acec
 801225c:	0801aa7c 	.word	0x0801aa7c
 8012260:	0801ad68 	.word	0x0801ad68
 8012264:	0801b1d0 	.word	0x0801b1d0
 8012268:	0801ad2c 	.word	0x0801ad2c
 801226c:	0801ad28 	.word	0x0801ad28
 8012270:	0801b1f8 	.word	0x0801b1f8
 8012274:	0801ad04 	.word	0x0801ad04
 8012278:	0801b1b8 	.word	0x0801b1b8
 801227c:	08019098 	.word	0x08019098
 8012280:	0801b208 	.word	0x0801b208
 8012284:	0801b234 	.word	0x0801b234
 8012288:	0801b264 	.word	0x0801b264
 801228c:	0801b2a0 	.word	0x0801b2a0
 8012290:	0801b2c8 	.word	0x0801b2c8
 8012294:	0801b2d4 	.word	0x0801b2d4
 8012298:	0801ac48 	.word	0x0801ac48
 801229c:	0801ad0c 	.word	0x0801ad0c
	prvTransferCloseFile( pxClient );
 80122a0:	4620      	mov	r0, r4
 80122a2:	f7fe febc 	bl	801101e <prvTransferCloseFile>
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcFileName );
 80122a6:	f204 2639 	addw	r6, r4, #569	; 0x239
 80122aa:	464b      	mov	r3, r9
 80122ac:	22c1      	movs	r2, #193	; 0xc1
 80122ae:	4631      	mov	r1, r6
 80122b0:	4620      	mov	r0, r4
 80122b2:	f7ff f943 	bl	801153c <xMakeAbsolute>
	pxClient->pxReadHandle = ff_fopen( pxClient->pcFileName, "rb" );
 80122b6:	49a7      	ldr	r1, [pc, #668]	; (8012554 <xFTPClientWork+0xcd8>)
 80122b8:	4630      	mov	r0, r6
 80122ba:	f7f6 fe20 	bl	8008efe <ff_fopen>
 80122be:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	if( pxClient->pxReadHandle == NULL )
 80122c2:	b350      	cbz	r0, 801231a <xFTPClientWork+0xa9e>
		uxFileSize = pxClient->pxReadHandle->ulFileSize;
 80122c4:	6847      	ldr	r7, [r0, #4]
		pxClient->uxBytesLeft = uxFileSize;
 80122c6:	6267      	str	r7, [r4, #36]	; 0x24
		if( pxClient->ulRestartOffset != 0ul )
 80122c8:	69e5      	ldr	r5, [r4, #28]
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	d03a      	beq.n	8012344 <xFTPClientWork+0xac8>
			pxClient->ulRestartOffset = 0;
 80122ce:	2300      	movs	r3, #0
 80122d0:	61e3      	str	r3, [r4, #28]
			if( uxOffset < uxFileSize )
 80122d2:	42af      	cmp	r7, r5
 80122d4:	d904      	bls.n	80122e0 <xFTPClientWork+0xa64>
				iRc = ff_fseek( pxClient->pxReadHandle, uxOffset, FF_SEEK_SET );
 80122d6:	461a      	mov	r2, r3
 80122d8:	4629      	mov	r1, r5
 80122da:	f7f6 fe45 	bl	8008f68 <ff_fseek>
			if( iRc != 0 )
 80122de:	b370      	cbz	r0, 801233e <xFTPClientWork+0xac2>
				xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 80122e0:	6860      	ldr	r0, [r4, #4]
 80122e2:	9700      	str	r7, [sp, #0]
 80122e4:	462b      	mov	r3, r5
 80122e6:	4a9c      	ldr	r2, [pc, #624]	; (8012558 <xFTPClientWork+0xcdc>)
 80122e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80122ec:	3004      	adds	r0, #4
 80122ee:	f004 fe74 	bl	8016fda <snprintf>
				prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80122f2:	6861      	ldr	r1, [r4, #4]
 80122f4:	4602      	mov	r2, r0
 80122f6:	3104      	adds	r1, #4
 80122f8:	68a0      	ldr	r0, [r4, #8]
 80122fa:	f7fe fe27 	bl	8010f4c <prvSendReply>
				FreeRTOS_printf( ( "prvRetrieveFilePrep: create %s: Seek %u length %u\n",
 80122fe:	463b      	mov	r3, r7
 8012300:	462a      	mov	r2, r5
 8012302:	4631      	mov	r1, r6
 8012304:	4895      	ldr	r0, [pc, #596]	; (801255c <xFTPClientWork+0xce0>)
 8012306:	f004 fb23 	bl	8016950 <lUDPLoggingPrintf>
				ff_fclose( pxClient->pxReadHandle );
 801230a:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 801230e:	f7f6 fe1b 	bl	8008f48 <ff_fclose>
				pxClient->pxReadHandle = NULL;
 8012312:	2300      	movs	r3, #0
 8012314:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 8012318:	e00f      	b.n	801233a <xFTPClientWork+0xabe>
		prvSendReply( pxClient->xSocket, REPL_450, 0 );
 801231a:	2200      	movs	r2, #0
 801231c:	4990      	ldr	r1, [pc, #576]	; (8012560 <xFTPClientWork+0xce4>)
 801231e:	68a0      	ldr	r0, [r4, #8]
 8012320:	f7fe fe14 	bl	8010f4c <prvSendReply>
 8012324:	2100      	movs	r1, #0
 8012326:	4608      	mov	r0, r1
 8012328:	f002 fc4a 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
		FreeRTOS_printf( ("prvRetrieveFilePrep: open %s: %s\n", pxClient->pcFileName, ( const char * ) strerror( stdioGET_ERRNO() ) ) );
 801232c:	f005 fc7e 	bl	8017c2c <strerror>
 8012330:	4602      	mov	r2, r0
 8012332:	4631      	mov	r1, r6
 8012334:	488b      	ldr	r0, [pc, #556]	; (8012564 <xFTPClientWork+0xce8>)
 8012336:	f004 fb0b 	bl	8016950 <lUDPLoggingPrintf>
					pcMyReply = REPL_500;
 801233a:	2600      	movs	r6, #0
 801233c:	e289      	b.n	8012852 <xFTPClientWork+0xfd6>
				pxClient->uxBytesLeft = uxFileSize - pxClient->ulRestartOffset;
 801233e:	69e3      	ldr	r3, [r4, #28]
 8012340:	1afb      	subs	r3, r7, r3
 8012342:	6263      	str	r3, [r4, #36]	; 0x24
		if( pxClient->bits1.bIsListen != pdFALSE_UNSIGNED )
 8012344:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8012348:	f013 0f01 	tst.w	r3, #1
 801234c:	d10a      	bne.n	8012364 <xFTPClientWork+0xae8>
			xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "150%cOpening data connection to %lxip:%u\r\n%s",
 801234e:	6863      	ldr	r3, [r4, #4]
 8012350:	1d18      	adds	r0, r3, #4
 8012352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012354:	2b02      	cmp	r3, #2
 8012356:	f040 82d5 	bne.w	8012904 <xFTPClientWork+0x1088>
 801235a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801235c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 801235e:	232d      	movs	r3, #45	; 0x2d
 8012360:	4a81      	ldr	r2, [pc, #516]	; (8012568 <xFTPClientWork+0xcec>)
 8012362:	e2d3      	b.n	801290c <xFTPClientWork+0x1090>
			snprintf( pxClient->pcConnectionAck, sizeof( pxClient->pcConnectionAck ),
 8012364:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012366:	2902      	cmp	r1, #2
 8012368:	bf0c      	ite	eq
 801236a:	232d      	moveq	r3, #45	; 0x2d
 801236c:	2320      	movne	r3, #32
 801236e:	487f      	ldr	r0, [pc, #508]	; (801256c <xFTPClientWork+0xcf0>)
 8012370:	4a7d      	ldr	r2, [pc, #500]	; (8012568 <xFTPClientWork+0xcec>)
 8012372:	2902      	cmp	r1, #2
 8012374:	bf18      	it	ne
 8012376:	4602      	movne	r2, r0
 8012378:	9200      	str	r2, [sp, #0]
 801237a:	4a7d      	ldr	r2, [pc, #500]	; (8012570 <xFTPClientWork+0xcf4>)
 801237c:	2180      	movs	r1, #128	; 0x80
 801237e:	f204 20fa 	addw	r0, r4, #762	; 0x2fa
 8012382:	f004 fe2a 	bl	8016fda <snprintf>
		snprintf( pxClient->pcClientAck, sizeof( pxClient->pcClientAck ), "%s", REPL_226 );
 8012386:	4d7b      	ldr	r5, [pc, #492]	; (8012574 <xFTPClientWork+0xcf8>)
 8012388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801238a:	f8c4 037a 	str.w	r0, [r4, #890]	; 0x37a
 801238e:	f8c4 137e 	str.w	r1, [r4, #894]	; 0x37e
 8012392:	f8c4 2382 	str.w	r2, [r4, #898]	; 0x382
 8012396:	f8c4 3386 	str.w	r3, [r4, #902]	; 0x386
 801239a:	cd07      	ldmia	r5!, {r0, r1, r2}
 801239c:	f8c4 038a 	str.w	r0, [r4, #906]	; 0x38a
 80123a0:	f8c4 138e 	str.w	r1, [r4, #910]	; 0x38e
 80123a4:	f8c4 2392 	str.w	r2, [r4, #914]	; 0x392
 80123a8:	882a      	ldrh	r2, [r5, #0]
 80123aa:	78ab      	ldrb	r3, [r5, #2]
 80123ac:	f8a4 2396 	strh.w	r2, [r4, #918]	; 0x396
 80123b0:	f884 3398 	strb.w	r3, [r4, #920]	; 0x398
		pxClient->xStartTime = xTaskGetTickCount( );
 80123b4:	f002 f8ac 	bl	8014510 <xTaskGetTickCount>
 80123b8:	62e0      	str	r0, [r4, #44]	; 0x2c
		if( uxFileSize == 0ul )
 80123ba:	2f00      	cmp	r7, #0
 80123bc:	f040 82c3 	bne.w	8012946 <xFTPClientWork+0x10ca>
			FreeRTOS_shutdown( pxClient->xTransferSocket, FREERTOS_SHUT_RDWR );
 80123c0:	2102      	movs	r1, #2
 80123c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80123c4:	f7fb fa83 	bl	800d8ce <FreeRTOS_shutdown>
 80123c8:	2600      	movs	r6, #0
 80123ca:	e242      	b.n	8012852 <xFTPClientWork+0xfd6>
	prvTransferCloseFile( pxClient );
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7fe fe26 	bl	801101e <prvTransferCloseFile>
	xMakeAbsolute( pxClient, pxClient->pcFileName, sizeof( pxClient->pcFileName ), pcFileName );
 80123d2:	f204 2539 	addw	r5, r4, #569	; 0x239
 80123d6:	464b      	mov	r3, r9
 80123d8:	22c1      	movs	r2, #193	; 0xc1
 80123da:	4629      	mov	r1, r5
 80123dc:	4620      	mov	r0, r4
 80123de:	f7ff f8ad 	bl	801153c <xMakeAbsolute>
	if( pxClient->ulRestartOffset != 0 )
 80123e2:	69e6      	ldr	r6, [r4, #28]
 80123e4:	2e00      	cmp	r6, #0
 80123e6:	d04f      	beq.n	8012488 <xFTPClientWork+0xc0c>
		pxClient->ulRestartOffset = 0ul; /* Only use 1 time. */
 80123e8:	2300      	movs	r3, #0
 80123ea:	61e3      	str	r3, [r4, #28]
		pxNewHandle = ff_fopen( pxClient->pcFileName, "ab" );
 80123ec:	4962      	ldr	r1, [pc, #392]	; (8012578 <xFTPClientWork+0xcfc>)
 80123ee:	4628      	mov	r0, r5
 80123f0:	f7f6 fd85 	bl	8008efe <ff_fopen>
		if( pxNewHandle != NULL )
 80123f4:	4607      	mov	r7, r0
 80123f6:	b310      	cbz	r0, 801243e <xFTPClientWork+0xbc2>
			uxFileSize = pxNewHandle->ulFileSize;
 80123f8:	f8d0 9004 	ldr.w	r9, [r0, #4]
			if( uxOffset <= uxFileSize )
 80123fc:	454e      	cmp	r6, r9
 80123fe:	d805      	bhi.n	801240c <xFTPClientWork+0xb90>
				lRc = ff_fseek( pxNewHandle, uxOffset, FF_SEEK_SET );
 8012400:	2200      	movs	r2, #0
 8012402:	4631      	mov	r1, r6
 8012404:	f7f6 fdb0 	bl	8008f68 <ff_fseek>
			if( lRc != 0 )
 8012408:	2800      	cmp	r0, #0
 801240a:	d044      	beq.n	8012496 <xFTPClientWork+0xc1a>
				xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ),
 801240c:	6860      	ldr	r0, [r4, #4]
 801240e:	f8cd 9000 	str.w	r9, [sp]
 8012412:	4633      	mov	r3, r6
 8012414:	4a50      	ldr	r2, [pc, #320]	; (8012558 <xFTPClientWork+0xcdc>)
 8012416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801241a:	3004      	adds	r0, #4
 801241c:	f004 fddd 	bl	8016fda <snprintf>
				prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 8012420:	6861      	ldr	r1, [r4, #4]
 8012422:	4602      	mov	r2, r0
 8012424:	3104      	adds	r1, #4
 8012426:	68a0      	ldr	r0, [r4, #8]
 8012428:	f7fe fd90 	bl	8010f4c <prvSendReply>
				FreeRTOS_printf( ( "ftp::storeFile: create %s: Seek %u length %u\n",
 801242c:	464b      	mov	r3, r9
 801242e:	4632      	mov	r2, r6
 8012430:	4629      	mov	r1, r5
 8012432:	4852      	ldr	r0, [pc, #328]	; (801257c <xFTPClientWork+0xd00>)
 8012434:	f004 fa8c 	bl	8016950 <lUDPLoggingPrintf>
				ff_fclose( pxNewHandle );
 8012438:	4638      	mov	r0, r7
 801243a:	f7f6 fd85 	bl	8008f48 <ff_fclose>
 801243e:	2100      	movs	r1, #0
 8012440:	4608      	mov	r0, r1
 8012442:	f002 fbbd 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
 8012446:	4606      	mov	r6, r0
		if( iErrorNo == pdFREERTOS_ERRNO_ENOSPC )
 8012448:	281c      	cmp	r0, #28
			prvSendReply( pxClient->xSocket, REPL_552, 0 );
 801244a:	f04f 0200 	mov.w	r2, #0
 801244e:	bf0c      	ite	eq
 8012450:	494b      	ldreq	r1, [pc, #300]	; (8012580 <xFTPClientWork+0xd04>)
			prvSendReply( pxClient->xSocket, REPL_450, 0 );
 8012452:	4943      	ldrne	r1, [pc, #268]	; (8012560 <xFTPClientWork+0xce4>)
 8012454:	68a0      	ldr	r0, [r4, #8]
 8012456:	f7fe fd79 	bl	8010f4c <prvSendReply>
		FreeRTOS_printf( ( "ftp::storeFile: create %s: %s (errno %d)\n",
 801245a:	4630      	mov	r0, r6
 801245c:	f005 fbe6 	bl	8017c2c <strerror>
 8012460:	4633      	mov	r3, r6
 8012462:	4602      	mov	r2, r0
 8012464:	4629      	mov	r1, r5
 8012466:	4847      	ldr	r0, [pc, #284]	; (8012584 <xFTPClientWork+0xd08>)
 8012468:	f004 fa72 	bl	8016950 <lUDPLoggingPrintf>
						if( pxClient->bits1.bEmptyFile != pdFALSE_UNSIGNED )
 801246c:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8012470:	f013 0f08 	tst.w	r3, #8
 8012474:	f000 8269 	beq.w	801294a <xFTPClientWork+0x10ce>
							prvTransferCloseSocket( pxClient );
 8012478:	4620      	mov	r0, r4
 801247a:	f7fe fe15 	bl	80110a8 <prvTransferCloseSocket>
							prvTransferCloseFile( pxClient );
 801247e:	4620      	mov	r0, r4
 8012480:	f7fe fdcd 	bl	801101e <prvTransferCloseFile>
 8012484:	2600      	movs	r6, #0
 8012486:	e1e4      	b.n	8012852 <xFTPClientWork+0xfd6>
		pxNewHandle = ff_fopen( pxClient->pcFileName, "wb" );
 8012488:	493f      	ldr	r1, [pc, #252]	; (8012588 <xFTPClientWork+0xd0c>)
 801248a:	4628      	mov	r0, r5
 801248c:	f7f6 fd37 	bl	8008efe <ff_fopen>
	if( pxNewHandle == NULL )
 8012490:	4607      	mov	r7, r0
 8012492:	2800      	cmp	r0, #0
 8012494:	d0d3      	beq.n	801243e <xFTPClientWork+0xbc2>
		if( pxClient->bits1.bIsListen )
 8012496:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 801249a:	f013 0f01 	tst.w	r3, #1
 801249e:	d00e      	beq.n	80124be <xFTPClientWork+0xc42>
			snprintf( pxClient->pcConnectionAck, sizeof( pxClient->pcConnectionAck ),
 80124a0:	4a3a      	ldr	r2, [pc, #232]	; (801258c <xFTPClientWork+0xd10>)
 80124a2:	2180      	movs	r1, #128	; 0x80
 80124a4:	f204 20fa 	addw	r0, r4, #762	; 0x2fa
 80124a8:	f004 fd97 	bl	8016fda <snprintf>
			prvTransferCheck( pxClient );
 80124ac:	4620      	mov	r0, r4
 80124ae:	f7fe ff89 	bl	80113c4 <prvTransferCheck>
		pxClient->pxWriteHandle = pxNewHandle;
 80124b2:	f8c4 7174 	str.w	r7, [r4, #372]	; 0x174
		pxClient->xStartTime = xTaskGetTickCount( );
 80124b6:	f002 f82b 	bl	8014510 <xTaskGetTickCount>
 80124ba:	62e0      	str	r0, [r4, #44]	; 0x2c
 80124bc:	e7d6      	b.n	801246c <xFTPClientWork+0xbf0>
			xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "150 Opening BIN connection to store file\r\n" );
 80124be:	6866      	ldr	r6, [r4, #4]
 80124c0:	4d33      	ldr	r5, [pc, #204]	; (8012590 <xFTPClientWork+0xd14>)
 80124c2:	3604      	adds	r6, #4
 80124c4:	f105 0c20 	add.w	ip, r5, #32
 80124c8:	46ae      	mov	lr, r5
 80124ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124ce:	6030      	str	r0, [r6, #0]
 80124d0:	6071      	str	r1, [r6, #4]
 80124d2:	60b2      	str	r2, [r6, #8]
 80124d4:	60f3      	str	r3, [r6, #12]
 80124d6:	4675      	mov	r5, lr
 80124d8:	3610      	adds	r6, #16
 80124da:	45e6      	cmp	lr, ip
 80124dc:	d1f4      	bne.n	80124c8 <xFTPClientWork+0xc4c>
 80124de:	cd03      	ldmia	r5!, {r0, r1}
 80124e0:	6030      	str	r0, [r6, #0]
 80124e2:	6071      	str	r1, [r6, #4]
 80124e4:	882a      	ldrh	r2, [r5, #0]
 80124e6:	78ab      	ldrb	r3, [r5, #2]
 80124e8:	8132      	strh	r2, [r6, #8]
 80124ea:	72b3      	strb	r3, [r6, #10]
			prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 80124ec:	6861      	ldr	r1, [r4, #4]
 80124ee:	222a      	movs	r2, #42	; 0x2a
 80124f0:	3104      	adds	r1, #4
 80124f2:	68a0      	ldr	r0, [r4, #8]
 80124f4:	f7fe fd2a 	bl	8010f4c <prvSendReply>
			pxClient->pcConnectionAck[ 0 ] = '\0';
 80124f8:	2300      	movs	r3, #0
 80124fa:	f884 32fa 	strb.w	r3, [r4, #762]	; 0x2fa
			prvTransferStart( pxClient ); /* Now active connect. */
 80124fe:	4620      	mov	r0, r4
 8012500:	f7fe fd66 	bl	8010fd0 <prvTransferStart>
 8012504:	e7d5      	b.n	80124b2 <xFTPClientWork+0xc36>
			FreeRTOS_printf( ("ftp::processCmd: Cmd %s unknown\n", pcRestCommand ) );
 8012506:	4649      	mov	r1, r9
 8012508:	4822      	ldr	r0, [pc, #136]	; (8012594 <xFTPClientWork+0xd18>)
 801250a:	f004 fa21 	bl	8016950 <lUDPLoggingPrintf>
			pcMyReply = REPL_500;
 801250e:	4e22      	ldr	r6, [pc, #136]	; (8012598 <xFTPClientWork+0xd1c>)
 8012510:	e19f      	b.n	8012852 <xFTPClientWork+0xfd6>
		switch( pxFTPCommand->ucCommandType )
 8012512:	2600      	movs	r6, #0
 8012514:	e19b      	b.n	801284e <xFTPClientWork+0xfd2>
	else if( xRc < 0 )
 8012516:	f1b8 0f00 	cmp.w	r8, #0
 801251a:	f280 81a9 	bge.w	8012870 <xFTPClientWork+0xff4>
		FreeRTOS_printf( ( "xFTPClientWork: xRc = %ld\n", xRc ) );
 801251e:	4641      	mov	r1, r8
 8012520:	481e      	ldr	r0, [pc, #120]	; (801259c <xFTPClientWork+0xd20>)
 8012522:	f004 fa15 	bl	8016950 <lUDPLoggingPrintf>
 8012526:	e1a3      	b.n	8012870 <xFTPClientWork+0xff4>
	if( xMonth < 1 || xMonth > 12 )
 8012528:	1e59      	subs	r1, r3, #1
 801252a:	290c      	cmp	r1, #12
 801252c:	bf28      	it	cs
 801252e:	230c      	movcs	r3, #12
	return pcMonthList + 3 * ( xMonth - 1 );
 8012530:	3b01      	subs	r3, #1
 8012532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		snprintf( date, sizeof( date ), "%-3.3s %02d %02d:%02d",
 8012536:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
 801253a:	9102      	str	r1, [sp, #8]
 801253c:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 8012540:	9101      	str	r1, [sp, #4]
 8012542:	9200      	str	r2, [sp, #0]
 8012544:	4a16      	ldr	r2, [pc, #88]	; (80125a0 <xFTPClientWork+0xd24>)
 8012546:	4413      	add	r3, r2
 8012548:	4a16      	ldr	r2, [pc, #88]	; (80125a4 <xFTPClientWork+0xd28>)
 801254a:	2110      	movs	r1, #16
 801254c:	a818      	add	r0, sp, #96	; 0x60
 801254e:	f004 fd44 	bl	8016fda <snprintf>
 8012552:	e07e      	b.n	8012652 <xFTPClientWork+0xdd6>
 8012554:	0801b048 	.word	0x0801b048
 8012558:	0801b324 	.word	0x0801b324
 801255c:	0801b344 	.word	0x0801b344
 8012560:	0801aad8 	.word	0x0801aad8
 8012564:	0801b300 	.word	0x0801b300
 8012568:	0801ad30 	.word	0x0801ad30
 801256c:	0801b914 	.word	0x0801b914
 8012570:	0801b378 	.word	0x0801b378
 8012574:	0801b3dc 	.word	0x0801b3dc
 8012578:	0801b3fc 	.word	0x0801b3fc
 801257c:	0801b400 	.word	0x0801b400
 8012580:	0801b434 	.word	0x0801b434
 8012584:	0801b45c 	.word	0x0801b45c
 8012588:	0801b430 	.word	0x0801b430
 801258c:	0801b234 	.word	0x0801b234
 8012590:	0801b488 	.word	0x0801b488
 8012594:	0801b4b4 	.word	0x0801b4b4
 8012598:	0801ae7c 	.word	0x0801ae7c
 801259c:	0801b4d8 	.word	0x0801b4d8
 80125a0:	0801a9c4 	.word	0x0801a9c4
 80125a4:	0801b4f4 	.word	0x0801b4f4
			xEndOfDir = ( iRc < 0 ) && ( iErrorNo == pdFREERTOS_ERRNO_ENMFILE );
 80125a8:	2859      	cmp	r0, #89	; 0x59
 80125aa:	f000 81f3 	beq.w	8012994 <xFTPClientWork+0x1118>
			pxClient->bits1.bDirHasEntry = ( xEndOfDir == pdFALSE ) && ( iRc >= 0 );
 80125ae:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80125b2:	f36f 0341 	bfc	r3, #1, #1
 80125b6:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
				FreeRTOS_printf( ("prvListSendWork: %s (rc %08x)\n",
 80125ba:	f005 fb37 	bl	8017c2c <strerror>
 80125be:	464a      	mov	r2, r9
 80125c0:	4601      	mov	r1, r0
 80125c2:	48bb      	ldr	r0, [pc, #748]	; (80128b0 <xFTPClientWork+0x1034>)
 80125c4:	f004 f9c4 	bl	8016950 <lUDPLoggingPrintf>
		while( ( xTxSpace >= MAX_DIR_LIST_ENTRY_SIZE ) && ( pxClient->bits1.bDirHasEntry != pdFALSE_UNSIGNED ) )
 80125c8:	2dff      	cmp	r5, #255	; 0xff
 80125ca:	dd6c      	ble.n	80126a6 <xFTPClientWork+0xe2a>
 80125cc:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80125d0:	f013 0f02 	tst.w	r3, #2
 80125d4:	f000 81e5 	beq.w	80129a2 <xFTPClientWork+0x1126>
	char mode[ 11 ]	= "----------";
 80125d8:	ab15      	add	r3, sp, #84	; 0x54
 80125da:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80125de:	c303      	stmia	r3!, {r0, r1}
 80125e0:	f823 2b02 	strh.w	r2, [r3], #2
 80125e4:	0c12      	lsrs	r2, r2, #16
 80125e6:	701a      	strb	r2, [r3, #0]
	const char user[ 9 ] = "freertos";
 80125e8:	ab12      	add	r3, sp, #72	; 0x48
 80125ea:	4ab2      	ldr	r2, [pc, #712]	; (80128b4 <xFTPClientWork+0x1038>)
 80125ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80125ee:	c303      	stmia	r3!, {r0, r1}
 80125f0:	701a      	strb	r2, [r3, #0]
	const char group[ 8 ] = "plusfat";
 80125f2:	ab10      	add	r3, sp, #64	; 0x40
 80125f4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80125f8:	e883 0003 	stmia.w	r3, {r0, r1}
	size_t ulSize = ( size_t )pxEntry->ulFileSize;
 80125fc:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
	const char *pcFileName = pxEntry->pcFileName;
 8012600:	f104 0b8e 	add.w	fp, r4, #142	; 0x8e
	mode[ 0 ] = ( ( pxEntry->ucAttrib & FF_FAT_ATTR_DIR ) != 0 ) ? 'd' : '-';
 8012604:	f894 314f 	ldrb.w	r3, [r4, #335]	; 0x14f
 8012608:	f013 0f10 	tst.w	r3, #16
 801260c:	bf14      	ite	ne
 801260e:	2264      	movne	r2, #100	; 0x64
 8012610:	222d      	moveq	r2, #45	; 0x2d
 8012612:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
	mode[ 1 ] = 'r';	/* Owner. */
 8012616:	2272      	movs	r2, #114	; 0x72
 8012618:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
	mode[ 2 ] = ( ( pxEntry->ucAttrib & FF_FAT_ATTR_READONLY ) != 0 ) ? '-' : 'w';
 801261c:	f013 0f01 	tst.w	r3, #1
 8012620:	bf14      	ite	ne
 8012622:	222d      	movne	r2, #45	; 0x2d
 8012624:	2277      	moveq	r2, #119	; 0x77
 8012626:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
	mode[ 4 ] = 'r';	/* group. */
 801262a:	2372      	movs	r3, #114	; 0x72
 801262c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	mode[ 5 ] = ( ( pxEntry->ucAttrib & FF_FAT_ATTR_READONLY ) != 0 ) ? '-' : 'w';
 8012630:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	mode[ 7 ] = 'r';	/* world. */
 8012634:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
	if( pxCreateTime->Month && pxCreateTime->Day )
 8012638:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 801263c:	b123      	cbz	r3, 8012648 <xFTPClientWork+0xdcc>
 801263e:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
 8012642:	2a00      	cmp	r2, #0
 8012644:	f47f af70 	bne.w	8012528 <xFTPClientWork+0xcac>
		snprintf (date, sizeof( date ), "Jan 01 1970");
 8012648:	ab18      	add	r3, sp, #96	; 0x60
 801264a:	4a9b      	ldr	r2, [pc, #620]	; (80128b8 <xFTPClientWork+0x103c>)
 801264c:	ca07      	ldmia	r2, {r0, r1, r2}
 801264e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return snprintf( pcLine, xMaxLength, "%s %3ld %-4s %-4s %8d %12s %s\r\n",
 8012652:	f8cd b014 	str.w	fp, [sp, #20]
 8012656:	ab18      	add	r3, sp, #96	; 0x60
 8012658:	9304      	str	r3, [sp, #16]
 801265a:	f8cd 900c 	str.w	r9, [sp, #12]
 801265e:	ab10      	add	r3, sp, #64	; 0x40
 8012660:	9302      	str	r3, [sp, #8]
 8012662:	ab12      	add	r3, sp, #72	; 0x48
 8012664:	9301      	str	r3, [sp, #4]
 8012666:	2301      	movs	r3, #1
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	ab15      	add	r3, sp, #84	; 0x54
 801266c:	4a93      	ldr	r2, [pc, #588]	; (80128bc <xFTPClientWork+0x1040>)
 801266e:	4629      	mov	r1, r5
 8012670:	4630      	mov	r0, r6
 8012672:	f004 fcb2 	bl	8016fda <snprintf>
			pxClient->xDirCount++;
 8012676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012678:	3301      	adds	r3, #1
 801267a:	63e3      	str	r3, [r4, #60]	; 0x3c
			pcWritePtr += xLength;
 801267c:	4406      	add	r6, r0
			xTxSpace -= xLength;
 801267e:	1a2d      	subs	r5, r5, r0
			iRc = ff_findnext( &pxClient->xFindData );
 8012680:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8012684:	f7f6 fe36 	bl	80092f4 <ff_findnext>
 8012688:	4681      	mov	r9, r0
 801268a:	2100      	movs	r1, #0
 801268c:	4608      	mov	r0, r1
 801268e:	f002 fa97 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
			xEndOfDir = ( iRc < 0 ) && ( iErrorNo == pdFREERTOS_ERRNO_ENMFILE );
 8012692:	f1b9 0f00 	cmp.w	r9, #0
 8012696:	db87      	blt.n	80125a8 <xFTPClientWork+0xd2c>
			pxClient->bits1.bDirHasEntry = ( xEndOfDir == pdFALSE ) && ( iRc >= 0 );
 8012698:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 801269c:	f043 0302 	orr.w	r3, r3, #2
 80126a0:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
 80126a4:	e790      	b.n	80125c8 <xFTPClientWork+0xd4c>
		xWriteLength = ( BaseType_t ) ( pcWritePtr - pcCOMMAND_BUFFER );
 80126a6:	6863      	ldr	r3, [r4, #4]
 80126a8:	3304      	adds	r3, #4
		if( xWriteLength == 0 )
 80126aa:	1af6      	subs	r6, r6, r3
 80126ac:	f000 80b3 	beq.w	8012816 <xFTPClientWork+0xf9a>
		if( pxClient->bits1.bDirHasEntry == pdFALSE_UNSIGNED )
 80126b0:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80126b4:	f013 0f02 	tst.w	r3, #2
 80126b8:	f000 8178 	beq.w	80129ac <xFTPClientWork+0x1130>
			prvSendReply( pxClient->xTransferSocket, pcCOMMAND_BUFFER, xWriteLength );
 80126bc:	6861      	ldr	r1, [r4, #4]
 80126be:	4632      	mov	r2, r6
 80126c0:	3104      	adds	r1, #4
 80126c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80126c4:	f7fe fc42 	bl	8010f4c <prvSendReply>
		if( pxClient->bits1.bDirHasEntry == pdFALSE_UNSIGNED )
 80126c8:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80126cc:	f013 0f02 	tst.w	r3, #2
 80126d0:	d01b      	beq.n	801270a <xFTPClientWork+0xe8e>
	while( pxClient->bits1.bClientConnected != pdFALSE_UNSIGNED )
 80126d2:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80126d6:	f013 0f04 	tst.w	r3, #4
 80126da:	f000 809c 	beq.w	8012816 <xFTPClientWork+0xf9a>
	char *pcWritePtr = pcCOMMAND_BUFFER;
 80126de:	6866      	ldr	r6, [r4, #4]
 80126e0:	3604      	adds	r6, #4
		xTxSpace = FreeRTOS_tx_space( pxClient->xTransferSocket );
 80126e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80126e4:	f7fb fa16 	bl	800db14 <FreeRTOS_tx_space>
 80126e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80126ec:	bfa8      	it	ge
 80126ee:	f44f 6000 	movge.w	r0, #2048	; 0x800
 80126f2:	4605      	mov	r5, r0
		while( ( xTxSpace >= MAX_DIR_LIST_ENTRY_SIZE ) && ( pxClient->bits1.bDirHasEntry != pdFALSE_UNSIGNED ) )
 80126f4:	28ff      	cmp	r0, #255	; 0xff
 80126f6:	ddd6      	ble.n	80126a6 <xFTPClientWork+0xe2a>
 80126f8:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 80126fc:	f013 0f02 	tst.w	r3, #2
 8012700:	f000 814f 	beq.w	80129a2 <xFTPClientWork+0x1126>
	const char group[ 8 ] = "plusfat";
 8012704:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80128d4 <xFTPClientWork+0x1058>
 8012708:	e766      	b.n	80125d8 <xFTPClientWork+0xd5c>
			prvSendReply( pxClient->xSocket, pxClient->pcClientAck, 0 );
 801270a:	2200      	movs	r2, #0
 801270c:	f204 317a 	addw	r1, r4, #890	; 0x37a
 8012710:	68a0      	ldr	r0, [r4, #8]
 8012712:	f7fe fc1b 	bl	8010f4c <prvSendReply>
 8012716:	e07e      	b.n	8012816 <xFTPClientWork+0xf9a>
	char mode[ 11 ]	= "----------";
 8012718:	4f69      	ldr	r7, [pc, #420]	; (80128c0 <xFTPClientWork+0x1044>)
 801271a:	e7da      	b.n	80126d2 <xFTPClientWork+0xe56>
			FreeRTOS_FD_SET( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE | eSELECT_EXCEPT );
 801271c:	6863      	ldr	r3, [r4, #4]
 801271e:	4652      	mov	r2, sl
 8012720:	6819      	ldr	r1, [r3, #0]
 8012722:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012724:	f7fa fb08 	bl	800cd38 <FreeRTOS_FD_SET>
			xRc = FreeRTOS_select( pxClient->pxParent->xSocketSet, 200 );
 8012728:	6863      	ldr	r3, [r4, #4]
 801272a:	4649      	mov	r1, r9
 801272c:	6818      	ldr	r0, [r3, #0]
 801272e:	f7fa fb49 	bl	800cdc4 <FreeRTOS_select>
 8012732:	4606      	mov	r6, r0
			uxSpace = FreeRTOS_tx_space( pxClient->xTransferSocket );
 8012734:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012736:	f7fb f9ed 	bl	800db14 <FreeRTOS_tx_space>
 801273a:	4605      	mov	r5, r0
 801273c:	e027      	b.n	801278e <xFTPClientWork+0xf12>
				FreeRTOS_printf( ( "prvRetrieveFileWork: Got %u Expected %u\n", ( unsigned )uxItemsRead, ( unsigned ) uxCount ) );
 801273e:	462a      	mov	r2, r5
 8012740:	4601      	mov	r1, r0
 8012742:	4860      	ldr	r0, [pc, #384]	; (80128c4 <xFTPClientWork+0x1048>)
 8012744:	f004 f904 	bl	8016950 <lUDPLoggingPrintf>
				xRc = FreeRTOS_shutdown( pxClient->xTransferSocket, FREERTOS_SHUT_RDWR );
 8012748:	2102      	movs	r1, #2
 801274a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801274c:	f7fb f8bf 	bl	800d8ce <FreeRTOS_shutdown>
				pxClient->uxBytesLeft = 0u;
 8012750:	2300      	movs	r3, #0
 8012752:	6263      	str	r3, [r4, #36]	; 0x24
	if( xRc < 0 )
 8012754:	1e06      	subs	r6, r0, #0
 8012756:	da43      	bge.n	80127e0 <xFTPClientWork+0xf64>
		FreeRTOS_printf( ( "prvRetrieveFileWork: already disconnected\n" ) );
 8012758:	485b      	ldr	r0, [pc, #364]	; (80128c8 <xFTPClientWork+0x104c>)
 801275a:	f004 f8f9 	bl	8016950 <lUDPLoggingPrintf>
 801275e:	e052      	b.n	8012806 <xFTPClientWork+0xf8a>
			xRc = FreeRTOS_send( pxClient->xTransferSocket, pcFILE_BUFFER, uxCount, 0 );
 8012760:	6861      	ldr	r1, [r4, #4]
 8012762:	2300      	movs	r3, #0
 8012764:	462a      	mov	r2, r5
 8012766:	f601 0104 	addw	r1, r1, #2052	; 0x804
 801276a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801276c:	f7fa ff8c 	bl	800d688 <FreeRTOS_send>
		if( xRc < 0 )
 8012770:	1e06      	subs	r6, r0, #0
 8012772:	dbf1      	blt.n	8012758 <xFTPClientWork+0xedc>
		pxClient->ulRecvBytes += xRc;
 8012774:	6a23      	ldr	r3, [r4, #32]
 8012776:	4433      	add	r3, r6
 8012778:	6223      	str	r3, [r4, #32]
		if( pxClient->uxBytesLeft == 0u )
 801277a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801277c:	b383      	cbz	r3, 80127e0 <xFTPClientWork+0xf64>
	} while( uxCount > 0u );
 801277e:	2d00      	cmp	r5, #0
 8012780:	d04d      	beq.n	801281e <xFTPClientWork+0xfa2>
		uxSpace = FreeRTOS_tx_space( pxClient->xTransferSocket );
 8012782:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012784:	f7fb f9c6 	bl	800db14 <FreeRTOS_tx_space>
		if( uxSpace == 0 )
 8012788:	4605      	mov	r5, r0
 801278a:	2800      	cmp	r0, #0
 801278c:	d0c6      	beq.n	801271c <xFTPClientWork+0xea0>
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 801278e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012790:	429d      	cmp	r5, r3
 8012792:	bf28      	it	cs
 8012794:	461d      	movcs	r5, r3
		if( uxCount == 0 )
 8012796:	b1fd      	cbz	r5, 80127d8 <xFTPClientWork+0xf5c>
 8012798:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801279c:	bf28      	it	cs
 801279e:	f44f 6500 	movcs.w	r5, #2048	; 0x800
			uxItemsRead = ff_fread( pcFILE_BUFFER, 1, uxCount, pxClient->pxReadHandle );
 80127a2:	6860      	ldr	r0, [r4, #4]
 80127a4:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 80127a8:	462a      	mov	r2, r5
 80127aa:	4639      	mov	r1, r7
 80127ac:	f600 0004 	addw	r0, r0, #2052	; 0x804
 80127b0:	f7f6 fbf6 	bl	8008fa0 <ff_fread>
			if( uxItemsRead != uxCount )
 80127b4:	42a8      	cmp	r0, r5
 80127b6:	d1c2      	bne.n	801273e <xFTPClientWork+0xec2>
			pxClient->uxBytesLeft -= uxCount;
 80127b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127ba:	1b5b      	subs	r3, r3, r5
 80127bc:	6263      	str	r3, [r4, #36]	; 0x24
			if( pxClient->uxBytesLeft == 0u )
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1ce      	bne.n	8012760 <xFTPClientWork+0xee4>
			BaseType_t xTrueValue = 1;
 80127c2:	ab1c      	add	r3, sp, #112	; 0x70
 80127c4:	f843 7d10 	str.w	r7, [r3, #-16]!
				FreeRTOS_setsockopt( pxClient->xTransferSocket, 0, FREERTOS_SO_CLOSE_AFTER_SEND, ( void * ) &xTrueValue, sizeof( xTrueValue ) );
 80127c8:	2204      	movs	r2, #4
 80127ca:	9200      	str	r2, [sp, #0]
 80127cc:	220c      	movs	r2, #12
 80127ce:	2100      	movs	r1, #0
 80127d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80127d2:	f7fb f9c9 	bl	800db68 <FreeRTOS_setsockopt>
 80127d6:	e7c3      	b.n	8012760 <xFTPClientWork+0xee4>
	if( xRc < 0 )
 80127d8:	2e00      	cmp	r6, #0
 80127da:	dbbd      	blt.n	8012758 <xFTPClientWork+0xedc>
	else if( pxClient->uxBytesLeft <= 0u )
 80127dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127de:	b9f3      	cbnz	r3, 801281e <xFTPClientWork+0xfa2>
 80127e0:	2505      	movs	r5, #5
			xRc = FreeRTOS_recv( pxClient->xTransferSocket, pcFILE_BUFFER, sizeof( pcFILE_BUFFER ), 0 );
 80127e2:	f04f 0900 	mov.w	r9, #0
 80127e6:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80127ea:	6861      	ldr	r1, [r4, #4]
 80127ec:	464b      	mov	r3, r9
 80127ee:	463a      	mov	r2, r7
 80127f0:	f601 0104 	addw	r1, r1, #2052	; 0x804
 80127f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80127f6:	f7fa fe7d 	bl	800d4f4 <FreeRTOS_recv>
			if( xRc < 0 )
 80127fa:	2800      	cmp	r0, #0
 80127fc:	f2c0 80ac 	blt.w	8012958 <xFTPClientWork+0x10dc>
		for( x = 0; x < 5; x++ )
 8012800:	3d01      	subs	r5, #1
 8012802:	d1f2      	bne.n	80127ea <xFTPClientWork+0xf6e>
 8012804:	4606      	mov	r6, r0
		FreeRTOS_FD_CLR( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE );
 8012806:	6863      	ldr	r3, [r4, #4]
 8012808:	2202      	movs	r2, #2
 801280a:	6819      	ldr	r1, [r3, #0]
 801280c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801280e:	f7fa fab7 	bl	800cd80 <FreeRTOS_FD_CLR>
			if( xClientRc < 0 )
 8012812:	2e00      	cmp	r6, #0
 8012814:	db13      	blt.n	801283e <xFTPClientWork+0xfc2>
}
 8012816:	4640      	mov	r0, r8
 8012818:	b01d      	add	sp, #116	; 0x74
 801281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		FreeRTOS_FD_SET( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE );
 801281e:	6863      	ldr	r3, [r4, #4]
 8012820:	2202      	movs	r2, #2
 8012822:	6819      	ldr	r1, [r3, #0]
 8012824:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012826:	f7fa fa87 	bl	800cd38 <FreeRTOS_FD_SET>
 801282a:	e7f2      	b.n	8012812 <xFTPClientWork+0xf96>
			else if( pxClient->pxWriteHandle != NULL )
 801282c:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
 8012830:	2b00      	cmp	r3, #0
 8012832:	d0f0      	beq.n	8012816 <xFTPClientWork+0xf9a>
				xClientRc = prvStoreFileWork( pxClient );
 8012834:	4620      	mov	r0, r4
 8012836:	f7fe fc08 	bl	801104a <prvStoreFileWork>
 801283a:	4606      	mov	r6, r0
 801283c:	e7e9      	b.n	8012812 <xFTPClientWork+0xf96>
				prvTransferCloseSocket( pxClient );
 801283e:	4620      	mov	r0, r4
 8012840:	f7fe fc32 	bl	80110a8 <prvTransferCloseSocket>
				prvTransferCloseFile( pxClient );
 8012844:	4620      	mov	r0, r4
 8012846:	f7fe fbea 	bl	801101e <prvTransferCloseFile>
	return xRc;
 801284a:	e7e4      	b.n	8012816 <xFTPClientWork+0xf9a>
		pcMyReply = REPL_530; /* Please first log in. */
 801284c:	4e1f      	ldr	r6, [pc, #124]	; (80128cc <xFTPClientWork+0x1050>)
	if( pxFTPCommand->ucCommandType != ECMD_RNFR )
 801284e:	2d13      	cmp	r5, #19
 8012850:	d005      	beq.n	801285e <xFTPClientWork+0xfe2>
		pxClient->bits.bInRename = pdFALSE_UNSIGNED;
 8012852:	f894 33fc 	ldrb.w	r3, [r4, #1020]	; 0x3fc
 8012856:	f36f 03c3 	bfc	r3, #3, #1
 801285a:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
	if( pcMyReply != NULL )
 801285e:	b13e      	cbz	r6, 8012870 <xFTPClientWork+0xff4>
		xResult = prvSendReply( pxClient->xSocket, pcMyReply, strlen( pcMyReply ) );
 8012860:	4630      	mov	r0, r6
 8012862:	f7ed fcbf 	bl	80001e4 <strlen>
 8012866:	4602      	mov	r2, r0
 8012868:	4631      	mov	r1, r6
 801286a:	68a0      	ldr	r0, [r4, #8]
 801286c:	f7fe fb6e 	bl	8010f4c <prvSendReply>
	if( pxClient->xTransferSocket != FREERTOS_NO_SOCKET )
 8012870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012872:	2b00      	cmp	r3, #0
 8012874:	d0cf      	beq.n	8012816 <xFTPClientWork+0xf9a>
		prvTransferCheck( pxClient );
 8012876:	4620      	mov	r0, r4
 8012878:	f7fe fda4 	bl	80113c4 <prvTransferCheck>
		if( ( pxClient->xTransferSocket != FREERTOS_NO_SOCKET ) && ( pxClient->pcConnectionAck[ 0 ] == '\0' ) )
 801287c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0c9      	beq.n	8012816 <xFTPClientWork+0xf9a>
 8012882:	f894 32fa 	ldrb.w	r3, [r4, #762]	; 0x2fa
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1c5      	bne.n	8012816 <xFTPClientWork+0xf9a>
			if( pxClient->bits1.bDirHasEntry )
 801288a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 801288e:	f013 0f02 	tst.w	r3, #2
 8012892:	f47f af41 	bne.w	8012718 <xFTPClientWork+0xe9c>
			else if( pxClient->pxReadHandle != NULL )
 8012896:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 801289a:	2b00      	cmp	r3, #0
 801289c:	d0c6      	beq.n	801282c <xFTPClientWork+0xfb0>
 801289e:	2600      	movs	r6, #0
			FreeRTOS_FD_SET( pxClient->xTransferSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE | eSELECT_EXCEPT );
 80128a0:	f04f 0a06 	mov.w	sl, #6
			xRc = FreeRTOS_select( pxClient->pxParent->xSocketSet, 200 );
 80128a4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
			uxItemsRead = ff_fread( pcFILE_BUFFER, 1, uxCount, pxClient->pxReadHandle );
 80128a8:	2701      	movs	r7, #1
 80128aa:	e76a      	b.n	8012782 <xFTPClientWork+0xf06>
		pcMyReply = REPL_501; /* Command needs a parameter. */
 80128ac:	4e08      	ldr	r6, [pc, #32]	; (80128d0 <xFTPClientWork+0x1054>)
 80128ae:	e7ce      	b.n	801284e <xFTPClientWork+0xfd2>
 80128b0:	0801b5dc 	.word	0x0801b5dc
 80128b4:	0801b5fc 	.word	0x0801b5fc
 80128b8:	0801b50c 	.word	0x0801b50c
 80128bc:	0801b518 	.word	0x0801b518
 80128c0:	0801b608 	.word	0x0801b608
 80128c4:	0801b584 	.word	0x0801b584
 80128c8:	0801b5b0 	.word	0x0801b5b0
 80128cc:	0801adb8 	.word	0x0801adb8
 80128d0:	0801ad88 	.word	0x0801ad88
 80128d4:	0801b614 	.word	0x0801b614
 80128d8:	4e5a      	ldr	r6, [pc, #360]	; (8012a44 <xFTPClientWork+0x11c8>)
 80128da:	e7b8      	b.n	801284e <xFTPClientWork+0xfd2>
			xResult = TMODE_BINARY;
 80128dc:	2301      	movs	r3, #1
 80128de:	f7ff b918 	b.w	8011b12 <xFTPClientWork+0x296>
					xResult = TMODE_7BITS;
 80128e2:	2303      	movs	r3, #3
 80128e4:	f7ff b915 	b.w	8011b12 <xFTPClientWork+0x296>
		xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "257 \"%s\" directory %s\r\n",
 80128e8:	6860      	ldr	r0, [r4, #4]
 80128ea:	3004      	adds	r0, #4
 80128ec:	4b56      	ldr	r3, [pc, #344]	; (8012a48 <xFTPClientWork+0x11cc>)
 80128ee:	f7ff bbf1 	b.w	80120d4 <xFTPClientWork+0x858>
			case pdFREERTOS_ERRNO_ENOTDIR:	errMsg = "Invalid path"; break;			/* -34 The path of the file was not found. *//*_RB_ As before, what do these negative numbers relate to? */
 80128f2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8012a68 <xFTPClientWork+0x11ec>
	BaseType_t xFTPCode = 521;
 80128f6:	f240 2309 	movw	r3, #521	; 0x209
 80128fa:	f7ff bbcc 	b.w	8012096 <xFTPClientWork+0x81a>
			case pdFREERTOS_ERRNO_EROFS:	errMsg = "Read-only"; break;			/* -33	Tried to FF_Open() a file marked read only. */
 80128fe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8012a6c <xFTPClientWork+0x11f0>
 8012902:	e7f8      	b.n	80128f6 <xFTPClientWork+0x107a>
			xLength = snprintf( pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), "150%cOpening data connection to %lxip:%u\r\n%s",
 8012904:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8012906:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8012908:	2320      	movs	r3, #32
 801290a:	4a50      	ldr	r2, [pc, #320]	; (8012a4c <xFTPClientWork+0x11d0>)
 801290c:	9202      	str	r2, [sp, #8]
 801290e:	9101      	str	r1, [sp, #4]
 8012910:	9500      	str	r5, [sp, #0]
 8012912:	4a4f      	ldr	r2, [pc, #316]	; (8012a50 <xFTPClientWork+0x11d4>)
 8012914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012918:	f004 fb5f 	bl	8016fda <snprintf>
			prvSendReply( pxClient->xSocket, pcCOMMAND_BUFFER, xLength );
 801291c:	6861      	ldr	r1, [r4, #4]
 801291e:	4602      	mov	r2, r0
 8012920:	3104      	adds	r1, #4
 8012922:	68a0      	ldr	r0, [r4, #8]
 8012924:	f7fe fb12 	bl	8010f4c <prvSendReply>
			pxClient->pcConnectionAck[ 0 ] = '\0';
 8012928:	2300      	movs	r3, #0
 801292a:	f884 32fa 	strb.w	r3, [r4, #762]	; 0x2fa
			prvTransferStart( pxClient );
 801292e:	4620      	mov	r0, r4
 8012930:	f7fe fb4e 	bl	8010fd0 <prvTransferStart>
 8012934:	e527      	b.n	8012386 <xFTPClientWork+0xb0a>
				pcMyReply = REPL_553_READ_ONLY;
 8012936:	4e47      	ldr	r6, [pc, #284]	; (8012a54 <xFTPClientWork+0x11d8>)
 8012938:	e78b      	b.n	8012852 <xFTPClientWork+0xfd6>
					pcMyReply = REPL_500; /* 500 Syntax error, command unrecognised. */
 801293a:	4e47      	ldr	r6, [pc, #284]	; (8012a58 <xFTPClientWork+0x11dc>)
 801293c:	e789      	b.n	8012852 <xFTPClientWork+0xfd6>
					pcMyReply = REPL_501;
 801293e:	4e41      	ldr	r6, [pc, #260]	; (8012a44 <xFTPClientWork+0x11c8>)
 8012940:	e787      	b.n	8012852 <xFTPClientWork+0xfd6>
				pcMyReply = REPL_425;
 8012942:	4e46      	ldr	r6, [pc, #280]	; (8012a5c <xFTPClientWork+0x11e0>)
 8012944:	e785      	b.n	8012852 <xFTPClientWork+0xfd6>
		if( uxFileSize == 0ul )
 8012946:	2600      	movs	r6, #0
 8012948:	e783      	b.n	8012852 <xFTPClientWork+0xfd6>
						if( pxClient->bits1.bEmptyFile != pdFALSE_UNSIGNED )
 801294a:	2600      	movs	r6, #0
 801294c:	e781      	b.n	8012852 <xFTPClientWork+0xfd6>
				pcMyReply = pcFeatAnswer;
 801294e:	4e44      	ldr	r6, [pc, #272]	; (8012a60 <xFTPClientWork+0x11e4>)
 8012950:	e77f      	b.n	8012852 <xFTPClientWork+0xfd6>
				pcMyReply = REPL_425;
 8012952:	4e42      	ldr	r6, [pc, #264]	; (8012a5c <xFTPClientWork+0x11e0>)
 8012954:	f7ff bb74 	b.w	8012040 <xFTPClientWork+0x7c4>
 8012958:	4606      	mov	r6, r0
 801295a:	e754      	b.n	8012806 <xFTPClientWork+0xf8a>
				strcpy( pcRestCommand, pcNEW_DIR );
 801295c:	6861      	ldr	r1, [r4, #4]
 801295e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8012962:	3104      	adds	r1, #4
 8012964:	4648      	mov	r0, r9
 8012966:	f004 ff73 	bl	8017850 <strcpy>
				prvSizeDateFile( pxClient, pcRestCommand, pdFALSE );
 801296a:	2200      	movs	r2, #0
 801296c:	4649      	mov	r1, r9
 801296e:	4620      	mov	r0, r4
 8012970:	f7fe fe46 	bl	8011600 <prvSizeDateFile>
 8012974:	2600      	movs	r6, #0
 8012976:	e76c      	b.n	8012852 <xFTPClientWork+0xfd6>
		switch( iErrorNo )
 8012978:	281e      	cmp	r0, #30
 801297a:	d0c0      	beq.n	80128fe <xFTPClientWork+0x1082>
 801297c:	285a      	cmp	r0, #90	; 0x5a
 801297e:	f47f ab80 	bne.w	8012082 <xFTPClientWork+0x806>
			case pdFREERTOS_ERRNO_ENOTEMPTY:errMsg = "Dir not empty"; break;
 8012982:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8012a70 <xFTPClientWork+0x11f4>
 8012986:	e7b6      	b.n	80128f6 <xFTPClientWork+0x107a>
					pcMyReply = REPL_500;
 8012988:	4e33      	ldr	r6, [pc, #204]	; (8012a58 <xFTPClientWork+0x11dc>)
 801298a:	e762      	b.n	8012852 <xFTPClientWork+0xfd6>
 801298c:	4e32      	ldr	r6, [pc, #200]	; (8012a58 <xFTPClientWork+0x11dc>)
 801298e:	e760      	b.n	8012852 <xFTPClientWork+0xfd6>
 8012990:	4e31      	ldr	r6, [pc, #196]	; (8012a58 <xFTPClientWork+0x11dc>)
 8012992:	e75e      	b.n	8012852 <xFTPClientWork+0xfd6>
			pxClient->bits1.bDirHasEntry = ( xEndOfDir == pdFALSE ) && ( iRc >= 0 );
 8012994:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8012998:	f36f 0341 	bfc	r3, #1, #1
 801299c:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
 80129a0:	e612      	b.n	80125c8 <xFTPClientWork+0xd4c>
		xWriteLength = ( BaseType_t ) ( pcWritePtr - pcCOMMAND_BUFFER );
 80129a2:	6863      	ldr	r3, [r4, #4]
 80129a4:	3304      	adds	r3, #4
		if( xWriteLength == 0 )
 80129a6:	1af6      	subs	r6, r6, r3
 80129a8:	f43f af35 	beq.w	8012816 <xFTPClientWork+0xf9a>
			ulTotalCount = 1;
 80129ac:	a91c      	add	r1, sp, #112	; 0x70
 80129ae:	2301      	movs	r3, #1
 80129b0:	f841 3d10 	str.w	r3, [r1, #-16]!
			ulFreeCount = ff_diskfree( pxClient->pcCurrentDir, &ulTotalCount );
 80129b4:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 80129b8:	f7f6 fe9e 	bl	80096f8 <ff_diskfree>
			ulPercentage = ( uint32_t ) ( ( 100ULL * ulFreeCount + ulTotalCount / 2 ) / ulTotalCount );
 80129bc:	9d18      	ldr	r5, [sp, #96]	; 0x60
			snprintf( pxClient->pcClientAck, sizeof( pxClient->pcClientAck ),
 80129be:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
 80129c2:	f204 397a 	addw	r9, r4, #890	; 0x37a
			ulPercentage = ( uint32_t ) ( ( 100ULL * ulFreeCount + ulTotalCount / 2 ) / ulTotalCount );
 80129c6:	2100      	movs	r1, #0
 80129c8:	1802      	adds	r2, r0, r0
 80129ca:	eb41 0301 	adc.w	r3, r1, r1
 80129ce:	eb12 0b00 	adds.w	fp, r2, r0
 80129d2:	eb43 0c01 	adc.w	ip, r3, r1
 80129d6:	ea4f 134c 	mov.w	r3, ip, lsl #5
 80129da:	ea43 63db 	orr.w	r3, r3, fp, lsr #27
 80129de:	930b      	str	r3, [sp, #44]	; 0x2c
 80129e0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80129e4:	930a      	str	r3, [sp, #40]	; 0x28
 80129e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129ea:	eb12 020b 	adds.w	r2, r2, fp
 80129ee:	eb43 030c 	adc.w	r3, r3, ip
 80129f2:	eb10 0b02 	adds.w	fp, r0, r2
 80129f6:	eb41 0c03 	adc.w	ip, r1, r3
 80129fa:	ea4f 0e55 	mov.w	lr, r5, lsr #1
 80129fe:	462a      	mov	r2, r5
 8012a00:	2300      	movs	r3, #0
 8012a02:	eb1b 000e 	adds.w	r0, fp, lr
 8012a06:	f14c 0100 	adc.w	r1, ip, #0
 8012a0a:	f7ed fc49 	bl	80002a0 <__aeabi_uldivmod>
 8012a0e:	9001      	str	r0, [sp, #4]
			snprintf( pxClient->pcClientAck, sizeof( pxClient->pcClientAck ),
 8012a10:	0aad      	lsrs	r5, r5, #10
 8012a12:	9500      	str	r5, [sp, #0]
 8012a14:	4653      	mov	r3, sl
 8012a16:	4a13      	ldr	r2, [pc, #76]	; (8012a64 <xFTPClientWork+0x11e8>)
 8012a18:	2180      	movs	r1, #128	; 0x80
 8012a1a:	4648      	mov	r0, r9
 8012a1c:	f004 fadd 	bl	8016fda <snprintf>
			if( pxClient->bits1.bDirHasEntry == pdFALSE_UNSIGNED )
 8012a20:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8012a24:	f013 0f02 	tst.w	r3, #2
 8012a28:	f47f ae48 	bne.w	80126bc <xFTPClientWork+0xe40>
			BaseType_t xTrueValue = 1;
 8012a2c:	ab1c      	add	r3, sp, #112	; 0x70
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f843 2d10 	str.w	r2, [r3, #-16]!
				FreeRTOS_setsockopt( pxClient->xTransferSocket, 0, FREERTOS_SO_CLOSE_AFTER_SEND, ( void * ) &xTrueValue, sizeof( xTrueValue ) );
 8012a34:	2204      	movs	r2, #4
 8012a36:	9200      	str	r2, [sp, #0]
 8012a38:	220c      	movs	r2, #12
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012a3e:	f7fb f893 	bl	800db68 <FreeRTOS_setsockopt>
 8012a42:	e63b      	b.n	80126bc <xFTPClientWork+0xe40>
 8012a44:	0801ad88 	.word	0x0801ad88
 8012a48:	0801acfc 	.word	0x0801acfc
 8012a4c:	0801b914 	.word	0x0801b914
 8012a50:	0801b3ac 	.word	0x0801b3ac
 8012a54:	0801ad68 	.word	0x0801ad68
 8012a58:	0801ae7c 	.word	0x0801ae7c
 8012a5c:	0801ae1c 	.word	0x0801ae1c
 8012a60:	0801a990 	.word	0x0801a990
 8012a64:	0801b538 	.word	0x0801b538
 8012a68:	0801acec 	.word	0x0801acec
 8012a6c:	0801ace0 	.word	0x0801ace0
 8012a70:	0801add0 	.word	0x0801add0

08012a74 <webCodename>:
	{	4,    "UNKN",		ECMD_UNK },
};

const char *webCodename (int aCode)
{
	switch (aCode) {
 8012a74:	f240 1391 	movw	r3, #401	; 0x191
 8012a78:	4298      	cmp	r0, r3
 8012a7a:	d020      	beq.n	8012abe <webCodename+0x4a>
 8012a7c:	f5b0 7fc9 	cmp.w	r0, #402	; 0x192
 8012a80:	db0b      	blt.n	8012a9a <webCodename+0x26>
 8012a82:	f5b0 7fcd 	cmp.w	r0, #410	; 0x19a
 8012a86:	d01c      	beq.n	8012ac2 <webCodename+0x4e>
 8012a88:	dd10      	ble.n	8012aac <webCodename+0x38>
 8012a8a:	f5b0 7fce 	cmp.w	r0, #412	; 0x19c
 8012a8e:	d01a      	beq.n	8012ac6 <webCodename+0x52>
 8012a90:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8012a94:	d108      	bne.n	8012aa8 <webCodename+0x34>
	case WEB_GONE:	//  = 410,
		return "Done";
	case WEB_PRECONDITION_FAILED:	//  = 412,
		return "Precondition Failed";
	case WEB_INTERNAL_SERVER_ERROR:	//  = 500,
		return "Internal Server Error";
 8012a96:	480e      	ldr	r0, [pc, #56]	; (8012ad0 <webCodename+0x5c>)
 8012a98:	4770      	bx	lr
	switch (aCode) {
 8012a9a:	28cc      	cmp	r0, #204	; 0xcc
 8012a9c:	d00b      	beq.n	8012ab6 <webCodename+0x42>
 8012a9e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8012aa2:	d00a      	beq.n	8012aba <webCodename+0x46>
 8012aa4:	28c8      	cmp	r0, #200	; 0xc8
 8012aa6:	d010      	beq.n	8012aca <webCodename+0x56>
	}
	return "Unknown";
 8012aa8:	480a      	ldr	r0, [pc, #40]	; (8012ad4 <webCodename+0x60>)
 8012aaa:	4770      	bx	lr
	switch (aCode) {
 8012aac:	f5b0 7fca 	cmp.w	r0, #404	; 0x194
 8012ab0:	d1fa      	bne.n	8012aa8 <webCodename+0x34>
		return "Not Found";
 8012ab2:	4809      	ldr	r0, [pc, #36]	; (8012ad8 <webCodename+0x64>)
 8012ab4:	4770      	bx	lr
		return "No content";
 8012ab6:	4809      	ldr	r0, [pc, #36]	; (8012adc <webCodename+0x68>)
 8012ab8:	4770      	bx	lr
		return "Bad request";
 8012aba:	4809      	ldr	r0, [pc, #36]	; (8012ae0 <webCodename+0x6c>)
 8012abc:	4770      	bx	lr
		return "Authorization Required";
 8012abe:	4809      	ldr	r0, [pc, #36]	; (8012ae4 <webCodename+0x70>)
 8012ac0:	4770      	bx	lr
		return "Done";
 8012ac2:	4809      	ldr	r0, [pc, #36]	; (8012ae8 <webCodename+0x74>)
 8012ac4:	4770      	bx	lr
		return "Precondition Failed";
 8012ac6:	4809      	ldr	r0, [pc, #36]	; (8012aec <webCodename+0x78>)
 8012ac8:	4770      	bx	lr
		return "OK";
 8012aca:	4809      	ldr	r0, [pc, #36]	; (8012af0 <webCodename+0x7c>)
}
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	0801b6c4 	.word	0x0801b6c4
 8012ad4:	0801b6dc 	.word	0x0801b6dc
 8012ad8:	0801b69c 	.word	0x0801b69c
 8012adc:	0801b66c 	.word	0x0801b66c
 8012ae0:	0801b678 	.word	0x0801b678
 8012ae4:	0801b684 	.word	0x0801b684
 8012ae8:	0801b6a8 	.word	0x0801b6a8
 8012aec:	0801b6b0 	.word	0x0801b6b0
 8012af0:	08019f34 	.word	0x08019f34

08012af4 <prvFileClose>:
}
/*-----------------------------------------------------------*/

static void prvFileClose( HTTPClient_t *pxClient )
{
	if( pxClient->pxFileHandle != NULL )
 8012af4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012af8:	b173      	cbz	r3, 8012b18 <prvFileClose+0x24>
{
 8012afa:	b510      	push	{r4, lr}
 8012afc:	4604      	mov	r4, r0
	{
		FreeRTOS_printf( ( "Closing file: %s\n", pxClient->pcCurrentFilename ) );
 8012afe:	f100 0124 	add.w	r1, r0, #36	; 0x24
 8012b02:	4806      	ldr	r0, [pc, #24]	; (8012b1c <prvFileClose+0x28>)
 8012b04:	f003 ff24 	bl	8016950 <lUDPLoggingPrintf>
		ff_fclose( pxClient->pxFileHandle );
 8012b08:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8012b0c:	f7f6 fa1c 	bl	8008f48 <ff_fclose>
		pxClient->pxFileHandle = NULL;
 8012b10:	2300      	movs	r3, #0
 8012b12:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8012b16:	bd10      	pop	{r4, pc}
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	0801b760 	.word	0x0801b760

08012b20 <prvSendReply>:
	}
}
/*-----------------------------------------------------------*/

static BaseType_t prvSendReply( HTTPClient_t *pxClient, BaseType_t xCode )
{
 8012b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b24:	b084      	sub	sp, #16
 8012b26:	4605      	mov	r5, r0
 8012b28:	4688      	mov	r8, r1
struct xTCP_SERVER *pxParent = pxClient->pxParent;
 8012b2a:	6844      	ldr	r4, [r0, #4]
BaseType_t xRc;

	/* A normal command reply on the main socket (port 21). */
	char *pcBuffer = pxParent->pcFileBuffer;
 8012b2c:	f604 0604 	addw	r6, r4, #2052	; 0x804

	xRc = snprintf( pcBuffer, sizeof( pxParent->pcFileBuffer ),
 8012b30:	4608      	mov	r0, r1
 8012b32:	f7ff ff9f 	bl	8012a74 <webCodename>
		"Content-Type: %s\r\n"
		"Connection: keep-alive\r\n"
		"%s\r\n",
		( int ) xCode,
		webCodename (xCode),
		pxParent->pcContentsType[0] ? pxParent->pcContentsType : "text/html",
 8012b36:	f241 03c5 	movw	r3, #4293	; 0x10c5
	xRc = snprintf( pcBuffer, sizeof( pxParent->pcFileBuffer ),
 8012b3a:	5ce3      	ldrb	r3, [r4, r3]
 8012b3c:	b313      	cbz	r3, 8012b84 <prvSendReply+0x64>
 8012b3e:	f504 5386 	add.w	r3, r4, #4288	; 0x10c0
 8012b42:	3305      	adds	r3, #5
 8012b44:	f241 07ed 	movw	r7, #4333	; 0x10ed
 8012b48:	19e2      	adds	r2, r4, r7
 8012b4a:	9202      	str	r2, [sp, #8]
 8012b4c:	9301      	str	r3, [sp, #4]
 8012b4e:	9000      	str	r0, [sp, #0]
 8012b50:	4643      	mov	r3, r8
 8012b52:	4a0d      	ldr	r2, [pc, #52]	; (8012b88 <prvSendReply+0x68>)
 8012b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012b58:	4630      	mov	r0, r6
 8012b5a:	f004 fa3e 	bl	8016fda <snprintf>
		pxParent->pcExtraContents );

	pxParent->pcContentsType[0] = '\0';
 8012b5e:	2300      	movs	r3, #0
 8012b60:	f241 02c5 	movw	r2, #4293	; 0x10c5
 8012b64:	54a3      	strb	r3, [r4, r2]
	pxParent->pcExtraContents[0] = '\0';
 8012b66:	55e3      	strb	r3, [r4, r7]

	xRc = FreeRTOS_send( pxClient->xSocket, ( const void * ) pcBuffer, xRc, 0 );
 8012b68:	4602      	mov	r2, r0
 8012b6a:	4631      	mov	r1, r6
 8012b6c:	68a8      	ldr	r0, [r5, #8]
 8012b6e:	f7fa fd8b 	bl	800d688 <FreeRTOS_send>
	pxClient->bits.bReplySent = pdTRUE_UNSIGNED;
 8012b72:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8012b76:	f043 0301 	orr.w	r3, r3, #1
 8012b7a:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0

	return xRc;
}
 8012b7e:	b004      	add	sp, #16
 8012b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	xRc = snprintf( pcBuffer, sizeof( pxParent->pcFileBuffer ),
 8012b84:	4b01      	ldr	r3, [pc, #4]	; (8012b8c <prvSendReply+0x6c>)
 8012b86:	e7dd      	b.n	8012b44 <prvSendReply+0x24>
 8012b88:	0801b798 	.word	0x0801b798
 8012b8c:	0801b78c 	.word	0x0801b78c

08012b90 <prvSendFile>:
/*-----------------------------------------------------------*/

static BaseType_t prvSendFile( HTTPClient_t *pxClient )
{
 8012b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b94:	4605      	mov	r5, r0
size_t uxSpace;
size_t uxCount;
BaseType_t xRc = 0;

	if( pxClient->bits.bReplySent == pdFALSE_UNSIGNED )
 8012b96:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
 8012b9a:	f013 0f01 	tst.w	r3, #1
 8012b9e:	d02f      	beq.n	8012c00 <prvSendFile+0x70>
BaseType_t xRc = 0;
 8012ba0:	f04f 0800 	mov.w	r8, #0
		{
			if( uxCount > sizeof( pxClient->pxParent->pcFileBuffer ) )
			{
				uxCount = sizeof( pxClient->pxParent->pcFileBuffer );
			}
			ff_fread( pxClient->pxParent->pcFileBuffer, 1, uxCount, pxClient->pxFileHandle );
 8012ba4:	2701      	movs	r7, #1
			pxClient->uxBytesLeft -= uxCount;

			xRc = FreeRTOS_send( pxClient->xSocket, pxClient->pxParent->pcFileBuffer, uxCount, 0 );
 8012ba6:	2600      	movs	r6, #0
		uxSpace = FreeRTOS_tx_space( pxClient->xSocket );
 8012ba8:	68a8      	ldr	r0, [r5, #8]
 8012baa:	f7fa ffb3 	bl	800db14 <FreeRTOS_tx_space>
 8012bae:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8012bb2:	4298      	cmp	r0, r3
 8012bb4:	bf28      	it	cs
 8012bb6:	4618      	movcs	r0, r3
		if( uxCount > 0u )
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d060      	beq.n	8012c7e <prvSendFile+0xee>
 8012bbc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8012bc0:	bf28      	it	cs
 8012bc2:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 8012bc6:	4604      	mov	r4, r0
			ff_fread( pxClient->pxParent->pcFileBuffer, 1, uxCount, pxClient->pxFileHandle );
 8012bc8:	6868      	ldr	r0, [r5, #4]
 8012bca:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8012bce:	4622      	mov	r2, r4
 8012bd0:	4639      	mov	r1, r7
 8012bd2:	f600 0004 	addw	r0, r0, #2052	; 0x804
 8012bd6:	f7f6 f9e3 	bl	8008fa0 <ff_fread>
			pxClient->uxBytesLeft -= uxCount;
 8012bda:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8012bde:	1b1b      	subs	r3, r3, r4
 8012be0:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
			xRc = FreeRTOS_send( pxClient->xSocket, pxClient->pxParent->pcFileBuffer, uxCount, 0 );
 8012be4:	6869      	ldr	r1, [r5, #4]
 8012be6:	4633      	mov	r3, r6
 8012be8:	4622      	mov	r2, r4
 8012bea:	f601 0104 	addw	r1, r1, #2052	; 0x804
 8012bee:	68a8      	ldr	r0, [r5, #8]
 8012bf0:	f7fa fd4a 	bl	800d688 <FreeRTOS_send>
			if( xRc < 0 )
 8012bf4:	f1b0 0800 	subs.w	r8, r0, #0
 8012bf8:	db41      	blt.n	8012c7e <prvSendFile+0xee>
			{
				break;
			}
		}
	} while( uxCount > 0u );
 8012bfa:	2c00      	cmp	r4, #0
 8012bfc:	d1d4      	bne.n	8012ba8 <prvSendFile+0x18>
 8012bfe:	e03e      	b.n	8012c7e <prvSendFile+0xee>
		pxClient->bits.bReplySent = pdTRUE_UNSIGNED;
 8012c00:	f043 0301 	orr.w	r3, r3, #1
 8012c04:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
		strcpy( pxClient->pxParent->pcContentsType, pcGetContentsType( pxClient->pcCurrentFilename ) );
 8012c08:	6846      	ldr	r6, [r0, #4]
 8012c0a:	f506 5686 	add.w	r6, r6, #4288	; 0x10c0
 8012c0e:	3605      	adds	r6, #5
 8012c10:	f100 0224 	add.w	r2, r0, #36	; 0x24
	const char *dot = NULL;
	const char *ptr;
	const char *pcResult = "text/html";
	BaseType_t x;

	for( ptr = apFname; *ptr; ptr++ )
 8012c14:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d041      	beq.n	8012ca0 <prvSendFile+0x110>
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	4601      	mov	r1, r0
 8012c20:	e003      	b.n	8012c2a <prvSendFile+0x9a>
	{
		if (*ptr == '.') dot = ptr;
 8012c22:	4610      	mov	r0, r2
	for( ptr = apFname; *ptr; ptr++ )
 8012c24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012c28:	b12b      	cbz	r3, 8012c36 <prvSendFile+0xa6>
		if (*ptr == '.') dot = ptr;
 8012c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8012c2c:	d0f9      	beq.n	8012c22 <prvSendFile+0x92>
		if (*ptr == '/') slash = ptr;
 8012c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8012c30:	bf08      	it	eq
 8012c32:	4611      	moveq	r1, r2
 8012c34:	e7f6      	b.n	8012c24 <prvSendFile+0x94>
	}
	if( dot > slash )
 8012c36:	4281      	cmp	r1, r0
 8012c38:	d234      	bcs.n	8012ca4 <prvSendFile+0x114>
	{
		dot++;
 8012c3a:	1c47      	adds	r7, r0, #1
		for( x = 0; x < ARRAY_SIZE( pxTypeCouples ); x++ )
 8012c3c:	2400      	movs	r4, #0
		{
			if( strcasecmp( dot, pxTypeCouples[ x ].pcExtension ) == 0 )
 8012c3e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8012cc4 <prvSendFile+0x134>
 8012c42:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
 8012c46:	4638      	mov	r0, r7
 8012c48:	f7f1 f8b0 	bl	8003dac <strcasecmp>
 8012c4c:	b318      	cbz	r0, 8012c96 <prvSendFile+0x106>
		for( x = 0; x < ARRAY_SIZE( pxTypeCouples ); x++ )
 8012c4e:	3401      	adds	r4, #1
 8012c50:	2c0d      	cmp	r4, #13
 8012c52:	d1f6      	bne.n	8012c42 <prvSendFile+0xb2>
	const char *pcResult = "text/html";
 8012c54:	4919      	ldr	r1, [pc, #100]	; (8012cbc <prvSendFile+0x12c>)
		strcpy( pxClient->pxParent->pcContentsType, pcGetContentsType( pxClient->pcCurrentFilename ) );
 8012c56:	4630      	mov	r0, r6
 8012c58:	f004 fdfa 	bl	8017850 <strcpy>
		snprintf( pxClient->pxParent->pcExtraContents, sizeof( pxClient->pxParent->pcExtraContents ),
 8012c5c:	6868      	ldr	r0, [r5, #4]
 8012c5e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8012c62:	4a17      	ldr	r2, [pc, #92]	; (8012cc0 <prvSendFile+0x130>)
 8012c64:	2128      	movs	r1, #40	; 0x28
 8012c66:	f500 5087 	add.w	r0, r0, #4320	; 0x10e0
 8012c6a:	300d      	adds	r0, #13
 8012c6c:	f004 f9b5 	bl	8016fda <snprintf>
		xRc = prvSendReply( pxClient, WEB_REPLY_OK );
 8012c70:	21c8      	movs	r1, #200	; 0xc8
 8012c72:	4628      	mov	r0, r5
 8012c74:	f7ff ff54 	bl	8012b20 <prvSendReply>
	if( xRc >= 0 ) do
 8012c78:	f1b0 0800 	subs.w	r8, r0, #0
 8012c7c:	da92      	bge.n	8012ba4 <prvSendFile+0x14>
	if( pxClient->uxBytesLeft == 0u )
 8012c7e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8012c82:	b18b      	cbz	r3, 8012ca8 <prvSendFile+0x118>
		FreeRTOS_FD_SET( pxClient->xSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE );
 8012c84:	686b      	ldr	r3, [r5, #4]
 8012c86:	2202      	movs	r2, #2
 8012c88:	6819      	ldr	r1, [r3, #0]
 8012c8a:	68a8      	ldr	r0, [r5, #8]
 8012c8c:	f7fa f854 	bl	800cd38 <FreeRTOS_FD_SET>
}
 8012c90:	4640      	mov	r0, r8
 8012c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			{
				pcResult = pxTypeCouples[ x ].pcType;
 8012c96:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <prvSendFile+0x134>)
 8012c98:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012c9c:	6861      	ldr	r1, [r4, #4]
 8012c9e:	e7da      	b.n	8012c56 <prvSendFile+0xc6>
	const char *pcResult = "text/html";
 8012ca0:	4906      	ldr	r1, [pc, #24]	; (8012cbc <prvSendFile+0x12c>)
 8012ca2:	e7d8      	b.n	8012c56 <prvSendFile+0xc6>
 8012ca4:	4905      	ldr	r1, [pc, #20]	; (8012cbc <prvSendFile+0x12c>)
 8012ca6:	e7d6      	b.n	8012c56 <prvSendFile+0xc6>
		FreeRTOS_FD_CLR( pxClient->xSocket, pxClient->pxParent->xSocketSet, eSELECT_WRITE );
 8012ca8:	686b      	ldr	r3, [r5, #4]
 8012caa:	2202      	movs	r2, #2
 8012cac:	6819      	ldr	r1, [r3, #0]
 8012cae:	68a8      	ldr	r0, [r5, #8]
 8012cb0:	f7fa f866 	bl	800cd80 <FreeRTOS_FD_CLR>
		prvFileClose( pxClient );
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f7ff ff1d 	bl	8012af4 <prvFileClose>
 8012cba:	e7e9      	b.n	8012c90 <prvSendFile+0x100>
 8012cbc:	0801b78c 	.word	0x0801b78c
 8012cc0:	0801b774 	.word	0x0801b774
 8012cc4:	0801b7d8 	.word	0x0801b7d8

08012cc8 <vHTTPClientDelete>:
{
 8012cc8:	b510      	push	{r4, lr}
 8012cca:	4604      	mov	r4, r0
	if( pxClient->xSocket != FREERTOS_NO_SOCKET )
 8012ccc:	6880      	ldr	r0, [r0, #8]
 8012cce:	b148      	cbz	r0, 8012ce4 <vHTTPClientDelete+0x1c>
		FreeRTOS_FD_CLR( pxClient->xSocket, pxClient->pxParent->xSocketSet, eSELECT_ALL );
 8012cd0:	6863      	ldr	r3, [r4, #4]
 8012cd2:	220f      	movs	r2, #15
 8012cd4:	6819      	ldr	r1, [r3, #0]
 8012cd6:	f7fa f853 	bl	800cd80 <FreeRTOS_FD_CLR>
		FreeRTOS_closesocket( pxClient->xSocket );
 8012cda:	68a0      	ldr	r0, [r4, #8]
 8012cdc:	f7fa fa76 	bl	800d1cc <FreeRTOS_closesocket>
		pxClient->xSocket = FREERTOS_NO_SOCKET;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	60a3      	str	r3, [r4, #8]
	prvFileClose( pxClient );
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f7ff ff05 	bl	8012af4 <prvFileClose>
 8012cea:	bd10      	pop	{r4, pc}

08012cec <xHTTPClientWork>:
{
 8012cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf0:	b084      	sub	sp, #16
 8012cf2:	4607      	mov	r7, r0
	if( pxClient->pxFileHandle != NULL )
 8012cf4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012cf8:	b10b      	cbz	r3, 8012cfe <xHTTPClientWork+0x12>
		prvSendFile( pxClient );
 8012cfa:	f7ff ff49 	bl	8012b90 <prvSendFile>
	xRc = FreeRTOS_recv( pxClient->xSocket, ( void * )pcCOMMAND_BUFFER, sizeof( pcCOMMAND_BUFFER ), 0 );
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	2300      	movs	r3, #0
 8012d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d06:	3104      	adds	r1, #4
 8012d08:	68b8      	ldr	r0, [r7, #8]
 8012d0a:	f7fa fbf3 	bl	800d4f4 <FreeRTOS_recv>
	if( xRc > 0 )
 8012d0e:	1e04      	subs	r4, r0, #0
 8012d10:	f340 809f 	ble.w	8012e52 <xHTTPClientWork+0x166>
	char *pcBuffer = pcCOMMAND_BUFFER;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f103 0804 	add.w	r8, r3, #4
		if( xRc < ( BaseType_t ) sizeof( pcCOMMAND_BUFFER ) )
 8012d1a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
			pcBuffer[ xRc ] = '\0';
 8012d1e:	bfbc      	itt	lt
 8012d20:	2300      	movlt	r3, #0
 8012d22:	f808 3004 	strblt.w	r3, [r8, r4]
 8012d26:	eb08 0304 	add.w	r3, r8, r4
			pcBuffer[ --xRc ] = '\0';
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	e003      	b.n	8012d36 <xHTTPClientWork+0x4a>
 8012d2e:	f803 1d01 	strb.w	r1, [r3, #-1]!
		while( xRc && ( pcBuffer[ xRc - 1 ] == 13 || pcBuffer[ xRc - 1 ] == 10 ) )
 8012d32:	3c01      	subs	r4, #1
 8012d34:	d005      	beq.n	8012d42 <xHTTPClientWork+0x56>
 8012d36:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012d3a:	2a0d      	cmp	r2, #13
 8012d3c:	d0f7      	beq.n	8012d2e <xHTTPClientWork+0x42>
 8012d3e:	2a0a      	cmp	r2, #10
 8012d40:	d0f5      	beq.n	8012d2e <xHTTPClientWork+0x42>
		pxClient->pcUrlData = pcBuffer;
 8012d42:	f8c7 801c 	str.w	r8, [r7, #28]
		pxClient->pcRestData = pcEmptyString;
 8012d46:	4b49      	ldr	r3, [pc, #292]	; (8012e6c <xHTTPClientWork+0x180>)
 8012d48:	623b      	str	r3, [r7, #32]
 8012d4a:	4d49      	ldr	r5, [pc, #292]	; (8012e70 <xHTTPClientWork+0x184>)
		for( xIndex = 0; xIndex < WEB_CMD_COUNT - 1; xIndex++, curCmd++ )
 8012d4c:	2600      	movs	r6, #0
 8012d4e:	e003      	b.n	8012d58 <xHTTPClientWork+0x6c>
 8012d50:	3601      	adds	r6, #1
 8012d52:	350c      	adds	r5, #12
 8012d54:	2e09      	cmp	r6, #9
 8012d56:	d07e      	beq.n	8012e56 <xHTTPClientWork+0x16a>
			xLength = curCmd->xCommandLength;
 8012d58:	f855 2c0c 	ldr.w	r2, [r5, #-12]
			if( ( xRc >= xLength ) && ( memcmp( curCmd->pcCommandName, pcBuffer, xLength ) == 0 ) )
 8012d5c:	42a2      	cmp	r2, r4
 8012d5e:	dcf7      	bgt.n	8012d50 <xHTTPClientWork+0x64>
 8012d60:	4692      	mov	sl, r2
 8012d62:	4641      	mov	r1, r8
 8012d64:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8012d68:	f004 fcfc 	bl	8017764 <memcmp>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d1ef      	bne.n	8012d50 <xHTTPClientWork+0x64>
		pcEndOfCmd = pcBuffer + xRc;
 8012d70:	eb08 0904 	add.w	r9, r8, r4
				pxClient->pcUrlData += xLength + 1;
 8012d74:	f10a 0a01 	add.w	sl, sl, #1
 8012d78:	eb08 050a 	add.w	r5, r8, sl
 8012d7c:	61fd      	str	r5, [r7, #28]
				for( pcLastPtr = (char *)pxClient->pcUrlData; pcLastPtr < pcEndOfCmd; pcLastPtr++ )
 8012d7e:	45a9      	cmp	r9, r5
 8012d80:	d912      	bls.n	8012da8 <xHTTPClientWork+0xbc>
					char ch = *pcLastPtr;
 8012d82:	f818 100a 	ldrb.w	r1, [r8, sl]
					if( ( ch == '\0' ) || ( strchr( "\n\r \t", ch ) != NULL ) )
 8012d86:	b159      	cbz	r1, 8012da0 <xHTTPClientWork+0xb4>
 8012d88:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8012e90 <xHTTPClientWork+0x1a4>
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	f004 fd51 	bl	8017834 <strchr>
 8012d92:	b928      	cbnz	r0, 8012da0 <xHTTPClientWork+0xb4>
				for( pcLastPtr = (char *)pxClient->pcUrlData; pcLastPtr < pcEndOfCmd; pcLastPtr++ )
 8012d94:	3501      	adds	r5, #1
 8012d96:	45a9      	cmp	r9, r5
 8012d98:	d006      	beq.n	8012da8 <xHTTPClientWork+0xbc>
					char ch = *pcLastPtr;
 8012d9a:	7829      	ldrb	r1, [r5, #0]
					if( ( ch == '\0' ) || ( strchr( "\n\r \t", ch ) != NULL ) )
 8012d9c:	2900      	cmp	r1, #0
 8012d9e:	d1f5      	bne.n	8012d8c <xHTTPClientWork+0xa0>
						*pcLastPtr = '\0';
 8012da0:	2300      	movs	r3, #0
 8012da2:	f805 3b01 	strb.w	r3, [r5], #1
						pxClient->pcRestData = pcLastPtr + 1;
 8012da6:	623d      	str	r5, [r7, #32]
		if( xIndex < ( WEB_CMD_COUNT - 1 ) )
 8012da8:	2e08      	cmp	r6, #8
 8012daa:	dc54      	bgt.n	8012e56 <xHTTPClientWork+0x16a>
	switch( xIndex )
 8012dac:	b176      	cbz	r6, 8012dcc <xHTTPClientWork+0xe0>
 8012dae:	2e00      	cmp	r6, #0
 8012db0:	db5a      	blt.n	8012e68 <xHTTPClientWork+0x17c>
 8012db2:	2e09      	cmp	r6, #9
 8012db4:	dc58      	bgt.n	8012e68 <xHTTPClientWork+0x17c>
			FreeRTOS_printf( ( "prvProcessCmd: Not implemented: %s\n",
 8012db6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012dba:	4b2e      	ldr	r3, [pc, #184]	; (8012e74 <xHTTPClientWork+0x188>)
 8012dbc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8012dc0:	6871      	ldr	r1, [r6, #4]
 8012dc2:	482d      	ldr	r0, [pc, #180]	; (8012e78 <xHTTPClientWork+0x18c>)
 8012dc4:	f003 fdc4 	bl	8016950 <lUDPLoggingPrintf>
BaseType_t xResult = 0;
 8012dc8:	2400      	movs	r4, #0
 8012dca:	e044      	b.n	8012e56 <xHTTPClientWork+0x16a>
	pxClient->bits.ulFlags = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if( pxClient->pcUrlData[ 0 ] != '/' )
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b2f      	cmp	r3, #47	; 0x2f
 8012dd8:	d028      	beq.n	8012e2c <xHTTPClientWork+0x140>
		pcSlash[ 0 ] = '/';
 8012dda:	232f      	movs	r3, #47	; 0x2f
 8012ddc:	f88d 300c 	strb.w	r3, [sp, #12]
		pcSlash[ 1 ] = '\0';
 8012de0:	2300      	movs	r3, #0
 8012de2:	f88d 300d 	strb.w	r3, [sp, #13]
	snprintf( pxClient->pcCurrentFilename, sizeof( pxClient->pcCurrentFilename ), "%s%s%s",
 8012de6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	ab03      	add	r3, sp, #12
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	4a21      	ldr	r2, [pc, #132]	; (8012e7c <xHTTPClientWork+0x190>)
 8012df6:	21c1      	movs	r1, #193	; 0xc1
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f004 f8ee 	bl	8016fda <snprintf>
	pxClient->pxFileHandle = ff_fopen( pxClient->pcCurrentFilename, "rb" );
 8012dfe:	4920      	ldr	r1, [pc, #128]	; (8012e80 <xHTTPClientWork+0x194>)
 8012e00:	4620      	mov	r0, r4
 8012e02:	f7f6 f87c 	bl	8008efe <ff_fopen>
 8012e06:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	FreeRTOS_printf( ( "Open file '%s': %s\n", pxClient->pcCurrentFilename,
 8012e0a:	b198      	cbz	r0, 8012e34 <xHTTPClientWork+0x148>
 8012e0c:	4a1d      	ldr	r2, [pc, #116]	; (8012e84 <xHTTPClientWork+0x198>)
 8012e0e:	4621      	mov	r1, r4
 8012e10:	481d      	ldr	r0, [pc, #116]	; (8012e88 <xHTTPClientWork+0x19c>)
 8012e12:	f003 fd9d 	bl	8016950 <lUDPLoggingPrintf>
	if( pxClient->pxFileHandle == NULL )
 8012e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012e1a:	b19b      	cbz	r3, 8012e44 <xHTTPClientWork+0x158>
		pxClient->uxBytesLeft = ( size_t ) pxClient->pxFileHandle->ulFileSize;
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		xRc = prvSendFile( pxClient );
 8012e22:	4638      	mov	r0, r7
 8012e24:	f7ff feb4 	bl	8012b90 <prvSendFile>
 8012e28:	4604      	mov	r4, r0
 8012e2a:	e014      	b.n	8012e56 <xHTTPClientWork+0x16a>
		pcSlash[ 0 ] = '\0';
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	f88d 300c 	strb.w	r3, [sp, #12]
 8012e32:	e7d8      	b.n	8012de6 <xHTTPClientWork+0xfa>
 8012e34:	2100      	movs	r1, #0
 8012e36:	4608      	mov	r0, r1
 8012e38:	f001 fec2 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
	FreeRTOS_printf( ( "Open file '%s': %s\n", pxClient->pcCurrentFilename,
 8012e3c:	f004 fef6 	bl	8017c2c <strerror>
 8012e40:	4602      	mov	r2, r0
 8012e42:	e7e4      	b.n	8012e0e <xHTTPClientWork+0x122>
		xRc = prvSendReply( pxClient, WEB_NOT_FOUND );
 8012e44:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8012e48:	4638      	mov	r0, r7
 8012e4a:	f7ff fe69 	bl	8012b20 <prvSendReply>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	e001      	b.n	8012e56 <xHTTPClientWork+0x16a>
	else if( xRc < 0 )
 8012e52:	2c00      	cmp	r4, #0
 8012e54:	db03      	blt.n	8012e5e <xHTTPClientWork+0x172>
}
 8012e56:	4620      	mov	r0, r4
 8012e58:	b004      	add	sp, #16
 8012e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FreeRTOS_printf( ( "xHTTPClientWork: rc = %ld\n", xRc ) );
 8012e5e:	4621      	mov	r1, r4
 8012e60:	480a      	ldr	r0, [pc, #40]	; (8012e8c <xHTTPClientWork+0x1a0>)
 8012e62:	f003 fd75 	bl	8016950 <lUDPLoggingPrintf>
 8012e66:	e7f6      	b.n	8012e56 <xHTTPClientWork+0x16a>
BaseType_t xResult = 0;
 8012e68:	2400      	movs	r4, #0
	return xRc;
 8012e6a:	e7f4      	b.n	8012e56 <xHTTPClientWork+0x16a>
 8012e6c:	0801b75c 	.word	0x0801b75c
 8012e70:	0801b6f0 	.word	0x0801b6f0
 8012e74:	0801b6e4 	.word	0x0801b6e4
 8012e78:	0801b92c 	.word	0x0801b92c
 8012e7c:	0801b61c 	.word	0x0801b61c
 8012e80:	0801b048 	.word	0x0801b048
 8012e84:	0801b90c 	.word	0x0801b90c
 8012e88:	0801b918 	.word	0x0801b918
 8012e8c:	0801b950 	.word	0x0801b950
 8012e90:	0801b910 	.word	0x0801b910

08012e94 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012e94:	b510      	push	{r4, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8012e96:	201c      	movs	r0, #28
 8012e98:	f000 fb36 	bl	8013508 <pvPortMalloc>

		if( pxEventBits != NULL )
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	b120      	cbz	r0, 8012eaa <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012ea6:	f000 f917 	bl	80130d8 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8012eaa:	4620      	mov	r0, r4
 8012eac:	bd10      	pop	{r4, pc}
	...

08012eb0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	460d      	mov	r5, r1
 8012eb6:	4617      	mov	r7, r2
 8012eb8:	4698      	mov	r8, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012eba:	4606      	mov	r6, r0
 8012ebc:	b308      	cbz	r0, 8012f02 <xEventGroupWaitBits+0x52>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012ebe:	f015 4f7f 	tst.w	r5, #4278190080	; 0xff000000
 8012ec2:	d124      	bne.n	8012f0e <xEventGroupWaitBits+0x5e>
	configASSERT( uxBitsToWaitFor != 0 );
 8012ec4:	b34d      	cbz	r5, 8012f1a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ec6:	f001 ff5b 	bl	8014d80 <xTaskGetSchedulerState>
 8012eca:	b930      	cbnz	r0, 8012eda <xEventGroupWaitBits+0x2a>
 8012ecc:	9b06      	ldr	r3, [sp, #24]
 8012ece:	b123      	cbz	r3, 8012eda <xEventGroupWaitBits+0x2a>
 8012ed0:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8012ed4:	4836      	ldr	r0, [pc, #216]	; (8012fb0 <xEventGroupWaitBits+0x100>)
 8012ed6:	f004 f9e3 	bl	80172a0 <vAssertCalled>
	}
	#endif

	vTaskSuspendAll();
 8012eda:	f001 fb11 	bl	8014500 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012ede:	6834      	ldr	r4, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8012ee0:	f1b8 0f00 	cmp.w	r8, #0
 8012ee4:	d11f      	bne.n	8012f26 <xEventGroupWaitBits+0x76>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012ee6:	4225      	tst	r5, r4
 8012ee8:	bf14      	ite	ne
 8012eea:	2301      	movne	r3, #1
 8012eec:	2300      	moveq	r3, #0
		if( xWaitConditionMet != pdFALSE )
 8012eee:	b303      	cbz	r3, 8012f32 <xEventGroupWaitBits+0x82>
			if( xClearOnExit != pdFALSE )
 8012ef0:	b117      	cbz	r7, 8012ef8 <xEventGroupWaitBits+0x48>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012ef2:	ea24 0505 	bic.w	r5, r4, r5
 8012ef6:	6035      	str	r5, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 8012ef8:	f001 fbdc 	bl	80146b4 <xTaskResumeAll>
 8012efc:	4620      	mov	r0, r4
}
 8012efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( xEventGroup );
 8012f02:	f240 114d 	movw	r1, #333	; 0x14d
 8012f06:	482a      	ldr	r0, [pc, #168]	; (8012fb0 <xEventGroupWaitBits+0x100>)
 8012f08:	f004 f9ca 	bl	80172a0 <vAssertCalled>
 8012f0c:	e7d7      	b.n	8012ebe <xEventGroupWaitBits+0xe>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012f0e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8012f12:	4827      	ldr	r0, [pc, #156]	; (8012fb0 <xEventGroupWaitBits+0x100>)
 8012f14:	f004 f9c4 	bl	80172a0 <vAssertCalled>
 8012f18:	e7d4      	b.n	8012ec4 <xEventGroupWaitBits+0x14>
	configASSERT( uxBitsToWaitFor != 0 );
 8012f1a:	f240 114f 	movw	r1, #335	; 0x14f
 8012f1e:	4824      	ldr	r0, [pc, #144]	; (8012fb0 <xEventGroupWaitBits+0x100>)
 8012f20:	f004 f9be 	bl	80172a0 <vAssertCalled>
 8012f24:	e7cf      	b.n	8012ec6 <xEventGroupWaitBits+0x16>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012f26:	ea35 0304 	bics.w	r3, r5, r4
 8012f2a:	bf0c      	ite	eq
 8012f2c:	2301      	moveq	r3, #1
 8012f2e:	2300      	movne	r3, #0
 8012f30:	e7dd      	b.n	8012eee <xEventGroupWaitBits+0x3e>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012f32:	9b06      	ldr	r3, [sp, #24]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d0df      	beq.n	8012ef8 <xEventGroupWaitBits+0x48>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012f38:	2f00      	cmp	r7, #0
 8012f3a:	bf0c      	ite	eq
 8012f3c:	2100      	moveq	r1, #0
 8012f3e:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8012f42:	f1b8 0f00 	cmp.w	r8, #0
 8012f46:	d001      	beq.n	8012f4c <xEventGroupWaitBits+0x9c>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012f48:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012f4c:	9a06      	ldr	r2, [sp, #24]
 8012f4e:	4329      	orrs	r1, r5
 8012f50:	1d30      	adds	r0, r6, #4
 8012f52:	f001 fd1f 	bl	8014994 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8012f56:	f001 fbad 	bl	80146b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8012f5a:	b938      	cbnz	r0, 8012f6c <xEventGroupWaitBits+0xbc>
			portYIELD_WITHIN_API();
 8012f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f60:	4b14      	ldr	r3, [pc, #80]	; (8012fb4 <xEventGroupWaitBits+0x104>)
 8012f62:	601a      	str	r2, [r3, #0]
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8012f6c:	f002 f8a0 	bl	80150b0 <uxTaskResetEventItemValue>
 8012f70:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012f72:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8012f76:	d003      	beq.n	8012f80 <xEventGroupWaitBits+0xd0>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012f78:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
	return uxReturn;
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			taskENTER_CRITICAL();
 8012f80:	f000 f938 	bl	80131f4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8012f84:	6834      	ldr	r4, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 8012f86:	f1b8 0f00 	cmp.w	r8, #0
 8012f8a:	d10b      	bne.n	8012fa4 <xEventGroupWaitBits+0xf4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012f8c:	4225      	tst	r5, r4
 8012f8e:	bf14      	ite	ne
 8012f90:	2301      	movne	r3, #1
 8012f92:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012f94:	b11b      	cbz	r3, 8012f9e <xEventGroupWaitBits+0xee>
					if( xClearOnExit != pdFALSE )
 8012f96:	b117      	cbz	r7, 8012f9e <xEventGroupWaitBits+0xee>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012f98:	ea24 0505 	bic.w	r5, r4, r5
 8012f9c:	6035      	str	r5, [r6, #0]
			taskEXIT_CRITICAL();
 8012f9e:	f000 f94b 	bl	8013238 <vPortExitCritical>
 8012fa2:	e7e9      	b.n	8012f78 <xEventGroupWaitBits+0xc8>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012fa4:	ea35 0304 	bics.w	r3, r5, r4
 8012fa8:	bf0c      	ite	eq
 8012faa:	2301      	moveq	r3, #1
 8012fac:	2300      	movne	r3, #0
 8012fae:	e7f1      	b.n	8012f94 <xEventGroupWaitBits+0xe4>
 8012fb0:	0801b96c 	.word	0x0801b96c
 8012fb4:	e000ed04 	.word	0xe000ed04

08012fb8 <xEventGroupClearBits>:
{
 8012fb8:	b570      	push	{r4, r5, r6, lr}
 8012fba:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	b160      	cbz	r0, 8012fda <xEventGroupClearBits+0x22>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012fc0:	f014 4f7f 	tst.w	r4, #4278190080	; 0xff000000
 8012fc4:	d10f      	bne.n	8012fe6 <xEventGroupClearBits+0x2e>
	taskENTER_CRITICAL();
 8012fc6:	f000 f915 	bl	80131f4 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 8012fca:	6835      	ldr	r5, [r6, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012fcc:	ea25 0404 	bic.w	r4, r5, r4
 8012fd0:	6034      	str	r4, [r6, #0]
	taskEXIT_CRITICAL();
 8012fd2:	f000 f931 	bl	8013238 <vPortExitCritical>
}
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xEventGroup );
 8012fda:	f240 11df 	movw	r1, #479	; 0x1df
 8012fde:	4805      	ldr	r0, [pc, #20]	; (8012ff4 <xEventGroupClearBits+0x3c>)
 8012fe0:	f004 f95e 	bl	80172a0 <vAssertCalled>
 8012fe4:	e7ec      	b.n	8012fc0 <xEventGroupClearBits+0x8>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012fe6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8012fea:	4802      	ldr	r0, [pc, #8]	; (8012ff4 <xEventGroupClearBits+0x3c>)
 8012fec:	f004 f958 	bl	80172a0 <vAssertCalled>
 8012ff0:	e7e9      	b.n	8012fc6 <xEventGroupClearBits+0xe>
 8012ff2:	bf00      	nop
 8012ff4:	0801b96c 	.word	0x0801b96c

08012ff8 <xEventGroupSetBits>:
{
 8012ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffa:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	b170      	cbz	r0, 801301e <xEventGroupSetBits+0x26>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013000:	f014 4f7f 	tst.w	r4, #4278190080	; 0xff000000
 8013004:	d111      	bne.n	801302a <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013006:	f105 060c 	add.w	r6, r5, #12
	vTaskSuspendAll();
 801300a:	f001 fa79 	bl	8014500 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 801300e:	6928      	ldr	r0, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013010:	682b      	ldr	r3, [r5, #0]
 8013012:	4323      	orrs	r3, r4
 8013014:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8013016:	4286      	cmp	r6, r0
 8013018:	d02f      	beq.n	801307a <xEventGroupSetBits+0x82>
 801301a:	2700      	movs	r7, #0
 801301c:	e015      	b.n	801304a <xEventGroupSetBits+0x52>
	configASSERT( xEventGroup );
 801301e:	f240 211d 	movw	r1, #541	; 0x21d
 8013022:	481a      	ldr	r0, [pc, #104]	; (801308c <xEventGroupSetBits+0x94>)
 8013024:	f004 f93c 	bl	80172a0 <vAssertCalled>
 8013028:	e7ea      	b.n	8013000 <xEventGroupSetBits+0x8>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801302a:	f240 211e 	movw	r1, #542	; 0x21e
 801302e:	4817      	ldr	r0, [pc, #92]	; (801308c <xEventGroupSetBits+0x94>)
 8013030:	f004 f936 	bl	80172a0 <vAssertCalled>
 8013034:	e7e7      	b.n	8013006 <xEventGroupSetBits+0xe>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013036:	6829      	ldr	r1, [r5, #0]
 8013038:	ea32 0101 	bics.w	r1, r2, r1
 801303c:	bf0c      	ite	eq
 801303e:	2101      	moveq	r1, #1
 8013040:	2100      	movne	r1, #0
 8013042:	e00e      	b.n	8013062 <xEventGroupSetBits+0x6a>
 8013044:	4620      	mov	r0, r4
		while( pxListItem != pxListEnd )
 8013046:	42a6      	cmp	r6, r4
 8013048:	d018      	beq.n	801307c <xEventGroupSetBits+0x84>
			pxNext = listGET_NEXT( pxListItem );
 801304a:	6844      	ldr	r4, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801304c:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801304e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013052:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8013056:	d1ee      	bne.n	8013036 <xEventGroupSetBits+0x3e>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013058:	6829      	ldr	r1, [r5, #0]
 801305a:	420a      	tst	r2, r1
 801305c:	bf14      	ite	ne
 801305e:	2101      	movne	r1, #1
 8013060:	2100      	moveq	r1, #0
			if( xMatchFound != pdFALSE )
 8013062:	2900      	cmp	r1, #0
 8013064:	d0ee      	beq.n	8013044 <xEventGroupSetBits+0x4c>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013066:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 801306a:	bf18      	it	ne
 801306c:	4317      	orrne	r7, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801306e:	6829      	ldr	r1, [r5, #0]
 8013070:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8013074:	f001 fcfc 	bl	8014a70 <vTaskRemoveFromUnorderedEventList>
 8013078:	e7e4      	b.n	8013044 <xEventGroupSetBits+0x4c>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801307a:	2700      	movs	r7, #0
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	ea23 0707 	bic.w	r7, r3, r7
 8013082:	602f      	str	r7, [r5, #0]
	( void ) xTaskResumeAll();
 8013084:	f001 fb16 	bl	80146b4 <xTaskResumeAll>
}
 8013088:	6828      	ldr	r0, [r5, #0]
 801308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801308c:	0801b96c 	.word	0x0801b96c

08013090 <vEventGroupDelete>:
{
 8013090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013092:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8013094:	f001 fa34 	bl	8014500 <vTaskSuspendAll>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	b17b      	cbz	r3, 80130bc <vEventGroupDelete+0x2c>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 801309c:	f104 050c 	add.w	r5, r4, #12
 80130a0:	4f0c      	ldr	r7, [pc, #48]	; (80130d4 <vEventGroupDelete+0x44>)
 80130a2:	f240 267d 	movw	r6, #637	; 0x27d
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	42ab      	cmp	r3, r5
 80130aa:	d00d      	beq.n	80130c8 <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80130ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80130b0:	6920      	ldr	r0, [r4, #16]
 80130b2:	f001 fcdd 	bl	8014a70 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80130b6:	6863      	ldr	r3, [r4, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d1f4      	bne.n	80130a6 <vEventGroupDelete+0x16>
			vPortFree( pxEventBits );
 80130bc:	4620      	mov	r0, r4
 80130be:	f000 fa89 	bl	80135d4 <vPortFree>
	( void ) xTaskResumeAll();
 80130c2:	f001 faf7 	bl	80146b4 <xTaskResumeAll>
 80130c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80130c8:	4631      	mov	r1, r6
 80130ca:	4638      	mov	r0, r7
 80130cc:	f004 f8e8 	bl	80172a0 <vAssertCalled>
 80130d0:	e7ec      	b.n	80130ac <vEventGroupDelete+0x1c>
 80130d2:	bf00      	nop
 80130d4:	0801b96c 	.word	0x0801b96c

080130d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80130d8:	f100 0308 	add.w	r3, r0, #8
 80130dc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80130de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130e2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80130e4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80130e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80130e8:	2300      	movs	r3, #0
 80130ea:	6003      	str	r3, [r0, #0]
 80130ec:	4770      	bx	lr

080130ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	6103      	str	r3, [r0, #16]
 80130f2:	4770      	bx	lr

080130f4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80130f4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80130f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80130f8:	689a      	ldr	r2, [r3, #8]
 80130fa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80130fc:	689a      	ldr	r2, [r3, #8]
 80130fe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013100:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8013102:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8013104:	6803      	ldr	r3, [r0, #0]
 8013106:	3301      	adds	r3, #1
 8013108:	6003      	str	r3, [r0, #0]
 801310a:	4770      	bx	lr

0801310c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801310c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801310e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013110:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8013114:	d002      	beq.n	801311c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013116:	f100 0208 	add.w	r2, r0, #8
 801311a:	e002      	b.n	8013122 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 801311c:	6902      	ldr	r2, [r0, #16]
 801311e:	e004      	b.n	801312a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013120:	461a      	mov	r2, r3
 8013122:	6853      	ldr	r3, [r2, #4]
 8013124:	681c      	ldr	r4, [r3, #0]
 8013126:	42a5      	cmp	r5, r4
 8013128:	d2fa      	bcs.n	8013120 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801312a:	6853      	ldr	r3, [r2, #4]
 801312c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801312e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013130:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8013132:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8013134:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	3301      	adds	r3, #1
 801313a:	6003      	str	r3, [r0, #0]
}
 801313c:	bc30      	pop	{r4, r5}
 801313e:	4770      	bx	lr

08013140 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8013140:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013142:	6842      	ldr	r2, [r0, #4]
 8013144:	6881      	ldr	r1, [r0, #8]
 8013146:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013148:	6882      	ldr	r2, [r0, #8]
 801314a:	6841      	ldr	r1, [r0, #4]
 801314c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801314e:	685a      	ldr	r2, [r3, #4]
 8013150:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013152:	bf04      	itt	eq
 8013154:	6882      	ldreq	r2, [r0, #8]
 8013156:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8013158:	2200      	movs	r2, #0
 801315a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801315c:	6818      	ldr	r0, [r3, #0]
 801315e:	3801      	subs	r0, #1
 8013160:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8013162:	4770      	bx	lr

08013164 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013164:	4808      	ldr	r0, [pc, #32]	; (8013188 <prvPortStartFirstTask+0x24>)
 8013166:	6800      	ldr	r0, [r0, #0]
 8013168:	6800      	ldr	r0, [r0, #0]
 801316a:	f380 8808 	msr	MSP, r0
 801316e:	f04f 0000 	mov.w	r0, #0
 8013172:	f380 8814 	msr	CONTROL, r0
 8013176:	b662      	cpsie	i
 8013178:	b661      	cpsie	f
 801317a:	f3bf 8f4f 	dsb	sy
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	df00      	svc	0
 8013184:	bf00      	nop
 8013186:	0000      	.short	0x0000
 8013188:	e000ed08 	.word	0xe000ed08

0801318c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801318c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801319c <vPortEnableVFP+0x10>
 8013190:	6801      	ldr	r1, [r0, #0]
 8013192:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013196:	6001      	str	r1, [r0, #0]
 8013198:	4770      	bx	lr
 801319a:	0000      	.short	0x0000
 801319c:	e000ed88 	.word	0xe000ed88

080131a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80131a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80131a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80131a8:	f021 0101 	bic.w	r1, r1, #1
 80131ac:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80131b0:	2300      	movs	r3, #0
 80131b2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80131b6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80131ba:	f06f 0302 	mvn.w	r3, #2
 80131be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80131c2:	3844      	subs	r0, #68	; 0x44
 80131c4:	4770      	bx	lr
	...

080131d0 <SVC_Handler>:
	__asm volatile (
 80131d0:	4b07      	ldr	r3, [pc, #28]	; (80131f0 <pxCurrentTCBConst2>)
 80131d2:	6819      	ldr	r1, [r3, #0]
 80131d4:	6808      	ldr	r0, [r1, #0]
 80131d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131da:	f380 8809 	msr	PSP, r0
 80131de:	f3bf 8f6f 	isb	sy
 80131e2:	f04f 0000 	mov.w	r0, #0
 80131e6:	f380 8811 	msr	BASEPRI, r0
 80131ea:	4770      	bx	lr
 80131ec:	f3af 8000 	nop.w

080131f0 <pxCurrentTCBConst2>:
 80131f0:	20000ad8 	.word	0x20000ad8

080131f4 <vPortEnterCritical>:
{
 80131f4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80131f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fa:	f383 8811 	msr	BASEPRI, r3
 80131fe:	f3bf 8f6f 	isb	sy
 8013202:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8013206:	4a09      	ldr	r2, [pc, #36]	; (801322c <vPortEnterCritical+0x38>)
 8013208:	6813      	ldr	r3, [r2, #0]
 801320a:	3301      	adds	r3, #1
 801320c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801320e:	2b01      	cmp	r3, #1
 8013210:	d000      	beq.n	8013214 <vPortEnterCritical+0x20>
 8013212:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013214:	4b06      	ldr	r3, [pc, #24]	; (8013230 <vPortEnterCritical+0x3c>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f013 0fff 	tst.w	r3, #255	; 0xff
 801321c:	d0f9      	beq.n	8013212 <vPortEnterCritical+0x1e>
 801321e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8013222:	4804      	ldr	r0, [pc, #16]	; (8013234 <vPortEnterCritical+0x40>)
 8013224:	f004 f83c 	bl	80172a0 <vAssertCalled>
}
 8013228:	e7f3      	b.n	8013212 <vPortEnterCritical+0x1e>
 801322a:	bf00      	nop
 801322c:	20000028 	.word	0x20000028
 8013230:	e000ed04 	.word	0xe000ed04
 8013234:	0801b998 	.word	0x0801b998

08013238 <vPortExitCritical>:
{
 8013238:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 801323a:	4b08      	ldr	r3, [pc, #32]	; (801325c <vPortExitCritical+0x24>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	b13b      	cbz	r3, 8013250 <vPortExitCritical+0x18>
	uxCriticalNesting--;
 8013240:	4a06      	ldr	r2, [pc, #24]	; (801325c <vPortExitCritical+0x24>)
 8013242:	6813      	ldr	r3, [r2, #0]
 8013244:	3b01      	subs	r3, #1
 8013246:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013248:	b90b      	cbnz	r3, 801324e <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801324a:	f383 8811 	msr	BASEPRI, r3
 801324e:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
 8013250:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8013254:	4802      	ldr	r0, [pc, #8]	; (8013260 <vPortExitCritical+0x28>)
 8013256:	f004 f823 	bl	80172a0 <vAssertCalled>
 801325a:	e7f1      	b.n	8013240 <vPortExitCritical+0x8>
 801325c:	20000028 	.word	0x20000028
 8013260:	0801b998 	.word	0x0801b998
	...

08013270 <PendSV_Handler>:
	__asm volatile
 8013270:	f3ef 8009 	mrs	r0, PSP
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	4b15      	ldr	r3, [pc, #84]	; (80132d0 <pxCurrentTCBConst>)
 801327a:	681a      	ldr	r2, [r3, #0]
 801327c:	f01e 0f10 	tst.w	lr, #16
 8013280:	bf08      	it	eq
 8013282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328a:	6010      	str	r0, [r2, #0]
 801328c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8013290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013294:	f380 8811 	msr	BASEPRI, r0
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	f3bf 8f6f 	isb	sy
 80132a0:	f001 faec 	bl	801487c <vTaskSwitchContext>
 80132a4:	f04f 0000 	mov.w	r0, #0
 80132a8:	f380 8811 	msr	BASEPRI, r0
 80132ac:	bc08      	pop	{r3}
 80132ae:	6819      	ldr	r1, [r3, #0]
 80132b0:	6808      	ldr	r0, [r1, #0]
 80132b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b6:	f01e 0f10 	tst.w	lr, #16
 80132ba:	bf08      	it	eq
 80132bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80132c0:	f380 8809 	msr	PSP, r0
 80132c4:	f3bf 8f6f 	isb	sy
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop
 80132cc:	f3af 8000 	nop.w

080132d0 <pxCurrentTCBConst>:
 80132d0:	20000ad8 	.word	0x20000ad8

080132d4 <SysTick_Handler>:
{
 80132d4:	b508      	push	{r3, lr}
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80132e6:	f001 f92d 	bl	8014544 <xTaskIncrementTick>
 80132ea:	b118      	cbz	r0, 80132f4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80132ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132f0:	4b02      	ldr	r3, [pc, #8]	; (80132fc <SysTick_Handler+0x28>)
 80132f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80132f4:	2300      	movs	r3, #0
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	bd08      	pop	{r3, pc}
 80132fc:	e000ed04 	.word	0xe000ed04

08013300 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013300:	4a08      	ldr	r2, [pc, #32]	; (8013324 <vPortSetupTimerInterrupt+0x24>)
 8013302:	2300      	movs	r3, #0
 8013304:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013306:	4908      	ldr	r1, [pc, #32]	; (8013328 <vPortSetupTimerInterrupt+0x28>)
 8013308:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801330a:	4b08      	ldr	r3, [pc, #32]	; (801332c <vPortSetupTimerInterrupt+0x2c>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	4908      	ldr	r1, [pc, #32]	; (8013330 <vPortSetupTimerInterrupt+0x30>)
 8013310:	fba1 1303 	umull	r1, r3, r1, r3
 8013314:	099b      	lsrs	r3, r3, #6
 8013316:	3b01      	subs	r3, #1
 8013318:	4906      	ldr	r1, [pc, #24]	; (8013334 <vPortSetupTimerInterrupt+0x34>)
 801331a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801331c:	2307      	movs	r3, #7
 801331e:	6013      	str	r3, [r2, #0]
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	e000e010 	.word	0xe000e010
 8013328:	e000e018 	.word	0xe000e018
 801332c:	20000000 	.word	0x20000000
 8013330:	10624dd3 	.word	0x10624dd3
 8013334:	e000e014 	.word	0xe000e014

08013338 <xPortStartScheduler>:
{
 8013338:	b510      	push	{r4, lr}
 801333a:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801333c:	4b3c      	ldr	r3, [pc, #240]	; (8013430 <xPortStartScheduler+0xf8>)
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	4b3c      	ldr	r3, [pc, #240]	; (8013434 <xPortStartScheduler+0xfc>)
 8013342:	429a      	cmp	r2, r3
 8013344:	d01e      	beq.n	8013384 <xPortStartScheduler+0x4c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013346:	4b3a      	ldr	r3, [pc, #232]	; (8013430 <xPortStartScheduler+0xf8>)
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	4b3b      	ldr	r3, [pc, #236]	; (8013438 <xPortStartScheduler+0x100>)
 801334c:	429a      	cmp	r2, r3
 801334e:	d01f      	beq.n	8013390 <xPortStartScheduler+0x58>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013350:	4b3a      	ldr	r3, [pc, #232]	; (801343c <xPortStartScheduler+0x104>)
 8013352:	781a      	ldrb	r2, [r3, #0]
 8013354:	b2d2      	uxtb	r2, r2
 8013356:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013358:	22ff      	movs	r2, #255	; 0xff
 801335a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	b2db      	uxtb	r3, r3
 8013360:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013364:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801336c:	4a34      	ldr	r2, [pc, #208]	; (8013440 <xPortStartScheduler+0x108>)
 801336e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013370:	2207      	movs	r2, #7
 8013372:	4b34      	ldr	r3, [pc, #208]	; (8013444 <xPortStartScheduler+0x10c>)
 8013374:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013376:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801337a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801337e:	d051      	beq.n	8013424 <xPortStartScheduler+0xec>
 8013380:	2206      	movs	r2, #6
 8013382:	e00c      	b.n	801339e <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013384:	f240 1147 	movw	r1, #327	; 0x147
 8013388:	482f      	ldr	r0, [pc, #188]	; (8013448 <xPortStartScheduler+0x110>)
 801338a:	f003 ff89 	bl	80172a0 <vAssertCalled>
 801338e:	e7da      	b.n	8013346 <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013390:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8013394:	482c      	ldr	r0, [pc, #176]	; (8013448 <xPortStartScheduler+0x110>)
 8013396:	f003 ff83 	bl	80172a0 <vAssertCalled>
 801339a:	e7d9      	b.n	8013350 <xPortStartScheduler+0x18>
 801339c:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801339e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80133a2:	005b      	lsls	r3, r3, #1
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80133ae:	1e51      	subs	r1, r2, #1
 80133b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80133b4:	d1f2      	bne.n	801339c <xPortStartScheduler+0x64>
 80133b6:	4b23      	ldr	r3, [pc, #140]	; (8013444 <xPortStartScheduler+0x10c>)
 80133b8:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133ba:	2a03      	cmp	r2, #3
 80133bc:	d132      	bne.n	8013424 <xPortStartScheduler+0xec>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80133be:	4a21      	ldr	r2, [pc, #132]	; (8013444 <xPortStartScheduler+0x10c>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80133c0:	6813      	ldr	r3, [r2, #0]
 80133c2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80133c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80133c8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80133ca:	9b01      	ldr	r3, [sp, #4]
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	4a1b      	ldr	r2, [pc, #108]	; (801343c <xPortStartScheduler+0x104>)
 80133d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80133d2:	4b1e      	ldr	r3, [pc, #120]	; (801344c <xPortStartScheduler+0x114>)
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80133da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80133e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80133e4:	f7ff ff8c 	bl	8013300 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80133e8:	4c19      	ldr	r4, [pc, #100]	; (8013450 <xPortStartScheduler+0x118>)
 80133ea:	2300      	movs	r3, #0
 80133ec:	6023      	str	r3, [r4, #0]
	vPortEnableVFP();
 80133ee:	f7ff fecd 	bl	801318c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80133f2:	4a18      	ldr	r2, [pc, #96]	; (8013454 <xPortStartScheduler+0x11c>)
 80133f4:	6813      	ldr	r3, [r2, #0]
 80133f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80133fa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80133fc:	f7ff feb2 	bl	8013164 <prvPortStartFirstTask>
	configASSERT( uxCriticalNesting == ~0UL );
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013406:	d004      	beq.n	8013412 <xPortStartScheduler+0xda>
 8013408:	f240 110b 	movw	r1, #267	; 0x10b
 801340c:	480e      	ldr	r0, [pc, #56]	; (8013448 <xPortStartScheduler+0x110>)
 801340e:	f003 ff47 	bl	80172a0 <vAssertCalled>
	__asm volatile
 8013412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013416:	f383 8811 	msr	BASEPRI, r3
 801341a:	f3bf 8f6f 	isb	sy
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	e7fe      	b.n	8013422 <xPortStartScheduler+0xea>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013424:	f240 1179 	movw	r1, #377	; 0x179
 8013428:	4807      	ldr	r0, [pc, #28]	; (8013448 <xPortStartScheduler+0x110>)
 801342a:	f003 ff39 	bl	80172a0 <vAssertCalled>
 801342e:	e7c6      	b.n	80133be <xPortStartScheduler+0x86>
 8013430:	e000ed00 	.word	0xe000ed00
 8013434:	410fc271 	.word	0x410fc271
 8013438:	410fc270 	.word	0x410fc270
 801343c:	e000e400 	.word	0xe000e400
 8013440:	20000ab8 	.word	0x20000ab8
 8013444:	20000abc 	.word	0x20000abc
 8013448:	0801b998 	.word	0x0801b998
 801344c:	e000ed20 	.word	0xe000ed20
 8013450:	20000028 	.word	0x20000028
 8013454:	e000ef34 	.word	0xe000ef34

08013458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013458:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 801345a:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801345e:	2b0f      	cmp	r3, #15
 8013460:	d906      	bls.n	8013470 <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013462:	4a0e      	ldr	r2, [pc, #56]	; (801349c <vPortValidateInterruptPriority+0x44>)
 8013464:	5c9b      	ldrb	r3, [r3, r2]
 8013466:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013468:	4a0d      	ldr	r2, [pc, #52]	; (80134a0 <vPortValidateInterruptPriority+0x48>)
 801346a:	7812      	ldrb	r2, [r2, #0]
 801346c:	429a      	cmp	r2, r3
 801346e:	d808      	bhi.n	8013482 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013470:	4b0c      	ldr	r3, [pc, #48]	; (80134a4 <vPortValidateInterruptPriority+0x4c>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013478:	4a0b      	ldr	r2, [pc, #44]	; (80134a8 <vPortValidateInterruptPriority+0x50>)
 801347a:	6812      	ldr	r2, [r2, #0]
 801347c:	4293      	cmp	r3, r2
 801347e:	d806      	bhi.n	801348e <vPortValidateInterruptPriority+0x36>
 8013480:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013482:	f240 3101 	movw	r1, #769	; 0x301
 8013486:	4809      	ldr	r0, [pc, #36]	; (80134ac <vPortValidateInterruptPriority+0x54>)
 8013488:	f003 ff0a 	bl	80172a0 <vAssertCalled>
 801348c:	e7f0      	b.n	8013470 <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801348e:	f240 3111 	movw	r1, #785	; 0x311
 8013492:	4806      	ldr	r0, [pc, #24]	; (80134ac <vPortValidateInterruptPriority+0x54>)
 8013494:	f003 ff04 	bl	80172a0 <vAssertCalled>
	}
 8013498:	e7f2      	b.n	8013480 <vPortValidateInterruptPriority+0x28>
 801349a:	bf00      	nop
 801349c:	e000e3f0 	.word	0xe000e3f0
 80134a0:	20000ab8 	.word	0x20000ab8
 80134a4:	e000ed0c 	.word	0xe000ed0c
 80134a8:	20000abc 	.word	0x20000abc
 80134ac:	0801b998 	.word	0x0801b998

080134b0 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80134b0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80134b2:	4a13      	ldr	r2, [pc, #76]	; (8013500 <prvInsertBlockIntoFreeList+0x50>)
 80134b4:	e000      	b.n	80134b8 <prvInsertBlockIntoFreeList+0x8>
 80134b6:	461a      	mov	r2, r3
 80134b8:	6813      	ldr	r3, [r2, #0]
 80134ba:	4283      	cmp	r3, r0
 80134bc:	d3fb      	bcc.n	80134b6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80134be:	6851      	ldr	r1, [r2, #4]
 80134c0:	1854      	adds	r4, r2, r1
 80134c2:	42a0      	cmp	r0, r4
 80134c4:	d00a      	beq.n	80134dc <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80134c6:	6841      	ldr	r1, [r0, #4]
 80134c8:	1844      	adds	r4, r0, r1
 80134ca:	42a3      	cmp	r3, r4
 80134cc:	d00b      	beq.n	80134e6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80134ce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80134d0:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80134d2:	bf18      	it	ne
 80134d4:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134da:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80134dc:	6840      	ldr	r0, [r0, #4]
 80134de:	4401      	add	r1, r0
 80134e0:	6051      	str	r1, [r2, #4]
 80134e2:	4610      	mov	r0, r2
 80134e4:	e7ef      	b.n	80134c6 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80134e6:	4c07      	ldr	r4, [pc, #28]	; (8013504 <prvInsertBlockIntoFreeList+0x54>)
 80134e8:	6824      	ldr	r4, [r4, #0]
 80134ea:	42a3      	cmp	r3, r4
 80134ec:	d006      	beq.n	80134fc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	4419      	add	r1, r3
 80134f2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80134f4:	6813      	ldr	r3, [r2, #0]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6003      	str	r3, [r0, #0]
 80134fa:	e7e9      	b.n	80134d0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80134fc:	6003      	str	r3, [r0, #0]
 80134fe:	e7e7      	b.n	80134d0 <prvInsertBlockIntoFreeList+0x20>
 8013500:	20000ad0 	.word	0x20000ad0
 8013504:	20000ac0 	.word	0x20000ac0

08013508 <pvPortMalloc>:
{
 8013508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801350a:	4604      	mov	r4, r0
	configASSERT( pxEnd );
 801350c:	4b2b      	ldr	r3, [pc, #172]	; (80135bc <pvPortMalloc+0xb4>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	b1c3      	cbz	r3, 8013544 <pvPortMalloc+0x3c>
	vTaskSuspendAll();
 8013512:	f000 fff5 	bl	8014500 <vTaskSuspendAll>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013516:	4b2a      	ldr	r3, [pc, #168]	; (80135c0 <pvPortMalloc+0xb8>)
 8013518:	681d      	ldr	r5, [r3, #0]
 801351a:	4225      	tst	r5, r4
 801351c:	d144      	bne.n	80135a8 <pvPortMalloc+0xa0>
			if( xWantedSize > 0 )
 801351e:	2c00      	cmp	r4, #0
 8013520:	d045      	beq.n	80135ae <pvPortMalloc+0xa6>
				xWantedSize += xHeapStructSize;
 8013522:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013526:	f012 0f07 	tst.w	r2, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801352a:	bf1c      	itt	ne
 801352c:	f022 0207 	bicne.w	r2, r2, #7
 8013530:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013532:	2a00      	cmp	r2, #0
 8013534:	d038      	beq.n	80135a8 <pvPortMalloc+0xa0>
 8013536:	4b23      	ldr	r3, [pc, #140]	; (80135c4 <pvPortMalloc+0xbc>)
 8013538:	681e      	ldr	r6, [r3, #0]
 801353a:	42b2      	cmp	r2, r6
 801353c:	d834      	bhi.n	80135a8 <pvPortMalloc+0xa0>
				pxBlock = xStart.pxNextFreeBlock;
 801353e:	4922      	ldr	r1, [pc, #136]	; (80135c8 <pvPortMalloc+0xc0>)
 8013540:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013542:	e006      	b.n	8013552 <pvPortMalloc+0x4a>
	configASSERT( pxEnd );
 8013544:	21b5      	movs	r1, #181	; 0xb5
 8013546:	4821      	ldr	r0, [pc, #132]	; (80135cc <pvPortMalloc+0xc4>)
 8013548:	f003 feaa 	bl	80172a0 <vAssertCalled>
 801354c:	e7e1      	b.n	8013512 <pvPortMalloc+0xa>
 801354e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8013550:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013552:	6863      	ldr	r3, [r4, #4]
 8013554:	429a      	cmp	r2, r3
 8013556:	d902      	bls.n	801355e <pvPortMalloc+0x56>
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1f7      	bne.n	801354e <pvPortMalloc+0x46>
				if( pxBlock != pxEnd )
 801355e:	4b17      	ldr	r3, [pc, #92]	; (80135bc <pvPortMalloc+0xb4>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	429c      	cmp	r4, r3
 8013564:	d020      	beq.n	80135a8 <pvPortMalloc+0xa0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013566:	680f      	ldr	r7, [r1, #0]
 8013568:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801356a:	6823      	ldr	r3, [r4, #0]
 801356c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801356e:	6863      	ldr	r3, [r4, #4]
 8013570:	1a9b      	subs	r3, r3, r2
 8013572:	2b10      	cmp	r3, #16
 8013574:	d812      	bhi.n	801359c <pvPortMalloc+0x94>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013576:	6862      	ldr	r2, [r4, #4]
 8013578:	1ab6      	subs	r6, r6, r2
 801357a:	4912      	ldr	r1, [pc, #72]	; (80135c4 <pvPortMalloc+0xbc>)
 801357c:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801357e:	4914      	ldr	r1, [pc, #80]	; (80135d0 <pvPortMalloc+0xc8>)
 8013580:	6809      	ldr	r1, [r1, #0]
 8013582:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013584:	bf3c      	itt	cc
 8013586:	4912      	ldrcc	r1, [pc, #72]	; (80135d0 <pvPortMalloc+0xc8>)
 8013588:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801358a:	4315      	orrs	r5, r2
 801358c:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801358e:	2300      	movs	r3, #0
 8013590:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8013592:	f001 f88f 	bl	80146b4 <xTaskResumeAll>
		if( pvReturn == NULL )
 8013596:	b167      	cbz	r7, 80135b2 <pvPortMalloc+0xaa>
}
 8013598:	4638      	mov	r0, r7
 801359a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801359c:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801359e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80135a0:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80135a2:	f7ff ff85 	bl	80134b0 <prvInsertBlockIntoFreeList>
 80135a6:	e7e6      	b.n	8013576 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 80135a8:	f001 f884 	bl	80146b4 <xTaskResumeAll>
 80135ac:	e001      	b.n	80135b2 <pvPortMalloc+0xaa>
 80135ae:	f001 f881 	bl	80146b4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80135b2:	f003 ffd1 	bl	8017558 <vApplicationMallocFailedHook>
 80135b6:	2700      	movs	r7, #0
	return pvReturn;
 80135b8:	e7ee      	b.n	8013598 <pvPortMalloc+0x90>
 80135ba:	bf00      	nop
 80135bc:	20000ac0 	.word	0x20000ac0
 80135c0:	20000ac4 	.word	0x20000ac4
 80135c4:	20000ac8 	.word	0x20000ac8
 80135c8:	20000ad0 	.word	0x20000ad0
 80135cc:	0801b9d4 	.word	0x0801b9d4
 80135d0:	20000acc 	.word	0x20000acc

080135d4 <vPortFree>:
	if( pv != NULL )
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d040      	beq.n	801365a <vPortFree+0x86>
{
 80135d8:	b510      	push	{r4, lr}
 80135da:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80135dc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80135e0:	4b1e      	ldr	r3, [pc, #120]	; (801365c <vPortFree+0x88>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	421a      	tst	r2, r3
 80135e6:	d011      	beq.n	801360c <vPortFree+0x38>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80135e8:	f850 3c08 	ldr.w	r3, [r0, #-8]
 80135ec:	b1f3      	cbz	r3, 801362c <vPortFree+0x58>
 80135ee:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80135f2:	481b      	ldr	r0, [pc, #108]	; (8013660 <vPortFree+0x8c>)
 80135f4:	f003 fe54 	bl	80172a0 <vAssertCalled>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80135f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80135fc:	4a17      	ldr	r2, [pc, #92]	; (801365c <vPortFree+0x88>)
 80135fe:	6812      	ldr	r2, [r2, #0]
 8013600:	4213      	tst	r3, r2
 8013602:	d002      	beq.n	801360a <vPortFree+0x36>
			if( pxLink->pxNextFreeBlock == NULL )
 8013604:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8013608:	b1a1      	cbz	r1, 8013634 <vPortFree+0x60>
 801360a:	bd10      	pop	{r4, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801360c:	f240 1149 	movw	r1, #329	; 0x149
 8013610:	4813      	ldr	r0, [pc, #76]	; (8013660 <vPortFree+0x8c>)
 8013612:	f003 fe45 	bl	80172a0 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013616:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1e7      	bne.n	80135ee <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801361e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013622:	4a0e      	ldr	r2, [pc, #56]	; (801365c <vPortFree+0x88>)
 8013624:	6812      	ldr	r2, [r2, #0]
 8013626:	4213      	tst	r3, r2
 8013628:	d0ef      	beq.n	801360a <vPortFree+0x36>
 801362a:	e003      	b.n	8013634 <vPortFree+0x60>
 801362c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013630:	4a0a      	ldr	r2, [pc, #40]	; (801365c <vPortFree+0x88>)
 8013632:	6812      	ldr	r2, [r2, #0]
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013634:	ea23 0302 	bic.w	r3, r3, r2
 8013638:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
 801363c:	f000 ff60 	bl	8014500 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013640:	4a08      	ldr	r2, [pc, #32]	; (8013664 <vPortFree+0x90>)
 8013642:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013646:	6811      	ldr	r1, [r2, #0]
 8013648:	440b      	add	r3, r1
 801364a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801364c:	f1a4 0008 	sub.w	r0, r4, #8
 8013650:	f7ff ff2e 	bl	80134b0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8013654:	f001 f82e 	bl	80146b4 <xTaskResumeAll>
}
 8013658:	bd10      	pop	{r4, pc}
 801365a:	4770      	bx	lr
 801365c:	20000ac4 	.word	0x20000ac4
 8013660:	0801b9d4 	.word	0x0801b9d4
 8013664:	20000ac8 	.word	0x20000ac8

08013668 <xPortGetFreeHeapSize>:
}
 8013668:	4b01      	ldr	r3, [pc, #4]	; (8013670 <xPortGetFreeHeapSize+0x8>)
 801366a:	6818      	ldr	r0, [r3, #0]
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	20000ac8 	.word	0x20000ac8

08013674 <xPortGetMinimumEverFreeHeapSize>:
}
 8013674:	4b01      	ldr	r3, [pc, #4]	; (801367c <xPortGetMinimumEverFreeHeapSize+0x8>)
 8013676:	6818      	ldr	r0, [r3, #0]
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	20000acc 	.word	0x20000acc

08013680 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8013680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	4605      	mov	r5, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8013686:	4b37      	ldr	r3, [pc, #220]	; (8013764 <vPortDefineHeapRegions+0xe4>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	b123      	cbz	r3, 8013696 <vPortDefineHeapRegions+0x16>
 801368c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8013690:	4835      	ldr	r0, [pc, #212]	; (8013768 <vPortDefineHeapRegions+0xe8>)
 8013692:	f003 fe05 	bl	80172a0 <vAssertCalled>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

	while( pxHeapRegion->xSizeInBytes > 0 )
 8013696:	f8d5 b004 	ldr.w	fp, [r5, #4]
 801369a:	f1bb 0f00 	cmp.w	fp, #0
 801369e:	d055      	beq.n	801374c <vPortDefineHeapRegions+0xcc>
 80136a0:	3508      	adds	r5, #8
 80136a2:	2600      	movs	r6, #0
 80136a4:	46b0      	mov	r8, r6
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 80136a6:	4f2f      	ldr	r7, [pc, #188]	; (8013764 <vPortDefineHeapRegions+0xe4>)

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 80136a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013768 <vPortDefineHeapRegions+0xe8>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 80136ac:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8013778 <vPortDefineHeapRegions+0xf8>
 80136b0:	e01d      	b.n	80136ee <vPortDefineHeapRegions+0x6e>
			configASSERT( pxEnd != NULL );
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	b37b      	cbz	r3, 8013716 <vPortDefineHeapRegions+0x96>
			configASSERT( xAddress > ( size_t ) pxEnd );
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	42a3      	cmp	r3, r4
 80136ba:	d232      	bcs.n	8013722 <vPortDefineHeapRegions+0xa2>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 80136bc:	6839      	ldr	r1, [r7, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 80136be:	eb0b 0304 	add.w	r3, fp, r4
		xAddress -= xHeapStructSize;
 80136c2:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80136c4:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
 80136c8:	603b      	str	r3, [r7, #0]
		pxEnd->xBlockSize = 0;
 80136ca:	2200      	movs	r2, #0
 80136cc:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 80136ce:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80136d0:	4622      	mov	r2, r4
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 80136d2:	1b18      	subs	r0, r3, r4
 80136d4:	6060      	str	r0, [r4, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 80136d6:	6023      	str	r3, [r4, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 80136d8:	b101      	cbz	r1, 80136dc <vPortDefineHeapRegions+0x5c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 80136da:	600c      	str	r4, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80136dc:	6853      	ldr	r3, [r2, #4]
 80136de:	4498      	add	r8, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 80136e0:	3601      	adds	r6, #1
 80136e2:	3508      	adds	r5, #8
	while( pxHeapRegion->xSizeInBytes > 0 )
 80136e4:	f855 bc04 	ldr.w	fp, [r5, #-4]
 80136e8:	f1bb 0f00 	cmp.w	fp, #0
 80136ec:	d01f      	beq.n	801372e <vPortDefineHeapRegions+0xae>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 80136ee:	f855 4c08 	ldr.w	r4, [r5, #-8]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80136f2:	f014 0f07 	tst.w	r4, #7
 80136f6:	d006      	beq.n	8013706 <vPortDefineHeapRegions+0x86>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 80136f8:	1de2      	adds	r2, r4, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80136fa:	f022 0207 	bic.w	r2, r2, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 80136fe:	44a3      	add	fp, r4
 8013700:	ebab 0b02 	sub.w	fp, fp, r2
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8013704:	4614      	mov	r4, r2
		if( xDefinedRegions == 0 )
 8013706:	2e00      	cmp	r6, #0
 8013708:	d1d3      	bne.n	80136b2 <vPortDefineHeapRegions+0x32>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 801370a:	f8c9 4000 	str.w	r4, [r9]
			xStart.xBlockSize = ( size_t ) 0;
 801370e:	2300      	movs	r3, #0
 8013710:	f8c9 3004 	str.w	r3, [r9, #4]
 8013714:	e7d2      	b.n	80136bc <vPortDefineHeapRegions+0x3c>
			configASSERT( pxEnd != NULL );
 8013716:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801371a:	4650      	mov	r0, sl
 801371c:	f003 fdc0 	bl	80172a0 <vAssertCalled>
 8013720:	e7c9      	b.n	80136b6 <vPortDefineHeapRegions+0x36>
			configASSERT( xAddress > ( size_t ) pxEnd );
 8013722:	f240 11e1 	movw	r1, #481	; 0x1e1
 8013726:	4650      	mov	r0, sl
 8013728:	f003 fdba 	bl	80172a0 <vAssertCalled>
 801372c:	e7c6      	b.n	80136bc <vPortDefineHeapRegions+0x3c>
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 801372e:	4b0f      	ldr	r3, [pc, #60]	; (801376c <vPortDefineHeapRegions+0xec>)
 8013730:	f8c3 8000 	str.w	r8, [r3]
	xFreeBytesRemaining = xTotalHeapSize;
 8013734:	4b0e      	ldr	r3, [pc, #56]	; (8013770 <vPortDefineHeapRegions+0xf0>)
 8013736:	f8c3 8000 	str.w	r8, [r3]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 801373a:	f1b8 0f00 	cmp.w	r8, #0
 801373e:	d00a      	beq.n	8013756 <vPortDefineHeapRegions+0xd6>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013740:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013744:	4b0b      	ldr	r3, [pc, #44]	; (8013774 <vPortDefineHeapRegions+0xf4>)
 8013746:	601a      	str	r2, [r3, #0]
}
 8013748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 801374c:	2300      	movs	r3, #0
 801374e:	4a07      	ldr	r2, [pc, #28]	; (801376c <vPortDefineHeapRegions+0xec>)
 8013750:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8013752:	4a07      	ldr	r2, [pc, #28]	; (8013770 <vPortDefineHeapRegions+0xf0>)
 8013754:	6013      	str	r3, [r2, #0]
	configASSERT( xTotalHeapSize );
 8013756:	f240 210a 	movw	r1, #522	; 0x20a
 801375a:	4803      	ldr	r0, [pc, #12]	; (8013768 <vPortDefineHeapRegions+0xe8>)
 801375c:	f003 fda0 	bl	80172a0 <vAssertCalled>
 8013760:	e7ee      	b.n	8013740 <vPortDefineHeapRegions+0xc0>
 8013762:	bf00      	nop
 8013764:	20000ac0 	.word	0x20000ac0
 8013768:	0801b9d4 	.word	0x0801b9d4
 801376c:	20000acc 	.word	0x20000acc
 8013770:	20000ac8 	.word	0x20000ac8
 8013774:	20000ac4 	.word	0x20000ac4
 8013778:	20000ad0 	.word	0x20000ad0

0801377c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	4604      	mov	r4, r0
 8013780:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013782:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013784:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013786:	b95a      	cbnz	r2, 80137a0 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013788:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
 801378a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801378c:	b113      	cbz	r3, 8013794 <prvCopyDataToQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801378e:	3501      	adds	r5, #1
 8013790:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8013792:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013794:	6860      	ldr	r0, [r4, #4]
 8013796:	f001 fb51 	bl	8014e3c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 801379a:	2300      	movs	r3, #0
 801379c:	6063      	str	r3, [r4, #4]
 801379e:	e7f6      	b.n	801378e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80137a0:	b96e      	cbnz	r6, 80137be <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80137a2:	6880      	ldr	r0, [r0, #8]
 80137a4:	f003 ffed 	bl	8017782 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80137a8:	68a3      	ldr	r3, [r4, #8]
 80137aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80137ac:	4413      	add	r3, r2
 80137ae:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137b0:	6862      	ldr	r2, [r4, #4]
 80137b2:	4293      	cmp	r3, r2
 80137b4:	d319      	bcc.n	80137ea <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80137b6:	6823      	ldr	r3, [r4, #0]
 80137b8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80137ba:	2000      	movs	r0, #0
 80137bc:	e7e7      	b.n	801378e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137be:	68c0      	ldr	r0, [r0, #12]
 80137c0:	f003 ffdf 	bl	8017782 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80137c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80137c6:	4252      	negs	r2, r2
 80137c8:	68e3      	ldr	r3, [r4, #12]
 80137ca:	4413      	add	r3, r2
 80137cc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137ce:	6821      	ldr	r1, [r4, #0]
 80137d0:	428b      	cmp	r3, r1
 80137d2:	d202      	bcs.n	80137da <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80137d4:	6863      	ldr	r3, [r4, #4]
 80137d6:	441a      	add	r2, r3
 80137d8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80137da:	2e02      	cmp	r6, #2
 80137dc:	d001      	beq.n	80137e2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80137de:	2000      	movs	r0, #0
 80137e0:	e7d5      	b.n	801378e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137e2:	b125      	cbz	r5, 80137ee <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80137e4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80137e6:	2000      	movs	r0, #0
 80137e8:	e7d1      	b.n	801378e <prvCopyDataToQueue+0x12>
 80137ea:	2000      	movs	r0, #0
 80137ec:	e7cf      	b.n	801378e <prvCopyDataToQueue+0x12>
 80137ee:	2000      	movs	r0, #0
 80137f0:	e7cd      	b.n	801378e <prvCopyDataToQueue+0x12>

080137f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80137f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80137f4:	b172      	cbz	r2, 8013814 <prvCopyDataFromQueue+0x22>
{
 80137f6:	b510      	push	{r4, lr}
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80137f8:	68c3      	ldr	r3, [r0, #12]
 80137fa:	4413      	add	r3, r2
 80137fc:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80137fe:	6844      	ldr	r4, [r0, #4]
 8013800:	42a3      	cmp	r3, r4
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013802:	bf24      	itt	cs
 8013804:	6803      	ldrcs	r3, [r0, #0]
 8013806:	60c3      	strcs	r3, [r0, #12]
 8013808:	460c      	mov	r4, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801380a:	68c1      	ldr	r1, [r0, #12]
 801380c:	4620      	mov	r0, r4
 801380e:	f003 ffb8 	bl	8017782 <memcpy>
 8013812:	bd10      	pop	{r4, pc}
 8013814:	4770      	bx	lr

08013816 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013816:	b570      	push	{r4, r5, r6, lr}
 8013818:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801381a:	f7ff fceb 	bl	80131f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801381e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8013822:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013824:	2c00      	cmp	r4, #0
 8013826:	dd03      	ble.n	8013830 <prvUnlockQueue+0x1a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801382a:	f105 0624 	add.w	r6, r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801382e:	b9e3      	cbnz	r3, 801386a <prvUnlockQueue+0x54>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013830:	23ff      	movs	r3, #255	; 0xff
 8013832:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013836:	f7ff fcff 	bl	8013238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801383a:	f7ff fcdb 	bl	80131f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801383e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8013842:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013844:	2c00      	cmp	r4, #0
 8013846:	dd03      	ble.n	8013850 <prvUnlockQueue+0x3a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013848:	692b      	ldr	r3, [r5, #16]
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801384a:	f105 0610 	add.w	r6, r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801384e:	b9db      	cbnz	r3, 8013888 <prvUnlockQueue+0x72>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013850:	23ff      	movs	r3, #255	; 0xff
 8013852:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013856:	f7ff fcef 	bl	8013238 <vPortExitCritical>
 801385a:	bd70      	pop	{r4, r5, r6, pc}
 801385c:	3c01      	subs	r4, #1
 801385e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013860:	2c00      	cmp	r4, #0
 8013862:	d0e5      	beq.n	8013830 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013864:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013866:	2b00      	cmp	r3, #0
 8013868:	d0e2      	beq.n	8013830 <prvUnlockQueue+0x1a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801386a:	4630      	mov	r0, r6
 801386c:	f001 f8bc 	bl	80149e8 <xTaskRemoveFromEventList>
 8013870:	2800      	cmp	r0, #0
 8013872:	d0f3      	beq.n	801385c <prvUnlockQueue+0x46>
						vTaskMissedYield();
 8013874:	f001 f992 	bl	8014b9c <vTaskMissedYield>
 8013878:	e7f0      	b.n	801385c <prvUnlockQueue+0x46>
 801387a:	3c01      	subs	r4, #1
 801387c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801387e:	2c00      	cmp	r4, #0
 8013880:	d0e6      	beq.n	8013850 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013882:	692b      	ldr	r3, [r5, #16]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d0e3      	beq.n	8013850 <prvUnlockQueue+0x3a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013888:	4630      	mov	r0, r6
 801388a:	f001 f8ad 	bl	80149e8 <xTaskRemoveFromEventList>
 801388e:	2800      	cmp	r0, #0
 8013890:	d0f3      	beq.n	801387a <prvUnlockQueue+0x64>
					vTaskMissedYield();
 8013892:	f001 f983 	bl	8014b9c <vTaskMissedYield>
 8013896:	e7f0      	b.n	801387a <prvUnlockQueue+0x64>

08013898 <xQueueGenericReset>:
{
 8013898:	b538      	push	{r3, r4, r5, lr}
 801389a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 801389c:	4604      	mov	r4, r0
 801389e:	b1d0      	cbz	r0, 80138d6 <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
 80138a0:	f7ff fca8 	bl	80131f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80138a4:	6822      	ldr	r2, [r4, #0]
 80138a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80138a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138aa:	fb03 f301 	mul.w	r3, r3, r1
 80138ae:	18d0      	adds	r0, r2, r3
 80138b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80138b2:	2000      	movs	r0, #0
 80138b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80138b6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80138b8:	1a5b      	subs	r3, r3, r1
 80138ba:	4413      	add	r3, r2
 80138bc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80138be:	23ff      	movs	r3, #255	; 0xff
 80138c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80138c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80138c8:	b9d5      	cbnz	r5, 8013900 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138ca:	6923      	ldr	r3, [r4, #16]
 80138cc:	b94b      	cbnz	r3, 80138e2 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
 80138ce:	f7ff fcb3 	bl	8013238 <vPortExitCritical>
}
 80138d2:	2001      	movs	r0, #1
 80138d4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
 80138d6:	f240 111b 	movw	r1, #283	; 0x11b
 80138da:	480e      	ldr	r0, [pc, #56]	; (8013914 <xQueueGenericReset+0x7c>)
 80138dc:	f003 fce0 	bl	80172a0 <vAssertCalled>
 80138e0:	e7de      	b.n	80138a0 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138e2:	f104 0010 	add.w	r0, r4, #16
 80138e6:	f001 f87f 	bl	80149e8 <xTaskRemoveFromEventList>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d0ef      	beq.n	80138ce <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80138ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138f2:	4b09      	ldr	r3, [pc, #36]	; (8013918 <xQueueGenericReset+0x80>)
 80138f4:	601a      	str	r2, [r3, #0]
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	f3bf 8f6f 	isb	sy
 80138fe:	e7e6      	b.n	80138ce <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013900:	f104 0010 	add.w	r0, r4, #16
 8013904:	f7ff fbe8 	bl	80130d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013908:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801390c:	f7ff fbe4 	bl	80130d8 <vListInitialise>
 8013910:	e7dd      	b.n	80138ce <xQueueGenericReset+0x36>
 8013912:	bf00      	nop
 8013914:	0801ba0c 	.word	0x0801ba0c
 8013918:	e000ed04 	.word	0xe000ed04

0801391c <xQueueGenericCreate>:
	{
 801391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801391e:	460d      	mov	r5, r1
 8013920:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013922:	4606      	mov	r6, r0
 8013924:	b1a0      	cbz	r0, 8013950 <xQueueGenericCreate+0x34>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013926:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801392a:	3050      	adds	r0, #80	; 0x50
 801392c:	f7ff fdec 	bl	8013508 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013930:	4604      	mov	r4, r0
 8013932:	b158      	cbz	r0, 801394c <xQueueGenericCreate+0x30>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8013934:	b195      	cbz	r5, 801395c <xQueueGenericCreate+0x40>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8013936:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801393a:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801393c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801393e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013940:	2101      	movs	r1, #1
 8013942:	4620      	mov	r0, r4
 8013944:	f7ff ffa8 	bl	8013898 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8013948:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 801394c:	4620      	mov	r0, r4
 801394e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013950:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8013954:	4802      	ldr	r0, [pc, #8]	; (8013960 <xQueueGenericCreate+0x44>)
 8013956:	f003 fca3 	bl	80172a0 <vAssertCalled>
 801395a:	e7e4      	b.n	8013926 <xQueueGenericCreate+0xa>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801395c:	6020      	str	r0, [r4, #0]
 801395e:	e7ed      	b.n	801393c <xQueueGenericCreate+0x20>
 8013960:	0801ba0c 	.word	0x0801ba0c

08013964 <xQueueCreateCountingSemaphore>:
	{
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	460d      	mov	r5, r1
		configASSERT( uxMaxCount != 0 );
 8013968:	4604      	mov	r4, r0
 801396a:	b158      	cbz	r0, 8013984 <xQueueCreateCountingSemaphore+0x20>
		configASSERT( uxInitialCount <= uxMaxCount );
 801396c:	42ac      	cmp	r4, r5
 801396e:	d30f      	bcc.n	8013990 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013970:	2202      	movs	r2, #2
 8013972:	2100      	movs	r1, #0
 8013974:	4620      	mov	r0, r4
 8013976:	f7ff ffd1 	bl	801391c <xQueueGenericCreate>
		if( xHandle != NULL )
 801397a:	4603      	mov	r3, r0
 801397c:	b100      	cbz	r0, 8013980 <xQueueCreateCountingSemaphore+0x1c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801397e:	6385      	str	r5, [r0, #56]	; 0x38
	}
 8013980:	4618      	mov	r0, r3
 8013982:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( uxMaxCount != 0 );
 8013984:	f240 21d7 	movw	r1, #727	; 0x2d7
 8013988:	4804      	ldr	r0, [pc, #16]	; (801399c <xQueueCreateCountingSemaphore+0x38>)
 801398a:	f003 fc89 	bl	80172a0 <vAssertCalled>
 801398e:	e7ed      	b.n	801396c <xQueueCreateCountingSemaphore+0x8>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013990:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8013994:	4801      	ldr	r0, [pc, #4]	; (801399c <xQueueCreateCountingSemaphore+0x38>)
 8013996:	f003 fc83 	bl	80172a0 <vAssertCalled>
 801399a:	e7e9      	b.n	8013970 <xQueueCreateCountingSemaphore+0xc>
 801399c:	0801ba0c 	.word	0x0801ba0c

080139a0 <xQueueGenericSend>:
{
 80139a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139a4:	b084      	sub	sp, #16
 80139a6:	4688      	mov	r8, r1
 80139a8:	9201      	str	r2, [sp, #4]
 80139aa:	461d      	mov	r5, r3
	configASSERT( pxQueue );
 80139ac:	4604      	mov	r4, r0
 80139ae:	b198      	cbz	r0, 80139d8 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139b0:	f1b8 0f00 	cmp.w	r8, #0
 80139b4:	d016      	beq.n	80139e4 <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139b6:	2d02      	cmp	r5, #2
 80139b8:	d01d      	beq.n	80139f6 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139ba:	f001 f9e1 	bl	8014d80 <xTaskGetSchedulerState>
 80139be:	b930      	cbnz	r0, 80139ce <xQueueGenericSend+0x2e>
 80139c0:	9b01      	ldr	r3, [sp, #4]
 80139c2:	b123      	cbz	r3, 80139ce <xQueueGenericSend+0x2e>
 80139c4:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80139c8:	4851      	ldr	r0, [pc, #324]	; (8013b10 <xQueueGenericSend+0x170>)
 80139ca:	f003 fc69 	bl	80172a0 <vAssertCalled>
{
 80139ce:	f04f 0900 	mov.w	r9, #0
		prvLockQueue( pxQueue );
 80139d2:	464e      	mov	r6, r9
					portYIELD_WITHIN_API();
 80139d4:	4f4f      	ldr	r7, [pc, #316]	; (8013b14 <xQueueGenericSend+0x174>)
 80139d6:	e04b      	b.n	8013a70 <xQueueGenericSend+0xd0>
	configASSERT( pxQueue );
 80139d8:	f240 21f3 	movw	r1, #755	; 0x2f3
 80139dc:	484c      	ldr	r0, [pc, #304]	; (8013b10 <xQueueGenericSend+0x170>)
 80139de:	f003 fc5f 	bl	80172a0 <vAssertCalled>
 80139e2:	e7e5      	b.n	80139b0 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d0e5      	beq.n	80139b6 <xQueueGenericSend+0x16>
 80139ea:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80139ee:	4848      	ldr	r0, [pc, #288]	; (8013b10 <xQueueGenericSend+0x170>)
 80139f0:	f003 fc56 	bl	80172a0 <vAssertCalled>
 80139f4:	e7df      	b.n	80139b6 <xQueueGenericSend+0x16>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d0de      	beq.n	80139ba <xQueueGenericSend+0x1a>
 80139fc:	f240 21f5 	movw	r1, #757	; 0x2f5
 8013a00:	4843      	ldr	r0, [pc, #268]	; (8013b10 <xQueueGenericSend+0x170>)
 8013a02:	f003 fc4d 	bl	80172a0 <vAssertCalled>
 8013a06:	e7d8      	b.n	80139ba <xQueueGenericSend+0x1a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a08:	462a      	mov	r2, r5
 8013a0a:	4641      	mov	r1, r8
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f7ff feb5 	bl	801377c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a14:	b973      	cbnz	r3, 8013a34 <xQueueGenericSend+0x94>
					else if( xYieldRequired != pdFALSE )
 8013a16:	b138      	cbz	r0, 8013a28 <xQueueGenericSend+0x88>
						queueYIELD_IF_USING_PREEMPTION();
 8013a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a1c:	4b3d      	ldr	r3, [pc, #244]	; (8013b14 <xQueueGenericSend+0x174>)
 8013a1e:	601a      	str	r2, [r3, #0]
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013a28:	f7ff fc06 	bl	8013238 <vPortExitCritical>
				return pdPASS;
 8013a2c:	2001      	movs	r0, #1
}
 8013a2e:	b004      	add	sp, #16
 8013a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013a38:	f000 ffd6 	bl	80149e8 <xTaskRemoveFromEventList>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d0f3      	beq.n	8013a28 <xQueueGenericSend+0x88>
							queueYIELD_IF_USING_PREEMPTION();
 8013a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a44:	4b33      	ldr	r3, [pc, #204]	; (8013b14 <xQueueGenericSend+0x174>)
 8013a46:	601a      	str	r2, [r3, #0]
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	e7ea      	b.n	8013a28 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8013a52:	f7ff fbf1 	bl	8013238 <vPortExitCritical>
					return errQUEUE_FULL;
 8013a56:	2000      	movs	r0, #0
 8013a58:	e7e9      	b.n	8013a2e <xQueueGenericSend+0x8e>
					vTaskSetTimeOutState( &xTimeOut );
 8013a5a:	a802      	add	r0, sp, #8
 8013a5c:	f001 f84c 	bl	8014af8 <vTaskSetTimeOutState>
 8013a60:	e014      	b.n	8013a8c <xQueueGenericSend+0xec>
				prvUnlockQueue( pxQueue );
 8013a62:	4620      	mov	r0, r4
 8013a64:	f7ff fed7 	bl	8013816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a68:	f000 fe24 	bl	80146b4 <xTaskResumeAll>
 8013a6c:	f04f 0901 	mov.w	r9, #1
		taskENTER_CRITICAL();
 8013a70:	f7ff fbc0 	bl	80131f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d3c5      	bcc.n	8013a08 <xQueueGenericSend+0x68>
 8013a7c:	2d02      	cmp	r5, #2
 8013a7e:	d0c3      	beq.n	8013a08 <xQueueGenericSend+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a80:	9b01      	ldr	r3, [sp, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d0e5      	beq.n	8013a52 <xQueueGenericSend+0xb2>
				else if( xEntryTimeSet == pdFALSE )
 8013a86:	f1b9 0f00 	cmp.w	r9, #0
 8013a8a:	d0e6      	beq.n	8013a5a <xQueueGenericSend+0xba>
		taskEXIT_CRITICAL();
 8013a8c:	f7ff fbd4 	bl	8013238 <vPortExitCritical>
		vTaskSuspendAll();
 8013a90:	f000 fd36 	bl	8014500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a94:	f7ff fbae 	bl	80131f4 <vPortEnterCritical>
 8013a98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013a9c:	b25b      	sxtb	r3, r3
 8013a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aa2:	bf08      	it	eq
 8013aa4:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 8013aa8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013aac:	b25b      	sxtb	r3, r3
 8013aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ab2:	bf08      	it	eq
 8013ab4:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 8013ab8:	f7ff fbbe 	bl	8013238 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013abc:	a901      	add	r1, sp, #4
 8013abe:	a802      	add	r0, sp, #8
 8013ac0:	f001 f830 	bl	8014b24 <xTaskCheckForTimeOut>
 8013ac4:	b9e8      	cbnz	r0, 8013b02 <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ac6:	f7ff fb95 	bl	80131f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013aca:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8013ace:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8013ad2:	f7ff fbb1 	bl	8013238 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013ad6:	45ca      	cmp	sl, r9
 8013ad8:	d1c3      	bne.n	8013a62 <xQueueGenericSend+0xc2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013ada:	9901      	ldr	r1, [sp, #4]
 8013adc:	f104 0010 	add.w	r0, r4, #16
 8013ae0:	f000 ff3e 	bl	8014960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f7ff fe96 	bl	8013816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013aea:	f000 fde3 	bl	80146b4 <xTaskResumeAll>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d1bc      	bne.n	8013a6c <xQueueGenericSend+0xcc>
					portYIELD_WITHIN_API();
 8013af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013af6:	603b      	str	r3, [r7, #0]
 8013af8:	f3bf 8f4f 	dsb	sy
 8013afc:	f3bf 8f6f 	isb	sy
 8013b00:	e7b4      	b.n	8013a6c <xQueueGenericSend+0xcc>
			prvUnlockQueue( pxQueue );
 8013b02:	4620      	mov	r0, r4
 8013b04:	f7ff fe87 	bl	8013816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b08:	f000 fdd4 	bl	80146b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	e78e      	b.n	8013a2e <xQueueGenericSend+0x8e>
 8013b10:	0801ba0c 	.word	0x0801ba0c
 8013b14:	e000ed04 	.word	0xe000ed04

08013b18 <xQueueCreateMutex>:
	{
 8013b18:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	2001      	movs	r0, #1
 8013b20:	f7ff fefc 	bl	801391c <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8013b24:	4604      	mov	r4, r0
 8013b26:	b138      	cbz	r0, 8013b38 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8013b28:	2100      	movs	r1, #0
 8013b2a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013b2c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8013b2e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013b30:	460b      	mov	r3, r1
 8013b32:	460a      	mov	r2, r1
 8013b34:	f7ff ff34 	bl	80139a0 <xQueueGenericSend>
	}
 8013b38:	4620      	mov	r0, r4
 8013b3a:	bd10      	pop	{r4, pc}

08013b3c <xQueueGiveMutexRecursive>:
	{
 8013b3c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8013b3e:	4604      	mov	r4, r0
 8013b40:	b130      	cbz	r0, 8013b50 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8013b42:	6865      	ldr	r5, [r4, #4]
 8013b44:	f001 f916 	bl	8014d74 <xTaskGetCurrentTaskHandle>
 8013b48:	4285      	cmp	r5, r0
 8013b4a:	d007      	beq.n	8013b5c <xQueueGiveMutexRecursive+0x20>
			xReturn = pdFAIL;
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxMutex );
 8013b50:	f240 215b 	movw	r1, #603	; 0x25b
 8013b54:	4808      	ldr	r0, [pc, #32]	; (8013b78 <xQueueGiveMutexRecursive+0x3c>)
 8013b56:	f003 fba3 	bl	80172a0 <vAssertCalled>
 8013b5a:	e7f2      	b.n	8013b42 <xQueueGiveMutexRecursive+0x6>
			( pxMutex->u.uxRecursiveCallCount )--;
 8013b5c:	68e3      	ldr	r3, [r4, #12]
 8013b5e:	3b01      	subs	r3, #1
 8013b60:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013b62:	b10b      	cbz	r3, 8013b68 <xQueueGiveMutexRecursive+0x2c>
			xReturn = pdPASS;
 8013b64:	2001      	movs	r0, #1
	}
 8013b66:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8013b68:	461a      	mov	r2, r3
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7ff ff17 	bl	80139a0 <xQueueGenericSend>
			xReturn = pdPASS;
 8013b72:	2001      	movs	r0, #1
 8013b74:	bd38      	pop	{r3, r4, r5, pc}
 8013b76:	bf00      	nop
 8013b78:	0801ba0c 	.word	0x0801ba0c

08013b7c <xQueueGenericSendFromISR>:
{
 8013b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b80:	460f      	mov	r7, r1
 8013b82:	4691      	mov	r9, r2
 8013b84:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8013b86:	4604      	mov	r4, r0
 8013b88:	b1c8      	cbz	r0, 8013bbe <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b8a:	b1f7      	cbz	r7, 8013bca <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b8c:	2e02      	cmp	r6, #2
 8013b8e:	d025      	beq.n	8013bdc <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b90:	f7ff fc62 	bl	8013458 <vPortValidateInterruptPriority>
	__asm volatile
 8013b94:	f3ef 8811 	mrs	r8, BASEPRI
 8013b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9c:	f383 8811 	msr	BASEPRI, r3
 8013ba0:	f3bf 8f6f 	isb	sy
 8013ba4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ba8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013baa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d31e      	bcc.n	8013bee <xQueueGenericSendFromISR+0x72>
 8013bb0:	2e02      	cmp	r6, #2
 8013bb2:	d01c      	beq.n	8013bee <xQueueGenericSendFromISR+0x72>
			xReturn = errQUEUE_FULL;
 8013bb4:	2000      	movs	r0, #0
	__asm volatile
 8013bb6:	f388 8811 	msr	BASEPRI, r8
}
 8013bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
 8013bbe:	f240 31b9 	movw	r1, #953	; 0x3b9
 8013bc2:	481d      	ldr	r0, [pc, #116]	; (8013c38 <xQueueGenericSendFromISR+0xbc>)
 8013bc4:	f003 fb6c 	bl	80172a0 <vAssertCalled>
 8013bc8:	e7df      	b.n	8013b8a <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d0dd      	beq.n	8013b8c <xQueueGenericSendFromISR+0x10>
 8013bd0:	f240 31ba 	movw	r1, #954	; 0x3ba
 8013bd4:	4818      	ldr	r0, [pc, #96]	; (8013c38 <xQueueGenericSendFromISR+0xbc>)
 8013bd6:	f003 fb63 	bl	80172a0 <vAssertCalled>
 8013bda:	e7d7      	b.n	8013b8c <xQueueGenericSendFromISR+0x10>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d0d6      	beq.n	8013b90 <xQueueGenericSendFromISR+0x14>
 8013be2:	f240 31bb 	movw	r1, #955	; 0x3bb
 8013be6:	4814      	ldr	r0, [pc, #80]	; (8013c38 <xQueueGenericSendFromISR+0xbc>)
 8013be8:	f003 fb5a 	bl	80172a0 <vAssertCalled>
 8013bec:	e7d0      	b.n	8013b90 <xQueueGenericSendFromISR+0x14>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013bee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013bf2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013bf4:	4632      	mov	r2, r6
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f7ff fdbf 	bl	801377c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8013bfe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8013c02:	d005      	beq.n	8013c10 <xQueueGenericSendFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c04:	3501      	adds	r5, #1
 8013c06:	b26d      	sxtb	r5, r5
 8013c08:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013c0c:	2001      	movs	r0, #1
 8013c0e:	e7d2      	b.n	8013bb6 <xQueueGenericSendFromISR+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c12:	b90b      	cbnz	r3, 8013c18 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8013c14:	2001      	movs	r0, #1
 8013c16:	e7ce      	b.n	8013bb6 <xQueueGenericSendFromISR+0x3a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c1c:	f000 fee4 	bl	80149e8 <xTaskRemoveFromEventList>
 8013c20:	b130      	cbz	r0, 8013c30 <xQueueGenericSendFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8013c22:	f1b9 0f00 	cmp.w	r9, #0
 8013c26:	d005      	beq.n	8013c34 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013c28:	2001      	movs	r0, #1
 8013c2a:	f8c9 0000 	str.w	r0, [r9]
 8013c2e:	e7c2      	b.n	8013bb6 <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
 8013c30:	2001      	movs	r0, #1
 8013c32:	e7c0      	b.n	8013bb6 <xQueueGenericSendFromISR+0x3a>
 8013c34:	2001      	movs	r0, #1
 8013c36:	e7be      	b.n	8013bb6 <xQueueGenericSendFromISR+0x3a>
 8013c38:	0801ba0c 	.word	0x0801ba0c

08013c3c <xQueueGiveFromISR>:
{
 8013c3c:	b570      	push	{r4, r5, r6, lr}
 8013c3e:	460e      	mov	r6, r1
	configASSERT( pxQueue );
 8013c40:	4604      	mov	r4, r0
 8013c42:	b318      	cbz	r0, 8013c8c <xQueueGiveFromISR+0x50>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c46:	bb3b      	cbnz	r3, 8013c98 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013c48:	6823      	ldr	r3, [r4, #0]
 8013c4a:	b35b      	cbz	r3, 8013ca4 <xQueueGiveFromISR+0x68>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c4c:	f7ff fc04 	bl	8013458 <vPortValidateInterruptPriority>
	__asm volatile
 8013c50:	f3ef 8511 	mrs	r5, BASEPRI
 8013c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c58:	f383 8811 	msr	BASEPRI, r3
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013c66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d231      	bcs.n	8013cd0 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013c70:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013c72:	3201      	adds	r2, #1
 8013c74:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c7a:	d01c      	beq.n	8013cb6 <xQueueGiveFromISR+0x7a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	b25b      	sxtb	r3, r3
 8013c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013c84:	2001      	movs	r0, #1
	__asm volatile
 8013c86:	f385 8811 	msr	BASEPRI, r5
}
 8013c8a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 8013c8c:	f240 4156 	movw	r1, #1110	; 0x456
 8013c90:	4812      	ldr	r0, [pc, #72]	; (8013cdc <xQueueGiveFromISR+0xa0>)
 8013c92:	f003 fb05 	bl	80172a0 <vAssertCalled>
 8013c96:	e7d5      	b.n	8013c44 <xQueueGiveFromISR+0x8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013c98:	f240 415a 	movw	r1, #1114	; 0x45a
 8013c9c:	480f      	ldr	r0, [pc, #60]	; (8013cdc <xQueueGiveFromISR+0xa0>)
 8013c9e:	f003 faff 	bl	80172a0 <vAssertCalled>
 8013ca2:	e7d1      	b.n	8013c48 <xQueueGiveFromISR+0xc>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d0d0      	beq.n	8013c4c <xQueueGiveFromISR+0x10>
 8013caa:	f240 415f 	movw	r1, #1119	; 0x45f
 8013cae:	480b      	ldr	r0, [pc, #44]	; (8013cdc <xQueueGiveFromISR+0xa0>)
 8013cb0:	f003 faf6 	bl	80172a0 <vAssertCalled>
 8013cb4:	e7ca      	b.n	8013c4c <xQueueGiveFromISR+0x10>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cb8:	b90b      	cbnz	r3, 8013cbe <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
 8013cba:	2001      	movs	r0, #1
 8013cbc:	e7e3      	b.n	8013c86 <xQueueGiveFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013cc2:	f000 fe91 	bl	80149e8 <xTaskRemoveFromEventList>
 8013cc6:	b128      	cbz	r0, 8013cd4 <xQueueGiveFromISR+0x98>
							if( pxHigherPriorityTaskWoken != NULL )
 8013cc8:	b136      	cbz	r6, 8013cd8 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013cca:	2001      	movs	r0, #1
 8013ccc:	6030      	str	r0, [r6, #0]
 8013cce:	e7da      	b.n	8013c86 <xQueueGiveFromISR+0x4a>
			xReturn = errQUEUE_FULL;
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	e7d8      	b.n	8013c86 <xQueueGiveFromISR+0x4a>
			xReturn = pdPASS;
 8013cd4:	2001      	movs	r0, #1
 8013cd6:	e7d6      	b.n	8013c86 <xQueueGiveFromISR+0x4a>
 8013cd8:	2001      	movs	r0, #1
 8013cda:	e7d4      	b.n	8013c86 <xQueueGiveFromISR+0x4a>
 8013cdc:	0801ba0c 	.word	0x0801ba0c

08013ce0 <xQueueGenericReceive>:
{
 8013ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ce4:	b084      	sub	sp, #16
 8013ce6:	4689      	mov	r9, r1
 8013ce8:	9201      	str	r2, [sp, #4]
 8013cea:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 8013cec:	4604      	mov	r4, r0
 8013cee:	b188      	cbz	r0, 8013d14 <xQueueGenericReceive+0x34>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cf0:	f1b9 0f00 	cmp.w	r9, #0
 8013cf4:	d014      	beq.n	8013d20 <xQueueGenericReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013cf6:	f001 f843 	bl	8014d80 <xTaskGetSchedulerState>
 8013cfa:	b930      	cbnz	r0, 8013d0a <xQueueGenericReceive+0x2a>
 8013cfc:	9b01      	ldr	r3, [sp, #4]
 8013cfe:	b123      	cbz	r3, 8013d0a <xQueueGenericReceive+0x2a>
 8013d00:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8013d04:	485e      	ldr	r0, [pc, #376]	; (8013e80 <xQueueGenericReceive+0x1a0>)
 8013d06:	f003 facb 	bl	80172a0 <vAssertCalled>
{
 8013d0a:	f04f 0a00 	mov.w	sl, #0
		prvLockQueue( pxQueue );
 8013d0e:	4655      	mov	r5, sl
					portYIELD_WITHIN_API();
 8013d10:	4e5c      	ldr	r6, [pc, #368]	; (8013e84 <xQueueGenericReceive+0x1a4>)
 8013d12:	e06c      	b.n	8013dee <xQueueGenericReceive+0x10e>
	configASSERT( pxQueue );
 8013d14:	f240 41f6 	movw	r1, #1270	; 0x4f6
 8013d18:	4859      	ldr	r0, [pc, #356]	; (8013e80 <xQueueGenericReceive+0x1a0>)
 8013d1a:	f003 fac1 	bl	80172a0 <vAssertCalled>
 8013d1e:	e7e7      	b.n	8013cf0 <xQueueGenericReceive+0x10>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0e7      	beq.n	8013cf6 <xQueueGenericReceive+0x16>
 8013d26:	f240 41f7 	movw	r1, #1271	; 0x4f7
 8013d2a:	4855      	ldr	r0, [pc, #340]	; (8013e80 <xQueueGenericReceive+0x1a0>)
 8013d2c:	f003 fab8 	bl	80172a0 <vAssertCalled>
 8013d30:	e7e1      	b.n	8013cf6 <xQueueGenericReceive+0x16>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013d32:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d34:	4649      	mov	r1, r9
 8013d36:	4620      	mov	r0, r4
 8013d38:	f7ff fd5b 	bl	80137f2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8013d3c:	f1b8 0f00 	cmp.w	r8, #0
 8013d40:	d11e      	bne.n	8013d80 <xQueueGenericReceive+0xa0>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d42:	1e7b      	subs	r3, r7, #1
 8013d44:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	b13b      	cbz	r3, 8013d5a <xQueueGenericReceive+0x7a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d4a:	6923      	ldr	r3, [r4, #16]
 8013d4c:	b94b      	cbnz	r3, 8013d62 <xQueueGenericReceive+0x82>
				taskEXIT_CRITICAL();
 8013d4e:	f7ff fa73 	bl	8013238 <vPortExitCritical>
				return pdPASS;
 8013d52:	2001      	movs	r0, #1
}
 8013d54:	b004      	add	sp, #16
 8013d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013d5a:	f001 f9b5 	bl	80150c8 <pvTaskIncrementMutexHeldCount>
 8013d5e:	6060      	str	r0, [r4, #4]
 8013d60:	e7f3      	b.n	8013d4a <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d62:	f104 0010 	add.w	r0, r4, #16
 8013d66:	f000 fe3f 	bl	80149e8 <xTaskRemoveFromEventList>
 8013d6a:	2800      	cmp	r0, #0
 8013d6c:	d0ef      	beq.n	8013d4e <xQueueGenericReceive+0x6e>
							queueYIELD_IF_USING_PREEMPTION();
 8013d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d72:	4b44      	ldr	r3, [pc, #272]	; (8013e84 <xQueueGenericReceive+0x1a4>)
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	f3bf 8f4f 	dsb	sy
 8013d7a:	f3bf 8f6f 	isb	sy
 8013d7e:	e7e6      	b.n	8013d4e <xQueueGenericReceive+0x6e>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013d80:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d0e2      	beq.n	8013d4e <xQueueGenericReceive+0x6e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013d8c:	f000 fe2c 	bl	80149e8 <xTaskRemoveFromEventList>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d0dc      	beq.n	8013d4e <xQueueGenericReceive+0x6e>
							queueYIELD_IF_USING_PREEMPTION();
 8013d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d98:	4b3a      	ldr	r3, [pc, #232]	; (8013e84 <xQueueGenericReceive+0x1a4>)
 8013d9a:	601a      	str	r2, [r3, #0]
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	e7d3      	b.n	8013d4e <xQueueGenericReceive+0x6e>
					taskEXIT_CRITICAL();
 8013da6:	f7ff fa47 	bl	8013238 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013daa:	2000      	movs	r0, #0
 8013dac:	e7d2      	b.n	8013d54 <xQueueGenericReceive+0x74>
					vTaskSetTimeOutState( &xTimeOut );
 8013dae:	a802      	add	r0, sp, #8
 8013db0:	f000 fea2 	bl	8014af8 <vTaskSetTimeOutState>
 8013db4:	e026      	b.n	8013e04 <xQueueGenericReceive+0x124>
						taskENTER_CRITICAL();
 8013db6:	f7ff fa1d 	bl	80131f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013dba:	6860      	ldr	r0, [r4, #4]
 8013dbc:	f000 fff0 	bl	8014da0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8013dc0:	f7ff fa3a 	bl	8013238 <vPortExitCritical>
 8013dc4:	e046      	b.n	8013e54 <xQueueGenericReceive+0x174>
				prvUnlockQueue( pxQueue );
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	f7ff fd25 	bl	8013816 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013dcc:	f000 fc72 	bl	80146b4 <xTaskResumeAll>
 8013dd0:	e00b      	b.n	8013dea <xQueueGenericReceive+0x10a>
			prvUnlockQueue( pxQueue );
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f7ff fd1f 	bl	8013816 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dd8:	f000 fc6c 	bl	80146b4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8013ddc:	f7ff fa0a 	bl	80131f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013de0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013de2:	f7ff fa29 	bl	8013238 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013de6:	2f00      	cmp	r7, #0
 8013de8:	d048      	beq.n	8013e7c <xQueueGenericReceive+0x19c>
 8013dea:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
 8013dee:	f7ff fa01 	bl	80131f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013df2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	d19c      	bne.n	8013d32 <xQueueGenericReceive+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013df8:	9b01      	ldr	r3, [sp, #4]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0d3      	beq.n	8013da6 <xQueueGenericReceive+0xc6>
				else if( xEntryTimeSet == pdFALSE )
 8013dfe:	f1ba 0f00 	cmp.w	sl, #0
 8013e02:	d0d4      	beq.n	8013dae <xQueueGenericReceive+0xce>
		taskEXIT_CRITICAL();
 8013e04:	f7ff fa18 	bl	8013238 <vPortExitCritical>
		vTaskSuspendAll();
 8013e08:	f000 fb7a 	bl	8014500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e0c:	f7ff f9f2 	bl	80131f4 <vPortEnterCritical>
 8013e10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e14:	b25b      	sxtb	r3, r3
 8013e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e1a:	bf08      	it	eq
 8013e1c:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8013e20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013e24:	b25b      	sxtb	r3, r3
 8013e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e2a:	bf08      	it	eq
 8013e2c:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8013e30:	f7ff fa02 	bl	8013238 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e34:	a901      	add	r1, sp, #4
 8013e36:	a802      	add	r0, sp, #8
 8013e38:	f000 fe74 	bl	8014b24 <xTaskCheckForTimeOut>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d1c8      	bne.n	8013dd2 <xQueueGenericReceive+0xf2>
	taskENTER_CRITICAL();
 8013e40:	f7ff f9d8 	bl	80131f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e44:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013e46:	f7ff f9f7 	bl	8013238 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e4a:	2f00      	cmp	r7, #0
 8013e4c:	d1bb      	bne.n	8013dc6 <xQueueGenericReceive+0xe6>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e4e:	6823      	ldr	r3, [r4, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d0b0      	beq.n	8013db6 <xQueueGenericReceive+0xd6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e54:	9901      	ldr	r1, [sp, #4]
 8013e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013e5a:	f000 fd81 	bl	8014960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e5e:	4620      	mov	r0, r4
 8013e60:	f7ff fcd9 	bl	8013816 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e64:	f000 fc26 	bl	80146b4 <xTaskResumeAll>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d1be      	bne.n	8013dea <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 8013e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013e70:	6033      	str	r3, [r6, #0]
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	f3bf 8f6f 	isb	sy
 8013e7a:	e7b6      	b.n	8013dea <xQueueGenericReceive+0x10a>
				return errQUEUE_EMPTY;
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	e769      	b.n	8013d54 <xQueueGenericReceive+0x74>
 8013e80:	0801ba0c 	.word	0x0801ba0c
 8013e84:	e000ed04 	.word	0xe000ed04

08013e88 <xQueueTakeMutexRecursive>:
	{
 8013e88:	b570      	push	{r4, r5, r6, lr}
 8013e8a:	460e      	mov	r6, r1
		configASSERT( pxMutex );
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	b188      	cbz	r0, 8013eb4 <xQueueTakeMutexRecursive+0x2c>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013e90:	6865      	ldr	r5, [r4, #4]
 8013e92:	f000 ff6f 	bl	8014d74 <xTaskGetCurrentTaskHandle>
 8013e96:	4285      	cmp	r5, r0
 8013e98:	d012      	beq.n	8013ec0 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	4632      	mov	r2, r6
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f7ff ff1d 	bl	8013ce0 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	b110      	cbz	r0, 8013eb0 <xQueueTakeMutexRecursive+0x28>
				( pxMutex->u.uxRecursiveCallCount )++;
 8013eaa:	68e2      	ldr	r2, [r4, #12]
 8013eac:	3201      	adds	r2, #1
 8013eae:	60e2      	str	r2, [r4, #12]
	}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxMutex );
 8013eb4:	f240 2192 	movw	r1, #658	; 0x292
 8013eb8:	4804      	ldr	r0, [pc, #16]	; (8013ecc <xQueueTakeMutexRecursive+0x44>)
 8013eba:	f003 f9f1 	bl	80172a0 <vAssertCalled>
 8013ebe:	e7e7      	b.n	8013e90 <xQueueTakeMutexRecursive+0x8>
			( pxMutex->u.uxRecursiveCallCount )++;
 8013ec0:	68e3      	ldr	r3, [r4, #12]
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e7f2      	b.n	8013eb0 <xQueueTakeMutexRecursive+0x28>
 8013eca:	bf00      	nop
 8013ecc:	0801ba0c 	.word	0x0801ba0c

08013ed0 <uxQueueMessagesWaiting>:
{
 8013ed0:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	b130      	cbz	r0, 8013ee4 <uxQueueMessagesWaiting+0x14>
	taskENTER_CRITICAL();
 8013ed6:	f7ff f98d 	bl	80131f4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013eda:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013edc:	f7ff f9ac 	bl	8013238 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	bd10      	pop	{r4, pc}
	configASSERT( xQueue );
 8013ee4:	f240 6149 	movw	r1, #1609	; 0x649
 8013ee8:	4801      	ldr	r0, [pc, #4]	; (8013ef0 <uxQueueMessagesWaiting+0x20>)
 8013eea:	f003 f9d9 	bl	80172a0 <vAssertCalled>
 8013eee:	e7f2      	b.n	8013ed6 <uxQueueMessagesWaiting+0x6>
 8013ef0:	0801ba0c 	.word	0x0801ba0c

08013ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013ef4:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ef6:	4b0b      	ldr	r3, [pc, #44]	; (8013f24 <vQueueAddToRegistry+0x30>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	b153      	cbz	r3, 8013f12 <vQueueAddToRegistry+0x1e>
 8013efc:	2301      	movs	r3, #1
 8013efe:	4c09      	ldr	r4, [pc, #36]	; (8013f24 <vQueueAddToRegistry+0x30>)
 8013f00:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8013f04:	b132      	cbz	r2, 8013f14 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f06:	3301      	adds	r3, #1
 8013f08:	2b08      	cmp	r3, #8
 8013f0a:	d1f9      	bne.n	8013f00 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f10:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f12:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013f14:	4a03      	ldr	r2, [pc, #12]	; (8013f24 <vQueueAddToRegistry+0x30>)
 8013f16:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013f1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f1e:	6058      	str	r0, [r3, #4]
				break;
 8013f20:	e7f4      	b.n	8013f0c <vQueueAddToRegistry+0x18>
 8013f22:	bf00      	nop
 8013f24:	20004e30 	.word	0x20004e30

08013f28 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013f28:	4b0b      	ldr	r3, [pc, #44]	; (8013f58 <vQueueUnregisterQueue+0x30>)
 8013f2a:	685b      	ldr	r3, [r3, #4]
 8013f2c:	4298      	cmp	r0, r3
 8013f2e:	d009      	beq.n	8013f44 <vQueueUnregisterQueue+0x1c>
 8013f30:	4a09      	ldr	r2, [pc, #36]	; (8013f58 <vQueueUnregisterQueue+0x30>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f32:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013f34:	68d1      	ldr	r1, [r2, #12]
 8013f36:	4281      	cmp	r1, r0
 8013f38:	d005      	beq.n	8013f46 <vQueueUnregisterQueue+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	3208      	adds	r2, #8
 8013f3e:	2b08      	cmp	r3, #8
 8013f40:	d1f8      	bne.n	8013f34 <vQueueUnregisterQueue+0xc>
 8013f42:	4770      	bx	lr
 8013f44:	2300      	movs	r3, #0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013f46:	4a04      	ldr	r2, [pc, #16]	; (8013f58 <vQueueUnregisterQueue+0x30>)
 8013f48:	2100      	movs	r1, #0
 8013f4a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013f4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f52:	6059      	str	r1, [r3, #4]
				break;
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	20004e30 	.word	0x20004e30

08013f5c <vQueueDelete>:
{
 8013f5c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8013f5e:	4604      	mov	r4, r0
 8013f60:	b130      	cbz	r0, 8013f70 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7ff ffe0 	bl	8013f28 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f7ff fb33 	bl	80135d4 <vPortFree>
 8013f6e:	bd10      	pop	{r4, pc}
	configASSERT( pxQueue );
 8013f70:	f240 6177 	movw	r1, #1655	; 0x677
 8013f74:	4801      	ldr	r0, [pc, #4]	; (8013f7c <vQueueDelete+0x20>)
 8013f76:	f003 f993 	bl	80172a0 <vAssertCalled>
 8013f7a:	e7f2      	b.n	8013f62 <vQueueDelete+0x6>
 8013f7c:	0801ba0c 	.word	0x0801ba0c

08013f80 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f80:	4b08      	ldr	r3, [pc, #32]	; (8013fa4 <prvResetNextTaskUnblockTime+0x24>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	b13b      	cbz	r3, 8013f98 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013f88:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <prvResetNextTaskUnblockTime+0x24>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	685a      	ldr	r2, [r3, #4]
 8013f92:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <prvResetNextTaskUnblockTime+0x28>)
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f9c:	4b02      	ldr	r3, [pc, #8]	; (8013fa8 <prvResetNextTaskUnblockTime+0x28>)
 8013f9e:	601a      	str	r2, [r3, #0]
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop
 8013fa4:	20000adc 	.word	0x20000adc
 8013fa8:	20000bb8 	.word	0x20000bb8

08013fac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013fac:	b570      	push	{r4, r5, r6, lr}
 8013fae:	4604      	mov	r4, r0
 8013fb0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013fb2:	4b1d      	ldr	r3, [pc, #116]	; (8014028 <prvAddCurrentTaskToDelayedList+0x7c>)
 8013fb4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fb6:	4b1d      	ldr	r3, [pc, #116]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 8013fb8:	6818      	ldr	r0, [r3, #0]
 8013fba:	3004      	adds	r0, #4
 8013fbc:	f7ff f8c0 	bl	8013140 <uxListRemove>
 8013fc0:	b948      	cbnz	r0, 8013fd6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013fc2:	4b1a      	ldr	r3, [pc, #104]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 8013fc4:	681a      	ldr	r2, [r3, #0]
 8013fc6:	491a      	ldr	r1, [pc, #104]	; (8014030 <prvAddCurrentTaskToDelayedList+0x84>)
 8013fc8:	680b      	ldr	r3, [r1, #0]
 8013fca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8013fcc:	2201      	movs	r2, #1
 8013fce:	4082      	lsls	r2, r0
 8013fd0:	ea23 0302 	bic.w	r3, r3, r2
 8013fd4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013fd6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8013fda:	d013      	beq.n	8014004 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013fdc:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013fde:	4b13      	ldr	r3, [pc, #76]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8013fe4:	42a5      	cmp	r5, r4
 8013fe6:	d816      	bhi.n	8014016 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fe8:	4b12      	ldr	r3, [pc, #72]	; (8014034 <prvAddCurrentTaskToDelayedList+0x88>)
 8013fea:	6818      	ldr	r0, [r3, #0]
 8013fec:	4b0f      	ldr	r3, [pc, #60]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 8013fee:	6819      	ldr	r1, [r3, #0]
 8013ff0:	3104      	adds	r1, #4
 8013ff2:	f7ff f88b 	bl	801310c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8013ff6:	4b10      	ldr	r3, [pc, #64]	; (8014038 <prvAddCurrentTaskToDelayedList+0x8c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
 8013ffc:	bf3c      	itt	cc
 8013ffe:	4b0e      	ldrcc	r3, [pc, #56]	; (8014038 <prvAddCurrentTaskToDelayedList+0x8c>)
 8014000:	601c      	strcc	r4, [r3, #0]
 8014002:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014004:	2e00      	cmp	r6, #0
 8014006:	d0e9      	beq.n	8013fdc <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014008:	4b08      	ldr	r3, [pc, #32]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 801400a:	6819      	ldr	r1, [r3, #0]
 801400c:	3104      	adds	r1, #4
 801400e:	480b      	ldr	r0, [pc, #44]	; (801403c <prvAddCurrentTaskToDelayedList+0x90>)
 8014010:	f7ff f870 	bl	80130f4 <vListInsertEnd>
 8014014:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014016:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <prvAddCurrentTaskToDelayedList+0x94>)
 8014018:	6818      	ldr	r0, [r3, #0]
 801401a:	4b04      	ldr	r3, [pc, #16]	; (801402c <prvAddCurrentTaskToDelayedList+0x80>)
 801401c:	6819      	ldr	r1, [r3, #0]
 801401e:	3104      	adds	r1, #4
 8014020:	f7ff f874 	bl	801310c <vListInsert>
 8014024:	bd70      	pop	{r4, r5, r6, pc}
 8014026:	bf00      	nop
 8014028:	20000c00 	.word	0x20000c00
 801402c:	20000ad8 	.word	0x20000ad8
 8014030:	20000b88 	.word	0x20000b88
 8014034:	20000adc 	.word	0x20000adc
 8014038:	20000bb8 	.word	0x20000bb8
 801403c:	20000bd8 	.word	0x20000bd8
 8014040:	20000ae0 	.word	0x20000ae0

08014044 <prvWriteNameToBuffer>:
	{
 8014044:	b510      	push	{r4, lr}
 8014046:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 8014048:	f003 fc02 	bl	8017850 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801404c:	4620      	mov	r0, r4
 801404e:	f7ec f8c9 	bl	80001e4 <strlen>
 8014052:	280e      	cmp	r0, #14
 8014054:	d808      	bhi.n	8014068 <prvWriteNameToBuffer+0x24>
 8014056:	4420      	add	r0, r4
 8014058:	f104 020f 	add.w	r2, r4, #15
			pcBuffer[ x ] = ' ';
 801405c:	2320      	movs	r3, #32
 801405e:	f800 3b01 	strb.w	r3, [r0], #1
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8014062:	4290      	cmp	r0, r2
 8014064:	d1fb      	bne.n	801405e <prvWriteNameToBuffer+0x1a>
 8014066:	200f      	movs	r0, #15
		pcBuffer[ x ] = 0x00;
 8014068:	2300      	movs	r3, #0
 801406a:	5423      	strb	r3, [r4, r0]
	}
 801406c:	4420      	add	r0, r4
 801406e:	bd10      	pop	{r4, pc}

08014070 <xTaskCreate>:
	{
 8014070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014074:	b083      	sub	sp, #12
 8014076:	9001      	str	r0, [sp, #4]
 8014078:	4689      	mov	r9, r1
 801407a:	4698      	mov	r8, r3
 801407c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801407e:	0095      	lsls	r5, r2, #2
 8014080:	4628      	mov	r0, r5
 8014082:	f7ff fa41 	bl	8013508 <pvPortMalloc>
			if( pxStack != NULL )
 8014086:	2800      	cmp	r0, #0
 8014088:	f000 8091 	beq.w	80141ae <xTaskCreate+0x13e>
 801408c:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801408e:	206c      	movs	r0, #108	; 0x6c
 8014090:	f7ff fa3a 	bl	8013508 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8014094:	4604      	mov	r4, r0
 8014096:	2800      	cmp	r0, #0
 8014098:	f000 8086 	beq.w	80141a8 <xTaskCreate+0x138>
					pxNewTCB->pxStack = pxStack;
 801409c:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801409e:	462a      	mov	r2, r5
 80140a0:	21a5      	movs	r1, #165	; 0xa5
 80140a2:	4638      	mov	r0, r7
 80140a4:	f003 fb92 	bl	80177cc <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80140a8:	3d04      	subs	r5, #4
 80140aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140ac:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80140ae:	f025 0507 	bic.w	r5, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80140b2:	f899 3000 	ldrb.w	r3, [r9]
 80140b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80140ba:	f899 3000 	ldrb.w	r3, [r9]
 80140be:	b163      	cbz	r3, 80140da <xTaskCreate+0x6a>
 80140c0:	464b      	mov	r3, r9
 80140c2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80140c6:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80140ca:	7858      	ldrb	r0, [r3, #1]
 80140cc:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80140d0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80140d4:	b108      	cbz	r0, 80140da <xTaskCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80140d6:	428b      	cmp	r3, r1
 80140d8:	d1f7      	bne.n	80140ca <xTaskCreate+0x5a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80140da:	2700      	movs	r7, #0
 80140dc:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
 80140e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e2:	2b06      	cmp	r3, #6
 80140e4:	bf28      	it	cs
 80140e6:	2306      	movcs	r3, #6
 80140e8:	469a      	mov	sl, r3
	pxNewTCB->uxPriority = uxPriority;
 80140ea:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80140ec:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80140ee:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80140f0:	f104 0b04 	add.w	fp, r4, #4
 80140f4:	4658      	mov	r0, fp
 80140f6:	f7fe fffa 	bl	80130ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80140fa:	f104 0018 	add.w	r0, r4, #24
 80140fe:	f7fe fff6 	bl	80130ee <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014102:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014104:	f1ca 0307 	rsb	r3, sl, #7
 8014108:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801410a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 801410c:	6627      	str	r7, [r4, #96]	; 0x60
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 801410e:	6567      	str	r7, [r4, #84]	; 0x54
 8014110:	65a7      	str	r7, [r4, #88]	; 0x58
 8014112:	65e7      	str	r7, [r4, #92]	; 0x5c
		pxNewTCB->ulNotifiedValue = 0;
 8014114:	6667      	str	r7, [r4, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014116:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801411a:	4642      	mov	r2, r8
 801411c:	9901      	ldr	r1, [sp, #4]
 801411e:	4628      	mov	r0, r5
 8014120:	f7ff f83e 	bl	80131a0 <pxPortInitialiseStack>
 8014124:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8014126:	b106      	cbz	r6, 801412a <xTaskCreate+0xba>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014128:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 801412a:	f7ff f863 	bl	80131f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801412e:	4a36      	ldr	r2, [pc, #216]	; (8014208 <xTaskCreate+0x198>)
 8014130:	6813      	ldr	r3, [r2, #0]
 8014132:	3301      	adds	r3, #1
 8014134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014136:	4b35      	ldr	r3, [pc, #212]	; (801420c <xTaskCreate+0x19c>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d03a      	beq.n	80141b4 <xTaskCreate+0x144>
			if( xSchedulerRunning == pdFALSE )
 801413e:	4b34      	ldr	r3, [pc, #208]	; (8014210 <xTaskCreate+0x1a0>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	b93b      	cbnz	r3, 8014154 <xTaskCreate+0xe4>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014144:	4b31      	ldr	r3, [pc, #196]	; (801420c <xTaskCreate+0x19c>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801414a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801414c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 801414e:	bf9c      	itt	ls
 8014150:	4b2e      	ldrls	r3, [pc, #184]	; (801420c <xTaskCreate+0x19c>)
 8014152:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 8014154:	4a2f      	ldr	r2, [pc, #188]	; (8014214 <xTaskCreate+0x1a4>)
 8014156:	6813      	ldr	r3, [r2, #0]
 8014158:	3301      	adds	r3, #1
 801415a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801415c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801415e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014160:	4a2d      	ldr	r2, [pc, #180]	; (8014218 <xTaskCreate+0x1a8>)
 8014162:	6811      	ldr	r1, [r2, #0]
 8014164:	2301      	movs	r3, #1
 8014166:	4083      	lsls	r3, r0
 8014168:	430b      	orrs	r3, r1
 801416a:	6013      	str	r3, [r2, #0]
 801416c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014170:	4659      	mov	r1, fp
 8014172:	4b2a      	ldr	r3, [pc, #168]	; (801421c <xTaskCreate+0x1ac>)
 8014174:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014178:	f7fe ffbc 	bl	80130f4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801417c:	f7ff f85c 	bl	8013238 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8014180:	4b23      	ldr	r3, [pc, #140]	; (8014210 <xTaskCreate+0x1a0>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d039      	beq.n	80141fc <xTaskCreate+0x18c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014188:	4b20      	ldr	r3, [pc, #128]	; (801420c <xTaskCreate+0x19c>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014190:	429a      	cmp	r2, r3
 8014192:	d237      	bcs.n	8014204 <xTaskCreate+0x194>
			taskYIELD_IF_USING_PREEMPTION();
 8014194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014198:	4b21      	ldr	r3, [pc, #132]	; (8014220 <xTaskCreate+0x1b0>)
 801419a:	601a      	str	r2, [r3, #0]
 801419c:	f3bf 8f4f 	dsb	sy
 80141a0:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 80141a4:	2001      	movs	r0, #1
 80141a6:	e02a      	b.n	80141fe <xTaskCreate+0x18e>
					vPortFree( pxStack );
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7ff fa13 	bl	80135d4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80141ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141b2:	e024      	b.n	80141fe <xTaskCreate+0x18e>
			pxCurrentTCB = pxNewTCB;
 80141b4:	4b15      	ldr	r3, [pc, #84]	; (801420c <xTaskCreate+0x19c>)
 80141b6:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80141b8:	6813      	ldr	r3, [r2, #0]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d1ca      	bne.n	8014154 <xTaskCreate+0xe4>
 80141be:	4d17      	ldr	r5, [pc, #92]	; (801421c <xTaskCreate+0x1ac>)
 80141c0:	f105 068c 	add.w	r6, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80141c4:	4628      	mov	r0, r5
 80141c6:	f7fe ff87 	bl	80130d8 <vListInitialise>
 80141ca:	3514      	adds	r5, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80141cc:	42ae      	cmp	r6, r5
 80141ce:	d1f9      	bne.n	80141c4 <xTaskCreate+0x154>
	vListInitialise( &xDelayedTaskList1 );
 80141d0:	4e14      	ldr	r6, [pc, #80]	; (8014224 <xTaskCreate+0x1b4>)
 80141d2:	4630      	mov	r0, r6
 80141d4:	f7fe ff80 	bl	80130d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80141d8:	4d13      	ldr	r5, [pc, #76]	; (8014228 <xTaskCreate+0x1b8>)
 80141da:	4628      	mov	r0, r5
 80141dc:	f7fe ff7c 	bl	80130d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80141e0:	4812      	ldr	r0, [pc, #72]	; (801422c <xTaskCreate+0x1bc>)
 80141e2:	f7fe ff79 	bl	80130d8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80141e6:	4812      	ldr	r0, [pc, #72]	; (8014230 <xTaskCreate+0x1c0>)
 80141e8:	f7fe ff76 	bl	80130d8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80141ec:	4811      	ldr	r0, [pc, #68]	; (8014234 <xTaskCreate+0x1c4>)
 80141ee:	f7fe ff73 	bl	80130d8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80141f2:	4b11      	ldr	r3, [pc, #68]	; (8014238 <xTaskCreate+0x1c8>)
 80141f4:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141f6:	4b11      	ldr	r3, [pc, #68]	; (801423c <xTaskCreate+0x1cc>)
 80141f8:	601d      	str	r5, [r3, #0]
 80141fa:	e7ab      	b.n	8014154 <xTaskCreate+0xe4>
			xReturn = pdPASS;
 80141fc:	2001      	movs	r0, #1
	}
 80141fe:	b003      	add	sp, #12
 8014200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
 8014204:	2001      	movs	r0, #1
		return xReturn;
 8014206:	e7fa      	b.n	80141fe <xTaskCreate+0x18e>
 8014208:	20000b74 	.word	0x20000b74
 801420c:	20000ad8 	.word	0x20000ad8
 8014210:	20000bd4 	.word	0x20000bd4
 8014214:	20000b84 	.word	0x20000b84
 8014218:	20000b88 	.word	0x20000b88
 801421c:	20000ae4 	.word	0x20000ae4
 8014220:	e000ed04 	.word	0xe000ed04
 8014224:	20000b8c 	.word	0x20000b8c
 8014228:	20000ba0 	.word	0x20000ba0
 801422c:	20000bc0 	.word	0x20000bc0
 8014230:	20000bec 	.word	0x20000bec
 8014234:	20000bd8 	.word	0x20000bd8
 8014238:	20000adc 	.word	0x20000adc
 801423c:	20000ae0 	.word	0x20000ae0

08014240 <vTaskDelete>:
	{
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8014244:	f7fe ffd6 	bl	80131f4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014248:	2c00      	cmp	r4, #0
 801424a:	d037      	beq.n	80142bc <vTaskDelete+0x7c>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801424c:	1d25      	adds	r5, r4, #4
 801424e:	4628      	mov	r0, r5
 8014250:	f7fe ff76 	bl	8013140 <uxListRemove>
 8014254:	b970      	cbnz	r0, 8014274 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014258:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801425c:	4a26      	ldr	r2, [pc, #152]	; (80142f8 <vTaskDelete+0xb8>)
 801425e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014262:	b93a      	cbnz	r2, 8014274 <vTaskDelete+0x34>
 8014264:	4825      	ldr	r0, [pc, #148]	; (80142fc <vTaskDelete+0xbc>)
 8014266:	6802      	ldr	r2, [r0, #0]
 8014268:	2101      	movs	r1, #1
 801426a:	fa01 f303 	lsl.w	r3, r1, r3
 801426e:	ea22 0303 	bic.w	r3, r2, r3
 8014272:	6003      	str	r3, [r0, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014276:	b11b      	cbz	r3, 8014280 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014278:	f104 0018 	add.w	r0, r4, #24
 801427c:	f7fe ff60 	bl	8013140 <uxListRemove>
			uxTaskNumber++;
 8014280:	4a1f      	ldr	r2, [pc, #124]	; (8014300 <vTaskDelete+0xc0>)
 8014282:	6813      	ldr	r3, [r2, #0]
 8014284:	3301      	adds	r3, #1
 8014286:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8014288:	4b1e      	ldr	r3, [pc, #120]	; (8014304 <vTaskDelete+0xc4>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	429c      	cmp	r4, r3
 801428e:	d018      	beq.n	80142c2 <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 8014290:	4a1d      	ldr	r2, [pc, #116]	; (8014308 <vTaskDelete+0xc8>)
 8014292:	6813      	ldr	r3, [r2, #0]
 8014294:	3b01      	subs	r3, #1
 8014296:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
 8014298:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801429a:	f7ff f99b 	bl	80135d4 <vPortFree>
			vPortFree( pxTCB );
 801429e:	4620      	mov	r0, r4
 80142a0:	f7ff f998 	bl	80135d4 <vPortFree>
				prvResetNextTaskUnblockTime();
 80142a4:	f7ff fe6c 	bl	8013f80 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 80142a8:	f7fe ffc6 	bl	8013238 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80142ac:	4b17      	ldr	r3, [pc, #92]	; (801430c <vTaskDelete+0xcc>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	b11b      	cbz	r3, 80142ba <vTaskDelete+0x7a>
			if( pxTCB == pxCurrentTCB )
 80142b2:	4b14      	ldr	r3, [pc, #80]	; (8014304 <vTaskDelete+0xc4>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	429c      	cmp	r4, r3
 80142b8:	d00c      	beq.n	80142d4 <vTaskDelete+0x94>
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80142bc:	4b11      	ldr	r3, [pc, #68]	; (8014304 <vTaskDelete+0xc4>)
 80142be:	681c      	ldr	r4, [r3, #0]
 80142c0:	e7c4      	b.n	801424c <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80142c2:	4629      	mov	r1, r5
 80142c4:	4812      	ldr	r0, [pc, #72]	; (8014310 <vTaskDelete+0xd0>)
 80142c6:	f7fe ff15 	bl	80130f4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80142ca:	4a12      	ldr	r2, [pc, #72]	; (8014314 <vTaskDelete+0xd4>)
 80142cc:	6813      	ldr	r3, [r2, #0]
 80142ce:	3301      	adds	r3, #1
 80142d0:	6013      	str	r3, [r2, #0]
 80142d2:	e7e9      	b.n	80142a8 <vTaskDelete+0x68>
				configASSERT( uxSchedulerSuspended == 0 );
 80142d4:	4b10      	ldr	r3, [pc, #64]	; (8014318 <vTaskDelete+0xd8>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	b943      	cbnz	r3, 80142ec <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 80142da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142de:	4b0f      	ldr	r3, [pc, #60]	; (801431c <vTaskDelete+0xdc>)
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	f3bf 8f4f 	dsb	sy
 80142e6:	f3bf 8f6f 	isb	sy
	}
 80142ea:	e7e6      	b.n	80142ba <vTaskDelete+0x7a>
				configASSERT( uxSchedulerSuspended == 0 );
 80142ec:	f240 4165 	movw	r1, #1125	; 0x465
 80142f0:	480b      	ldr	r0, [pc, #44]	; (8014320 <vTaskDelete+0xe0>)
 80142f2:	f002 ffd5 	bl	80172a0 <vAssertCalled>
 80142f6:	e7f0      	b.n	80142da <vTaskDelete+0x9a>
 80142f8:	20000ae4 	.word	0x20000ae4
 80142fc:	20000b88 	.word	0x20000b88
 8014300:	20000b84 	.word	0x20000b84
 8014304:	20000ad8 	.word	0x20000ad8
 8014308:	20000b74 	.word	0x20000b74
 801430c:	20000bd4 	.word	0x20000bd4
 8014310:	20000bec 	.word	0x20000bec
 8014314:	20000b78 	.word	0x20000b78
 8014318:	20000b80 	.word	0x20000b80
 801431c:	e000ed04 	.word	0xe000ed04
 8014320:	0801ba30 	.word	0x0801ba30

08014324 <eTaskGetState>:
	{
 8014324:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8014326:	4605      	mov	r5, r0
 8014328:	b1d8      	cbz	r0, 8014362 <eTaskGetState+0x3e>
		if( pxTCB == pxCurrentTCB )
 801432a:	4b18      	ldr	r3, [pc, #96]	; (801438c <eTaskGetState+0x68>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	429d      	cmp	r5, r3
 8014330:	d023      	beq.n	801437a <eTaskGetState+0x56>
			taskENTER_CRITICAL();
 8014332:	f7fe ff5f 	bl	80131f4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014336:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 8014338:	f7fe ff7e 	bl	8013238 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 801433c:	4b14      	ldr	r3, [pc, #80]	; (8014390 <eTaskGetState+0x6c>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	429c      	cmp	r4, r3
 8014342:	d01c      	beq.n	801437e <eTaskGetState+0x5a>
 8014344:	4b13      	ldr	r3, [pc, #76]	; (8014394 <eTaskGetState+0x70>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	429c      	cmp	r4, r3
 801434a:	d01a      	beq.n	8014382 <eTaskGetState+0x5e>
				else if( pxStateList == &xSuspendedTaskList )
 801434c:	4b12      	ldr	r3, [pc, #72]	; (8014398 <eTaskGetState+0x74>)
 801434e:	429c      	cmp	r4, r3
 8014350:	d00d      	beq.n	801436e <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8014352:	4b12      	ldr	r3, [pc, #72]	; (801439c <eTaskGetState+0x78>)
 8014354:	429c      	cmp	r4, r3
 8014356:	d016      	beq.n	8014386 <eTaskGetState+0x62>
				eReturn = eReady;
 8014358:	2c00      	cmp	r4, #0
 801435a:	bf0c      	ite	eq
 801435c:	2004      	moveq	r0, #4
 801435e:	2001      	movne	r0, #1
 8014360:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxTCB );
 8014362:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8014366:	480e      	ldr	r0, [pc, #56]	; (80143a0 <eTaskGetState+0x7c>)
 8014368:	f002 ff9a 	bl	80172a0 <vAssertCalled>
 801436c:	e7dd      	b.n	801432a <eTaskGetState+0x6>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801436e:	6aab      	ldr	r3, [r5, #40]	; 0x28
						eReturn = eBlocked;
 8014370:	2b00      	cmp	r3, #0
 8014372:	bf0c      	ite	eq
 8014374:	2003      	moveq	r0, #3
 8014376:	2002      	movne	r0, #2
 8014378:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 801437a:	2000      	movs	r0, #0
 801437c:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
 801437e:	2002      	movs	r0, #2
 8014380:	bd38      	pop	{r3, r4, r5, pc}
 8014382:	2002      	movs	r0, #2
 8014384:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 8014386:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014388:	bd38      	pop	{r3, r4, r5, pc}
 801438a:	bf00      	nop
 801438c:	20000ad8 	.word	0x20000ad8
 8014390:	20000adc 	.word	0x20000adc
 8014394:	20000ae0 	.word	0x20000ae0
 8014398:	20000bd8 	.word	0x20000bd8
 801439c:	20000bec 	.word	0x20000bec
 80143a0:	0801ba30 	.word	0x0801ba30

080143a4 <vTaskPrioritySet>:
	{
 80143a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a6:	4604      	mov	r4, r0
 80143a8:	460d      	mov	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80143aa:	2906      	cmp	r1, #6
 80143ac:	d815      	bhi.n	80143da <vTaskPrioritySet+0x36>
 80143ae:	2d06      	cmp	r5, #6
 80143b0:	bf28      	it	cs
 80143b2:	2506      	movcs	r5, #6
		taskENTER_CRITICAL();
 80143b4:	f7fe ff1e 	bl	80131f4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80143b8:	b1ac      	cbz	r4, 80143e6 <vTaskPrioritySet+0x42>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80143ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 80143bc:	42ab      	cmp	r3, r5
 80143be:	d037      	beq.n	8014430 <vTaskPrioritySet+0x8c>
				if( uxNewPriority > uxCurrentBasePriority )
 80143c0:	d214      	bcs.n	80143ec <vTaskPrioritySet+0x48>
					if( pxTCB != pxCurrentTCB )
 80143c2:	4a2c      	ldr	r2, [pc, #176]	; (8014474 <vTaskPrioritySet+0xd0>)
 80143c4:	6812      	ldr	r2, [r2, #0]
 80143c6:	4294      	cmp	r4, r2
 80143c8:	d035      	beq.n	8014436 <vTaskPrioritySet+0x92>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80143ca:	4a2a      	ldr	r2, [pc, #168]	; (8014474 <vTaskPrioritySet+0xd0>)
 80143cc:	6812      	ldr	r2, [r2, #0]
 80143ce:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 80143d0:	42af      	cmp	r7, r5
 80143d2:	bf8c      	ite	hi
 80143d4:	2700      	movhi	r7, #0
 80143d6:	2701      	movls	r7, #1
 80143d8:	e00e      	b.n	80143f8 <vTaskPrioritySet+0x54>
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80143da:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80143de:	4826      	ldr	r0, [pc, #152]	; (8014478 <vTaskPrioritySet+0xd4>)
 80143e0:	f002 ff5e 	bl	80172a0 <vAssertCalled>
 80143e4:	e7e3      	b.n	80143ae <vTaskPrioritySet+0xa>
			pxTCB = prvGetTCBFromHandle( xTask );
 80143e6:	4b23      	ldr	r3, [pc, #140]	; (8014474 <vTaskPrioritySet+0xd0>)
 80143e8:	681c      	ldr	r4, [r3, #0]
 80143ea:	e7e6      	b.n	80143ba <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 80143ec:	4a21      	ldr	r2, [pc, #132]	; (8014474 <vTaskPrioritySet+0xd0>)
 80143ee:	6817      	ldr	r7, [r2, #0]
 80143f0:	42bc      	cmp	r4, r7
 80143f2:	bf14      	ite	ne
 80143f4:	2700      	movne	r7, #0
 80143f6:	2701      	moveq	r7, #1
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80143f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80143fa:	42b3      	cmp	r3, r6
						pxTCB->uxPriority = uxNewPriority;
 80143fc:	bf08      	it	eq
 80143fe:	62e5      	streq	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 8014400:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014402:	69a3      	ldr	r3, [r4, #24]
 8014404:	2b00      	cmp	r3, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014406:	bfa4      	itt	ge
 8014408:	f1c5 0507 	rsbge	r5, r5, #7
 801440c:	61a5      	strge	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801440e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8014412:	4a1a      	ldr	r2, [pc, #104]	; (801447c <vTaskPrioritySet+0xd8>)
 8014414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014418:	6962      	ldr	r2, [r4, #20]
 801441a:	429a      	cmp	r2, r3
 801441c:	d00d      	beq.n	801443a <vTaskPrioritySet+0x96>
				if( xYieldRequired != pdFALSE )
 801441e:	b13f      	cbz	r7, 8014430 <vTaskPrioritySet+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 8014420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014424:	4b16      	ldr	r3, [pc, #88]	; (8014480 <vTaskPrioritySet+0xdc>)
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8014430:	f7fe ff02 	bl	8013238 <vPortExitCritical>
 8014434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xYieldRequired = pdFALSE;
 8014436:	2700      	movs	r7, #0
 8014438:	e7de      	b.n	80143f8 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801443a:	1d25      	adds	r5, r4, #4
 801443c:	4628      	mov	r0, r5
 801443e:	f7fe fe7f 	bl	8013140 <uxListRemove>
 8014442:	b938      	cbnz	r0, 8014454 <vTaskPrioritySet+0xb0>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8014444:	490f      	ldr	r1, [pc, #60]	; (8014484 <vTaskPrioritySet+0xe0>)
 8014446:	680b      	ldr	r3, [r1, #0]
 8014448:	2201      	movs	r2, #1
 801444a:	fa02 f606 	lsl.w	r6, r2, r6
 801444e:	ea23 0606 	bic.w	r6, r3, r6
 8014452:	600e      	str	r6, [r1, #0]
					prvAddTaskToReadyList( pxTCB );
 8014454:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014456:	4a0b      	ldr	r2, [pc, #44]	; (8014484 <vTaskPrioritySet+0xe0>)
 8014458:	6811      	ldr	r1, [r2, #0]
 801445a:	2301      	movs	r3, #1
 801445c:	4083      	lsls	r3, r0
 801445e:	430b      	orrs	r3, r1
 8014460:	6013      	str	r3, [r2, #0]
 8014462:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014466:	4629      	mov	r1, r5
 8014468:	4b04      	ldr	r3, [pc, #16]	; (801447c <vTaskPrioritySet+0xd8>)
 801446a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801446e:	f7fe fe41 	bl	80130f4 <vListInsertEnd>
 8014472:	e7d4      	b.n	801441e <vTaskPrioritySet+0x7a>
 8014474:	20000ad8 	.word	0x20000ad8
 8014478:	0801ba30 	.word	0x0801ba30
 801447c:	20000ae4 	.word	0x20000ae4
 8014480:	e000ed04 	.word	0xe000ed04
 8014484:	20000b88 	.word	0x20000b88

08014488 <vTaskStartScheduler>:
{
 8014488:	b500      	push	{lr}
 801448a:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 801448c:	4b15      	ldr	r3, [pc, #84]	; (80144e4 <vTaskStartScheduler+0x5c>)
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	2300      	movs	r3, #0
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	2280      	movs	r2, #128	; 0x80
 8014496:	4914      	ldr	r1, [pc, #80]	; (80144e8 <vTaskStartScheduler+0x60>)
 8014498:	4814      	ldr	r0, [pc, #80]	; (80144ec <vTaskStartScheduler+0x64>)
 801449a:	f7ff fde9 	bl	8014070 <xTaskCreate>
	if( xReturn == pdPASS )
 801449e:	2801      	cmp	r0, #1
 80144a0:	d005      	beq.n	80144ae <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80144a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80144a6:	d017      	beq.n	80144d8 <vTaskStartScheduler+0x50>
}
 80144a8:	b003      	add	sp, #12
 80144aa:	f85d fb04 	ldr.w	pc, [sp], #4
	__asm volatile
 80144ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b2:	f383 8811 	msr	BASEPRI, r3
 80144b6:	f3bf 8f6f 	isb	sy
 80144ba:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80144be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144c2:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <vTaskStartScheduler+0x68>)
 80144c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80144c6:	2201      	movs	r2, #1
 80144c8:	4b0a      	ldr	r3, [pc, #40]	; (80144f4 <vTaskStartScheduler+0x6c>)
 80144ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80144cc:	2200      	movs	r2, #0
 80144ce:	4b0a      	ldr	r3, [pc, #40]	; (80144f8 <vTaskStartScheduler+0x70>)
 80144d0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80144d2:	f7fe ff31 	bl	8013338 <xPortStartScheduler>
 80144d6:	e7e7      	b.n	80144a8 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80144d8:	f240 7187 	movw	r1, #1927	; 0x787
 80144dc:	4807      	ldr	r0, [pc, #28]	; (80144fc <vTaskStartScheduler+0x74>)
 80144de:	f002 fedf 	bl	80172a0 <vAssertCalled>
}
 80144e2:	e7e1      	b.n	80144a8 <vTaskStartScheduler+0x20>
 80144e4:	20000bb4 	.word	0x20000bb4
 80144e8:	0801ba7c 	.word	0x0801ba7c
 80144ec:	080147fd 	.word	0x080147fd
 80144f0:	20000bb8 	.word	0x20000bb8
 80144f4:	20000bd4 	.word	0x20000bd4
 80144f8:	20000c00 	.word	0x20000c00
 80144fc:	0801ba30 	.word	0x0801ba30

08014500 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8014500:	4a02      	ldr	r2, [pc, #8]	; (801450c <vTaskSuspendAll+0xc>)
 8014502:	6813      	ldr	r3, [r2, #0]
 8014504:	3301      	adds	r3, #1
 8014506:	6013      	str	r3, [r2, #0]
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20000b80 	.word	0x20000b80

08014510 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8014510:	4b01      	ldr	r3, [pc, #4]	; (8014518 <xTaskGetTickCount+0x8>)
 8014512:	6818      	ldr	r0, [r3, #0]
}
 8014514:	4770      	bx	lr
 8014516:	bf00      	nop
 8014518:	20000c00 	.word	0x20000c00

0801451c <pcTaskGetName>:
{
 801451c:	b510      	push	{r4, lr}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 801451e:	4604      	mov	r4, r0
 8014520:	b110      	cbz	r0, 8014528 <pcTaskGetName+0xc>
}
 8014522:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014526:	bd10      	pop	{r4, pc}
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8014528:	4b04      	ldr	r3, [pc, #16]	; (801453c <pcTaskGetName+0x20>)
 801452a:	681c      	ldr	r4, [r3, #0]
	configASSERT( pxTCB );
 801452c:	2c00      	cmp	r4, #0
 801452e:	d1f8      	bne.n	8014522 <pcTaskGetName+0x6>
 8014530:	f640 018f 	movw	r1, #2191	; 0x88f
 8014534:	4802      	ldr	r0, [pc, #8]	; (8014540 <pcTaskGetName+0x24>)
 8014536:	f002 feb3 	bl	80172a0 <vAssertCalled>
 801453a:	e7f2      	b.n	8014522 <pcTaskGetName+0x6>
 801453c:	20000ad8 	.word	0x20000ad8
 8014540:	0801ba30 	.word	0x0801ba30

08014544 <xTaskIncrementTick>:
{
 8014544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8014548:	4b4c      	ldr	r3, [pc, #304]	; (801467c <xTaskIncrementTick+0x138>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	b93b      	cbnz	r3, 801455e <xTaskIncrementTick+0x1a>
 801454e:	4b4c      	ldr	r3, [pc, #304]	; (8014680 <xTaskIncrementTick+0x13c>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	3301      	adds	r3, #1
 8014554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014558:	d23c      	bcs.n	80145d4 <xTaskIncrementTick+0x90>
 801455a:	4a49      	ldr	r2, [pc, #292]	; (8014680 <xTaskIncrementTick+0x13c>)
 801455c:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801455e:	4b47      	ldr	r3, [pc, #284]	; (801467c <xTaskIncrementTick+0x138>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	2b00      	cmp	r3, #0
 8014564:	f040 8082 	bne.w	801466c <xTaskIncrementTick+0x128>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014568:	4b46      	ldr	r3, [pc, #280]	; (8014684 <xTaskIncrementTick+0x140>)
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	f102 0801 	add.w	r8, r2, #1
		xTickCount = xConstTickCount;
 8014570:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014574:	f1b8 0f00 	cmp.w	r8, #0
 8014578:	d110      	bne.n	801459c <xTaskIncrementTick+0x58>
			taskSWITCH_DELAYED_LISTS();
 801457a:	4b43      	ldr	r3, [pc, #268]	; (8014688 <xTaskIncrementTick+0x144>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d12f      	bne.n	80145e4 <xTaskIncrementTick+0xa0>
 8014584:	4a40      	ldr	r2, [pc, #256]	; (8014688 <xTaskIncrementTick+0x144>)
 8014586:	6811      	ldr	r1, [r2, #0]
 8014588:	4b40      	ldr	r3, [pc, #256]	; (801468c <xTaskIncrementTick+0x148>)
 801458a:	6818      	ldr	r0, [r3, #0]
 801458c:	6010      	str	r0, [r2, #0]
 801458e:	6019      	str	r1, [r3, #0]
 8014590:	4a3f      	ldr	r2, [pc, #252]	; (8014690 <xTaskIncrementTick+0x14c>)
 8014592:	6813      	ldr	r3, [r2, #0]
 8014594:	3301      	adds	r3, #1
 8014596:	6013      	str	r3, [r2, #0]
 8014598:	f7ff fcf2 	bl	8013f80 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801459c:	4b3d      	ldr	r3, [pc, #244]	; (8014694 <xTaskIncrementTick+0x150>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4598      	cmp	r8, r3
 80145a2:	d225      	bcs.n	80145f0 <xTaskIncrementTick+0xac>
BaseType_t xSwitchRequired = pdFALSE;
 80145a4:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145a6:	4b3c      	ldr	r3, [pc, #240]	; (8014698 <xTaskIncrementTick+0x154>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80145b0:	4a3a      	ldr	r2, [pc, #232]	; (801469c <xTaskIncrementTick+0x158>)
 80145b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 80145b6:	2b02      	cmp	r3, #2
 80145b8:	bf28      	it	cs
 80145ba:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80145bc:	4b38      	ldr	r3, [pc, #224]	; (80146a0 <xTaskIncrementTick+0x15c>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d050      	beq.n	8014666 <xTaskIncrementTick+0x122>
		if( xYieldPending != pdFALSE )
 80145c4:	4b37      	ldr	r3, [pc, #220]	; (80146a4 <xTaskIncrementTick+0x160>)
 80145c6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80145c8:	2b00      	cmp	r3, #0
}
 80145ca:	bf0c      	ite	eq
 80145cc:	4630      	moveq	r0, r6
 80145ce:	2001      	movne	r0, #1
 80145d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	traceTASK_INCREMENT_TICK( xTickCount );
 80145d4:	2200      	movs	r2, #0
 80145d6:	4b2a      	ldr	r3, [pc, #168]	; (8014680 <xTaskIncrementTick+0x13c>)
 80145d8:	601a      	str	r2, [r3, #0]
 80145da:	4a33      	ldr	r2, [pc, #204]	; (80146a8 <xTaskIncrementTick+0x164>)
 80145dc:	6813      	ldr	r3, [r2, #0]
 80145de:	3301      	adds	r3, #1
 80145e0:	6013      	str	r3, [r2, #0]
 80145e2:	e7bc      	b.n	801455e <xTaskIncrementTick+0x1a>
			taskSWITCH_DELAYED_LISTS();
 80145e4:	f640 11dc 	movw	r1, #2524	; 0x9dc
 80145e8:	4830      	ldr	r0, [pc, #192]	; (80146ac <xTaskIncrementTick+0x168>)
 80145ea:	f002 fe59 	bl	80172a0 <vAssertCalled>
 80145ee:	e7c9      	b.n	8014584 <xTaskIncrementTick+0x40>
 80145f0:	2600      	movs	r6, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145f2:	4f25      	ldr	r7, [pc, #148]	; (8014688 <xTaskIncrementTick+0x144>)
					prvAddTaskToReadyList( pxTCB );
 80145f4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80146b0 <xTaskIncrementTick+0x16c>
 80145f8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 801469c <xTaskIncrementTick+0x158>
 80145fc:	e021      	b.n	8014642 <xTaskIncrementTick+0xfe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014602:	4b24      	ldr	r3, [pc, #144]	; (8014694 <xTaskIncrementTick+0x150>)
 8014604:	601a      	str	r2, [r3, #0]
					break;
 8014606:	e7ce      	b.n	80145a6 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
 8014608:	4a22      	ldr	r2, [pc, #136]	; (8014694 <xTaskIncrementTick+0x150>)
 801460a:	6013      	str	r3, [r2, #0]
						break;
 801460c:	e7cb      	b.n	80145a6 <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801460e:	f104 0018 	add.w	r0, r4, #24
 8014612:	f7fe fd95 	bl	8013140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014616:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014618:	f8d9 2000 	ldr.w	r2, [r9]
 801461c:	2301      	movs	r3, #1
 801461e:	4083      	lsls	r3, r0
 8014620:	4313      	orrs	r3, r2
 8014622:	f8c9 3000 	str.w	r3, [r9]
 8014626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801462a:	4629      	mov	r1, r5
 801462c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8014630:	f7fe fd60 	bl	80130f4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014634:	4b18      	ldr	r3, [pc, #96]	; (8014698 <xTaskIncrementTick+0x154>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801463c:	429a      	cmp	r2, r3
 801463e:	bf28      	it	cs
 8014640:	2601      	movcs	r6, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d0d9      	beq.n	80145fe <xTaskIncrementTick+0xba>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014650:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8014652:	4598      	cmp	r8, r3
 8014654:	d3d8      	bcc.n	8014608 <xTaskIncrementTick+0xc4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014656:	1d25      	adds	r5, r4, #4
 8014658:	4628      	mov	r0, r5
 801465a:	f7fe fd71 	bl	8013140 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801465e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1d4      	bne.n	801460e <xTaskIncrementTick+0xca>
 8014664:	e7d7      	b.n	8014616 <xTaskIncrementTick+0xd2>
				vApplicationTickHook();
 8014666:	f002 ffcd 	bl	8017604 <vApplicationTickHook>
 801466a:	e7ab      	b.n	80145c4 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 801466c:	4a0c      	ldr	r2, [pc, #48]	; (80146a0 <xTaskIncrementTick+0x15c>)
 801466e:	6813      	ldr	r3, [r2, #0]
 8014670:	3301      	adds	r3, #1
 8014672:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
 8014674:	f002 ffc6 	bl	8017604 <vApplicationTickHook>
BaseType_t xSwitchRequired = pdFALSE;
 8014678:	2600      	movs	r6, #0
 801467a:	e7a3      	b.n	80145c4 <xTaskIncrementTick+0x80>
 801467c:	20000b80 	.word	0x20000b80
 8014680:	20004e70 	.word	0x20004e70
 8014684:	20000c00 	.word	0x20000c00
 8014688:	20000adc 	.word	0x20000adc
 801468c:	20000ae0 	.word	0x20000ae0
 8014690:	20000bbc 	.word	0x20000bbc
 8014694:	20000bb8 	.word	0x20000bb8
 8014698:	20000ad8 	.word	0x20000ad8
 801469c:	20000ae4 	.word	0x20000ae4
 80146a0:	20000b7c 	.word	0x20000b7c
 80146a4:	20000c04 	.word	0x20000c04
 80146a8:	20004e78 	.word	0x20004e78
 80146ac:	0801ba30 	.word	0x0801ba30
 80146b0:	20000b88 	.word	0x20000b88

080146b4 <xTaskResumeAll>:
{
 80146b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80146b8:	4b34      	ldr	r3, [pc, #208]	; (801478c <xTaskResumeAll+0xd8>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d033      	beq.n	8014728 <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
 80146c0:	f7fe fd98 	bl	80131f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80146c4:	4b31      	ldr	r3, [pc, #196]	; (801478c <xTaskResumeAll+0xd8>)
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	3a01      	subs	r2, #1
 80146ca:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d153      	bne.n	801477a <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80146d2:	4b2f      	ldr	r3, [pc, #188]	; (8014790 <xTaskResumeAll+0xdc>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	b36b      	cbz	r3, 8014734 <xTaskResumeAll+0x80>
 80146d8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146da:	4e2e      	ldr	r6, [pc, #184]	; (8014794 <xTaskResumeAll+0xe0>)
					prvAddTaskToReadyList( pxTCB );
 80146dc:	4f2e      	ldr	r7, [pc, #184]	; (8014798 <xTaskResumeAll+0xe4>)
 80146de:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80147b0 <xTaskResumeAll+0xfc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146e2:	6833      	ldr	r3, [r6, #0]
 80146e4:	b343      	cbz	r3, 8014738 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80146e6:	68f3      	ldr	r3, [r6, #12]
 80146e8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80146ea:	f104 0018 	add.w	r0, r4, #24
 80146ee:	f7fe fd27 	bl	8013140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146f2:	1d25      	adds	r5, r4, #4
 80146f4:	4628      	mov	r0, r5
 80146f6:	f7fe fd23 	bl	8013140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	2301      	movs	r3, #1
 8014700:	4083      	lsls	r3, r0
 8014702:	4313      	orrs	r3, r2
 8014704:	603b      	str	r3, [r7, #0]
 8014706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801470a:	4629      	mov	r1, r5
 801470c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8014710:	f7fe fcf0 	bl	80130f4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014714:	4b21      	ldr	r3, [pc, #132]	; (801479c <xTaskResumeAll+0xe8>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801471c:	429a      	cmp	r2, r3
 801471e:	d3e0      	bcc.n	80146e2 <xTaskResumeAll+0x2e>
						xYieldPending = pdTRUE;
 8014720:	2201      	movs	r2, #1
 8014722:	4b1f      	ldr	r3, [pc, #124]	; (80147a0 <xTaskResumeAll+0xec>)
 8014724:	601a      	str	r2, [r3, #0]
 8014726:	e7dc      	b.n	80146e2 <xTaskResumeAll+0x2e>
	configASSERT( uxSchedulerSuspended );
 8014728:	f240 71eb 	movw	r1, #2027	; 0x7eb
 801472c:	481d      	ldr	r0, [pc, #116]	; (80147a4 <xTaskResumeAll+0xf0>)
 801472e:	f002 fdb7 	bl	80172a0 <vAssertCalled>
 8014732:	e7c5      	b.n	80146c0 <xTaskResumeAll+0xc>
BaseType_t xAlreadyYielded = pdFALSE;
 8014734:	2400      	movs	r4, #0
 8014736:	e021      	b.n	801477c <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
 8014738:	b10c      	cbz	r4, 801473e <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
 801473a:	f7ff fc21 	bl	8013f80 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801473e:	4b1a      	ldr	r3, [pc, #104]	; (80147a8 <xTaskResumeAll+0xf4>)
 8014740:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014742:	b16c      	cbz	r4, 8014760 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8014744:	4e16      	ldr	r6, [pc, #88]	; (80147a0 <xTaskResumeAll+0xec>)
 8014746:	2501      	movs	r5, #1
 8014748:	e001      	b.n	801474e <xTaskResumeAll+0x9a>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801474a:	3c01      	subs	r4, #1
 801474c:	d005      	beq.n	801475a <xTaskResumeAll+0xa6>
							if( xTaskIncrementTick() != pdFALSE )
 801474e:	f7ff fef9 	bl	8014544 <xTaskIncrementTick>
 8014752:	2800      	cmp	r0, #0
 8014754:	d0f9      	beq.n	801474a <xTaskResumeAll+0x96>
								xYieldPending = pdTRUE;
 8014756:	6035      	str	r5, [r6, #0]
 8014758:	e7f7      	b.n	801474a <xTaskResumeAll+0x96>
						uxPendedTicks = 0;
 801475a:	2200      	movs	r2, #0
 801475c:	4b12      	ldr	r3, [pc, #72]	; (80147a8 <xTaskResumeAll+0xf4>)
 801475e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8014760:	4b0f      	ldr	r3, [pc, #60]	; (80147a0 <xTaskResumeAll+0xec>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	b17b      	cbz	r3, 8014786 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8014766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801476a:	4b10      	ldr	r3, [pc, #64]	; (80147ac <xTaskResumeAll+0xf8>)
 801476c:	601a      	str	r2, [r3, #0]
 801476e:	f3bf 8f4f 	dsb	sy
 8014772:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8014776:	2401      	movs	r4, #1
 8014778:	e000      	b.n	801477c <xTaskResumeAll+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
 801477a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801477c:	f7fe fd5c 	bl	8013238 <vPortExitCritical>
}
 8014780:	4620      	mov	r0, r4
 8014782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8014786:	2400      	movs	r4, #0
 8014788:	e7f8      	b.n	801477c <xTaskResumeAll+0xc8>
 801478a:	bf00      	nop
 801478c:	20000b80 	.word	0x20000b80
 8014790:	20000b74 	.word	0x20000b74
 8014794:	20000bc0 	.word	0x20000bc0
 8014798:	20000b88 	.word	0x20000b88
 801479c:	20000ad8 	.word	0x20000ad8
 80147a0:	20000c04 	.word	0x20000c04
 80147a4:	0801ba30 	.word	0x0801ba30
 80147a8:	20000b7c 	.word	0x20000b7c
 80147ac:	e000ed04 	.word	0xe000ed04
 80147b0:	20000ae4 	.word	0x20000ae4

080147b4 <vTaskDelay>:
	{
 80147b4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80147b6:	b160      	cbz	r0, 80147d2 <vTaskDelay+0x1e>
 80147b8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80147ba:	4b0d      	ldr	r3, [pc, #52]	; (80147f0 <vTaskDelay+0x3c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	b98b      	cbnz	r3, 80147e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80147c0:	f7ff fe9e 	bl	8014500 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80147c4:	2100      	movs	r1, #0
 80147c6:	4620      	mov	r0, r4
 80147c8:	f7ff fbf0 	bl	8013fac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80147cc:	f7ff ff72 	bl	80146b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80147d0:	b938      	cbnz	r0, 80147e2 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 80147d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147d6:	4b07      	ldr	r3, [pc, #28]	; (80147f4 <vTaskDelay+0x40>)
 80147d8:	601a      	str	r2, [r3, #0]
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	f3bf 8f6f 	isb	sy
 80147e2:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80147e4:	f240 41cf 	movw	r1, #1231	; 0x4cf
 80147e8:	4803      	ldr	r0, [pc, #12]	; (80147f8 <vTaskDelay+0x44>)
 80147ea:	f002 fd59 	bl	80172a0 <vAssertCalled>
 80147ee:	e7e7      	b.n	80147c0 <vTaskDelay+0xc>
 80147f0:	20000b80 	.word	0x20000b80
 80147f4:	e000ed04 	.word	0xe000ed04
 80147f8:	0801ba30 	.word	0x0801ba30

080147fc <prvIdleTask>:
{
 80147fc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80147fe:	4d1a      	ldr	r5, [pc, #104]	; (8014868 <prvIdleTask+0x6c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014800:	4e1a      	ldr	r6, [pc, #104]	; (801486c <prvIdleTask+0x70>)
					--uxCurrentNumberOfTasks;
 8014802:	4f1b      	ldr	r7, [pc, #108]	; (8014870 <prvIdleTask+0x74>)
				taskYIELD();
 8014804:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8014878 <prvIdleTask+0x7c>
 8014808:	e00d      	b.n	8014826 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801480a:	4b1a      	ldr	r3, [pc, #104]	; (8014874 <prvIdleTask+0x78>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b01      	cmp	r3, #1
 8014810:	d907      	bls.n	8014822 <prvIdleTask+0x26>
				taskYIELD();
 8014812:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014816:	f8c8 3000 	str.w	r3, [r8]
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8014822:	f002 fd23 	bl	801726c <vApplicationIdleHook>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014826:	682b      	ldr	r3, [r5, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d0ee      	beq.n	801480a <prvIdleTask+0xe>
			vTaskSuspendAll();
 801482c:	f7ff fe68 	bl	8014500 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014830:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 8014832:	f7ff ff3f 	bl	80146b4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8014836:	2c00      	cmp	r4, #0
 8014838:	d0f5      	beq.n	8014826 <prvIdleTask+0x2a>
				taskENTER_CRITICAL();
 801483a:	f7fe fcdb 	bl	80131f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801483e:	68f3      	ldr	r3, [r6, #12]
 8014840:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014842:	1d20      	adds	r0, r4, #4
 8014844:	f7fe fc7c 	bl	8013140 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	3b01      	subs	r3, #1
 801484c:	603b      	str	r3, [r7, #0]
					--uxDeletedTasksWaitingCleanUp;
 801484e:	682b      	ldr	r3, [r5, #0]
 8014850:	3b01      	subs	r3, #1
 8014852:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 8014854:	f7fe fcf0 	bl	8013238 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8014858:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801485a:	f7fe febb 	bl	80135d4 <vPortFree>
			vPortFree( pxTCB );
 801485e:	4620      	mov	r0, r4
 8014860:	f7fe feb8 	bl	80135d4 <vPortFree>
 8014864:	e7df      	b.n	8014826 <prvIdleTask+0x2a>
 8014866:	bf00      	nop
 8014868:	20000b78 	.word	0x20000b78
 801486c:	20000bec 	.word	0x20000bec
 8014870:	20000b74 	.word	0x20000b74
 8014874:	20000ae4 	.word	0x20000ae4
 8014878:	e000ed04 	.word	0xe000ed04

0801487c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801487c:	4b31      	ldr	r3, [pc, #196]	; (8014944 <vTaskSwitchContext+0xc8>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	b11b      	cbz	r3, 801488a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8014882:	2201      	movs	r2, #1
 8014884:	4b30      	ldr	r3, [pc, #192]	; (8014948 <vTaskSwitchContext+0xcc>)
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	4770      	bx	lr
{
 801488a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 801488c:	2200      	movs	r2, #0
 801488e:	4b2e      	ldr	r3, [pc, #184]	; (8014948 <vTaskSwitchContext+0xcc>)
 8014890:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014892:	f002 feb3 	bl	80175fc <xGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014896:	4b2d      	ldr	r3, [pc, #180]	; (801494c <vTaskSwitchContext+0xd0>)
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	4290      	cmp	r0, r2
 801489c:	d905      	bls.n	80148aa <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801489e:	4b2c      	ldr	r3, [pc, #176]	; (8014950 <vTaskSwitchContext+0xd4>)
 80148a0:	6819      	ldr	r1, [r3, #0]
 80148a2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80148a4:	1a9b      	subs	r3, r3, r2
 80148a6:	4403      	add	r3, r0
 80148a8:	660b      	str	r3, [r1, #96]	; 0x60
				ulTaskSwitchedInTime = ulTotalRunTime;
 80148aa:	4b28      	ldr	r3, [pc, #160]	; (801494c <vTaskSwitchContext+0xd0>)
 80148ac:	6018      	str	r0, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80148ae:	4b28      	ldr	r3, [pc, #160]	; (8014950 <vTaskSwitchContext+0xd4>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80148ba:	d029      	beq.n	8014910 <vTaskSwitchContext+0x94>
 80148bc:	4b24      	ldr	r3, [pc, #144]	; (8014950 <vTaskSwitchContext+0xd4>)
 80148be:	6818      	ldr	r0, [r3, #0]
 80148c0:	6819      	ldr	r1, [r3, #0]
 80148c2:	3134      	adds	r1, #52	; 0x34
 80148c4:	f002 fe50 	bl	8017568 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80148c8:	4b22      	ldr	r3, [pc, #136]	; (8014954 <vTaskSwitchContext+0xd8>)
 80148ca:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80148cc:	fab4 f484 	clz	r4, r4
 80148d0:	b2e4      	uxtb	r4, r4
 80148d2:	f1c4 041f 	rsb	r4, r4, #31
 80148d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80148da:	4b1f      	ldr	r3, [pc, #124]	; (8014958 <vTaskSwitchContext+0xdc>)
 80148dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148e0:	b31b      	cbz	r3, 801492a <vTaskSwitchContext+0xae>
 80148e2:	4b1d      	ldr	r3, [pc, #116]	; (8014958 <vTaskSwitchContext+0xdc>)
 80148e4:	00a2      	lsls	r2, r4, #2
 80148e6:	1911      	adds	r1, r2, r4
 80148e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80148ec:	6848      	ldr	r0, [r1, #4]
 80148ee:	6840      	ldr	r0, [r0, #4]
 80148f0:	6048      	str	r0, [r1, #4]
 80148f2:	4422      	add	r2, r4
 80148f4:	460b      	mov	r3, r1
 80148f6:	3308      	adds	r3, #8
 80148f8:	4298      	cmp	r0, r3
 80148fa:	d01c      	beq.n	8014936 <vTaskSwitchContext+0xba>
 80148fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014900:	4b15      	ldr	r3, [pc, #84]	; (8014958 <vTaskSwitchContext+0xdc>)
 8014902:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014906:	6863      	ldr	r3, [r4, #4]
 8014908:	68da      	ldr	r2, [r3, #12]
 801490a:	4b11      	ldr	r3, [pc, #68]	; (8014950 <vTaskSwitchContext+0xd4>)
 801490c:	601a      	str	r2, [r3, #0]
 801490e:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8014910:	685a      	ldr	r2, [r3, #4]
 8014912:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8014916:	d1d1      	bne.n	80148bc <vTaskSwitchContext+0x40>
 8014918:	689a      	ldr	r2, [r3, #8]
 801491a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 801491e:	d1cd      	bne.n	80148bc <vTaskSwitchContext+0x40>
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8014926:	d1c9      	bne.n	80148bc <vTaskSwitchContext+0x40>
 8014928:	e7ce      	b.n	80148c8 <vTaskSwitchContext+0x4c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801492a:	f640 21f9 	movw	r1, #2809	; 0xaf9
 801492e:	480b      	ldr	r0, [pc, #44]	; (801495c <vTaskSwitchContext+0xe0>)
 8014930:	f002 fcb6 	bl	80172a0 <vAssertCalled>
 8014934:	e7d5      	b.n	80148e2 <vTaskSwitchContext+0x66>
 8014936:	6841      	ldr	r1, [r0, #4]
 8014938:	4613      	mov	r3, r2
 801493a:	4a07      	ldr	r2, [pc, #28]	; (8014958 <vTaskSwitchContext+0xdc>)
 801493c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014940:	6059      	str	r1, [r3, #4]
 8014942:	e7db      	b.n	80148fc <vTaskSwitchContext+0x80>
 8014944:	20000b80 	.word	0x20000b80
 8014948:	20000c04 	.word	0x20000c04
 801494c:	20000b70 	.word	0x20000b70
 8014950:	20000ad8 	.word	0x20000ad8
 8014954:	20000b88 	.word	0x20000b88
 8014958:	20000ae4 	.word	0x20000ae4
 801495c:	0801ba30 	.word	0x0801ba30

08014960 <vTaskPlaceOnEventList>:
{
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8014964:	4605      	mov	r5, r0
 8014966:	b150      	cbz	r0, 801497e <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014968:	4b08      	ldr	r3, [pc, #32]	; (801498c <vTaskPlaceOnEventList+0x2c>)
 801496a:	6819      	ldr	r1, [r3, #0]
 801496c:	3118      	adds	r1, #24
 801496e:	4628      	mov	r0, r5
 8014970:	f7fe fbcc 	bl	801310c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014974:	2101      	movs	r1, #1
 8014976:	4620      	mov	r0, r4
 8014978:	f7ff fb18 	bl	8013fac <prvAddCurrentTaskToDelayedList>
 801497c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
 801497e:	f640 3109 	movw	r1, #2825	; 0xb09
 8014982:	4803      	ldr	r0, [pc, #12]	; (8014990 <vTaskPlaceOnEventList+0x30>)
 8014984:	f002 fc8c 	bl	80172a0 <vAssertCalled>
 8014988:	e7ee      	b.n	8014968 <vTaskPlaceOnEventList+0x8>
 801498a:	bf00      	nop
 801498c:	20000ad8 	.word	0x20000ad8
 8014990:	0801ba30 	.word	0x0801ba30

08014994 <vTaskPlaceOnUnorderedEventList>:
{
 8014994:	b570      	push	{r4, r5, r6, lr}
 8014996:	460c      	mov	r4, r1
 8014998:	4615      	mov	r5, r2
	configASSERT( pxEventList );
 801499a:	4606      	mov	r6, r0
 801499c:	b188      	cbz	r0, 80149c2 <vTaskPlaceOnUnorderedEventList+0x2e>
	configASSERT( uxSchedulerSuspended != 0 );
 801499e:	4b0f      	ldr	r3, [pc, #60]	; (80149dc <vTaskPlaceOnUnorderedEventList+0x48>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	b1a3      	cbz	r3, 80149ce <vTaskPlaceOnUnorderedEventList+0x3a>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80149a4:	4b0e      	ldr	r3, [pc, #56]	; (80149e0 <vTaskPlaceOnUnorderedEventList+0x4c>)
 80149a6:	681a      	ldr	r2, [r3, #0]
 80149a8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80149ac:	6194      	str	r4, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149ae:	6819      	ldr	r1, [r3, #0]
 80149b0:	3118      	adds	r1, #24
 80149b2:	4630      	mov	r0, r6
 80149b4:	f7fe fb9e 	bl	80130f4 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149b8:	2101      	movs	r1, #1
 80149ba:	4628      	mov	r0, r5
 80149bc:	f7ff faf6 	bl	8013fac <prvAddCurrentTaskToDelayedList>
 80149c0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 80149c2:	f640 311a 	movw	r1, #2842	; 0xb1a
 80149c6:	4807      	ldr	r0, [pc, #28]	; (80149e4 <vTaskPlaceOnUnorderedEventList+0x50>)
 80149c8:	f002 fc6a 	bl	80172a0 <vAssertCalled>
 80149cc:	e7e7      	b.n	801499e <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
 80149ce:	f640 311e 	movw	r1, #2846	; 0xb1e
 80149d2:	4804      	ldr	r0, [pc, #16]	; (80149e4 <vTaskPlaceOnUnorderedEventList+0x50>)
 80149d4:	f002 fc64 	bl	80172a0 <vAssertCalled>
 80149d8:	e7e4      	b.n	80149a4 <vTaskPlaceOnUnorderedEventList+0x10>
 80149da:	bf00      	nop
 80149dc:	20000b80 	.word	0x20000b80
 80149e0:	20000ad8 	.word	0x20000ad8
 80149e4:	0801ba30 	.word	0x0801ba30

080149e8 <xTaskRemoveFromEventList>:
{
 80149e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80149ea:	68c3      	ldr	r3, [r0, #12]
 80149ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80149ee:	b32c      	cbz	r4, 8014a3c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80149f0:	f104 0518 	add.w	r5, r4, #24
 80149f4:	4628      	mov	r0, r5
 80149f6:	f7fe fba3 	bl	8013140 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149fa:	4b16      	ldr	r3, [pc, #88]	; (8014a54 <xTaskRemoveFromEventList+0x6c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	bb1b      	cbnz	r3, 8014a48 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a00:	1d25      	adds	r5, r4, #4
 8014a02:	4628      	mov	r0, r5
 8014a04:	f7fe fb9c 	bl	8013140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014a08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014a0a:	4a13      	ldr	r2, [pc, #76]	; (8014a58 <xTaskRemoveFromEventList+0x70>)
 8014a0c:	6811      	ldr	r1, [r2, #0]
 8014a0e:	2301      	movs	r3, #1
 8014a10:	4083      	lsls	r3, r0
 8014a12:	430b      	orrs	r3, r1
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <xTaskRemoveFromEventList+0x74>)
 8014a1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014a22:	f7fe fb67 	bl	80130f4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a26:	4b0e      	ldr	r3, [pc, #56]	; (8014a60 <xTaskRemoveFromEventList+0x78>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a2e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8014a30:	bf83      	ittte	hi
 8014a32:	2001      	movhi	r0, #1
 8014a34:	4b0b      	ldrhi	r3, [pc, #44]	; (8014a64 <xTaskRemoveFromEventList+0x7c>)
 8014a36:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8014a38:	2000      	movls	r0, #0
}
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
 8014a3c:	f640 3164 	movw	r1, #2916	; 0xb64
 8014a40:	4809      	ldr	r0, [pc, #36]	; (8014a68 <xTaskRemoveFromEventList+0x80>)
 8014a42:	f002 fc2d 	bl	80172a0 <vAssertCalled>
 8014a46:	e7d3      	b.n	80149f0 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014a48:	4629      	mov	r1, r5
 8014a4a:	4808      	ldr	r0, [pc, #32]	; (8014a6c <xTaskRemoveFromEventList+0x84>)
 8014a4c:	f7fe fb52 	bl	80130f4 <vListInsertEnd>
 8014a50:	e7e9      	b.n	8014a26 <xTaskRemoveFromEventList+0x3e>
 8014a52:	bf00      	nop
 8014a54:	20000b80 	.word	0x20000b80
 8014a58:	20000b88 	.word	0x20000b88
 8014a5c:	20000ae4 	.word	0x20000ae4
 8014a60:	20000ad8 	.word	0x20000ad8
 8014a64:	20000c04 	.word	0x20000c04
 8014a68:	0801ba30 	.word	0x0801ba30
 8014a6c:	20000bc0 	.word	0x20000bc0

08014a70 <vTaskRemoveFromUnorderedEventList>:
{
 8014a70:	b538      	push	{r3, r4, r5, lr}
 8014a72:	4605      	mov	r5, r0
 8014a74:	460c      	mov	r4, r1
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014a76:	4b1a      	ldr	r3, [pc, #104]	; (8014ae0 <vTaskRemoveFromUnorderedEventList+0x70>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	b323      	cbz	r3, 8014ac6 <vTaskRemoveFromUnorderedEventList+0x56>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014a7c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8014a80:	602c      	str	r4, [r5, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8014a82:	68ec      	ldr	r4, [r5, #12]
	configASSERT( pxUnblockedTCB );
 8014a84:	b32c      	cbz	r4, 8014ad2 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8014a86:	4628      	mov	r0, r5
 8014a88:	f7fe fb5a 	bl	8013140 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a8c:	1d25      	adds	r5, r4, #4
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f7fe fb56 	bl	8013140 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014a94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014a96:	4a13      	ldr	r2, [pc, #76]	; (8014ae4 <vTaskRemoveFromUnorderedEventList+0x74>)
 8014a98:	6811      	ldr	r1, [r2, #0]
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	4083      	lsls	r3, r0
 8014a9e:	430b      	orrs	r3, r1
 8014aa0:	6013      	str	r3, [r2, #0]
 8014aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014aa6:	4629      	mov	r1, r5
 8014aa8:	4b0f      	ldr	r3, [pc, #60]	; (8014ae8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8014aaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014aae:	f7fe fb21 	bl	80130f4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014ab2:	4b0e      	ldr	r3, [pc, #56]	; (8014aec <vTaskRemoveFromUnorderedEventList+0x7c>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d902      	bls.n	8014ac4 <vTaskRemoveFromUnorderedEventList+0x54>
		xYieldPending = pdTRUE;
 8014abe:	2201      	movs	r2, #1
 8014ac0:	4b0b      	ldr	r3, [pc, #44]	; (8014af0 <vTaskRemoveFromUnorderedEventList+0x80>)
 8014ac2:	601a      	str	r2, [r3, #0]
 8014ac4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014ac6:	f640 319b 	movw	r1, #2971	; 0xb9b
 8014aca:	480a      	ldr	r0, [pc, #40]	; (8014af4 <vTaskRemoveFromUnorderedEventList+0x84>)
 8014acc:	f002 fbe8 	bl	80172a0 <vAssertCalled>
 8014ad0:	e7d4      	b.n	8014a7c <vTaskRemoveFromUnorderedEventList+0xc>
	configASSERT( pxUnblockedTCB );
 8014ad2:	f640 31a3 	movw	r1, #2979	; 0xba3
 8014ad6:	4807      	ldr	r0, [pc, #28]	; (8014af4 <vTaskRemoveFromUnorderedEventList+0x84>)
 8014ad8:	f002 fbe2 	bl	80172a0 <vAssertCalled>
 8014adc:	e7d3      	b.n	8014a86 <vTaskRemoveFromUnorderedEventList+0x16>
 8014ade:	bf00      	nop
 8014ae0:	20000b80 	.word	0x20000b80
 8014ae4:	20000b88 	.word	0x20000b88
 8014ae8:	20000ae4 	.word	0x20000ae4
 8014aec:	20000ad8 	.word	0x20000ad8
 8014af0:	20000c04 	.word	0x20000c04
 8014af4:	0801ba30 	.word	0x0801ba30

08014af8 <vTaskSetTimeOutState>:
{
 8014af8:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 8014afa:	4604      	mov	r4, r0
 8014afc:	b130      	cbz	r0, 8014b0c <vTaskSetTimeOutState+0x14>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014afe:	4b06      	ldr	r3, [pc, #24]	; (8014b18 <vTaskSetTimeOutState+0x20>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014b04:	4b05      	ldr	r3, [pc, #20]	; (8014b1c <vTaskSetTimeOutState+0x24>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	6063      	str	r3, [r4, #4]
 8014b0a:	bd10      	pop	{r4, pc}
	configASSERT( pxTimeOut );
 8014b0c:	f640 31b9 	movw	r1, #3001	; 0xbb9
 8014b10:	4803      	ldr	r0, [pc, #12]	; (8014b20 <vTaskSetTimeOutState+0x28>)
 8014b12:	f002 fbc5 	bl	80172a0 <vAssertCalled>
 8014b16:	e7f2      	b.n	8014afe <vTaskSetTimeOutState+0x6>
 8014b18:	20000bbc 	.word	0x20000bbc
 8014b1c:	20000c00 	.word	0x20000c00
 8014b20:	0801ba30 	.word	0x0801ba30

08014b24 <xTaskCheckForTimeOut>:
{
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8014b28:	4605      	mov	r5, r0
 8014b2a:	b1c8      	cbz	r0, 8014b60 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 8014b2c:	b1f4      	cbz	r4, 8014b6c <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
 8014b2e:	f7fe fb61 	bl	80131f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8014b32:	4b17      	ldr	r3, [pc, #92]	; (8014b90 <xTaskCheckForTimeOut+0x6c>)
 8014b34:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8014b36:	6823      	ldr	r3, [r4, #0]
 8014b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b3c:	d024      	beq.n	8014b88 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014b3e:	4915      	ldr	r1, [pc, #84]	; (8014b94 <xTaskCheckForTimeOut+0x70>)
 8014b40:	6809      	ldr	r1, [r1, #0]
 8014b42:	6828      	ldr	r0, [r5, #0]
 8014b44:	4288      	cmp	r0, r1
 8014b46:	d002      	beq.n	8014b4e <xTaskCheckForTimeOut+0x2a>
 8014b48:	6869      	ldr	r1, [r5, #4]
 8014b4a:	428a      	cmp	r2, r1
 8014b4c:	d21e      	bcs.n	8014b8c <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014b4e:	6869      	ldr	r1, [r5, #4]
 8014b50:	1a50      	subs	r0, r2, r1
 8014b52:	4283      	cmp	r3, r0
 8014b54:	d810      	bhi.n	8014b78 <xTaskCheckForTimeOut+0x54>
			xReturn = pdTRUE;
 8014b56:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8014b58:	f7fe fb6e 	bl	8013238 <vPortExitCritical>
}
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
 8014b60:	f640 31c3 	movw	r1, #3011	; 0xbc3
 8014b64:	480c      	ldr	r0, [pc, #48]	; (8014b98 <xTaskCheckForTimeOut+0x74>)
 8014b66:	f002 fb9b 	bl	80172a0 <vAssertCalled>
 8014b6a:	e7df      	b.n	8014b2c <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
 8014b6c:	f640 31c4 	movw	r1, #3012	; 0xbc4
 8014b70:	4809      	ldr	r0, [pc, #36]	; (8014b98 <xTaskCheckForTimeOut+0x74>)
 8014b72:	f002 fb95 	bl	80172a0 <vAssertCalled>
 8014b76:	e7da      	b.n	8014b2e <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8014b78:	1a9b      	subs	r3, r3, r2
 8014b7a:	440b      	add	r3, r1
 8014b7c:	6023      	str	r3, [r4, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f7ff ffba 	bl	8014af8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8014b84:	2400      	movs	r4, #0
 8014b86:	e7e7      	b.n	8014b58 <xTaskCheckForTimeOut+0x34>
				xReturn = pdFALSE;
 8014b88:	2400      	movs	r4, #0
 8014b8a:	e7e5      	b.n	8014b58 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 8014b8c:	2401      	movs	r4, #1
 8014b8e:	e7e3      	b.n	8014b58 <xTaskCheckForTimeOut+0x34>
 8014b90:	20000c00 	.word	0x20000c00
 8014b94:	20000bbc 	.word	0x20000bbc
 8014b98:	0801ba30 	.word	0x0801ba30

08014b9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8014b9c:	2201      	movs	r2, #1
 8014b9e:	4b01      	ldr	r3, [pc, #4]	; (8014ba4 <vTaskMissedYield+0x8>)
 8014ba0:	601a      	str	r2, [r3, #0]
 8014ba2:	4770      	bx	lr
 8014ba4:	20000c04 	.word	0x20000c04

08014ba8 <vTaskSetThreadLocalStoragePointer>:
		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8014ba8:	2902      	cmp	r1, #2
 8014baa:	dc03      	bgt.n	8014bb4 <vTaskSetThreadLocalStoragePointer+0xc>
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8014bac:	b118      	cbz	r0, 8014bb6 <vTaskSetThreadLocalStoragePointer+0xe>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8014bae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014bb2:	654a      	str	r2, [r1, #84]	; 0x54
 8014bb4:	4770      	bx	lr
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8014bb6:	4b01      	ldr	r3, [pc, #4]	; (8014bbc <vTaskSetThreadLocalStoragePointer+0x14>)
 8014bb8:	6818      	ldr	r0, [r3, #0]
 8014bba:	e7f8      	b.n	8014bae <vTaskSetThreadLocalStoragePointer+0x6>
 8014bbc:	20000ad8 	.word	0x20000ad8

08014bc0 <pvTaskGetThreadLocalStoragePointer>:
		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8014bc0:	2902      	cmp	r1, #2
 8014bc2:	dc07      	bgt.n	8014bd4 <pvTaskGetThreadLocalStoragePointer+0x14>
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8014bc4:	b118      	cbz	r0, 8014bce <pvTaskGetThreadLocalStoragePointer+0xe>
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8014bc6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8014bca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014bcc:	4770      	bx	lr
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8014bce:	4b02      	ldr	r3, [pc, #8]	; (8014bd8 <pvTaskGetThreadLocalStoragePointer+0x18>)
 8014bd0:	6818      	ldr	r0, [r3, #0]
 8014bd2:	e7f8      	b.n	8014bc6 <pvTaskGetThreadLocalStoragePointer+0x6>
			pvReturn = NULL;
 8014bd4:	2000      	movs	r0, #0
	}
 8014bd6:	4770      	bx	lr
 8014bd8:	20000ad8 	.word	0x20000ad8

08014bdc <vTaskGetInfo>:
	{
 8014bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014be0:	460c      	mov	r4, r1
 8014be2:	4617      	mov	r7, r2
 8014be4:	461e      	mov	r6, r3
		pxTCB = prvGetTCBFromHandle( xTask );
 8014be6:	4680      	mov	r8, r0
 8014be8:	b1c8      	cbz	r0, 8014c1e <vTaskGetInfo+0x42>
 8014bea:	4605      	mov	r5, r0
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8014bec:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8014bee:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014bf2:	6063      	str	r3, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8014bf4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014bf6:	6123      	str	r3, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8014bf8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014bfa:	61e3      	str	r3, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8014bfc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8014bfe:	60a3      	str	r3, [r4, #8]
			if( pxTaskStatus->eCurrentState == eSuspended )
 8014c00:	7b23      	ldrb	r3, [r4, #12]
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	d00e      	beq.n	8014c24 <vTaskGetInfo+0x48>
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8014c06:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014c08:	6163      	str	r3, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8014c0a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8014c0c:	61a3      	str	r3, [r4, #24]
		if( eState != eInvalid )
 8014c0e:	2e05      	cmp	r6, #5
 8014c10:	d011      	beq.n	8014c36 <vTaskGetInfo+0x5a>
			pxTaskStatus->eCurrentState = eState;
 8014c12:	7326      	strb	r6, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8014c14:	b9a7      	cbnz	r7, 8014c40 <vTaskGetInfo+0x64>
			pxTaskStatus->usStackHighWaterMark = 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	8423      	strh	r3, [r4, #32]
 8014c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8014c1e:	4b10      	ldr	r3, [pc, #64]	; (8014c60 <vTaskGetInfo+0x84>)
 8014c20:	681d      	ldr	r5, [r3, #0]
 8014c22:	e7e3      	b.n	8014bec <vTaskGetInfo+0x10>
				vTaskSuspendAll();
 8014c24:	f7ff fc6c 	bl	8014500 <vTaskSuspendAll>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c28:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014c2a:	b10b      	cbz	r3, 8014c30 <vTaskGetInfo+0x54>
						pxTaskStatus->eCurrentState = eBlocked;
 8014c2c:	2302      	movs	r3, #2
 8014c2e:	7323      	strb	r3, [r4, #12]
				( void ) xTaskResumeAll();
 8014c30:	f7ff fd40 	bl	80146b4 <xTaskResumeAll>
 8014c34:	e7e7      	b.n	8014c06 <vTaskGetInfo+0x2a>
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8014c36:	4640      	mov	r0, r8
 8014c38:	f7ff fb74 	bl	8014324 <eTaskGetState>
 8014c3c:	7320      	strb	r0, [r4, #12]
 8014c3e:	e7e9      	b.n	8014c14 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8014c40:	6b28      	ldr	r0, [r5, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014c42:	7803      	ldrb	r3, [r0, #0]
 8014c44:	2ba5      	cmp	r3, #165	; 0xa5
 8014c46:	d109      	bne.n	8014c5c <vTaskGetInfo+0x80>
 8014c48:	1c43      	adds	r3, r0, #1
 8014c4a:	1a19      	subs	r1, r3, r0
 8014c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c50:	2aa5      	cmp	r2, #165	; 0xa5
 8014c52:	d0fa      	beq.n	8014c4a <vTaskGetInfo+0x6e>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014c54:	0889      	lsrs	r1, r1, #2
		return ( uint16_t ) ulCount;
 8014c56:	8421      	strh	r1, [r4, #32]
 8014c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t ulCount = 0U;
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	e7f9      	b.n	8014c54 <vTaskGetInfo+0x78>
 8014c60:	20000ad8 	.word	0x20000ad8

08014c64 <prvListTasksWithinSingleList>:
	{
 8014c64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014c68:	680f      	ldr	r7, [r1, #0]
 8014c6a:	b327      	cbz	r7, 8014cb6 <prvListTasksWithinSingleList+0x52>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8014c6c:	684b      	ldr	r3, [r1, #4]
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	604b      	str	r3, [r1, #4]
 8014c72:	f101 0908 	add.w	r9, r1, #8
 8014c76:	454b      	cmp	r3, r9
 8014c78:	bf04      	itt	eq
 8014c7a:	68cb      	ldreq	r3, [r1, #12]
 8014c7c:	604b      	streq	r3, [r1, #4]
 8014c7e:	4690      	mov	r8, r2
 8014c80:	460c      	mov	r4, r1
 8014c82:	684b      	ldr	r3, [r1, #4]
 8014c84:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8014c88:	4605      	mov	r5, r0
	UBaseType_t uxTask = 0;
 8014c8a:	2700      	movs	r7, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014c8c:	f04f 0a01 	mov.w	sl, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8014c90:	6863      	ldr	r3, [r4, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	6063      	str	r3, [r4, #4]
 8014c96:	4599      	cmp	r9, r3
 8014c98:	bf04      	itt	eq
 8014c9a:	68e3      	ldreq	r3, [r4, #12]
 8014c9c:	6063      	streq	r3, [r4, #4]
 8014c9e:	6863      	ldr	r3, [r4, #4]
 8014ca0:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014ca2:	4643      	mov	r3, r8
 8014ca4:	4652      	mov	r2, sl
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	4630      	mov	r0, r6
 8014caa:	f7ff ff97 	bl	8014bdc <vTaskGetInfo>
				uxTask++;
 8014cae:	3701      	adds	r7, #1
 8014cb0:	3524      	adds	r5, #36	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8014cb2:	45b3      	cmp	fp, r6
 8014cb4:	d1ec      	bne.n	8014c90 <prvListTasksWithinSingleList+0x2c>
	}
 8014cb6:	4638      	mov	r0, r7
 8014cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014cbc <uxTaskGetSystemState>:
	{
 8014cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	460c      	mov	r4, r1
 8014cc4:	4616      	mov	r6, r2
		vTaskSuspendAll();
 8014cc6:	f7ff fc1b 	bl	8014500 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8014cca:	4b24      	ldr	r3, [pc, #144]	; (8014d5c <uxTaskGetSystemState+0xa0>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	42a3      	cmp	r3, r4
 8014cd0:	d842      	bhi.n	8014d58 <uxTaskGetSystemState+0x9c>
 8014cd2:	4b23      	ldr	r3, [pc, #140]	; (8014d60 <uxTaskGetSystemState+0xa4>)
 8014cd4:	f103 0578 	add.w	r5, r3, #120	; 0x78
 8014cd8:	f1a3 0814 	sub.w	r8, r3, #20
 8014cdc:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8014cde:	f04f 0901 	mov.w	r9, #1
 8014ce2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8014ce6:	464a      	mov	r2, r9
 8014ce8:	4629      	mov	r1, r5
 8014cea:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8014cee:	f7ff ffb9 	bl	8014c64 <prvListTasksWithinSingleList>
 8014cf2:	4404      	add	r4, r0
 8014cf4:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cf6:	4545      	cmp	r5, r8
 8014cf8:	d1f3      	bne.n	8014ce2 <uxTaskGetSystemState+0x26>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014cfa:	4b1a      	ldr	r3, [pc, #104]	; (8014d64 <uxTaskGetSystemState+0xa8>)
 8014cfc:	6819      	ldr	r1, [r3, #0]
 8014cfe:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8014d02:	2202      	movs	r2, #2
 8014d04:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8014d08:	f7ff ffac 	bl	8014c64 <prvListTasksWithinSingleList>
 8014d0c:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8014d0e:	4b16      	ldr	r3, [pc, #88]	; (8014d68 <uxTaskGetSystemState+0xac>)
 8014d10:	6819      	ldr	r1, [r3, #0]
 8014d12:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8014d16:	2202      	movs	r2, #2
 8014d18:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8014d1c:	f7ff ffa2 	bl	8014c64 <prvListTasksWithinSingleList>
 8014d20:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014d22:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8014d26:	2204      	movs	r2, #4
 8014d28:	4910      	ldr	r1, [pc, #64]	; (8014d6c <uxTaskGetSystemState+0xb0>)
 8014d2a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8014d2e:	f7ff ff99 	bl	8014c64 <prvListTasksWithinSingleList>
 8014d32:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8014d34:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8014d38:	2203      	movs	r2, #3
 8014d3a:	490d      	ldr	r1, [pc, #52]	; (8014d70 <uxTaskGetSystemState+0xb4>)
 8014d3c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8014d40:	f7ff ff90 	bl	8014c64 <prvListTasksWithinSingleList>
 8014d44:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8014d46:	b116      	cbz	r6, 8014d4e <uxTaskGetSystemState+0x92>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014d48:	f002 fc58 	bl	80175fc <xGetRunTimeCounterValue>
 8014d4c:	6030      	str	r0, [r6, #0]
		( void ) xTaskResumeAll();
 8014d4e:	f7ff fcb1 	bl	80146b4 <xTaskResumeAll>
	}
 8014d52:	4620      	mov	r0, r4
 8014d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014d58:	2400      	movs	r4, #0
 8014d5a:	e7f8      	b.n	8014d4e <uxTaskGetSystemState+0x92>
 8014d5c:	20000b74 	.word	0x20000b74
 8014d60:	20000ae4 	.word	0x20000ae4
 8014d64:	20000adc 	.word	0x20000adc
 8014d68:	20000ae0 	.word	0x20000ae0
 8014d6c:	20000bec 	.word	0x20000bec
 8014d70:	20000bd8 	.word	0x20000bd8

08014d74 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8014d74:	4b01      	ldr	r3, [pc, #4]	; (8014d7c <xTaskGetCurrentTaskHandle+0x8>)
 8014d76:	6818      	ldr	r0, [r3, #0]
	}
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	20000ad8 	.word	0x20000ad8

08014d80 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8014d80:	4b05      	ldr	r3, [pc, #20]	; (8014d98 <xTaskGetSchedulerState+0x18>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	b133      	cbz	r3, 8014d94 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d86:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <xTaskGetSchedulerState+0x1c>)
 8014d88:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	bf0c      	ite	eq
 8014d8e:	2002      	moveq	r0, #2
 8014d90:	2000      	movne	r0, #0
 8014d92:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014d94:	2001      	movs	r0, #1
	}
 8014d96:	4770      	bx	lr
 8014d98:	20000bd4 	.word	0x20000bd4
 8014d9c:	20000b80 	.word	0x20000b80

08014da0 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8014da0:	2800      	cmp	r0, #0
 8014da2:	d044      	beq.n	8014e2e <vTaskPriorityInherit+0x8e>
	{
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014da8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014daa:	4921      	ldr	r1, [pc, #132]	; (8014e30 <vTaskPriorityInherit+0x90>)
 8014dac:	6809      	ldr	r1, [r1, #0]
 8014dae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014db0:	428a      	cmp	r2, r1
 8014db2:	d214      	bcs.n	8014dde <vTaskPriorityInherit+0x3e>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014db4:	6981      	ldr	r1, [r0, #24]
 8014db6:	2900      	cmp	r1, #0
 8014db8:	db05      	blt.n	8014dc6 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dba:	491d      	ldr	r1, [pc, #116]	; (8014e30 <vTaskPriorityInherit+0x90>)
 8014dbc:	6809      	ldr	r1, [r1, #0]
 8014dbe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014dc0:	f1c1 0107 	rsb	r1, r1, #7
 8014dc4:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014dc6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8014dca:	491a      	ldr	r1, [pc, #104]	; (8014e34 <vTaskPriorityInherit+0x94>)
 8014dcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014dd0:	6961      	ldr	r1, [r4, #20]
 8014dd2:	4291      	cmp	r1, r2
 8014dd4:	d004      	beq.n	8014de0 <vTaskPriorityInherit+0x40>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014dd6:	4a16      	ldr	r2, [pc, #88]	; (8014e30 <vTaskPriorityInherit+0x90>)
 8014dd8:	6812      	ldr	r2, [r2, #0]
 8014dda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014ddc:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014dde:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014de0:	1d25      	adds	r5, r4, #4
 8014de2:	4628      	mov	r0, r5
 8014de4:	f7fe f9ac 	bl	8013140 <uxListRemove>
 8014de8:	b970      	cbnz	r0, 8014e08 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014dec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014df0:	4a10      	ldr	r2, [pc, #64]	; (8014e34 <vTaskPriorityInherit+0x94>)
 8014df2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014df6:	b93a      	cbnz	r2, 8014e08 <vTaskPriorityInherit+0x68>
 8014df8:	480f      	ldr	r0, [pc, #60]	; (8014e38 <vTaskPriorityInherit+0x98>)
 8014dfa:	6802      	ldr	r2, [r0, #0]
 8014dfc:	2101      	movs	r1, #1
 8014dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8014e02:	ea22 0303 	bic.w	r3, r2, r3
 8014e06:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e08:	4b09      	ldr	r3, [pc, #36]	; (8014e30 <vTaskPriorityInherit+0x90>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014e0e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8014e10:	4a09      	ldr	r2, [pc, #36]	; (8014e38 <vTaskPriorityInherit+0x98>)
 8014e12:	6811      	ldr	r1, [r2, #0]
 8014e14:	2301      	movs	r3, #1
 8014e16:	4083      	lsls	r3, r0
 8014e18:	430b      	orrs	r3, r1
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014e20:	4629      	mov	r1, r5
 8014e22:	4b04      	ldr	r3, [pc, #16]	; (8014e34 <vTaskPriorityInherit+0x94>)
 8014e24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014e28:	f7fe f964 	bl	80130f4 <vListInsertEnd>
 8014e2c:	bd38      	pop	{r3, r4, r5, pc}
 8014e2e:	4770      	bx	lr
 8014e30:	20000ad8 	.word	0x20000ad8
 8014e34:	20000ae4 	.word	0x20000ae4
 8014e38:	20000b88 	.word	0x20000b88

08014e3c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d046      	beq.n	8014ece <xTaskPriorityDisinherit+0x92>
	{
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8014e44:	4b24      	ldr	r3, [pc, #144]	; (8014ed8 <xTaskPriorityDisinherit+0x9c>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4298      	cmp	r0, r3
 8014e4a:	d004      	beq.n	8014e56 <xTaskPriorityDisinherit+0x1a>
 8014e4c:	f640 61bf 	movw	r1, #3775	; 0xebf
 8014e50:	4822      	ldr	r0, [pc, #136]	; (8014edc <xTaskPriorityDisinherit+0xa0>)
 8014e52:	f002 fa25 	bl	80172a0 <vAssertCalled>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014e58:	b14b      	cbz	r3, 8014e6e <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8014e5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014e5c:	3b01      	subs	r3, #1
 8014e5e:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014e60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014e62:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8014e64:	4291      	cmp	r1, r2
 8014e66:	d034      	beq.n	8014ed2 <xTaskPriorityDisinherit+0x96>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014e68:	b13b      	cbz	r3, 8014e7a <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
 8014e6a:	2000      	movs	r0, #0
	}
 8014e6c:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 8014e6e:	f640 61c1 	movw	r1, #3777	; 0xec1
 8014e72:	481a      	ldr	r0, [pc, #104]	; (8014edc <xTaskPriorityDisinherit+0xa0>)
 8014e74:	f002 fa14 	bl	80172a0 <vAssertCalled>
 8014e78:	e7ef      	b.n	8014e5a <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e7a:	1d25      	adds	r5, r4, #4
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f7fe f95f 	bl	8013140 <uxListRemove>
 8014e82:	b970      	cbnz	r0, 8014ea2 <xTaskPriorityDisinherit+0x66>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014e86:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014e8a:	4a15      	ldr	r2, [pc, #84]	; (8014ee0 <xTaskPriorityDisinherit+0xa4>)
 8014e8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014e90:	b93a      	cbnz	r2, 8014ea2 <xTaskPriorityDisinherit+0x66>
 8014e92:	4814      	ldr	r0, [pc, #80]	; (8014ee4 <xTaskPriorityDisinherit+0xa8>)
 8014e94:	6802      	ldr	r2, [r0, #0]
 8014e96:	2101      	movs	r1, #1
 8014e98:	fa01 f303 	lsl.w	r3, r1, r3
 8014e9c:	ea22 0303 	bic.w	r3, r2, r3
 8014ea0:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014ea2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014ea4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ea6:	f1c0 0307 	rsb	r3, r0, #7
 8014eaa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014eac:	4a0d      	ldr	r2, [pc, #52]	; (8014ee4 <xTaskPriorityDisinherit+0xa8>)
 8014eae:	6811      	ldr	r1, [r2, #0]
 8014eb0:	2401      	movs	r4, #1
 8014eb2:	fa04 f300 	lsl.w	r3, r4, r0
 8014eb6:	430b      	orrs	r3, r1
 8014eb8:	6013      	str	r3, [r2, #0]
 8014eba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014ebe:	4629      	mov	r1, r5
 8014ec0:	4b07      	ldr	r3, [pc, #28]	; (8014ee0 <xTaskPriorityDisinherit+0xa4>)
 8014ec2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014ec6:	f7fe f915 	bl	80130f4 <vListInsertEnd>
					xReturn = pdTRUE;
 8014eca:	4620      	mov	r0, r4
 8014ecc:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8014ece:	2000      	movs	r0, #0
 8014ed0:	4770      	bx	lr
 8014ed2:	2000      	movs	r0, #0
 8014ed4:	bd38      	pop	{r3, r4, r5, pc}
 8014ed6:	bf00      	nop
 8014ed8:	20000ad8 	.word	0x20000ad8
 8014edc:	0801ba30 	.word	0x0801ba30
 8014ee0:	20000ae4 	.word	0x20000ae4
 8014ee4:	20000b88 	.word	0x20000b88

08014ee8 <vTaskList>:
	{
 8014ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014eec:	b085      	sub	sp, #20
 8014eee:	4605      	mov	r5, r0
		*pcWriteBuffer = 0x00;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8014ef4:	4b36      	ldr	r3, [pc, #216]	; (8014fd0 <vTaskList+0xe8>)
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8014efa:	6818      	ldr	r0, [r3, #0]
 8014efc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8014f00:	0080      	lsls	r0, r0, #2
 8014f02:	f7fe fb01 	bl	8013508 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8014f06:	2800      	cmp	r0, #0
 8014f08:	d05f      	beq.n	8014fca <vTaskList+0xe2>
 8014f0a:	4604      	mov	r4, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8014f0c:	9903      	ldr	r1, [sp, #12]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	f7ff fed4 	bl	8014cbc <uxTaskGetSystemState>
 8014f14:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
 8014f16:	2300      	movs	r3, #0
 8014f18:	9302      	str	r3, [sp, #8]
 8014f1a:	9a02      	ldr	r2, [sp, #8]
 8014f1c:	9b03      	ldr	r3, [sp, #12]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d250      	bcs.n	8014fc4 <vTaskList+0xdc>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8014f22:	f04f 0942 	mov.w	r9, #66	; 0x42
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8014f26:	f04f 0853 	mov.w	r8, #83	; 0x53
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8014f2a:	4f2a      	ldr	r7, [pc, #168]	; (8014fd4 <vTaskList+0xec>)
 8014f2c:	e035      	b.n	8014f9a <vTaskList+0xb2>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8014f2e:	464e      	mov	r6, r9
 8014f30:	e006      	b.n	8014f40 <vTaskList+0x58>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8014f32:	4646      	mov	r6, r8
										break;
 8014f34:	e004      	b.n	8014f40 <vTaskList+0x58>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 8014f36:	2644      	movs	r6, #68	; 0x44
										break;
 8014f38:	e002      	b.n	8014f40 <vTaskList+0x58>
										cStatus = 0x00;
 8014f3a:	2600      	movs	r6, #0
										break;
 8014f3c:	e000      	b.n	8014f40 <vTaskList+0x58>
					case eReady:		cStatus = tskREADY_CHAR;
 8014f3e:	2652      	movs	r6, #82	; 0x52
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8014f40:	9b02      	ldr	r3, [sp, #8]
 8014f42:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8014f46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f4a:	6859      	ldr	r1, [r3, #4]
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f7ff f879 	bl	8014044 <prvWriteNameToBuffer>
 8014f52:	4605      	mov	r5, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8014f54:	9b02      	ldr	r3, [sp, #8]
 8014f56:	9a02      	ldr	r2, [sp, #8]
 8014f58:	9902      	ldr	r1, [sp, #8]
 8014f5a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8014f5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f62:	691b      	ldr	r3, [r3, #16]
 8014f64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014f68:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014f6c:	6889      	ldr	r1, [r1, #8]
 8014f6e:	9101      	str	r1, [sp, #4]
 8014f70:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8014f74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014f78:	8c12      	ldrh	r2, [r2, #32]
 8014f7a:	9200      	str	r2, [sp, #0]
 8014f7c:	4632      	mov	r2, r6
 8014f7e:	4639      	mov	r1, r7
 8014f80:	f001 fed1 	bl	8016d26 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8014f84:	4628      	mov	r0, r5
 8014f86:	f7eb f92d 	bl	80001e4 <strlen>
 8014f8a:	4405      	add	r5, r0
			for( x = 0; x < uxArraySize; x++ )
 8014f8c:	9b02      	ldr	r3, [sp, #8]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	9302      	str	r3, [sp, #8]
 8014f92:	9a02      	ldr	r2, [sp, #8]
 8014f94:	9b03      	ldr	r3, [sp, #12]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d214      	bcs.n	8014fc4 <vTaskList+0xdc>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8014f9a:	9b02      	ldr	r3, [sp, #8]
 8014f9c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8014fa0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014fa4:	7b1b      	ldrb	r3, [r3, #12]
 8014fa6:	3b01      	subs	r3, #1
 8014fa8:	2b03      	cmp	r3, #3
 8014faa:	d8c6      	bhi.n	8014f3a <vTaskList+0x52>
 8014fac:	a201      	add	r2, pc, #4	; (adr r2, 8014fb4 <vTaskList+0xcc>)
 8014fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fb2:	bf00      	nop
 8014fb4:	08014f3f 	.word	0x08014f3f
 8014fb8:	08014f2f 	.word	0x08014f2f
 8014fbc:	08014f33 	.word	0x08014f33
 8014fc0:	08014f37 	.word	0x08014f37
			vPortFree( pxTaskStatusArray );
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f7fe fb05 	bl	80135d4 <vPortFree>
	}
 8014fca:	b005      	add	sp, #20
 8014fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fd0:	20000b74 	.word	0x20000b74
 8014fd4:	0801ba6c 	.word	0x0801ba6c

08014fd8 <vTaskGetRunTimeStats>:
	{
 8014fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fdc:	b084      	sub	sp, #16
 8014fde:	4604      	mov	r4, r0
		*pcWriteBuffer = 0x00;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8014fe4:	4b2e      	ldr	r3, [pc, #184]	; (80150a0 <vTaskGetRunTimeStats+0xc8>)
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8014fea:	6818      	ldr	r0, [r3, #0]
 8014fec:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8014ff0:	0080      	lsls	r0, r0, #2
 8014ff2:	f7fe fa89 	bl	8013508 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d04e      	beq.n	8015098 <vTaskGetRunTimeStats+0xc0>
 8014ffa:	4605      	mov	r5, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8014ffc:	9903      	ldr	r1, [sp, #12]
 8014ffe:	aa01      	add	r2, sp, #4
 8015000:	f7ff fe5c 	bl	8014cbc <uxTaskGetSystemState>
 8015004:	9003      	str	r0, [sp, #12]
			ulTotalTime /= 100UL;
 8015006:	4a27      	ldr	r2, [pc, #156]	; (80150a4 <vTaskGetRunTimeStats+0xcc>)
 8015008:	9b01      	ldr	r3, [sp, #4]
 801500a:	fba2 2303 	umull	r2, r3, r2, r3
 801500e:	095b      	lsrs	r3, r3, #5
 8015010:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0 )
 8015012:	2b00      	cmp	r3, #0
 8015014:	d03d      	beq.n	8015092 <vTaskGetRunTimeStats+0xba>
				for( x = 0; x < uxArraySize; x++ )
 8015016:	2300      	movs	r3, #0
 8015018:	9302      	str	r3, [sp, #8]
 801501a:	9a02      	ldr	r2, [sp, #8]
 801501c:	9b03      	ldr	r3, [sp, #12]
 801501e:	429a      	cmp	r2, r3
 8015020:	d237      	bcs.n	8015092 <vTaskGetRunTimeStats+0xba>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8015022:	4f21      	ldr	r7, [pc, #132]	; (80150a8 <vTaskGetRunTimeStats+0xd0>)
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8015024:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80150ac <vTaskGetRunTimeStats+0xd4>
 8015028:	e013      	b.n	8015052 <vTaskGetRunTimeStats+0x7a>
 801502a:	9b02      	ldr	r3, [sp, #8]
 801502c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8015030:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015034:	699a      	ldr	r2, [r3, #24]
 8015036:	4641      	mov	r1, r8
 8015038:	f001 fe75 	bl	8016d26 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 801503c:	4620      	mov	r0, r4
 801503e:	f7eb f8d1 	bl	80001e4 <strlen>
 8015042:	4404      	add	r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8015044:	9b02      	ldr	r3, [sp, #8]
 8015046:	3301      	adds	r3, #1
 8015048:	9302      	str	r3, [sp, #8]
 801504a:	9a02      	ldr	r2, [sp, #8]
 801504c:	9b03      	ldr	r3, [sp, #12]
 801504e:	429a      	cmp	r2, r3
 8015050:	d21f      	bcs.n	8015092 <vTaskGetRunTimeStats+0xba>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8015052:	9b02      	ldr	r3, [sp, #8]
 8015054:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8015058:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801505c:	699e      	ldr	r6, [r3, #24]
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015064:	9b02      	ldr	r3, [sp, #8]
 8015066:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801506a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801506e:	6859      	ldr	r1, [r3, #4]
 8015070:	4620      	mov	r0, r4
 8015072:	f7fe ffe7 	bl	8014044 <prvWriteNameToBuffer>
 8015076:	4604      	mov	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8015078:	2e00      	cmp	r6, #0
 801507a:	d0d6      	beq.n	801502a <vTaskGetRunTimeStats+0x52>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801507c:	9b02      	ldr	r3, [sp, #8]
 801507e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8015082:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8015086:	4633      	mov	r3, r6
 8015088:	6992      	ldr	r2, [r2, #24]
 801508a:	4639      	mov	r1, r7
 801508c:	f001 fe4b 	bl	8016d26 <sprintf>
 8015090:	e7d4      	b.n	801503c <vTaskGetRunTimeStats+0x64>
			vPortFree( pxTaskStatusArray );
 8015092:	4628      	mov	r0, r5
 8015094:	f7fe fa9e 	bl	80135d4 <vPortFree>
	}
 8015098:	b004      	add	sp, #16
 801509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509e:	bf00      	nop
 80150a0:	20000b74 	.word	0x20000b74
 80150a4:	51eb851f 	.word	0x51eb851f
 80150a8:	0801ba54 	.word	0x0801ba54
 80150ac:	0801ba60 	.word	0x0801ba60

080150b0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80150b0:	4b04      	ldr	r3, [pc, #16]	; (80150c4 <uxTaskResetEventItemValue+0x14>)
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150bc:	f1c3 0307 	rsb	r3, r3, #7
 80150c0:	6193      	str	r3, [r2, #24]
}
 80150c2:	4770      	bx	lr
 80150c4:	20000ad8 	.word	0x20000ad8

080150c8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80150c8:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	b123      	cbz	r3, 80150d8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80150ce:	4b04      	ldr	r3, [pc, #16]	; (80150e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80150d4:	3301      	adds	r3, #1
 80150d6:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80150d8:	4b01      	ldr	r3, [pc, #4]	; (80150e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80150da:	6818      	ldr	r0, [r3, #0]
	}
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	20000ad8 	.word	0x20000ad8

080150e4 <ulTaskNotifyTake>:
	{
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	4605      	mov	r5, r0
 80150e8:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 80150ea:	f7fe f883 	bl	80131f4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80150ee:	4b19      	ldr	r3, [pc, #100]	; (8015154 <ulTaskNotifyTake+0x70>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150f4:	b92b      	cbnz	r3, 8015102 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80150f6:	4b17      	ldr	r3, [pc, #92]	; (8015154 <ulTaskNotifyTake+0x70>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2201      	movs	r2, #1
 80150fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 8015100:	b9ac      	cbnz	r4, 801512e <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 8015102:	f7fe f899 	bl	8013238 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015106:	f7fe f875 	bl	80131f4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801510a:	4b12      	ldr	r3, [pc, #72]	; (8015154 <ulTaskNotifyTake+0x70>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
			if( ulReturn != 0UL )
 8015110:	b124      	cbz	r4, 801511c <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 8015112:	b9cd      	cbnz	r5, 8015148 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015114:	4b0f      	ldr	r3, [pc, #60]	; (8015154 <ulTaskNotifyTake+0x70>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	1e62      	subs	r2, r4, #1
 801511a:	665a      	str	r2, [r3, #100]	; 0x64
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801511c:	4b0d      	ldr	r3, [pc, #52]	; (8015154 <ulTaskNotifyTake+0x70>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	2200      	movs	r2, #0
 8015122:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		taskEXIT_CRITICAL();
 8015126:	f7fe f887 	bl	8013238 <vPortExitCritical>
	}
 801512a:	4620      	mov	r0, r4
 801512c:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801512e:	4611      	mov	r1, r2
 8015130:	4620      	mov	r0, r4
 8015132:	f7fe ff3b 	bl	8013fac <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8015136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801513a:	4b07      	ldr	r3, [pc, #28]	; (8015158 <ulTaskNotifyTake+0x74>)
 801513c:	601a      	str	r2, [r3, #0]
 801513e:	f3bf 8f4f 	dsb	sy
 8015142:	f3bf 8f6f 	isb	sy
 8015146:	e7dc      	b.n	8015102 <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015148:	4b02      	ldr	r3, [pc, #8]	; (8015154 <ulTaskNotifyTake+0x70>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2200      	movs	r2, #0
 801514e:	665a      	str	r2, [r3, #100]	; 0x64
 8015150:	e7e4      	b.n	801511c <ulTaskNotifyTake+0x38>
 8015152:	bf00      	nop
 8015154:	20000ad8 	.word	0x20000ad8
 8015158:	e000ed04 	.word	0xe000ed04

0801515c <xTaskGenericNotify>:
	{
 801515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515e:	460f      	mov	r7, r1
 8015160:	4615      	mov	r5, r2
 8015162:	461e      	mov	r6, r3
		configASSERT( xTaskToNotify );
 8015164:	4604      	mov	r4, r0
 8015166:	b188      	cbz	r0, 801518c <xTaskGenericNotify+0x30>
		taskENTER_CRITICAL();
 8015168:	f7fe f844 	bl	80131f4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 801516c:	b10e      	cbz	r6, 8015172 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801516e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015170:	6033      	str	r3, [r6, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015172:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8015176:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015178:	2202      	movs	r2, #2
 801517a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 801517e:	1e6a      	subs	r2, r5, #1
 8015180:	2a03      	cmp	r2, #3
 8015182:	d80c      	bhi.n	801519e <xTaskGenericNotify+0x42>
 8015184:	e8df f002 	tbb	[pc, r2]
 8015188:	18161208 	.word	0x18161208
		configASSERT( xTaskToNotify );
 801518c:	f241 01f5 	movw	r1, #4341	; 0x10f5
 8015190:	4822      	ldr	r0, [pc, #136]	; (801521c <xTaskGenericNotify+0xc0>)
 8015192:	f002 f885 	bl	80172a0 <vAssertCalled>
 8015196:	e7e7      	b.n	8015168 <xTaskGenericNotify+0xc>
					pxTCB->ulNotifiedValue |= ulValue;
 8015198:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801519a:	4317      	orrs	r7, r2
 801519c:	6667      	str	r7, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d00e      	beq.n	80151c0 <xTaskGenericNotify+0x64>
 80151a2:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 80151a4:	f7fe f848 	bl	8013238 <vPortExitCritical>
	}
 80151a8:	4620      	mov	r0, r4
 80151aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80151ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80151ae:	3201      	adds	r2, #1
 80151b0:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 80151b2:	e7f4      	b.n	801519e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 80151b4:	6667      	str	r7, [r4, #100]	; 0x64
					break;
 80151b6:	e7f2      	b.n	801519e <xTaskGenericNotify+0x42>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80151b8:	2b02      	cmp	r3, #2
 80151ba:	d02b      	beq.n	8015214 <xTaskGenericNotify+0xb8>
						pxTCB->ulNotifiedValue = ulValue;
 80151bc:	6667      	str	r7, [r4, #100]	; 0x64
 80151be:	e7ee      	b.n	801519e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80151c0:	1d25      	adds	r5, r4, #4
 80151c2:	4628      	mov	r0, r5
 80151c4:	f7fd ffbc 	bl	8013140 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80151c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80151ca:	4a15      	ldr	r2, [pc, #84]	; (8015220 <xTaskGenericNotify+0xc4>)
 80151cc:	6811      	ldr	r1, [r2, #0]
 80151ce:	2301      	movs	r3, #1
 80151d0:	4083      	lsls	r3, r0
 80151d2:	430b      	orrs	r3, r1
 80151d4:	6013      	str	r3, [r2, #0]
 80151d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80151da:	4629      	mov	r1, r5
 80151dc:	4b11      	ldr	r3, [pc, #68]	; (8015224 <xTaskGenericNotify+0xc8>)
 80151de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80151e2:	f7fd ff87 	bl	80130f4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80151e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80151e8:	b123      	cbz	r3, 80151f4 <xTaskGenericNotify+0x98>
 80151ea:	f241 112d 	movw	r1, #4397	; 0x112d
 80151ee:	480b      	ldr	r0, [pc, #44]	; (801521c <xTaskGenericNotify+0xc0>)
 80151f0:	f002 f856 	bl	80172a0 <vAssertCalled>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80151f4:	4b0c      	ldr	r3, [pc, #48]	; (8015228 <xTaskGenericNotify+0xcc>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80151fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d90b      	bls.n	8015218 <xTaskGenericNotify+0xbc>
					taskYIELD_IF_USING_PREEMPTION();
 8015200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015204:	4b09      	ldr	r3, [pc, #36]	; (801522c <xTaskGenericNotify+0xd0>)
 8015206:	601a      	str	r2, [r3, #0]
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	f3bf 8f6f 	isb	sy
 8015210:	2401      	movs	r4, #1
 8015212:	e7c7      	b.n	80151a4 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 8015214:	2400      	movs	r4, #0
 8015216:	e7c5      	b.n	80151a4 <xTaskGenericNotify+0x48>
 8015218:	2401      	movs	r4, #1
 801521a:	e7c3      	b.n	80151a4 <xTaskGenericNotify+0x48>
 801521c:	0801ba30 	.word	0x0801ba30
 8015220:	20000b88 	.word	0x20000b88
 8015224:	20000ae4 	.word	0x20000ae4
 8015228:	20000ad8 	.word	0x20000ad8
 801522c:	e000ed04 	.word	0xe000ed04

08015230 <vTaskNotifyGiveFromISR>:
	{
 8015230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015232:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 8015234:	4604      	mov	r4, r0
 8015236:	b1c8      	cbz	r0, 801526c <vTaskNotifyGiveFromISR+0x3c>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015238:	f7fe f90e 	bl	8013458 <vPortValidateInterruptPriority>
	__asm volatile
 801523c:	f3ef 8511 	mrs	r5, BASEPRI
 8015240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015244:	f383 8811 	msr	BASEPRI, r3
 8015248:	f3bf 8f6f 	isb	sy
 801524c:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015250:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8015254:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015256:	2202      	movs	r2, #2
 8015258:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			( pxTCB->ulNotifiedValue )++;
 801525c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801525e:	3201      	adds	r2, #1
 8015260:	6662      	str	r2, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015262:	2b01      	cmp	r3, #1
 8015264:	d008      	beq.n	8015278 <vTaskNotifyGiveFromISR+0x48>
	__asm volatile
 8015266:	f385 8811 	msr	BASEPRI, r5
 801526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
 801526c:	f241 11db 	movw	r1, #4571	; 0x11db
 8015270:	481a      	ldr	r0, [pc, #104]	; (80152dc <vTaskNotifyGiveFromISR+0xac>)
 8015272:	f002 f815 	bl	80172a0 <vAssertCalled>
 8015276:	e7df      	b.n	8015238 <vTaskNotifyGiveFromISR+0x8>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801527a:	b123      	cbz	r3, 8015286 <vTaskNotifyGiveFromISR+0x56>
 801527c:	f241 2101 	movw	r1, #4609	; 0x1201
 8015280:	4816      	ldr	r0, [pc, #88]	; (80152dc <vTaskNotifyGiveFromISR+0xac>)
 8015282:	f002 f80d 	bl	80172a0 <vAssertCalled>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015286:	4b16      	ldr	r3, [pc, #88]	; (80152e0 <vTaskNotifyGiveFromISR+0xb0>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	b9e3      	cbnz	r3, 80152c6 <vTaskNotifyGiveFromISR+0x96>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801528c:	1d27      	adds	r7, r4, #4
 801528e:	4638      	mov	r0, r7
 8015290:	f7fd ff56 	bl	8013140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015294:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015296:	4a13      	ldr	r2, [pc, #76]	; (80152e4 <vTaskNotifyGiveFromISR+0xb4>)
 8015298:	6811      	ldr	r1, [r2, #0]
 801529a:	2301      	movs	r3, #1
 801529c:	4083      	lsls	r3, r0
 801529e:	430b      	orrs	r3, r1
 80152a0:	6013      	str	r3, [r2, #0]
 80152a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80152a6:	4639      	mov	r1, r7
 80152a8:	4b0f      	ldr	r3, [pc, #60]	; (80152e8 <vTaskNotifyGiveFromISR+0xb8>)
 80152aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80152ae:	f7fd ff21 	bl	80130f4 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80152b2:	4b0e      	ldr	r3, [pc, #56]	; (80152ec <vTaskNotifyGiveFromISR+0xbc>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80152b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d9d3      	bls.n	8015266 <vTaskNotifyGiveFromISR+0x36>
					if( pxHigherPriorityTaskWoken != NULL )
 80152be:	b146      	cbz	r6, 80152d2 <vTaskNotifyGiveFromISR+0xa2>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80152c0:	2301      	movs	r3, #1
 80152c2:	6033      	str	r3, [r6, #0]
 80152c4:	e7cf      	b.n	8015266 <vTaskNotifyGiveFromISR+0x36>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80152c6:	f104 0118 	add.w	r1, r4, #24
 80152ca:	4809      	ldr	r0, [pc, #36]	; (80152f0 <vTaskNotifyGiveFromISR+0xc0>)
 80152cc:	f7fd ff12 	bl	80130f4 <vListInsertEnd>
 80152d0:	e7ef      	b.n	80152b2 <vTaskNotifyGiveFromISR+0x82>
						xYieldPending = pdTRUE;
 80152d2:	2201      	movs	r2, #1
 80152d4:	4b07      	ldr	r3, [pc, #28]	; (80152f4 <vTaskNotifyGiveFromISR+0xc4>)
 80152d6:	601a      	str	r2, [r3, #0]
 80152d8:	e7c5      	b.n	8015266 <vTaskNotifyGiveFromISR+0x36>
 80152da:	bf00      	nop
 80152dc:	0801ba30 	.word	0x0801ba30
 80152e0:	20000b80 	.word	0x20000b80
 80152e4:	20000b88 	.word	0x20000b88
 80152e8:	20000ae4 	.word	0x20000ae4
 80152ec:	20000ad8 	.word	0x20000ad8
 80152f0:	20000bc0 	.word	0x20000bc0
 80152f4:	20000c04 	.word	0x20000c04

080152f8 <prvPWDCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

static BaseType_t prvPWDCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80152f8:	b508      	push	{r3, lr}
	( void ) pcCommandString;

	/* Copy the current working directory into the output buffer. */
	ff_getcwd( pcWriteBuffer, xWriteBufferLen );
 80152fa:	f7f3 ffd1 	bl	80092a0 <ff_getcwd>
	return pdFALSE;
}
 80152fe:	2000      	movs	r0, #0
 8015300:	bd08      	pop	{r3, pc}
	...

08015304 <prvCOPYCommand>:
{
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015308:	b089      	sub	sp, #36	; 0x24
 801530a:	4604      	mov	r4, r0
 801530c:	4689      	mov	r9, r1
 801530e:	4615      	mov	r5, r2
	pcDestinationFile = FreeRTOS_CLIGetParameter
 8015310:	aa07      	add	r2, sp, #28
 8015312:	2102      	movs	r1, #2
 8015314:	4628      	mov	r0, r5
 8015316:	f7ee fbb3 	bl	8003a80 <FreeRTOS_CLIGetParameter>
	configASSERT( pcDestinationFile );
 801531a:	4606      	mov	r6, r0
 801531c:	2800      	cmp	r0, #0
 801531e:	d034      	beq.n	801538a <prvCOPYCommand+0x86>
	pcSourceFile = ( char * ) FreeRTOS_CLIGetParameter
 8015320:	aa07      	add	r2, sp, #28
 8015322:	2101      	movs	r1, #1
 8015324:	4628      	mov	r0, r5
 8015326:	f7ee fbab 	bl	8003a80 <FreeRTOS_CLIGetParameter>
	configASSERT( pcSourceFile );
 801532a:	4605      	mov	r5, r0
 801532c:	2800      	cmp	r0, #0
 801532e:	d032      	beq.n	8015396 <prvCOPYCommand+0x92>
	pcSourceFile[ xParameterStringLength ] = 0x00;
 8015330:	2200      	movs	r2, #0
 8015332:	9b07      	ldr	r3, [sp, #28]
 8015334:	54ea      	strb	r2, [r5, r3]
	if( ff_stat( pcSourceFile, &xStat ) == FF_ERR_NONE )
 8015336:	a901      	add	r1, sp, #4
 8015338:	4628      	mov	r0, r5
 801533a:	f7f3 ff1b 	bl	8009174 <ff_stat>
 801533e:	bb80      	cbnz	r0, 80153a2 <prvCOPYCommand+0x9e>
 8015340:	9f02      	ldr	r7, [sp, #8]
	if( lSourceLength == 0 )
 8015342:	b377      	cbz	r7, 80153a2 <prvCOPYCommand+0x9e>
		if( ff_stat( pcDestinationFile, &xStat ) == FF_ERR_NONE )
 8015344:	a901      	add	r1, sp, #4
 8015346:	4630      	mov	r0, r6
 8015348:	f7f3 ff14 	bl	8009174 <ff_stat>
 801534c:	2800      	cmp	r0, #0
 801534e:	d164      	bne.n	801541a <prvCOPYCommand+0x116>
			lDestinationLength = xStat.st_size;
 8015350:	9a02      	ldr	r2, [sp, #8]
		if( xStat.st_mode == FF_IFDIR )
 8015352:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801535a:	d03c      	beq.n	80153d6 <prvCOPYCommand+0xd2>
		else if( lDestinationLength != 0 )
 801535c:	2a00      	cmp	r2, #0
 801535e:	d061      	beq.n	8015424 <prvCOPYCommand+0x120>
			sprintf( pcWriteBuffer, "Error: Destination file already exists" );
 8015360:	4f4d      	ldr	r7, [pc, #308]	; (8015498 <prvCOPYCommand+0x194>)
 8015362:	4625      	mov	r5, r4
 8015364:	f107 0e20 	add.w	lr, r7, #32
 8015368:	463e      	mov	r6, r7
 801536a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801536c:	6028      	str	r0, [r5, #0]
 801536e:	6069      	str	r1, [r5, #4]
 8015370:	60aa      	str	r2, [r5, #8]
 8015372:	60eb      	str	r3, [r5, #12]
 8015374:	4637      	mov	r7, r6
 8015376:	3510      	adds	r5, #16
 8015378:	4576      	cmp	r6, lr
 801537a:	d1f5      	bne.n	8015368 <prvCOPYCommand+0x64>
 801537c:	6830      	ldr	r0, [r6, #0]
 801537e:	6028      	str	r0, [r5, #0]
 8015380:	88b2      	ldrh	r2, [r6, #4]
 8015382:	79b3      	ldrb	r3, [r6, #6]
 8015384:	80aa      	strh	r2, [r5, #4]
 8015386:	71ab      	strb	r3, [r5, #6]
 8015388:	e018      	b.n	80153bc <prvCOPYCommand+0xb8>
	configASSERT( pcDestinationFile );
 801538a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801538e:	4843      	ldr	r0, [pc, #268]	; (801549c <prvCOPYCommand+0x198>)
 8015390:	f001 ff86 	bl	80172a0 <vAssertCalled>
 8015394:	e7c4      	b.n	8015320 <prvCOPYCommand+0x1c>
	configASSERT( pcSourceFile );
 8015396:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 801539a:	4840      	ldr	r0, [pc, #256]	; (801549c <prvCOPYCommand+0x198>)
 801539c:	f001 ff80 	bl	80172a0 <vAssertCalled>
 80153a0:	e7c6      	b.n	8015330 <prvCOPYCommand+0x2c>
		sprintf( pcWriteBuffer, "Source file does not exist" );
 80153a2:	4d3f      	ldr	r5, [pc, #252]	; (80154a0 <prvCOPYCommand+0x19c>)
 80153a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153a6:	6020      	str	r0, [r4, #0]
 80153a8:	6061      	str	r1, [r4, #4]
 80153aa:	60a2      	str	r2, [r4, #8]
 80153ac:	60e3      	str	r3, [r4, #12]
 80153ae:	cd03      	ldmia	r5!, {r0, r1}
 80153b0:	6120      	str	r0, [r4, #16]
 80153b2:	6161      	str	r1, [r4, #20]
 80153b4:	882a      	ldrh	r2, [r5, #0]
 80153b6:	78ab      	ldrb	r3, [r5, #2]
 80153b8:	8322      	strh	r2, [r4, #24]
 80153ba:	76a3      	strb	r3, [r4, #26]
	strcat( pcWriteBuffer, cliNEW_LINE );
 80153bc:	4620      	mov	r0, r4
 80153be:	f7ea ff11 	bl	80001e4 <strlen>
 80153c2:	1822      	adds	r2, r4, r0
 80153c4:	4b37      	ldr	r3, [pc, #220]	; (80154a4 <prvCOPYCommand+0x1a0>)
 80153c6:	8819      	ldrh	r1, [r3, #0]
 80153c8:	789b      	ldrb	r3, [r3, #2]
 80153ca:	5221      	strh	r1, [r4, r0]
 80153cc:	7093      	strb	r3, [r2, #2]
}
 80153ce:	2000      	movs	r0, #0
 80153d0:	b009      	add	sp, #36	; 0x24
 80153d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sprintf( pcWriteBuffer, "Error: Destination is a directory not a file" );
 80153d6:	4d34      	ldr	r5, [pc, #208]	; (80154a8 <prvCOPYCommand+0x1a4>)
 80153d8:	4626      	mov	r6, r4
 80153da:	f105 0e20 	add.w	lr, r5, #32
 80153de:	462f      	mov	r7, r5
 80153e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80153e2:	6030      	str	r0, [r6, #0]
 80153e4:	6071      	str	r1, [r6, #4]
 80153e6:	60b2      	str	r2, [r6, #8]
 80153e8:	60f3      	str	r3, [r6, #12]
 80153ea:	463d      	mov	r5, r7
 80153ec:	3610      	adds	r6, #16
 80153ee:	4577      	cmp	r7, lr
 80153f0:	d1f5      	bne.n	80153de <prvCOPYCommand+0xda>
 80153f2:	cd07      	ldmia	r5!, {r0, r1, r2}
 80153f4:	6030      	str	r0, [r6, #0]
 80153f6:	6071      	str	r1, [r6, #4]
 80153f8:	60b2      	str	r2, [r6, #8]
 80153fa:	782b      	ldrb	r3, [r5, #0]
 80153fc:	7333      	strb	r3, [r6, #12]
 80153fe:	e7dd      	b.n	80153bc <prvCOPYCommand+0xb8>
			sprintf( pcWriteBuffer, "Copy made" );
 8015400:	4b2a      	ldr	r3, [pc, #168]	; (80154ac <prvCOPYCommand+0x1a8>)
 8015402:	cb03      	ldmia	r3!, {r0, r1}
 8015404:	6020      	str	r0, [r4, #0]
 8015406:	6061      	str	r1, [r4, #4]
 8015408:	881b      	ldrh	r3, [r3, #0]
 801540a:	8123      	strh	r3, [r4, #8]
 801540c:	e7d6      	b.n	80153bc <prvCOPYCommand+0xb8>
									int32_t lSourceFileLength,
									const char *pcDestinationFile,
									char *pxWriteBuffer,
									size_t xWriteBufferLen )
{
int32_t lBytesRead = 0, lBytesToRead, lBytesRemaining;
 801540e:	2600      	movs	r6, #0
 8015410:	e036      	b.n	8015480 <prvCOPYCommand+0x17c>
 8015412:	2600      	movs	r6, #0
 8015414:	e02e      	b.n	8015474 <prvCOPYCommand+0x170>
	pxSourceFile = ff_fopen( pcSourceFile, "r" );
	pxDestinationFile = ff_fopen( pcDestinationFile, "a" );

	if( ( pxSourceFile != NULL ) && ( pxDestinationFile != NULL ) )
	{
		while( lBytesRead < lSourceFileLength )
 8015416:	2600      	movs	r6, #0
 8015418:	e02c      	b.n	8015474 <prvCOPYCommand+0x170>
		if( xStat.st_mode == FF_IFDIR )
 801541a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801541e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015422:	d0d8      	beq.n	80153d6 <prvCOPYCommand+0xd2>
	pxSourceFile = ff_fopen( pcSourceFile, "r" );
 8015424:	4922      	ldr	r1, [pc, #136]	; (80154b0 <prvCOPYCommand+0x1ac>)
 8015426:	4628      	mov	r0, r5
 8015428:	f7f3 fd69 	bl	8008efe <ff_fopen>
 801542c:	4682      	mov	sl, r0
	pxDestinationFile = ff_fopen( pcDestinationFile, "a" );
 801542e:	4921      	ldr	r1, [pc, #132]	; (80154b4 <prvCOPYCommand+0x1b0>)
 8015430:	4630      	mov	r0, r6
 8015432:	f7f3 fd64 	bl	8008efe <ff_fopen>
 8015436:	4683      	mov	fp, r0
	if( ( pxSourceFile != NULL ) && ( pxDestinationFile != NULL ) )
 8015438:	f1ba 0f00 	cmp.w	sl, #0
 801543c:	d0e7      	beq.n	801540e <prvCOPYCommand+0x10a>
 801543e:	f1bb 0f00 	cmp.w	fp, #0
 8015442:	d0e6      	beq.n	8015412 <prvCOPYCommand+0x10e>
		while( lBytesRead < lSourceFileLength )
 8015444:	2f00      	cmp	r7, #0
 8015446:	dde6      	ble.n	8015416 <prvCOPYCommand+0x112>
 8015448:	2600      	movs	r6, #0
			else
			{
				lBytesToRead = lBytesRemaining;
			}

			ff_fread( pxWriteBuffer, lBytesToRead, 1, pxSourceFile );
 801544a:	f04f 0801 	mov.w	r8, #1
			lBytesRemaining = lSourceFileLength - lBytesRead;
 801544e:	1bbd      	subs	r5, r7, r6
 8015450:	454d      	cmp	r5, r9
 8015452:	bfa8      	it	ge
 8015454:	464d      	movge	r5, r9
			ff_fread( pxWriteBuffer, lBytesToRead, 1, pxSourceFile );
 8015456:	4653      	mov	r3, sl
 8015458:	4642      	mov	r2, r8
 801545a:	4629      	mov	r1, r5
 801545c:	4620      	mov	r0, r4
 801545e:	f7f3 fd9f 	bl	8008fa0 <ff_fread>
			ff_fwrite( pxWriteBuffer, lBytesToRead, 1, pxDestinationFile );
 8015462:	465b      	mov	r3, fp
 8015464:	4642      	mov	r2, r8
 8015466:	4629      	mov	r1, r5
 8015468:	4620      	mov	r0, r4
 801546a:	f7f3 fdab 	bl	8008fc4 <ff_fwrite>

			lBytesRead += lBytesToRead;
 801546e:	442e      	add	r6, r5
		while( lBytesRead < lSourceFileLength )
 8015470:	42b7      	cmp	r7, r6
 8015472:	dcec      	bgt.n	801544e <prvCOPYCommand+0x14a>
		}
	}

	if( pxSourceFile != NULL )
	{
		ff_fclose( pxSourceFile );
 8015474:	4650      	mov	r0, sl
 8015476:	f7f3 fd67 	bl	8008f48 <ff_fclose>
	}

	if( pxSourceFile != NULL )
	{
		ff_fclose( pxDestinationFile );
 801547a:	4658      	mov	r0, fp
 801547c:	f7f3 fd64 	bl	8008f48 <ff_fclose>
		if( prvPerformCopy( pcSourceFile, lSourceLength, pcDestinationFile, pcWriteBuffer, xWriteBufferLen ) == pdPASS )
 8015480:	42b7      	cmp	r7, r6
 8015482:	d0bd      	beq.n	8015400 <prvCOPYCommand+0xfc>
			sprintf( pcWriteBuffer, "Error during copy" );
 8015484:	4d0c      	ldr	r5, [pc, #48]	; (80154b8 <prvCOPYCommand+0x1b4>)
 8015486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015488:	6020      	str	r0, [r4, #0]
 801548a:	6061      	str	r1, [r4, #4]
 801548c:	60a2      	str	r2, [r4, #8]
 801548e:	60e3      	str	r3, [r4, #12]
 8015490:	882b      	ldrh	r3, [r5, #0]
 8015492:	8223      	strh	r3, [r4, #16]
 8015494:	e792      	b.n	80153bc <prvCOPYCommand+0xb8>
 8015496:	bf00      	nop
 8015498:	0801bb1c 	.word	0x0801bb1c
 801549c:	0801ba8c 	.word	0x0801ba8c
 80154a0:	0801bad0 	.word	0x0801bad0
 80154a4:	0801af90 	.word	0x0801af90
 80154a8:	0801baec 	.word	0x0801baec
 80154ac:	0801bb44 	.word	0x0801bb44
 80154b0:	0801bcb4 	.word	0x0801bcb4
 80154b4:	08019bc4 	.word	0x08019bc4
 80154b8:	0801bb50 	.word	0x0801bb50

080154bc <prvRMDIRCommand>:
{
 80154bc:	b530      	push	{r4, r5, lr}
 80154be:	b083      	sub	sp, #12
 80154c0:	4604      	mov	r4, r0
 80154c2:	4610      	mov	r0, r2
	pcParameter = FreeRTOS_CLIGetParameter
 80154c4:	aa01      	add	r2, sp, #4
 80154c6:	2101      	movs	r1, #1
 80154c8:	f7ee fada 	bl	8003a80 <FreeRTOS_CLIGetParameter>
	configASSERT( pcParameter );
 80154cc:	4605      	mov	r5, r0
 80154ce:	b1a0      	cbz	r0, 80154fa <prvRMDIRCommand+0x3e>
	iReturned = ff_rmdir( pcParameter );
 80154d0:	4628      	mov	r0, r5
 80154d2:	f7f3 fdd2 	bl	800907a <ff_rmdir>
	if( iReturned == FF_ERR_NONE )
 80154d6:	b1b0      	cbz	r0, 8015506 <prvRMDIRCommand+0x4a>
		sprintf( pcWriteBuffer, "Error.  %s was not deleted", pcParameter );
 80154d8:	462a      	mov	r2, r5
 80154da:	490e      	ldr	r1, [pc, #56]	; (8015514 <prvRMDIRCommand+0x58>)
 80154dc:	4620      	mov	r0, r4
 80154de:	f001 fc22 	bl	8016d26 <sprintf>
	strcat( pcWriteBuffer, cliNEW_LINE );
 80154e2:	4620      	mov	r0, r4
 80154e4:	f7ea fe7e 	bl	80001e4 <strlen>
 80154e8:	1822      	adds	r2, r4, r0
 80154ea:	4b0b      	ldr	r3, [pc, #44]	; (8015518 <prvRMDIRCommand+0x5c>)
 80154ec:	8819      	ldrh	r1, [r3, #0]
 80154ee:	789b      	ldrb	r3, [r3, #2]
 80154f0:	5221      	strh	r1, [r4, r0]
 80154f2:	7093      	strb	r3, [r2, #2]
}
 80154f4:	2000      	movs	r0, #0
 80154f6:	b003      	add	sp, #12
 80154f8:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcParameter );
 80154fa:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80154fe:	4807      	ldr	r0, [pc, #28]	; (801551c <prvRMDIRCommand+0x60>)
 8015500:	f001 fece 	bl	80172a0 <vAssertCalled>
 8015504:	e7e4      	b.n	80154d0 <prvRMDIRCommand+0x14>
		sprintf( pcWriteBuffer, "%s was deleted", pcParameter );
 8015506:	462a      	mov	r2, r5
 8015508:	4905      	ldr	r1, [pc, #20]	; (8015520 <prvRMDIRCommand+0x64>)
 801550a:	4620      	mov	r0, r4
 801550c:	f001 fc0b 	bl	8016d26 <sprintf>
 8015510:	e7e7      	b.n	80154e2 <prvRMDIRCommand+0x26>
 8015512:	bf00      	nop
 8015514:	0801bc18 	.word	0x0801bc18
 8015518:	0801af90 	.word	0x0801af90
 801551c:	0801ba8c 	.word	0x0801ba8c
 8015520:	0801bc08 	.word	0x0801bc08

08015524 <prvCreateFileInfoString>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCreateFileInfoString( char *pcBuffer, FF_FindData_t *pxFindStruct )
{
 8015524:	b510      	push	{r4, lr}
 8015526:	b082      	sub	sp, #8
const char * pcWritableFile = "writable file", *pcReadOnlyFile = "read only file", *pcDirectory = "directory";
const char * pcAttrib;

	/* Point pcAttrib to a string that describes the file. */
	if( ( pxFindStruct->ucAttributes & FF_FAT_ATTR_DIR ) != 0 )
 8015528:	f891 312c 	ldrb.w	r3, [r1, #300]	; 0x12c
 801552c:	f013 0f10 	tst.w	r3, #16
 8015530:	d111      	bne.n	8015556 <prvCreateFileInfoString+0x32>
	{
		pcAttrib = pcDirectory;
	}
	else if( pxFindStruct->ucAttributes & FF_FAT_ATTR_READONLY )
 8015532:	f003 0301 	and.w	r3, r3, #1
	{
		pcAttrib = pcReadOnlyFile;
	}
	else
	{
		pcAttrib = pcWritableFile;
 8015536:	4c09      	ldr	r4, [pc, #36]	; (801555c <prvCreateFileInfoString+0x38>)
 8015538:	4a09      	ldr	r2, [pc, #36]	; (8015560 <prvCreateFileInfoString+0x3c>)
 801553a:	2b00      	cmp	r3, #0
 801553c:	bf14      	ite	ne
 801553e:	4613      	movne	r3, r2
 8015540:	4623      	moveq	r3, r4
	}

	/* Create a string that includes the file name, the file size and the
	attributes string. */
	sprintf( pcBuffer, "%s [%s] [size=%d]", pxFindStruct->pcFileName, pcAttrib, ( int ) pxFindStruct->ulFileSize );
 8015542:	f8d1 2124 	ldr.w	r2, [r1, #292]	; 0x124
 8015546:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 801554a:	9100      	str	r1, [sp, #0]
 801554c:	4905      	ldr	r1, [pc, #20]	; (8015564 <prvCreateFileInfoString+0x40>)
 801554e:	f001 fbea 	bl	8016d26 <sprintf>
}
 8015552:	b002      	add	sp, #8
 8015554:	bd10      	pop	{r4, pc}
		pcAttrib = pcDirectory;
 8015556:	4b04      	ldr	r3, [pc, #16]	; (8015568 <prvCreateFileInfoString+0x44>)
 8015558:	e7f3      	b.n	8015542 <prvCreateFileInfoString+0x1e>
 801555a:	bf00      	nop
 801555c:	0801bb80 	.word	0x0801bb80
 8015560:	0801bb70 	.word	0x0801bb70
 8015564:	0801bb90 	.word	0x0801bb90
 8015568:	0801bb64 	.word	0x0801bb64

0801556c <prvDELCommand>:
{
 801556c:	b530      	push	{r4, r5, lr}
 801556e:	b083      	sub	sp, #12
 8015570:	4604      	mov	r4, r0
 8015572:	4610      	mov	r0, r2
	pcParameter = FreeRTOS_CLIGetParameter
 8015574:	aa01      	add	r2, sp, #4
 8015576:	2101      	movs	r1, #1
 8015578:	f7ee fa82 	bl	8003a80 <FreeRTOS_CLIGetParameter>
	configASSERT( pcParameter );
 801557c:	4605      	mov	r5, r0
 801557e:	b1a0      	cbz	r0, 80155aa <prvDELCommand+0x3e>
	iReturned = ff_remove( pcParameter );
 8015580:	4628      	mov	r0, r5
 8015582:	f7f3 fd98 	bl	80090b6 <ff_remove>
	if( iReturned == FF_ERR_NONE )
 8015586:	b1b0      	cbz	r0, 80155b6 <prvDELCommand+0x4a>
		sprintf( pcWriteBuffer, "Error.  %s was not deleted", pcParameter );
 8015588:	462a      	mov	r2, r5
 801558a:	490e      	ldr	r1, [pc, #56]	; (80155c4 <prvDELCommand+0x58>)
 801558c:	4620      	mov	r0, r4
 801558e:	f001 fbca 	bl	8016d26 <sprintf>
	strcat( pcWriteBuffer, cliNEW_LINE );
 8015592:	4620      	mov	r0, r4
 8015594:	f7ea fe26 	bl	80001e4 <strlen>
 8015598:	1822      	adds	r2, r4, r0
 801559a:	4b0b      	ldr	r3, [pc, #44]	; (80155c8 <prvDELCommand+0x5c>)
 801559c:	8819      	ldrh	r1, [r3, #0]
 801559e:	789b      	ldrb	r3, [r3, #2]
 80155a0:	5221      	strh	r1, [r4, r0]
 80155a2:	7093      	strb	r3, [r2, #2]
}
 80155a4:	2000      	movs	r0, #0
 80155a6:	b003      	add	sp, #12
 80155a8:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcParameter );
 80155aa:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80155ae:	4807      	ldr	r0, [pc, #28]	; (80155cc <prvDELCommand+0x60>)
 80155b0:	f001 fe76 	bl	80172a0 <vAssertCalled>
 80155b4:	e7e4      	b.n	8015580 <prvDELCommand+0x14>
		sprintf( pcWriteBuffer, "%s was deleted", pcParameter );
 80155b6:	462a      	mov	r2, r5
 80155b8:	4905      	ldr	r1, [pc, #20]	; (80155d0 <prvDELCommand+0x64>)
 80155ba:	4620      	mov	r0, r4
 80155bc:	f001 fbb3 	bl	8016d26 <sprintf>
 80155c0:	e7e7      	b.n	8015592 <prvDELCommand+0x26>
 80155c2:	bf00      	nop
 80155c4:	0801bc18 	.word	0x0801bc18
 80155c8:	0801af90 	.word	0x0801af90
 80155cc:	0801ba8c 	.word	0x0801ba8c
 80155d0:	0801bc08 	.word	0x0801bc08

080155d4 <prvTYPECommand>:
{
 80155d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155d6:	b083      	sub	sp, #12
 80155d8:	4607      	mov	r7, r0
 80155da:	460e      	mov	r6, r1
 80155dc:	4614      	mov	r4, r2
	memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80155de:	460a      	mov	r2, r1
 80155e0:	2100      	movs	r1, #0
 80155e2:	f002 f8f3 	bl	80177cc <memset>
	configASSERT( xWriteBufferLen > ( strlen( cliNEW_LINE ) * 2 ) );
 80155e6:	2e04      	cmp	r6, #4
 80155e8:	d908      	bls.n	80155fc <prvTYPECommand+0x28>
	xWriteBufferLen -= strlen( cliNEW_LINE );
 80155ea:	3e02      	subs	r6, #2
	if( xWriteBufferLen < xColumns )
 80155ec:	2e31      	cmp	r6, #49	; 0x31
 80155ee:	d837      	bhi.n	8015660 <prvTYPECommand+0x8c>
	if( pxFile == NULL )
 80155f0:	4b25      	ldr	r3, [pc, #148]	; (8015688 <prvTYPECommand+0xb4>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	b143      	cbz	r3, 8015608 <prvTYPECommand+0x34>
		for( xByte = 0; xByte < xColumns; xByte++ )
 80155f6:	2e00      	cmp	r6, #0
 80155f8:	d137      	bne.n	801566a <prvTYPECommand+0x96>
 80155fa:	e020      	b.n	801563e <prvTYPECommand+0x6a>
	configASSERT( xWriteBufferLen > ( strlen( cliNEW_LINE ) * 2 ) );
 80155fc:	21ec      	movs	r1, #236	; 0xec
 80155fe:	4823      	ldr	r0, [pc, #140]	; (801568c <prvTYPECommand+0xb8>)
 8015600:	f001 fe4e 	bl	80172a0 <vAssertCalled>
 8015604:	e7f1      	b.n	80155ea <prvTYPECommand+0x16>
size_t xColumns = 50U;
 8015606:	2632      	movs	r6, #50	; 0x32
		pcParameter = FreeRTOS_CLIGetParameter
 8015608:	aa01      	add	r2, sp, #4
 801560a:	2101      	movs	r1, #1
 801560c:	4620      	mov	r0, r4
 801560e:	f7ee fa37 	bl	8003a80 <FreeRTOS_CLIGetParameter>
		configASSERT( pcParameter );
 8015612:	4604      	mov	r4, r0
 8015614:	b138      	cbz	r0, 8015626 <prvTYPECommand+0x52>
		pxFile = ff_fopen( pcParameter, "r" );
 8015616:	491e      	ldr	r1, [pc, #120]	; (8015690 <prvTYPECommand+0xbc>)
 8015618:	4620      	mov	r0, r4
 801561a:	f7f3 fc70 	bl	8008efe <ff_fopen>
 801561e:	4b1a      	ldr	r3, [pc, #104]	; (8015688 <prvTYPECommand+0xb4>)
 8015620:	6018      	str	r0, [r3, #0]
	if( pxFile != NULL )
 8015622:	b160      	cbz	r0, 801563e <prvTYPECommand+0x6a>
 8015624:	e7e7      	b.n	80155f6 <prvTYPECommand+0x22>
		configASSERT( pcParameter );
 8015626:	f240 1101 	movw	r1, #257	; 0x101
 801562a:	4818      	ldr	r0, [pc, #96]	; (801568c <prvTYPECommand+0xb8>)
 801562c:	f001 fe38 	bl	80172a0 <vAssertCalled>
 8015630:	e7f1      	b.n	8015616 <prvTYPECommand+0x42>
				ff_fclose( pxFile );
 8015632:	4c15      	ldr	r4, [pc, #84]	; (8015688 <prvTYPECommand+0xb4>)
 8015634:	6820      	ldr	r0, [r4, #0]
 8015636:	f7f3 fc87 	bl	8008f48 <ff_fclose>
				pxFile = NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	6023      	str	r3, [r4, #0]
	if( pxFile == NULL )
 801563e:	4b12      	ldr	r3, [pc, #72]	; (8015688 <prvTYPECommand+0xb4>)
 8015640:	681c      	ldr	r4, [r3, #0]
 8015642:	3400      	adds	r4, #0
 8015644:	bf18      	it	ne
 8015646:	2401      	movne	r4, #1
	strcat( pcWriteBuffer, cliNEW_LINE );
 8015648:	4638      	mov	r0, r7
 801564a:	f7ea fdcb 	bl	80001e4 <strlen>
 801564e:	183a      	adds	r2, r7, r0
 8015650:	4b10      	ldr	r3, [pc, #64]	; (8015694 <prvTYPECommand+0xc0>)
 8015652:	8819      	ldrh	r1, [r3, #0]
 8015654:	789b      	ldrb	r3, [r3, #2]
 8015656:	5239      	strh	r1, [r7, r0]
 8015658:	7093      	strb	r3, [r2, #2]
}
 801565a:	4620      	mov	r0, r4
 801565c:	b003      	add	sp, #12
 801565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( pxFile == NULL )
 8015660:	4b09      	ldr	r3, [pc, #36]	; (8015688 <prvTYPECommand+0xb4>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d0ce      	beq.n	8015606 <prvTYPECommand+0x32>
size_t xColumns = 50U;
 8015668:	2632      	movs	r6, #50	; 0x32
 801566a:	463c      	mov	r4, r7
 801566c:	443e      	add	r6, r7
			iChar = ff_fgetc( pxFile );
 801566e:	4d06      	ldr	r5, [pc, #24]	; (8015688 <prvTYPECommand+0xb4>)
 8015670:	6828      	ldr	r0, [r5, #0]
 8015672:	f7f3 fcb9 	bl	8008fe8 <ff_fgetc>
			if( iChar == -1 )
 8015676:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801567a:	d0da      	beq.n	8015632 <prvTYPECommand+0x5e>
				pcWriteBuffer[ xByte ] = ( char ) iChar;
 801567c:	f804 0b01 	strb.w	r0, [r4], #1
		for( xByte = 0; xByte < xColumns; xByte++ )
 8015680:	42b4      	cmp	r4, r6
 8015682:	d1f5      	bne.n	8015670 <prvTYPECommand+0x9c>
 8015684:	e7db      	b.n	801563e <prvTYPECommand+0x6a>
 8015686:	bf00      	nop
 8015688:	20000c08 	.word	0x20000c08
 801568c:	0801ba8c 	.word	0x0801ba8c
 8015690:	0801bcb4 	.word	0x0801bcb4
 8015694:	0801af90 	.word	0x0801af90

08015698 <prvCDCommand>:
{
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	4604      	mov	r4, r0
 801569e:	460d      	mov	r5, r1
 80156a0:	4610      	mov	r0, r2
	pcParameter = FreeRTOS_CLIGetParameter
 80156a2:	aa01      	add	r2, sp, #4
 80156a4:	2101      	movs	r1, #1
 80156a6:	f7ee f9eb 	bl	8003a80 <FreeRTOS_CLIGetParameter>
	configASSERT( pcParameter );
 80156aa:	4606      	mov	r6, r0
 80156ac:	b1a0      	cbz	r0, 80156d8 <prvCDCommand+0x40>
	iReturned = ff_chdir( pcParameter );
 80156ae:	4630      	mov	r0, r6
 80156b0:	f7f4 f86a 	bl	8009788 <ff_chdir>
	if( iReturned == FF_ERR_NONE )
 80156b4:	b1b0      	cbz	r0, 80156e4 <prvCDCommand+0x4c>
		sprintf( pcWriteBuffer, "Error" );
 80156b6:	4b12      	ldr	r3, [pc, #72]	; (8015700 <prvCDCommand+0x68>)
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	6020      	str	r0, [r4, #0]
 80156bc:	889b      	ldrh	r3, [r3, #4]
 80156be:	80a3      	strh	r3, [r4, #4]
	strcat( pcWriteBuffer, cliNEW_LINE );
 80156c0:	4620      	mov	r0, r4
 80156c2:	f7ea fd8f 	bl	80001e4 <strlen>
 80156c6:	1822      	adds	r2, r4, r0
 80156c8:	4b0e      	ldr	r3, [pc, #56]	; (8015704 <prvCDCommand+0x6c>)
 80156ca:	8819      	ldrh	r1, [r3, #0]
 80156cc:	789b      	ldrb	r3, [r3, #2]
 80156ce:	5221      	strh	r1, [r4, r0]
 80156d0:	7093      	strb	r3, [r2, #2]
}
 80156d2:	2000      	movs	r0, #0
 80156d4:	b002      	add	sp, #8
 80156d6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcParameter );
 80156d8:	f240 1139 	movw	r1, #313	; 0x139
 80156dc:	480a      	ldr	r0, [pc, #40]	; (8015708 <prvCDCommand+0x70>)
 80156de:	f001 fddf 	bl	80172a0 <vAssertCalled>
 80156e2:	e7e4      	b.n	80156ae <prvCDCommand+0x16>
		sprintf( pcWriteBuffer, "In: " );
 80156e4:	4b09      	ldr	r3, [pc, #36]	; (801570c <prvCDCommand+0x74>)
 80156e6:	6818      	ldr	r0, [r3, #0]
 80156e8:	6020      	str	r0, [r4, #0]
 80156ea:	791b      	ldrb	r3, [r3, #4]
 80156ec:	7123      	strb	r3, [r4, #4]
		xStringLength = strlen( pcWriteBuffer );
 80156ee:	4620      	mov	r0, r4
 80156f0:	f7ea fd78 	bl	80001e4 <strlen>
		ff_getcwd( &( pcWriteBuffer[ xStringLength ] ), ( unsigned char ) ( xWriteBufferLen - xStringLength ) );
 80156f4:	1a29      	subs	r1, r5, r0
 80156f6:	b2c9      	uxtb	r1, r1
 80156f8:	4420      	add	r0, r4
 80156fa:	f7f3 fdd1 	bl	80092a0 <ff_getcwd>
 80156fe:	e7df      	b.n	80156c0 <prvCDCommand+0x28>
 8015700:	0801b6d4 	.word	0x0801b6d4
 8015704:	0801af90 	.word	0x0801af90
 8015708:	0801ba8c 	.word	0x0801ba8c
 801570c:	0801ba84 	.word	0x0801ba84

08015710 <prvDIRCommand>:
{
 8015710:	b570      	push	{r4, r5, r6, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	460d      	mov	r5, r1
	configASSERT( xWriteBufferLen > ( strlen( cliNEW_LINE ) * 2 ) );
 8015716:	2904      	cmp	r1, #4
 8015718:	d919      	bls.n	801574e <prvDIRCommand+0x3e>
	if( pxFindStruct == NULL )
 801571a:	4b28      	ldr	r3, [pc, #160]	; (80157bc <prvDIRCommand+0xac>)
 801571c:	6818      	ldr	r0, [r3, #0]
 801571e:	b1e0      	cbz	r0, 801575a <prvDIRCommand+0x4a>
		iReturned = ff_findnext( pxFindStruct );
 8015720:	f7f3 fde8 	bl	80092f4 <ff_findnext>
		if( iReturned == FF_ERR_NONE )
 8015724:	2800      	cmp	r0, #0
 8015726:	d042      	beq.n	80157ae <prvDIRCommand+0x9e>
			vPortFree( pxFindStruct );
 8015728:	4d24      	ldr	r5, [pc, #144]	; (80157bc <prvDIRCommand+0xac>)
 801572a:	6828      	ldr	r0, [r5, #0]
 801572c:	f7fd ff52 	bl	80135d4 <vPortFree>
			pxFindStruct = NULL;
 8015730:	2000      	movs	r0, #0
 8015732:	6028      	str	r0, [r5, #0]
			pcWriteBuffer[ 0 ] = 0x00;
 8015734:	7020      	strb	r0, [r4, #0]
BaseType_t xReturn = pdFALSE;
 8015736:	4605      	mov	r5, r0
	strcat( pcWriteBuffer, cliNEW_LINE );
 8015738:	4620      	mov	r0, r4
 801573a:	f7ea fd53 	bl	80001e4 <strlen>
 801573e:	1822      	adds	r2, r4, r0
 8015740:	4b1f      	ldr	r3, [pc, #124]	; (80157c0 <prvDIRCommand+0xb0>)
 8015742:	8819      	ldrh	r1, [r3, #0]
 8015744:	789b      	ldrb	r3, [r3, #2]
 8015746:	5221      	strh	r1, [r4, r0]
 8015748:	7093      	strb	r3, [r2, #2]
}
 801574a:	4628      	mov	r0, r5
 801574c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xWriteBufferLen > ( strlen( cliNEW_LINE ) * 2 ) );
 801574e:	f240 1159 	movw	r1, #345	; 0x159
 8015752:	481c      	ldr	r0, [pc, #112]	; (80157c4 <prvDIRCommand+0xb4>)
 8015754:	f001 fda4 	bl	80172a0 <vAssertCalled>
 8015758:	e7df      	b.n	801571a <prvDIRCommand+0xa>
	xWriteBufferLen -= strlen( cliNEW_LINE );
 801575a:	3d02      	subs	r5, #2
		pxFindStruct = ( FF_FindData_t * ) pvPortMalloc( sizeof( FF_FindData_t ) );
 801575c:	f44f 7098 	mov.w	r0, #304	; 0x130
 8015760:	f7fd fed2 	bl	8013508 <pvPortMalloc>
 8015764:	4606      	mov	r6, r0
 8015766:	4b15      	ldr	r3, [pc, #84]	; (80157bc <prvDIRCommand+0xac>)
 8015768:	6018      	str	r0, [r3, #0]
		if( pxFindStruct != NULL )
 801576a:	b1c8      	cbz	r0, 80157a0 <prvDIRCommand+0x90>
			memset( pxFindStruct, 0x00, sizeof( FF_FindData_t ) );
 801576c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8015770:	2100      	movs	r1, #0
 8015772:	f002 f82b 	bl	80177cc <memset>
			iReturned = ff_findfirst( "", pxFindStruct );
 8015776:	4631      	mov	r1, r6
 8015778:	4813      	ldr	r0, [pc, #76]	; (80157c8 <prvDIRCommand+0xb8>)
 801577a:	f7f3 feb3 	bl	80094e4 <ff_findfirst>
			if( iReturned == FF_ERR_NONE )
 801577e:	b930      	cbnz	r0, 801578e <prvDIRCommand+0x7e>
				prvCreateFileInfoString( pcWriteBuffer, pxFindStruct );
 8015780:	4b0e      	ldr	r3, [pc, #56]	; (80157bc <prvDIRCommand+0xac>)
 8015782:	6819      	ldr	r1, [r3, #0]
 8015784:	4620      	mov	r0, r4
 8015786:	f7ff fecd 	bl	8015524 <prvCreateFileInfoString>
				xReturn = pdPASS;
 801578a:	2501      	movs	r5, #1
 801578c:	e7d4      	b.n	8015738 <prvDIRCommand+0x28>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Error: ff_findfirst() failed." );
 801578e:	4a0f      	ldr	r2, [pc, #60]	; (80157cc <prvDIRCommand+0xbc>)
 8015790:	4629      	mov	r1, r5
 8015792:	4620      	mov	r0, r4
 8015794:	f001 fc21 	bl	8016fda <snprintf>
				pxFindStruct = NULL;
 8015798:	2500      	movs	r5, #0
 801579a:	4b08      	ldr	r3, [pc, #32]	; (80157bc <prvDIRCommand+0xac>)
 801579c:	601d      	str	r5, [r3, #0]
 801579e:	e7cb      	b.n	8015738 <prvDIRCommand+0x28>
			snprintf( pcWriteBuffer, xWriteBufferLen, "Failed to allocate RAM (using heap_4.c will prevent fragmentation)." );
 80157a0:	4a0b      	ldr	r2, [pc, #44]	; (80157d0 <prvDIRCommand+0xc0>)
 80157a2:	4629      	mov	r1, r5
 80157a4:	4620      	mov	r0, r4
 80157a6:	f001 fc18 	bl	8016fda <snprintf>
BaseType_t xReturn = pdFALSE;
 80157aa:	2500      	movs	r5, #0
 80157ac:	e7c4      	b.n	8015738 <prvDIRCommand+0x28>
			prvCreateFileInfoString( pcWriteBuffer, pxFindStruct );
 80157ae:	4b03      	ldr	r3, [pc, #12]	; (80157bc <prvDIRCommand+0xac>)
 80157b0:	6819      	ldr	r1, [r3, #0]
 80157b2:	4620      	mov	r0, r4
 80157b4:	f7ff feb6 	bl	8015524 <prvCreateFileInfoString>
			xReturn = pdPASS;
 80157b8:	2501      	movs	r5, #1
 80157ba:	e7bd      	b.n	8015738 <prvDIRCommand+0x28>
 80157bc:	20000c0c 	.word	0x20000c0c
 80157c0:	0801af90 	.word	0x0801af90
 80157c4:	0801ba8c 	.word	0x0801ba8c
 80157c8:	0801b914 	.word	0x0801b914
 80157cc:	0801bba4 	.word	0x0801bba4
 80157d0:	0801bbc4 	.word	0x0801bbc4

080157d4 <vRegisterFileSystemCLICommands>:
{
 80157d4:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand( &xDIR );
 80157d6:	480b      	ldr	r0, [pc, #44]	; (8015804 <vRegisterFileSystemCLICommands+0x30>)
 80157d8:	f7ee f8be 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xCD );
 80157dc:	480a      	ldr	r0, [pc, #40]	; (8015808 <vRegisterFileSystemCLICommands+0x34>)
 80157de:	f7ee f8bb 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xTYPE );
 80157e2:	480a      	ldr	r0, [pc, #40]	; (801580c <vRegisterFileSystemCLICommands+0x38>)
 80157e4:	f7ee f8b8 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xDEL );
 80157e8:	4809      	ldr	r0, [pc, #36]	; (8015810 <vRegisterFileSystemCLICommands+0x3c>)
 80157ea:	f7ee f8b5 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xRMDIR );
 80157ee:	4809      	ldr	r0, [pc, #36]	; (8015814 <vRegisterFileSystemCLICommands+0x40>)
 80157f0:	f7ee f8b2 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xCOPY );
 80157f4:	4808      	ldr	r0, [pc, #32]	; (8015818 <vRegisterFileSystemCLICommands+0x44>)
 80157f6:	f7ee f8af 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xPWD );
 80157fa:	4808      	ldr	r0, [pc, #32]	; (801581c <vRegisterFileSystemCLICommands+0x48>)
 80157fc:	f7ee f8ac 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
 8015800:	bd08      	pop	{r3, pc}
 8015802:	bf00      	nop
 8015804:	0801be1c 	.word	0x0801be1c
 8015808:	0801bdec 	.word	0x0801bdec
 801580c:	0801be4c 	.word	0x0801be4c
 8015810:	0801be0c 	.word	0x0801be0c
 8015814:	0801be3c 	.word	0x0801be3c
 8015818:	0801bdfc 	.word	0x0801bdfc
 801581c:	0801be2c 	.word	0x0801be2c

08015820 <prvQueryHeapCommand>:
/*-----------------------------------------------------------*/

#if( configINCLUDE_QUERY_HEAP_COMMAND == 1 )

	static BaseType_t prvQueryHeapCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
	{
 8015820:	b538      	push	{r3, r4, r5, lr}
		/* Remove compile time warnings about unused parameters, and check the
		write buffer is not NULL.  NOTE - for simplicity, this example assumes the
		write buffer length is adequate, so does not check for buffer overflows. */
		( void ) pcCommandString;
		( void ) xWriteBufferLen;
		configASSERT( pcWriteBuffer );
 8015822:	4604      	mov	r4, r0
 8015824:	b160      	cbz	r0, 8015840 <prvQueryHeapCommand+0x20>

		sprintf( pcWriteBuffer, "Current free heap %d bytes, minimum ever free heap %d bytes\r\n", ( int ) xPortGetFreeHeapSize(), ( int ) xPortGetMinimumEverFreeHeapSize() );
 8015826:	f7fd ff1f 	bl	8013668 <xPortGetFreeHeapSize>
 801582a:	4605      	mov	r5, r0
 801582c:	f7fd ff22 	bl	8013674 <xPortGetMinimumEverFreeHeapSize>
 8015830:	4603      	mov	r3, r0
 8015832:	462a      	mov	r2, r5
 8015834:	4905      	ldr	r1, [pc, #20]	; (801584c <prvQueryHeapCommand+0x2c>)
 8015836:	4620      	mov	r0, r4
 8015838:	f001 fa75 	bl	8016d26 <sprintf>

		/* There is no more data to return after this single string, so return
		pdFALSE. */
		return pdFALSE;
	}
 801583c:	2000      	movs	r0, #0
 801583e:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pcWriteBuffer );
 8015840:	f44f 7194 	mov.w	r1, #296	; 0x128
 8015844:	4802      	ldr	r0, [pc, #8]	; (8015850 <prvQueryHeapCommand+0x30>)
 8015846:	f001 fd2b 	bl	80172a0 <vAssertCalled>
 801584a:	e7ec      	b.n	8015826 <prvQueryHeapCommand+0x6>
 801584c:	0801beb8 	.word	0x0801beb8
 8015850:	0801be7c 	.word	0x0801be7c

08015854 <prvRunTimeStatsCommand>:
/*-----------------------------------------------------------*/

#if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static BaseType_t prvRunTimeStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
	{
 8015854:	b510      	push	{r4, lr}
		/* Remove compile time warnings about unused parameters, and check the
		write buffer is not NULL.  NOTE - for simplicity, this example assumes the
		write buffer length is adequate, so does not check for buffer overflows. */
		( void ) pcCommandString;
		( void ) xWriteBufferLen;
		configASSERT( pcWriteBuffer );
 8015856:	4604      	mov	r4, r0
 8015858:	b150      	cbz	r0, 8015870 <prvRunTimeStatsCommand+0x1c>

		/* Generate a table of task stats. */
		strcpy( pcWriteBuffer, pcHeader );
 801585a:	2251      	movs	r2, #81	; 0x51
 801585c:	4907      	ldr	r1, [pc, #28]	; (801587c <prvRunTimeStatsCommand+0x28>)
 801585e:	4620      	mov	r0, r4
 8015860:	f001 ff8f 	bl	8017782 <memcpy>
		vTaskGetRunTimeStats( pcWriteBuffer + strlen( pcHeader ) );
 8015864:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015868:	f7ff fbb6 	bl	8014fd8 <vTaskGetRunTimeStats>

		/* There is no more data to return after this single string, so return
		pdFALSE. */
		return pdFALSE;
	}
 801586c:	2000      	movs	r0, #0
 801586e:	bd10      	pop	{r4, pc}
		configASSERT( pcWriteBuffer );
 8015870:	f240 113f 	movw	r1, #319	; 0x13f
 8015874:	4802      	ldr	r0, [pc, #8]	; (8015880 <prvRunTimeStatsCommand+0x2c>)
 8015876:	f001 fd13 	bl	80172a0 <vAssertCalled>
 801587a:	e7ee      	b.n	801585a <prvRunTimeStatsCommand+0x6>
 801587c:	0801bef8 	.word	0x0801bef8
 8015880:	0801be7c 	.word	0x0801be7c

08015884 <prvTaskStatsCommand>:
	{
 8015884:	b510      	push	{r4, lr}
		configASSERT( pcWriteBuffer );
 8015886:	4604      	mov	r4, r0
 8015888:	b1e0      	cbz	r0, 80158c4 <prvTaskStatsCommand+0x40>
		strcpy( pcWriteBuffer, "Task" );
 801588a:	4b11      	ldr	r3, [pc, #68]	; (80158d0 <prvTaskStatsCommand+0x4c>)
 801588c:	6818      	ldr	r0, [r3, #0]
 801588e:	6020      	str	r0, [r4, #0]
 8015890:	791b      	ldrb	r3, [r3, #4]
 8015892:	7123      	strb	r3, [r4, #4]
		pcWriteBuffer += strlen( pcWriteBuffer );
 8015894:	4620      	mov	r0, r4
 8015896:	f7ea fca5 	bl	80001e4 <strlen>
 801589a:	4404      	add	r4, r0
 801589c:	f104 0109 	add.w	r1, r4, #9
 80158a0:	4620      	mov	r0, r4
			*pcWriteBuffer = ' ';
 80158a2:	2220      	movs	r2, #32
			*pcWriteBuffer = 0x00;
 80158a4:	2300      	movs	r3, #0
			*pcWriteBuffer = ' ';
 80158a6:	7002      	strb	r2, [r0, #0]
			*pcWriteBuffer = 0x00;
 80158a8:	f800 3f01 	strb.w	r3, [r0, #1]!
		for( xSpacePadding = strlen( "Task" ); xSpacePadding < ( configMAX_TASK_NAME_LEN - 3 ); xSpacePadding++ )
 80158ac:	4281      	cmp	r1, r0
 80158ae:	d1fa      	bne.n	80158a6 <prvTaskStatsCommand+0x22>
		strcpy( pcWriteBuffer, pcHeader );
 80158b0:	224c      	movs	r2, #76	; 0x4c
 80158b2:	4908      	ldr	r1, [pc, #32]	; (80158d4 <prvTaskStatsCommand+0x50>)
 80158b4:	f001 ff65 	bl	8017782 <memcpy>
		vTaskList( pcWriteBuffer + strlen( pcHeader ) );
 80158b8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80158bc:	f7ff fb14 	bl	8014ee8 <vTaskList>
	}
 80158c0:	2000      	movs	r0, #0
 80158c2:	bd10      	pop	{r4, pc}
		configASSERT( pcWriteBuffer );
 80158c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80158c8:	4803      	ldr	r0, [pc, #12]	; (80158d8 <prvTaskStatsCommand+0x54>)
 80158ca:	f001 fce9 	bl	80172a0 <vAssertCalled>
 80158ce:	e7dc      	b.n	801588a <prvTaskStatsCommand+0x6>
 80158d0:	0801bf4c 	.word	0x0801bf4c
 80158d4:	0801bf54 	.word	0x0801bf54
 80158d8:	0801be7c 	.word	0x0801be7c

080158dc <prvParameterEchoCommand>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80158dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158de:	b083      	sub	sp, #12
 80158e0:	460e      	mov	r6, r1
 80158e2:	4615      	mov	r5, r2
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80158e4:	4604      	mov	r4, r0
 80158e6:	b338      	cbz	r0, 8015938 <prvParameterEchoCommand+0x5c>

	if( lParameterNumber == 0 )
 80158e8:	4b21      	ldr	r3, [pc, #132]	; (8015970 <prvParameterEchoCommand+0x94>)
 80158ea:	6819      	ldr	r1, [r3, #0]
 80158ec:	b351      	cbz	r1, 8015944 <prvParameterEchoCommand+0x68>
		xReturn = pdPASS;
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 80158ee:	aa01      	add	r2, sp, #4
 80158f0:	4628      	mov	r0, r5
 80158f2:	f7ee f8c5 	bl	8003a80 <FreeRTOS_CLIGetParameter>
							pcCommandString,		/* The command string itself. */
							lParameterNumber,		/* Return the next parameter. */
							&xParameterStringLength	/* Store the parameter string length. */
						);

		if( pcParameter != NULL )
 80158f6:	4607      	mov	r7, r0
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d034      	beq.n	8015966 <prvParameterEchoCommand+0x8a>
		{
			/* Return the parameter string. */
			memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80158fc:	4632      	mov	r2, r6
 80158fe:	2100      	movs	r1, #0
 8015900:	4620      	mov	r0, r4
 8015902:	f001 ff63 	bl	80177cc <memset>
			sprintf( pcWriteBuffer, "%d: ", ( int ) lParameterNumber );
 8015906:	4d1a      	ldr	r5, [pc, #104]	; (8015970 <prvParameterEchoCommand+0x94>)
 8015908:	682a      	ldr	r2, [r5, #0]
 801590a:	491a      	ldr	r1, [pc, #104]	; (8015974 <prvParameterEchoCommand+0x98>)
 801590c:	4620      	mov	r0, r4
 801590e:	f001 fa0a 	bl	8016d26 <sprintf>
			strncat( pcWriteBuffer, pcParameter, xParameterStringLength );
 8015912:	9a01      	ldr	r2, [sp, #4]
 8015914:	4639      	mov	r1, r7
 8015916:	4620      	mov	r0, r4
 8015918:	f002 f9b9 	bl	8017c8e <strncat>
			strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 801591c:	4620      	mov	r0, r4
 801591e:	f7ea fc61 	bl	80001e4 <strlen>
 8015922:	1822      	adds	r2, r4, r0
 8015924:	4b14      	ldr	r3, [pc, #80]	; (8015978 <prvParameterEchoCommand+0x9c>)
 8015926:	8819      	ldrh	r1, [r3, #0]
 8015928:	789b      	ldrb	r3, [r3, #2]
 801592a:	5221      	strh	r1, [r4, r0]
 801592c:	7093      	strb	r3, [r2, #2]

			/* There might be more parameters to return after this one. */
			xReturn = pdTRUE;
			lParameterNumber++;
 801592e:	682b      	ldr	r3, [r5, #0]
 8015930:	3301      	adds	r3, #1
 8015932:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8015934:	2001      	movs	r0, #1
 8015936:	e014      	b.n	8015962 <prvParameterEchoCommand+0x86>
	configASSERT( pcWriteBuffer );
 8015938:	f240 119b 	movw	r1, #411	; 0x19b
 801593c:	480f      	ldr	r0, [pc, #60]	; (801597c <prvParameterEchoCommand+0xa0>)
 801593e:	f001 fcaf 	bl	80172a0 <vAssertCalled>
 8015942:	e7d1      	b.n	80158e8 <prvParameterEchoCommand+0xc>
		sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 8015944:	4d0e      	ldr	r5, [pc, #56]	; (8015980 <prvParameterEchoCommand+0xa4>)
 8015946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015948:	6020      	str	r0, [r4, #0]
 801594a:	6061      	str	r1, [r4, #4]
 801594c:	60a2      	str	r2, [r4, #8]
 801594e:	60e3      	str	r3, [r4, #12]
 8015950:	6828      	ldr	r0, [r5, #0]
 8015952:	6120      	str	r0, [r4, #16]
 8015954:	88aa      	ldrh	r2, [r5, #4]
 8015956:	79ab      	ldrb	r3, [r5, #6]
 8015958:	82a2      	strh	r2, [r4, #20]
 801595a:	75a3      	strb	r3, [r4, #22]
		lParameterNumber = 1L;
 801595c:	2001      	movs	r0, #1
 801595e:	4b04      	ldr	r3, [pc, #16]	; (8015970 <prvParameterEchoCommand+0x94>)
 8015960:	6018      	str	r0, [r3, #0]
			lParameterNumber = 0;
		}
	}

	return xReturn;
}
 8015962:	b003      	add	sp, #12
 8015964:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pcWriteBuffer[ 0 ] = 0x00;
 8015966:	2000      	movs	r0, #0
 8015968:	7020      	strb	r0, [r4, #0]
			lParameterNumber = 0;
 801596a:	4b01      	ldr	r3, [pc, #4]	; (8015970 <prvParameterEchoCommand+0x94>)
 801596c:	6018      	str	r0, [r3, #0]
	return xReturn;
 801596e:	e7f8      	b.n	8015962 <prvParameterEchoCommand+0x86>
 8015970:	20000c14 	.word	0x20000c14
 8015974:	0801be74 	.word	0x0801be74
 8015978:	0801af90 	.word	0x0801af90
 801597c:	0801be7c 	.word	0x0801be7c
 8015980:	0801be5c 	.word	0x0801be5c

08015984 <prvThreeParameterEchoCommand>:
{
 8015984:	b570      	push	{r4, r5, r6, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	460d      	mov	r5, r1
 801598a:	4616      	mov	r6, r2
	configASSERT( pcWriteBuffer );
 801598c:	4604      	mov	r4, r0
 801598e:	b358      	cbz	r0, 80159e8 <prvThreeParameterEchoCommand+0x64>
	if( lParameterNumber == 0 )
 8015990:	4b25      	ldr	r3, [pc, #148]	; (8015a28 <prvThreeParameterEchoCommand+0xa4>)
 8015992:	6819      	ldr	r1, [r3, #0]
 8015994:	b371      	cbz	r1, 80159f4 <prvThreeParameterEchoCommand+0x70>
		pcParameter = FreeRTOS_CLIGetParameter
 8015996:	aa01      	add	r2, sp, #4
 8015998:	4630      	mov	r0, r6
 801599a:	f7ee f871 	bl	8003a80 <FreeRTOS_CLIGetParameter>
		configASSERT( pcParameter );
 801599e:	4606      	mov	r6, r0
 80159a0:	2800      	cmp	r0, #0
 80159a2:	d037      	beq.n	8015a14 <prvThreeParameterEchoCommand+0x90>
		memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80159a4:	462a      	mov	r2, r5
 80159a6:	2100      	movs	r1, #0
 80159a8:	4620      	mov	r0, r4
 80159aa:	f001 ff0f 	bl	80177cc <memset>
		sprintf( pcWriteBuffer, "%d: ", ( int ) lParameterNumber );
 80159ae:	4d1e      	ldr	r5, [pc, #120]	; (8015a28 <prvThreeParameterEchoCommand+0xa4>)
 80159b0:	682a      	ldr	r2, [r5, #0]
 80159b2:	491e      	ldr	r1, [pc, #120]	; (8015a2c <prvThreeParameterEchoCommand+0xa8>)
 80159b4:	4620      	mov	r0, r4
 80159b6:	f001 f9b6 	bl	8016d26 <sprintf>
		strncat( pcWriteBuffer, pcParameter, xParameterStringLength );
 80159ba:	9a01      	ldr	r2, [sp, #4]
 80159bc:	4631      	mov	r1, r6
 80159be:	4620      	mov	r0, r4
 80159c0:	f002 f965 	bl	8017c8e <strncat>
		strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80159c4:	4620      	mov	r0, r4
 80159c6:	f7ea fc0d 	bl	80001e4 <strlen>
 80159ca:	1822      	adds	r2, r4, r0
 80159cc:	4b18      	ldr	r3, [pc, #96]	; (8015a30 <prvThreeParameterEchoCommand+0xac>)
 80159ce:	8819      	ldrh	r1, [r3, #0]
 80159d0:	789b      	ldrb	r3, [r3, #2]
 80159d2:	5221      	strh	r1, [r4, r0]
 80159d4:	7093      	strb	r3, [r2, #2]
		if( lParameterNumber == 3L )
 80159d6:	682b      	ldr	r3, [r5, #0]
 80159d8:	2b03      	cmp	r3, #3
 80159da:	d021      	beq.n	8015a20 <prvThreeParameterEchoCommand+0x9c>
			lParameterNumber++;
 80159dc:	3301      	adds	r3, #1
 80159de:	4a12      	ldr	r2, [pc, #72]	; (8015a28 <prvThreeParameterEchoCommand+0xa4>)
 80159e0:	6013      	str	r3, [r2, #0]
			xReturn = pdTRUE;
 80159e2:	2001      	movs	r0, #1
}
 80159e4:	b002      	add	sp, #8
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80159e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80159ec:	4811      	ldr	r0, [pc, #68]	; (8015a34 <prvThreeParameterEchoCommand+0xb0>)
 80159ee:	f001 fc57 	bl	80172a0 <vAssertCalled>
 80159f2:	e7cd      	b.n	8015990 <prvThreeParameterEchoCommand+0xc>
		sprintf( pcWriteBuffer, "The three parameters were:\r\n" );
 80159f4:	4d10      	ldr	r5, [pc, #64]	; (8015a38 <prvThreeParameterEchoCommand+0xb4>)
 80159f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159f8:	6020      	str	r0, [r4, #0]
 80159fa:	6061      	str	r1, [r4, #4]
 80159fc:	60a2      	str	r2, [r4, #8]
 80159fe:	60e3      	str	r3, [r4, #12]
 8015a00:	cd07      	ldmia	r5!, {r0, r1, r2}
 8015a02:	6120      	str	r0, [r4, #16]
 8015a04:	6161      	str	r1, [r4, #20]
 8015a06:	61a2      	str	r2, [r4, #24]
 8015a08:	782b      	ldrb	r3, [r5, #0]
 8015a0a:	7723      	strb	r3, [r4, #28]
		lParameterNumber = 1L;
 8015a0c:	2001      	movs	r0, #1
 8015a0e:	4b06      	ldr	r3, [pc, #24]	; (8015a28 <prvThreeParameterEchoCommand+0xa4>)
 8015a10:	6018      	str	r0, [r3, #0]
 8015a12:	e7e7      	b.n	80159e4 <prvThreeParameterEchoCommand+0x60>
		configASSERT( pcParameter );
 8015a14:	f240 1173 	movw	r1, #371	; 0x173
 8015a18:	4806      	ldr	r0, [pc, #24]	; (8015a34 <prvThreeParameterEchoCommand+0xb0>)
 8015a1a:	f001 fc41 	bl	80172a0 <vAssertCalled>
 8015a1e:	e7c1      	b.n	80159a4 <prvThreeParameterEchoCommand+0x20>
			lParameterNumber = 0L;
 8015a20:	2000      	movs	r0, #0
 8015a22:	6028      	str	r0, [r5, #0]
 8015a24:	e7de      	b.n	80159e4 <prvThreeParameterEchoCommand+0x60>
 8015a26:	bf00      	nop
 8015a28:	20000c10 	.word	0x20000c10
 8015a2c:	0801be74 	.word	0x0801be74
 8015a30:	0801af90 	.word	0x0801af90
 8015a34:	0801be7c 	.word	0x0801be7c
 8015a38:	0801bfa0 	.word	0x0801bfa0

08015a3c <vRegisterSampleCLICommands>:
{
 8015a3c:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand( &xThreeParameterEcho );
 8015a3e:	4808      	ldr	r0, [pc, #32]	; (8015a60 <vRegisterSampleCLICommands+0x24>)
 8015a40:	f7ed ff8a 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xParameterEcho );
 8015a44:	4807      	ldr	r0, [pc, #28]	; (8015a64 <vRegisterSampleCLICommands+0x28>)
 8015a46:	f7ed ff87 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
		FreeRTOS_CLIRegisterCommand( &xTaskStats );
 8015a4a:	4807      	ldr	r0, [pc, #28]	; (8015a68 <vRegisterSampleCLICommands+0x2c>)
 8015a4c:	f7ed ff84 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
		FreeRTOS_CLIRegisterCommand( &xRunTimeStats );
 8015a50:	4806      	ldr	r0, [pc, #24]	; (8015a6c <vRegisterSampleCLICommands+0x30>)
 8015a52:	f7ed ff81 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
		FreeRTOS_CLIRegisterCommand( &xQueryHeap );
 8015a56:	4806      	ldr	r0, [pc, #24]	; (8015a70 <vRegisterSampleCLICommands+0x34>)
 8015a58:	f7ed ff7e 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
 8015a5c:	bd08      	pop	{r3, pc}
 8015a5e:	bf00      	nop
 8015a60:	0801c208 	.word	0x0801c208
 8015a64:	0801c1c8 	.word	0x0801c1c8
 8015a68:	0801c1f8 	.word	0x0801c1f8
 8015a6c:	0801c1e8 	.word	0x0801c1e8
 8015a70:	0801c1d8 	.word	0x0801c1d8

08015a74 <prvNetStatCommand>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvNetStatCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8015a74:	b538      	push	{r3, r4, r5, lr}
 8015a76:	4604      	mov	r4, r0
 8015a78:	460d      	mov	r5, r1
	( void ) pcWriteBuffer;
	( void ) xWriteBufferLen;
	( void ) pcCommandString;

	FreeRTOS_netstat();
 8015a7a:	f7f8 fa62 	bl	800df42 <FreeRTOS_netstat>
	snprintf( pcWriteBuffer, xWriteBufferLen, "FreeRTOS_netstat() called - output uses FreeRTOS_printf\r\n" );
 8015a7e:	4a03      	ldr	r2, [pc, #12]	; (8015a8c <prvNetStatCommand+0x18>)
 8015a80:	4629      	mov	r1, r5
 8015a82:	4620      	mov	r0, r4
 8015a84:	f001 faa9 	bl	8016fda <snprintf>
	return pdFALSE;
}
 8015a88:	2000      	movs	r0, #0
 8015a8a:	bd38      	pop	{r3, r4, r5, pc}
 8015a8c:	0801c270 	.word	0x0801c270

08015a90 <prvPingCommand>:
	{
 8015a90:	b570      	push	{r4, r5, r6, lr}
 8015a92:	b088      	sub	sp, #32
 8015a94:	4615      	mov	r5, r2
		configASSERT( pcWriteBuffer );
 8015a96:	4604      	mov	r4, r0
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	d035      	beq.n	8015b08 <prvPingCommand+0x78>
		pcWriteBuffer[ 0 ] = 0x00;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	7023      	strb	r3, [r4, #0]
		pcParameter = ( char * ) FreeRTOS_CLIGetParameter
 8015aa0:	aa07      	add	r2, sp, #28
 8015aa2:	2102      	movs	r1, #2
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	f7ed ffeb 	bl	8003a80 <FreeRTOS_CLIGetParameter>
		if( pcParameter == NULL )
 8015aaa:	b390      	cbz	r0, 8015b12 <prvPingCommand+0x82>
			ulBytesToPing = atol( pcParameter );
 8015aac:	f001 fe32 	bl	8017714 <atol>
 8015ab0:	4606      	mov	r6, r0
		pcParameter = ( char * ) FreeRTOS_CLIGetParameter
 8015ab2:	aa07      	add	r2, sp, #28
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	f7ed ffe2 	bl	8003a80 <FreeRTOS_CLIGetParameter>
		if( pcParameter != NULL )
 8015abc:	b1b8      	cbz	r0, 8015aee <prvPingCommand+0x5e>
			pcParameter[ lParameterStringLength ] = 0x00;
 8015abe:	2100      	movs	r1, #0
 8015ac0:	9b07      	ldr	r3, [sp, #28]
 8015ac2:	54c1      	strb	r1, [r0, r3]
			if( ( *pcParameter >= '0' ) && ( *pcParameter <= '9' ) )
 8015ac4:	7803      	ldrb	r3, [r0, #0]
 8015ac6:	3b30      	subs	r3, #48	; 0x30
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	2b09      	cmp	r3, #9
 8015acc:	d823      	bhi.n	8015b16 <prvPingCommand+0x86>
				ulIPAddress = FreeRTOS_inet_addr( pcParameter );
 8015ace:	f7f7 fc03 	bl	800d2d8 <FreeRTOS_inet_addr>
 8015ad2:	4605      	mov	r5, r0
			FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8015ad4:	0e2b      	lsrs	r3, r5, #24
 8015ad6:	9301      	str	r3, [sp, #4]
 8015ad8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8015ae2:	b2ea      	uxtb	r2, r5
 8015ae4:	4916      	ldr	r1, [pc, #88]	; (8015b40 <prvPingCommand+0xb0>)
 8015ae6:	a803      	add	r0, sp, #12
 8015ae8:	f001 f91d 	bl	8016d26 <sprintf>
			if( ulIPAddress != 0 )
 8015aec:	b9bd      	cbnz	r5, 8015b1e <prvPingCommand+0x8e>
			sprintf( pcWriteBuffer, "%s", "Could not send ping request\r\n" );
 8015aee:	4d15      	ldr	r5, [pc, #84]	; (8015b44 <prvPingCommand+0xb4>)
 8015af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015af2:	6020      	str	r0, [r4, #0]
 8015af4:	6061      	str	r1, [r4, #4]
 8015af6:	60a2      	str	r2, [r4, #8]
 8015af8:	60e3      	str	r3, [r4, #12]
 8015afa:	cd07      	ldmia	r5!, {r0, r1, r2}
 8015afc:	6120      	str	r0, [r4, #16]
 8015afe:	6161      	str	r1, [r4, #20]
 8015b00:	61a2      	str	r2, [r4, #24]
 8015b02:	882b      	ldrh	r3, [r5, #0]
 8015b04:	83a3      	strh	r3, [r4, #28]
 8015b06:	e018      	b.n	8015b3a <prvPingCommand+0xaa>
		configASSERT( pcWriteBuffer );
 8015b08:	21c2      	movs	r1, #194	; 0xc2
 8015b0a:	480f      	ldr	r0, [pc, #60]	; (8015b48 <prvPingCommand+0xb8>)
 8015b0c:	f001 fbc8 	bl	80172a0 <vAssertCalled>
 8015b10:	e7c4      	b.n	8015a9c <prvPingCommand+0xc>
			ulBytesToPing = ulDefaultBytesToPing;
 8015b12:	2608      	movs	r6, #8
 8015b14:	e7cd      	b.n	8015ab2 <prvPingCommand+0x22>
				ulIPAddress = FreeRTOS_gethostbyname( pcParameter );
 8015b16:	f7f6 fb2f 	bl	800c178 <FreeRTOS_gethostbyname>
 8015b1a:	4605      	mov	r5, r0
 8015b1c:	e7da      	b.n	8015ad4 <prvPingCommand+0x44>
				xReturn = FreeRTOS_SendPingRequest( ulIPAddress, ( uint16_t ) ulBytesToPing, portMAX_DELAY );
 8015b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b22:	b2b1      	uxth	r1, r6
 8015b24:	4628      	mov	r0, r5
 8015b26:	f7f6 fcc7 	bl	800c4b8 <FreeRTOS_SendPingRequest>
		if( xReturn == pdFALSE )
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	d0de      	beq.n	8015aee <prvPingCommand+0x5e>
			sprintf( pcWriteBuffer, "Ping sent to %s with identifier %d\r\n", cBuffer, ( int ) xReturn );
 8015b30:	aa03      	add	r2, sp, #12
 8015b32:	4906      	ldr	r1, [pc, #24]	; (8015b4c <prvPingCommand+0xbc>)
 8015b34:	4620      	mov	r0, r4
 8015b36:	f001 f8f6 	bl	8016d26 <sprintf>
	}
 8015b3a:	2000      	movs	r0, #0
 8015b3c:	b008      	add	sp, #32
 8015b3e:	bd70      	pop	{r4, r5, r6, pc}
 8015b40:	0801c2ec 	.word	0x0801c2ec
 8015b44:	0801c2f8 	.word	0x0801c2f8
 8015b48:	0801c2ac 	.word	0x0801c2ac
 8015b4c:	0801c318 	.word	0x0801c318

08015b50 <prvDisplayIPDebugStats>:
	{
 8015b50:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pcWriteBuffer );
 8015b52:	4605      	mov	r5, r0
 8015b54:	b178      	cbz	r0, 8015b76 <prvDisplayIPDebugStats+0x26>
		xIndex++;
 8015b56:	4c10      	ldr	r4, [pc, #64]	; (8015b98 <prvDisplayIPDebugStats+0x48>)
 8015b58:	6823      	ldr	r3, [r4, #0]
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	6023      	str	r3, [r4, #0]
		if( xIndex < xExampleDebugStatEntries() )
 8015b5e:	f000 fdf8 	bl	8016752 <xExampleDebugStatEntries>
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	4298      	cmp	r0, r3
 8015b66:	dc0c      	bgt.n	8015b82 <prvDisplayIPDebugStats+0x32>
			xIndex = -1;
 8015b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b6c:	4b0a      	ldr	r3, [pc, #40]	; (8015b98 <prvDisplayIPDebugStats+0x48>)
 8015b6e:	601a      	str	r2, [r3, #0]
			pcWriteBuffer[ 0 ] = 0x00;
 8015b70:	2000      	movs	r0, #0
 8015b72:	7028      	strb	r0, [r5, #0]
	}
 8015b74:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pcWriteBuffer );
 8015b76:	f240 1117 	movw	r1, #279	; 0x117
 8015b7a:	4808      	ldr	r0, [pc, #32]	; (8015b9c <prvDisplayIPDebugStats+0x4c>)
 8015b7c:	f001 fb90 	bl	80172a0 <vAssertCalled>
 8015b80:	e7e9      	b.n	8015b56 <prvDisplayIPDebugStats+0x6>
			sprintf( pcWriteBuffer, "%s %d\r\n", ( char * ) xIPTraceValues[ xIndex ].pucDescription, ( int ) xIPTraceValues[ xIndex ].ulData );
 8015b82:	4a07      	ldr	r2, [pc, #28]	; (8015ba0 <prvDisplayIPDebugStats+0x50>)
 8015b84:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8015b88:	68d3      	ldr	r3, [r2, #12]
 8015b8a:	6852      	ldr	r2, [r2, #4]
 8015b8c:	4905      	ldr	r1, [pc, #20]	; (8015ba4 <prvDisplayIPDebugStats+0x54>)
 8015b8e:	4628      	mov	r0, r5
 8015b90:	f001 f8c9 	bl	8016d26 <sprintf>
			xReturn = pdPASS;
 8015b94:	2001      	movs	r0, #1
 8015b96:	bd38      	pop	{r3, r4, r5, pc}
 8015b98:	2000002c 	.word	0x2000002c
 8015b9c:	0801c2ac 	.word	0x0801c2ac
 8015ba0:	20000034 	.word	0x20000034
 8015ba4:	0801c268 	.word	0x0801c268

08015ba8 <prvDisplayIPConfig>:
{
 8015ba8:	b530      	push	{r4, r5, lr}
 8015baa:	b085      	sub	sp, #20
	configASSERT( pcWriteBuffer );
 8015bac:	4604      	mov	r4, r0
 8015bae:	b138      	cbz	r0, 8015bc0 <prvDisplayIPConfig+0x18>
	switch( xIndex )
 8015bb0:	4b3c      	ldr	r3, [pc, #240]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2b03      	cmp	r3, #3
 8015bb6:	d85a      	bhi.n	8015c6e <prvDisplayIPConfig+0xc6>
 8015bb8:	e8df f003 	tbb	[pc, r3]
 8015bbc:	442f1f08 	.word	0x442f1f08
	configASSERT( pcWriteBuffer );
 8015bc0:	f240 113b 	movw	r1, #315	; 0x13b
 8015bc4:	4838      	ldr	r0, [pc, #224]	; (8015ca8 <prvDisplayIPConfig+0x100>)
 8015bc6:	f001 fb6b 	bl	80172a0 <vAssertCalled>
 8015bca:	e7f1      	b.n	8015bb0 <prvDisplayIPConfig+0x8>
			FreeRTOS_GetAddressConfiguration( &ulAddress, NULL, NULL, NULL );
 8015bcc:	2300      	movs	r3, #0
 8015bce:	461a      	mov	r2, r3
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	a803      	add	r0, sp, #12
 8015bd4:	f7f6 fc00 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
			sprintf( pcWriteBuffer, "\r\nIP address " );
 8015bd8:	4b34      	ldr	r3, [pc, #208]	; (8015cac <prvDisplayIPConfig+0x104>)
 8015bda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015bdc:	6020      	str	r0, [r4, #0]
 8015bde:	6061      	str	r1, [r4, #4]
 8015be0:	60a2      	str	r2, [r4, #8]
 8015be2:	881b      	ldrh	r3, [r3, #0]
 8015be4:	81a3      	strh	r3, [r4, #12]
			xIndex++;
 8015be6:	4a2f      	ldr	r2, [pc, #188]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015be8:	6813      	ldr	r3, [r2, #0]
 8015bea:	3301      	adds	r3, #1
 8015bec:	6013      	str	r3, [r2, #0]
	if( ulAddress != 0 )
 8015bee:	9d03      	ldr	r5, [sp, #12]
 8015bf0:	2d00      	cmp	r5, #0
 8015bf2:	d145      	bne.n	8015c80 <prvDisplayIPConfig+0xd8>
 8015bf4:	2001      	movs	r0, #1
}
 8015bf6:	b005      	add	sp, #20
 8015bf8:	bd30      	pop	{r4, r5, pc}
			FreeRTOS_GetAddressConfiguration( NULL, &ulAddress, NULL, NULL );
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	461a      	mov	r2, r3
 8015bfe:	a903      	add	r1, sp, #12
 8015c00:	4618      	mov	r0, r3
 8015c02:	f7f6 fbe9 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
			sprintf( pcWriteBuffer, "\r\nNet mask " );
 8015c06:	4b2a      	ldr	r3, [pc, #168]	; (8015cb0 <prvDisplayIPConfig+0x108>)
 8015c08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015c0a:	6020      	str	r0, [r4, #0]
 8015c0c:	6061      	str	r1, [r4, #4]
 8015c0e:	60a2      	str	r2, [r4, #8]
			xIndex++;
 8015c10:	4a24      	ldr	r2, [pc, #144]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015c12:	6813      	ldr	r3, [r2, #0]
 8015c14:	3301      	adds	r3, #1
 8015c16:	6013      	str	r3, [r2, #0]
			break;
 8015c18:	e7e9      	b.n	8015bee <prvDisplayIPConfig+0x46>
			FreeRTOS_GetAddressConfiguration( NULL, NULL, &ulAddress, NULL );
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	aa03      	add	r2, sp, #12
 8015c1e:	4619      	mov	r1, r3
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7f6 fbd9 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
			sprintf( pcWriteBuffer, "\r\nGateway address " );
 8015c26:	4d23      	ldr	r5, [pc, #140]	; (8015cb4 <prvDisplayIPConfig+0x10c>)
 8015c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c2a:	6020      	str	r0, [r4, #0]
 8015c2c:	6061      	str	r1, [r4, #4]
 8015c2e:	60a2      	str	r2, [r4, #8]
 8015c30:	60e3      	str	r3, [r4, #12]
 8015c32:	882a      	ldrh	r2, [r5, #0]
 8015c34:	78ab      	ldrb	r3, [r5, #2]
 8015c36:	8222      	strh	r2, [r4, #16]
 8015c38:	74a3      	strb	r3, [r4, #18]
			xIndex++;
 8015c3a:	4a1a      	ldr	r2, [pc, #104]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015c3c:	6813      	ldr	r3, [r2, #0]
 8015c3e:	3301      	adds	r3, #1
 8015c40:	6013      	str	r3, [r2, #0]
			break;
 8015c42:	e7d4      	b.n	8015bee <prvDisplayIPConfig+0x46>
			FreeRTOS_GetAddressConfiguration( NULL, NULL, NULL, &ulAddress );
 8015c44:	ab03      	add	r3, sp, #12
 8015c46:	2200      	movs	r2, #0
 8015c48:	4611      	mov	r1, r2
 8015c4a:	4610      	mov	r0, r2
 8015c4c:	f7f6 fbc4 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
			sprintf( pcWriteBuffer, "\r\nDNS server address " );
 8015c50:	4d19      	ldr	r5, [pc, #100]	; (8015cb8 <prvDisplayIPConfig+0x110>)
 8015c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c54:	6020      	str	r0, [r4, #0]
 8015c56:	6061      	str	r1, [r4, #4]
 8015c58:	60a2      	str	r2, [r4, #8]
 8015c5a:	60e3      	str	r3, [r4, #12]
 8015c5c:	6828      	ldr	r0, [r5, #0]
 8015c5e:	6120      	str	r0, [r4, #16]
 8015c60:	88ab      	ldrh	r3, [r5, #4]
 8015c62:	82a3      	strh	r3, [r4, #20]
			xIndex++;
 8015c64:	4a0f      	ldr	r2, [pc, #60]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015c66:	6813      	ldr	r3, [r2, #0]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	6013      	str	r3, [r2, #0]
			break;
 8015c6c:	e7bf      	b.n	8015bee <prvDisplayIPConfig+0x46>
			sprintf( pcWriteBuffer, "\r\n\r\n" );
 8015c6e:	4b13      	ldr	r3, [pc, #76]	; (8015cbc <prvDisplayIPConfig+0x114>)
 8015c70:	6818      	ldr	r0, [r3, #0]
 8015c72:	6020      	str	r0, [r4, #0]
 8015c74:	791b      	ldrb	r3, [r3, #4]
 8015c76:	7123      	strb	r3, [r4, #4]
			xIndex = 0;
 8015c78:	2000      	movs	r0, #0
 8015c7a:	4b0a      	ldr	r3, [pc, #40]	; (8015ca4 <prvDisplayIPConfig+0xfc>)
 8015c7c:	6018      	str	r0, [r3, #0]
 8015c7e:	e7ba      	b.n	8015bf6 <prvDisplayIPConfig+0x4e>
		FreeRTOS_inet_ntoa( ulAddress, ( &( pcWriteBuffer[ strlen( pcWriteBuffer ) ] ) ) );
 8015c80:	4620      	mov	r0, r4
 8015c82:	f7ea faaf 	bl	80001e4 <strlen>
 8015c86:	0e2b      	lsrs	r3, r5, #24
 8015c88:	9301      	str	r3, [sp, #4]
 8015c8a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8015c94:	b2ea      	uxtb	r2, r5
 8015c96:	490a      	ldr	r1, [pc, #40]	; (8015cc0 <prvDisplayIPConfig+0x118>)
 8015c98:	4420      	add	r0, r4
 8015c9a:	f001 f844 	bl	8016d26 <sprintf>
 8015c9e:	2001      	movs	r0, #1
 8015ca0:	e7a9      	b.n	8015bf6 <prvDisplayIPConfig+0x4e>
 8015ca2:	bf00      	nop
 8015ca4:	20000c18 	.word	0x20000c18
 8015ca8:	0801c2ac 	.word	0x0801c2ac
 8015cac:	0801c218 	.word	0x0801c218
 8015cb0:	0801c228 	.word	0x0801c228
 8015cb4:	0801c234 	.word	0x0801c234
 8015cb8:	0801c248 	.word	0x0801c248
 8015cbc:	0801c260 	.word	0x0801c260
 8015cc0:	0801c2ec 	.word	0x0801c2ec

08015cc4 <vRegisterTCPCLICommands>:
{
 8015cc4:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand( &xIPConfig );
 8015cc6:	4806      	ldr	r0, [pc, #24]	; (8015ce0 <vRegisterTCPCLICommands+0x1c>)
 8015cc8:	f7ed fe46 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
		FreeRTOS_CLIRegisterCommand( &xIPDebugStats );
 8015ccc:	4805      	ldr	r0, [pc, #20]	; (8015ce4 <vRegisterTCPCLICommands+0x20>)
 8015cce:	f7ed fe43 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
		FreeRTOS_CLIRegisterCommand( &xPing );
 8015cd2:	4805      	ldr	r0, [pc, #20]	; (8015ce8 <vRegisterTCPCLICommands+0x24>)
 8015cd4:	f7ed fe40 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xNetStats );
 8015cd8:	4804      	ldr	r0, [pc, #16]	; (8015cec <vRegisterTCPCLICommands+0x28>)
 8015cda:	f7ed fe3d 	bl	8003958 <FreeRTOS_CLIRegisterCommand>
 8015cde:	bd08      	pop	{r3, pc}
 8015ce0:	0801c490 	.word	0x0801c490
 8015ce4:	0801c4a0 	.word	0x0801c4a0
 8015ce8:	0801c4c0 	.word	0x0801c4c0
 8015cec:	0801c4b0 	.word	0x0801c4b0

08015cf0 <prvUDPCommandInterpreterTask>:
	xTaskCreate( prvUDPCommandInterpreterTask, "UDP CLI", usStackSize, ( void * ) ulPort, uxPriority, NULL );
}
/*-----------------------------------------------------------*/

void prvUDPCommandInterpreterTask( void *pvParameters )
{
 8015cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf4:	b08b      	sub	sp, #44	; 0x2c
 8015cf6:	4604      	mov	r4, r0
static char cOutputString[ cmdMAX_OUTPUT_SIZE ], cLocalBuffer[ cmdSOCKET_INPUT_BUFFER_SIZE ];
static char cLastInputString[ cmdMAX_INPUT_SIZE ], cInputString[ cmdMAX_INPUT_SIZE ];
BaseType_t xMoreDataToFollow;
struct freertos_sockaddr xClient;

	memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8015cf8:	223c      	movs	r2, #60	; 0x3c
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	4856      	ldr	r0, [pc, #344]	; (8015e58 <prvUDPCommandInterpreterTask+0x168>)
 8015cfe:	f001 fd65 	bl	80177cc <memset>

static Socket_t prvOpenUDPServerSocket( uint16_t usPort )
{
struct freertos_sockaddr xServer;
Socket_t xServerSocket = FREERTOS_INVALID_SOCKET;
TickType_t xSendTimeOut = 0;
 8015d02:	2300      	movs	r3, #0
 8015d04:	9305      	str	r3, [sp, #20]

	xServerSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8015d06:	2211      	movs	r2, #17
 8015d08:	2102      	movs	r1, #2
 8015d0a:	4608      	mov	r0, r1
 8015d0c:	f7f6 ff5e 	bl	800cbcc <FreeRTOS_socket>
	if( xServerSocket != FREERTOS_INVALID_SOCKET)
 8015d10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015d14:	d01f      	beq.n	8015d56 <prvUDPCommandInterpreterTask+0x66>
 8015d16:	b2a6      	uxth	r6, r4
 8015d18:	4605      	mov	r5, r0
	{
		/* Set to non-blocking sends with a timeout of zero as the socket might
		also be used for debug prints which should not block. */
		FreeRTOS_setsockopt( xServerSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8015d1a:	2304      	movs	r3, #4
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	ab05      	add	r3, sp, #20
 8015d20:	2201      	movs	r2, #1
 8015d22:	2100      	movs	r1, #0
 8015d24:	f7f7 ff20 	bl	800db68 <FreeRTOS_setsockopt>

		/* Zero out the server structure. */
		memset( ( void * ) &xServer, 0x00, sizeof( xServer ) );
 8015d28:	2300      	movs	r3, #0
 8015d2a:	9306      	str	r3, [sp, #24]
 8015d2c:	9307      	str	r3, [sp, #28]

		/* Set family and port. */
		xServer.sin_port = FreeRTOS_htons( usPort );
 8015d2e:	0223      	lsls	r3, r4, #8
 8015d30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015d34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015d38:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
 8015d3c:	f8ad 301a 	strh.w	r3, [sp, #26]

		/* Bind the address to the socket. */
		if( FreeRTOS_bind( xServerSocket, &xServer, sizeof( xServer ) ) == -1 )
 8015d40:	2208      	movs	r2, #8
 8015d42:	a906      	add	r1, sp, #24
 8015d44:	4628      	mov	r0, r5
 8015d46:	f7f7 f906 	bl	800cf56 <FreeRTOS_bind>
 8015d4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015d4e:	d16a      	bne.n	8015e26 <prvUDPCommandInterpreterTask+0x136>
		{
			FreeRTOS_closesocket( xServerSocket );
 8015d50:	4628      	mov	r0, r5
 8015d52:	f7f7 fa3b 	bl	800d1cc <FreeRTOS_closesocket>
	xSocket = prvOpenUDPServerSocket( ( uint16_t ) ( ( uint32_t ) pvParameters ) & 0xffffUL );
 8015d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d5a:	4b40      	ldr	r3, [pc, #256]	; (8015e5c <prvUDPCommandInterpreterTask+0x16c>)
 8015d5c:	601a      	str	r2, [r3, #0]
		vTaskDelete( NULL );
 8015d5e:	2000      	movs	r0, #0
 8015d60:	f7fe fa6e 	bl	8014240 <vTaskDelete>
}
 8015d64:	b00b      	add	sp, #44	; 0x2c
 8015d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						FreeRTOS_sendto( xSocket, pcNewLine,  strlen( pcNewLine ), 0, &xClient, xClientAddressLength );
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	9301      	str	r3, [sp, #4]
 8015d6e:	ab08      	add	r3, sp, #32
 8015d70:	9300      	str	r3, [sp, #0]
 8015d72:	2300      	movs	r3, #0
 8015d74:	2202      	movs	r2, #2
 8015d76:	493a      	ldr	r1, [pc, #232]	; (8015e60 <prvUDPCommandInterpreterTask+0x170>)
 8015d78:	6830      	ldr	r0, [r6, #0]
 8015d7a:	f7f7 f923 	bl	800cfc4 <FreeRTOS_sendto>
						if( cInputIndex == 0 )
 8015d7e:	2c00      	cmp	r4, #0
 8015d80:	d044      	beq.n	8015e0c <prvUDPCommandInterpreterTask+0x11c>
							cOutputString[ 0 ] = 0x00;
 8015d82:	4c38      	ldr	r4, [pc, #224]	; (8015e64 <prvUDPCommandInterpreterTask+0x174>)
 8015d84:	f04f 0900 	mov.w	r9, #0
 8015d88:	f884 9000 	strb.w	r9, [r4]
							xMoreDataToFollow = FreeRTOS_CLIProcessCommand( cInputString, cOutputString, cmdMAX_OUTPUT_SIZE );
 8015d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d90:	4621      	mov	r1, r4
 8015d92:	9803      	ldr	r0, [sp, #12]
 8015d94:	f7ed fe04 	bl	80039a0 <FreeRTOS_CLIProcessCommand>
 8015d98:	4605      	mov	r5, r0
							FreeRTOS_sendto( xSocket, cOutputString,  strlen( ( const char * ) cOutputString ), 0, &xClient, xClientAddressLength );
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f7ea fa22 	bl	80001e4 <strlen>
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	9301      	str	r3, [sp, #4]
 8015da4:	ab08      	add	r3, sp, #32
 8015da6:	9300      	str	r3, [sp, #0]
 8015da8:	2300      	movs	r3, #0
 8015daa:	4602      	mov	r2, r0
 8015dac:	4621      	mov	r1, r4
 8015dae:	6830      	ldr	r0, [r6, #0]
 8015db0:	f7f7 f908 	bl	800cfc4 <FreeRTOS_sendto>
						} while( xMoreDataToFollow != pdFALSE );
 8015db4:	2d00      	cmp	r5, #0
 8015db6:	d1e7      	bne.n	8015d88 <prvUDPCommandInterpreterTask+0x98>
						strcpy( cLastInputString, cInputString );
 8015db8:	9c03      	ldr	r4, [sp, #12]
 8015dba:	4621      	mov	r1, r4
 8015dbc:	482a      	ldr	r0, [pc, #168]	; (8015e68 <prvUDPCommandInterpreterTask+0x178>)
 8015dbe:	f001 fd47 	bl	8017850 <strcpy>
						memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8015dc2:	223c      	movs	r2, #60	; 0x3c
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f001 fd00 	bl	80177cc <memset>
						FreeRTOS_sendto( xSocket, ( void * ) pcEndOfOutputMessage,  strlen( pcEndOfOutputMessage ), 0, &xClient, xClientAddressLength );
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	9301      	str	r3, [sp, #4]
 8015dd0:	ab08      	add	r3, sp, #32
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	2238      	movs	r2, #56	; 0x38
 8015dd8:	4924      	ldr	r1, [pc, #144]	; (8015e6c <prvUDPCommandInterpreterTask+0x17c>)
 8015dda:	6830      	ldr	r0, [r6, #0]
 8015ddc:	f7f7 f8f2 	bl	800cfc4 <FreeRTOS_sendto>
						cInputIndex = 0;
 8015de0:	2400      	movs	r4, #0
				while( lByte < lBytes )
 8015de2:	45d0      	cmp	r8, sl
 8015de4:	dd26      	ble.n	8015e34 <prvUDPCommandInterpreterTask+0x144>
					cRxedChar = cLocalBuffer[ lByte ];
 8015de6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
					lByte++;
 8015dea:	f10a 0a01 	add.w	sl, sl, #1
					if( cRxedChar == '\n' )
 8015dee:	2b0a      	cmp	r3, #10
 8015df0:	d0bb      	beq.n	8015d6a <prvUDPCommandInterpreterTask+0x7a>
						if( cRxedChar == '\r' )
 8015df2:	2b0d      	cmp	r3, #13
 8015df4:	d0f5      	beq.n	8015de2 <prvUDPCommandInterpreterTask+0xf2>
						else if( ( cRxedChar == '\b' ) || ( cRxedChar == cmdASCII_DEL ) )
 8015df6:	2b08      	cmp	r3, #8
 8015df8:	d00d      	beq.n	8015e16 <prvUDPCommandInterpreterTask+0x126>
 8015dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8015dfc:	d00b      	beq.n	8015e16 <prvUDPCommandInterpreterTask+0x126>
							if( cInputIndex < cmdMAX_INPUT_SIZE )
 8015dfe:	2c3b      	cmp	r4, #59	; 0x3b
 8015e00:	d8ef      	bhi.n	8015de2 <prvUDPCommandInterpreterTask+0xf2>
								cInputString[ ( int ) cInputIndex ] = cRxedChar;
 8015e02:	4a15      	ldr	r2, [pc, #84]	; (8015e58 <prvUDPCommandInterpreterTask+0x168>)
 8015e04:	5513      	strb	r3, [r2, r4]
								cInputIndex++;
 8015e06:	3401      	adds	r4, #1
 8015e08:	b2e4      	uxtb	r4, r4
 8015e0a:	e7ea      	b.n	8015de2 <prvUDPCommandInterpreterTask+0xf2>
							strcpy( cInputString, cLastInputString );
 8015e0c:	4916      	ldr	r1, [pc, #88]	; (8015e68 <prvUDPCommandInterpreterTask+0x178>)
 8015e0e:	9803      	ldr	r0, [sp, #12]
 8015e10:	f001 fd1e 	bl	8017850 <strcpy>
 8015e14:	e7b5      	b.n	8015d82 <prvUDPCommandInterpreterTask+0x92>
							if( cInputIndex > 0 )
 8015e16:	2c00      	cmp	r4, #0
 8015e18:	d0e3      	beq.n	8015de2 <prvUDPCommandInterpreterTask+0xf2>
								cInputIndex--;
 8015e1a:	3c01      	subs	r4, #1
 8015e1c:	b2e4      	uxtb	r4, r4
								cInputString[ ( int ) cInputIndex ] = '\0';
 8015e1e:	2300      	movs	r3, #0
 8015e20:	4a0d      	ldr	r2, [pc, #52]	; (8015e58 <prvUDPCommandInterpreterTask+0x168>)
 8015e22:	5513      	strb	r3, [r2, r4]
 8015e24:	e7dd      	b.n	8015de2 <prvUDPCommandInterpreterTask+0xf2>
	xSocket = prvOpenUDPServerSocket( ( uint16_t ) ( ( uint32_t ) pvParameters ) & 0xffffUL );
 8015e26:	4b0d      	ldr	r3, [pc, #52]	; (8015e5c <prvUDPCommandInterpreterTask+0x16c>)
 8015e28:	601d      	str	r5, [r3, #0]
 8015e2a:	2400      	movs	r4, #0
			lBytes = FreeRTOS_recvfrom( xSocket, ( void * ) cLocalBuffer, sizeof( cLocalBuffer ), 0, &xClient, &xClientAddressLength );
 8015e2c:	461e      	mov	r6, r3
 8015e2e:	4f10      	ldr	r7, [pc, #64]	; (8015e70 <prvUDPCommandInterpreterTask+0x180>)
								cInputString[ ( int ) cInputIndex ] = '\0';
 8015e30:	4b09      	ldr	r3, [pc, #36]	; (8015e58 <prvUDPCommandInterpreterTask+0x168>)
 8015e32:	9303      	str	r3, [sp, #12]
			lBytes = FreeRTOS_recvfrom( xSocket, ( void * ) cLocalBuffer, sizeof( cLocalBuffer ), 0, &xClient, &xClientAddressLength );
 8015e34:	9701      	str	r7, [sp, #4]
 8015e36:	ab08      	add	r3, sp, #32
 8015e38:	9300      	str	r3, [sp, #0]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	223c      	movs	r2, #60	; 0x3c
 8015e3e:	490d      	ldr	r1, [pc, #52]	; (8015e74 <prvUDPCommandInterpreterTask+0x184>)
 8015e40:	6830      	ldr	r0, [r6, #0]
 8015e42:	f7f6 fff9 	bl	800ce38 <FreeRTOS_recvfrom>
			if( lBytes > 0 )
 8015e46:	f1b0 0800 	subs.w	r8, r0, #0
 8015e4a:	ddf3      	ble.n	8015e34 <prvUDPCommandInterpreterTask+0x144>
 8015e4c:	4b09      	ldr	r3, [pc, #36]	; (8015e74 <prvUDPCommandInterpreterTask+0x184>)
 8015e4e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8015e52:	f04f 0a00 	mov.w	sl, #0
 8015e56:	e7c6      	b.n	8015de6 <prvUDPCommandInterpreterTask+0xf6>
 8015e58:	20000c1c 	.word	0x20000c1c
 8015e5c:	20000030 	.word	0x20000030
 8015e60:	0801af90 	.word	0x0801af90
 8015e64:	20000cd0 	.word	0x20000cd0
 8015e68:	20000c58 	.word	0x20000c58
 8015e6c:	0801c4d0 	.word	0x0801c4d0
 8015e70:	200010d0 	.word	0x200010d0
 8015e74:	20000c94 	.word	0x20000c94

08015e78 <vStartUDPCommandInterpreterTask>:
{
 8015e78:	b500      	push	{lr}
 8015e7a:	b083      	sub	sp, #12
	xTaskCreate( prvUDPCommandInterpreterTask, "UDP CLI", usStackSize, ( void * ) ulPort, uxPriority, NULL );
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	9301      	str	r3, [sp, #4]
 8015e80:	9200      	str	r2, [sp, #0]
 8015e82:	460b      	mov	r3, r1
 8015e84:	4602      	mov	r2, r0
 8015e86:	4903      	ldr	r1, [pc, #12]	; (8015e94 <vStartUDPCommandInterpreterTask+0x1c>)
 8015e88:	4803      	ldr	r0, [pc, #12]	; (8015e98 <vStartUDPCommandInterpreterTask+0x20>)
 8015e8a:	f7fe f8f1 	bl	8014070 <xTaskCreate>
}
 8015e8e:	b003      	add	sp, #12
 8015e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e94:	0801c50c 	.word	0x0801c50c
 8015e98:	08015cf1 	.word	0x08015cf1

08015e9c <vCreateAndVerifyExampleFiles>:
static const char *pcDirectory1 = "SUB1", *pcDirectory2 = "SUB2", *pcFullPath = "/SUB1/SUB2";

/*-----------------------------------------------------------*/

void vCreateAndVerifyExampleFiles( const char *pcMountPath )
{
 8015e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea0:	b087      	sub	sp, #28
 8015ea2:	9004      	str	r0, [sp, #16]
FF_FILE *pxFile;
char *pcRAMBuffer, *pcFileName;

	/* Allocate buffers used to hold date written to/from the disk, and the
	file names. */
	pcRAMBuffer = ( char * ) pvPortMalloc( fsRAM_BUFFER_SIZE );
 8015ea4:	20c8      	movs	r0, #200	; 0xc8
 8015ea6:	f7fd fb2f 	bl	8013508 <pvPortMalloc>
 8015eaa:	4606      	mov	r6, r0
	pcFileName = ( char * ) pvPortMalloc( ffconfigMAX_FILENAME );
 8015eac:	20c1      	movs	r0, #193	; 0xc1
 8015eae:	f7fd fb2b 	bl	8013508 <pvPortMalloc>
 8015eb2:	4682      	mov	sl, r0
	configASSERT( pcRAMBuffer );
 8015eb4:	b156      	cbz	r6, 8015ecc <vCreateAndVerifyExampleFiles+0x30>
	configASSERT( pcFileName );
 8015eb6:	f1ba 0f00 	cmp.w	sl, #0
 8015eba:	d00c      	beq.n	8015ed6 <vCreateAndVerifyExampleFiles+0x3a>

	/* Ensure in the root of the mount being used. */
	lResult = ff_chdir( pcMountPath );
 8015ebc:	9804      	ldr	r0, [sp, #16]
 8015ebe:	f7f3 fc63 	bl	8009788 <ff_chdir>
	configASSERT( lResult >= 0 );
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	db0c      	blt.n	8015ee0 <vCreateAndVerifyExampleFiles+0x44>
{
 8015ec6:	2501      	movs	r5, #1
		/* Generate a file name. */
		snprintf( pcFileName, ffconfigMAX_FILENAME, "root%03d.txt", ( int ) xFileNumber );

		/* Obtain the current working directory and print out the file name and
		the	directory into which the file is being written. */
		ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 8015ec8:	27c8      	movs	r7, #200	; 0xc8
 8015eca:	e029      	b.n	8015f20 <vCreateAndVerifyExampleFiles+0x84>
	configASSERT( pcRAMBuffer );
 8015ecc:	21a3      	movs	r1, #163	; 0xa3
 8015ece:	48ad      	ldr	r0, [pc, #692]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015ed0:	f001 f9e6 	bl	80172a0 <vAssertCalled>
 8015ed4:	e7ef      	b.n	8015eb6 <vCreateAndVerifyExampleFiles+0x1a>
	configASSERT( pcFileName );
 8015ed6:	21a4      	movs	r1, #164	; 0xa4
 8015ed8:	48aa      	ldr	r0, [pc, #680]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015eda:	f001 f9e1 	bl	80172a0 <vAssertCalled>
 8015ede:	e7ed      	b.n	8015ebc <vCreateAndVerifyExampleFiles+0x20>
	configASSERT( lResult >= 0 );
 8015ee0:	21a8      	movs	r1, #168	; 0xa8
 8015ee2:	48a8      	ldr	r0, [pc, #672]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015ee4:	f001 f9dc 	bl	80172a0 <vAssertCalled>
 8015ee8:	e7ed      	b.n	8015ec6 <vCreateAndVerifyExampleFiles+0x2a>
		FF_PRINTF( "Creating file %s in %s\n", pcFileName, pcRAMBuffer );

		/* Open the file, creating the file if it does not already exist. */
		pxFile = ff_fopen( pcFileName, "w" );
		configASSERT( pxFile );
 8015eea:	21b9      	movs	r1, #185	; 0xb9
 8015eec:	48a5      	ldr	r0, [pc, #660]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015eee:	f001 f9d7 	bl	80172a0 <vAssertCalled>
 8015ef2:	e02b      	b.n	8015f4c <vCreateAndVerifyExampleFiles+0xb0>
		memset( pcRAMBuffer, ( int ) ( '0' + xFileNumber ), fsRAM_BUFFER_SIZE );

		/* Write the RAM buffer to the opened file a number of times.  The
		number of times the RAM buffer is written to the file depends on the
		file number, so the length of each created file will be different. */
		for( xWriteNumber = 0; xWriteNumber < xFileNumber; xWriteNumber++ )
 8015ef4:	3401      	adds	r4, #1
 8015ef6:	42ac      	cmp	r4, r5
 8015ef8:	d00c      	beq.n	8015f14 <vCreateAndVerifyExampleFiles+0x78>
		{
			lItemsWritten = ff_fwrite( pcRAMBuffer, fsRAM_BUFFER_SIZE, 1, pxFile );
 8015efa:	4643      	mov	r3, r8
 8015efc:	464a      	mov	r2, r9
 8015efe:	4639      	mov	r1, r7
 8015f00:	4630      	mov	r0, r6
 8015f02:	f7f3 f85f 	bl	8008fc4 <ff_fwrite>
			configASSERT( lItemsWritten == 1 );
 8015f06:	2801      	cmp	r0, #1
 8015f08:	d0f4      	beq.n	8015ef4 <vCreateAndVerifyExampleFiles+0x58>
 8015f0a:	21c5      	movs	r1, #197	; 0xc5
 8015f0c:	4658      	mov	r0, fp
 8015f0e:	f001 f9c7 	bl	80172a0 <vAssertCalled>
 8015f12:	e7ef      	b.n	8015ef4 <vCreateAndVerifyExampleFiles+0x58>
		}

		/* Close the file so another file can be created. */
		ff_fclose( pxFile );
 8015f14:	4640      	mov	r0, r8
 8015f16:	f7f3 f817 	bl	8008f48 <ff_fclose>
	for( xFileNumber = 1; xFileNumber <= xMaxFiles; xFileNumber++ )
 8015f1a:	3501      	adds	r5, #1
 8015f1c:	2d06      	cmp	r5, #6
 8015f1e:	d023      	beq.n	8015f68 <vCreateAndVerifyExampleFiles+0xcc>
		snprintf( pcFileName, ffconfigMAX_FILENAME, "root%03d.txt", ( int ) xFileNumber );
 8015f20:	462b      	mov	r3, r5
 8015f22:	4a99      	ldr	r2, [pc, #612]	; (8016188 <vCreateAndVerifyExampleFiles+0x2ec>)
 8015f24:	21c1      	movs	r1, #193	; 0xc1
 8015f26:	4650      	mov	r0, sl
 8015f28:	f001 f857 	bl	8016fda <snprintf>
		ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f7f3 f9b6 	bl	80092a0 <ff_getcwd>
		FF_PRINTF( "Creating file %s in %s\n", pcFileName, pcRAMBuffer );
 8015f34:	4632      	mov	r2, r6
 8015f36:	4651      	mov	r1, sl
 8015f38:	4894      	ldr	r0, [pc, #592]	; (801618c <vCreateAndVerifyExampleFiles+0x2f0>)
 8015f3a:	f000 fd09 	bl	8016950 <lUDPLoggingPrintf>
		pxFile = ff_fopen( pcFileName, "w" );
 8015f3e:	4994      	ldr	r1, [pc, #592]	; (8016190 <vCreateAndVerifyExampleFiles+0x2f4>)
 8015f40:	4650      	mov	r0, sl
 8015f42:	f7f2 ffdc 	bl	8008efe <ff_fopen>
		configASSERT( pxFile );
 8015f46:	4680      	mov	r8, r0
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	d0ce      	beq.n	8015eea <vCreateAndVerifyExampleFiles+0x4e>
		memset( pcRAMBuffer, ( int ) ( '0' + xFileNumber ), fsRAM_BUFFER_SIZE );
 8015f4c:	463a      	mov	r2, r7
 8015f4e:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8015f52:	4630      	mov	r0, r6
 8015f54:	f001 fc3a 	bl	80177cc <memset>
		for( xWriteNumber = 0; xWriteNumber < xFileNumber; xWriteNumber++ )
 8015f58:	2d00      	cmp	r5, #0
 8015f5a:	dddb      	ble.n	8015f14 <vCreateAndVerifyExampleFiles+0x78>
 8015f5c:	2400      	movs	r4, #0
			lItemsWritten = ff_fwrite( pcRAMBuffer, fsRAM_BUFFER_SIZE, 1, pxFile );
 8015f5e:	f04f 0901 	mov.w	r9, #1
			configASSERT( lItemsWritten == 1 );
 8015f62:	f8df b220 	ldr.w	fp, [pc, #544]	; 8016184 <vCreateAndVerifyExampleFiles+0x2e8>
 8015f66:	e7c8      	b.n	8015efa <vCreateAndVerifyExampleFiles+0x5e>
	}

	vPortFree( pcRAMBuffer );
 8015f68:	4630      	mov	r0, r6
 8015f6a:	f7fd fb33 	bl	80135d4 <vPortFree>
	vPortFree( pcFileName );
 8015f6e:	4650      	mov	r0, sl
 8015f70:	f7fd fb30 	bl	80135d4 <vPortFree>
FF_FILE *pxFile;
char *pcRAMBuffer, *pcFileName;

	/* Allocate buffers used to hold date written to/from the disk, and the
	file names. */
	pcRAMBuffer = ( char * ) pvPortMalloc( fsRAM_BUFFER_SIZE );
 8015f74:	20c8      	movs	r0, #200	; 0xc8
 8015f76:	f7fd fac7 	bl	8013508 <pvPortMalloc>
 8015f7a:	4683      	mov	fp, r0
	pcFileName = ( char * ) pvPortMalloc( ffconfigMAX_FILENAME );
 8015f7c:	20c1      	movs	r0, #193	; 0xc1
 8015f7e:	f7fd fac3 	bl	8013508 <pvPortMalloc>
 8015f82:	9005      	str	r0, [sp, #20]
	configASSERT( pcRAMBuffer );
 8015f84:	f1bb 0f00 	cmp.w	fp, #0
 8015f88:	d004      	beq.n	8015f94 <vCreateAndVerifyExampleFiles+0xf8>
	configASSERT( pcFileName );
 8015f8a:	9b05      	ldr	r3, [sp, #20]
 8015f8c:	b13b      	cbz	r3, 8015f9e <vCreateAndVerifyExampleFiles+0x102>
		for( xWriteNumber = 0; xWriteNumber < xFileNumber; xWriteNumber++ )
 8015f8e:	f04f 0a01 	mov.w	sl, #1
 8015f92:	e03c      	b.n	801600e <vCreateAndVerifyExampleFiles+0x172>
	configASSERT( pcRAMBuffer );
 8015f94:	21dd      	movs	r1, #221	; 0xdd
 8015f96:	487b      	ldr	r0, [pc, #492]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015f98:	f001 f982 	bl	80172a0 <vAssertCalled>
 8015f9c:	e7f5      	b.n	8015f8a <vCreateAndVerifyExampleFiles+0xee>
	configASSERT( pcFileName );
 8015f9e:	21de      	movs	r1, #222	; 0xde
 8015fa0:	4878      	ldr	r0, [pc, #480]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015fa2:	f001 f97d 	bl	80172a0 <vAssertCalled>
 8015fa6:	e7f2      	b.n	8015f8e <vCreateAndVerifyExampleFiles+0xf2>
		ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
		FF_PRINTF( "Reading file %s from %s\n", pcFileName, pcRAMBuffer );

		/* Open the file for reading. */
		pxFile = ff_fopen( pcFileName, "r" );
		configASSERT( pxFile );
 8015fa8:	21ee      	movs	r1, #238	; 0xee
 8015faa:	4876      	ldr	r0, [pc, #472]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8015fac:	f001 f978 	bl	80172a0 <vAssertCalled>
 8015fb0:	e044      	b.n	801603c <vCreateAndVerifyExampleFiles+0x1a0>
			configASSERT( xItemsRead == 1 );

			/* Check the RAM buffer is filled with the expected data.  Each
			file contains a different repeating ascii character that indicates
			the number of the file. */
			for( xChar = 0; xChar < fsRAM_BUFFER_SIZE; xChar++ )
 8015fb2:	42a5      	cmp	r5, r4
 8015fb4:	d008      	beq.n	8015fc8 <vCreateAndVerifyExampleFiles+0x12c>
			{
				configASSERT( pcRAMBuffer[ xChar ] == ( '0' + ( char ) xFileNumber ) );
 8015fb6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015fba:	42b3      	cmp	r3, r6
 8015fbc:	d0f9      	beq.n	8015fb2 <vCreateAndVerifyExampleFiles+0x116>
 8015fbe:	4639      	mov	r1, r7
 8015fc0:	4640      	mov	r0, r8
 8015fc2:	f001 f96d 	bl	80172a0 <vAssertCalled>
 8015fc6:	e7f4      	b.n	8015fb2 <vCreateAndVerifyExampleFiles+0x116>
		for( xReadNumber = 0; xReadNumber < xFileNumber; xReadNumber++ )
 8015fc8:	f109 0901 	add.w	r9, r9, #1
 8015fcc:	45d1      	cmp	r9, sl
 8015fce:	d016      	beq.n	8015ffe <vCreateAndVerifyExampleFiles+0x162>
			memset( pcRAMBuffer, 0x00, fsRAM_BUFFER_SIZE );
 8015fd0:	22c8      	movs	r2, #200	; 0xc8
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	4658      	mov	r0, fp
 8015fd6:	f001 fbf9 	bl	80177cc <memset>
			xItemsRead = ff_fread( pcRAMBuffer, fsRAM_BUFFER_SIZE, 1, pxFile );
 8015fda:	9b03      	ldr	r3, [sp, #12]
 8015fdc:	2201      	movs	r2, #1
 8015fde:	21c8      	movs	r1, #200	; 0xc8
 8015fe0:	4658      	mov	r0, fp
 8015fe2:	f7f2 ffdd 	bl	8008fa0 <ff_fread>
			configASSERT( xItemsRead == 1 );
 8015fe6:	2801      	cmp	r0, #1
 8015fe8:	d003      	beq.n	8015ff2 <vCreateAndVerifyExampleFiles+0x156>
 8015fea:	21f8      	movs	r1, #248	; 0xf8
 8015fec:	4640      	mov	r0, r8
 8015fee:	f001 f957 	bl	80172a0 <vAssertCalled>
 8015ff2:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 8015ff6:	f10b 05c7 	add.w	r5, fp, #199	; 0xc7
				configASSERT( pcRAMBuffer[ xChar ] == ( '0' + ( char ) xFileNumber ) );
 8015ffa:	27ff      	movs	r7, #255	; 0xff
 8015ffc:	e7db      	b.n	8015fb6 <vCreateAndVerifyExampleFiles+0x11a>
			}
		}

		/* Close the file. */
		ff_fclose( pxFile );
 8015ffe:	9803      	ldr	r0, [sp, #12]
 8016000:	f7f2 ffa2 	bl	8008f48 <ff_fclose>
	for( xFileNumber = 1; xFileNumber <= xMaxFiles; xFileNumber++ )
 8016004:	f10a 0a01 	add.w	sl, sl, #1
 8016008:	f1ba 0f06 	cmp.w	sl, #6
 801600c:	d021      	beq.n	8016052 <vCreateAndVerifyExampleFiles+0x1b6>
		snprintf( pcFileName, ffconfigMAX_FILENAME, "root%03d.txt", ( int ) xFileNumber );
 801600e:	4653      	mov	r3, sl
 8016010:	4a5d      	ldr	r2, [pc, #372]	; (8016188 <vCreateAndVerifyExampleFiles+0x2ec>)
 8016012:	21c1      	movs	r1, #193	; 0xc1
 8016014:	9c05      	ldr	r4, [sp, #20]
 8016016:	4620      	mov	r0, r4
 8016018:	f000 ffdf 	bl	8016fda <snprintf>
		ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 801601c:	21c8      	movs	r1, #200	; 0xc8
 801601e:	4658      	mov	r0, fp
 8016020:	f7f3 f93e 	bl	80092a0 <ff_getcwd>
		FF_PRINTF( "Reading file %s from %s\n", pcFileName, pcRAMBuffer );
 8016024:	465a      	mov	r2, fp
 8016026:	4621      	mov	r1, r4
 8016028:	485a      	ldr	r0, [pc, #360]	; (8016194 <vCreateAndVerifyExampleFiles+0x2f8>)
 801602a:	f000 fc91 	bl	8016950 <lUDPLoggingPrintf>
		pxFile = ff_fopen( pcFileName, "r" );
 801602e:	495a      	ldr	r1, [pc, #360]	; (8016198 <vCreateAndVerifyExampleFiles+0x2fc>)
 8016030:	4620      	mov	r0, r4
 8016032:	f7f2 ff64 	bl	8008efe <ff_fopen>
		configASSERT( pxFile );
 8016036:	9003      	str	r0, [sp, #12]
 8016038:	2800      	cmp	r0, #0
 801603a:	d0b5      	beq.n	8015fa8 <vCreateAndVerifyExampleFiles+0x10c>
		for( xReadNumber = 0; xReadNumber < xFileNumber; xReadNumber++ )
 801603c:	f1ba 0f00 	cmp.w	sl, #0
 8016040:	dddd      	ble.n	8015ffe <vCreateAndVerifyExampleFiles+0x162>
 8016042:	f04f 0900 	mov.w	r9, #0
			configASSERT( xItemsRead == 1 );
 8016046:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8016184 <vCreateAndVerifyExampleFiles+0x2e8>
				configASSERT( pcRAMBuffer[ xChar ] == ( '0' + ( char ) xFileNumber ) );
 801604a:	fa5f f68a 	uxtb.w	r6, sl
 801604e:	3630      	adds	r6, #48	; 0x30
 8016050:	e7be      	b.n	8015fd0 <vCreateAndVerifyExampleFiles+0x134>
	}

	vPortFree( pcRAMBuffer );
 8016052:	4658      	mov	r0, fp
 8016054:	f7fd fabe 	bl	80135d4 <vPortFree>
	vPortFree( pcFileName );
 8016058:	9805      	ldr	r0, [sp, #20]
 801605a:	f7fd fabb 	bl	80135d4 <vPortFree>
FF_FILE *pxFile;
char *pcRAMBuffer, *pcFileName;

	/* Allocate buffers used to hold date written to/from the disk, and the
	file names. */
	pcRAMBuffer = ( char * ) pvPortMalloc( fsRAM_BUFFER_SIZE );
 801605e:	20c8      	movs	r0, #200	; 0xc8
 8016060:	f7fd fa52 	bl	8013508 <pvPortMalloc>
 8016064:	4606      	mov	r6, r0
	pcFileName = ( char * ) pvPortMalloc( ffconfigMAX_FILENAME );
 8016066:	20c1      	movs	r0, #193	; 0xc1
 8016068:	f7fd fa4e 	bl	8013508 <pvPortMalloc>
 801606c:	4681      	mov	r9, r0
	configASSERT( pcRAMBuffer );
 801606e:	2e00      	cmp	r6, #0
 8016070:	d068      	beq.n	8016144 <vCreateAndVerifyExampleFiles+0x2a8>
	configASSERT( pcFileName );
 8016072:	f1b9 0f00 	cmp.w	r9, #0
 8016076:	d06b      	beq.n	8016150 <vCreateAndVerifyExampleFiles+0x2b4>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 8016078:	21c8      	movs	r1, #200	; 0xc8
 801607a:	4630      	mov	r0, r6
 801607c:	f7f3 f910 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "In directory %s\n", pcRAMBuffer );
 8016080:	4631      	mov	r1, r6
 8016082:	4846      	ldr	r0, [pc, #280]	; (801619c <vCreateAndVerifyExampleFiles+0x300>)
 8016084:	f000 fc64 	bl	8016950 <lUDPLoggingPrintf>

	/* Create a sub directory. */
	iReturn = ff_mkdir( pcDirectory1 );
 8016088:	4845      	ldr	r0, [pc, #276]	; (80161a0 <vCreateAndVerifyExampleFiles+0x304>)
 801608a:	f7f2 ffd0 	bl	800902e <ff_mkdir>
	configASSERT( iReturn == pdFREERTOS_ERRNO_NONE );
 801608e:	b120      	cbz	r0, 801609a <vCreateAndVerifyExampleFiles+0x1fe>
 8016090:	f44f 7191 	mov.w	r1, #290	; 0x122
 8016094:	483b      	ldr	r0, [pc, #236]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8016096:	f001 f903 	bl	80172a0 <vAssertCalled>

	/* Move into the created sub-directory. */
	iReturn = ff_chdir( pcDirectory1 );
 801609a:	4841      	ldr	r0, [pc, #260]	; (80161a0 <vCreateAndVerifyExampleFiles+0x304>)
 801609c:	f7f3 fb74 	bl	8009788 <ff_chdir>
	configASSERT( iReturn == pdFREERTOS_ERRNO_NONE );
 80160a0:	b120      	cbz	r0, 80160ac <vCreateAndVerifyExampleFiles+0x210>
 80160a2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80160a6:	4837      	ldr	r0, [pc, #220]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 80160a8:	f001 f8fa 	bl	80172a0 <vAssertCalled>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 80160ac:	21c8      	movs	r1, #200	; 0xc8
 80160ae:	4630      	mov	r0, r6
 80160b0:	f7f3 f8f6 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "In directory %s\n", pcRAMBuffer );
 80160b4:	4631      	mov	r1, r6
 80160b6:	4839      	ldr	r0, [pc, #228]	; (801619c <vCreateAndVerifyExampleFiles+0x300>)
 80160b8:	f000 fc4a 	bl	8016950 <lUDPLoggingPrintf>

	/* Create a subdirectory in the new directory. */
	iReturn = ff_mkdir( pcDirectory2 );
 80160bc:	4839      	ldr	r0, [pc, #228]	; (80161a4 <vCreateAndVerifyExampleFiles+0x308>)
 80160be:	f7f2 ffb6 	bl	800902e <ff_mkdir>
	configASSERT( iReturn == pdFREERTOS_ERRNO_NONE );
 80160c2:	b120      	cbz	r0, 80160ce <vCreateAndVerifyExampleFiles+0x232>
 80160c4:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80160c8:	482e      	ldr	r0, [pc, #184]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 80160ca:	f001 f8e9 	bl	80172a0 <vAssertCalled>

	/* Move into the directory just created - now two directories down from
	the root. */
	iReturn = ff_chdir( pcDirectory2 );
 80160ce:	4835      	ldr	r0, [pc, #212]	; (80161a4 <vCreateAndVerifyExampleFiles+0x308>)
 80160d0:	f7f3 fb5a 	bl	8009788 <ff_chdir>
	configASSERT( iReturn == pdFREERTOS_ERRNO_NONE );
 80160d4:	4682      	mov	sl, r0
 80160d6:	b120      	cbz	r0, 80160e2 <vCreateAndVerifyExampleFiles+0x246>
 80160d8:	f240 1133 	movw	r1, #307	; 0x133
 80160dc:	4829      	ldr	r0, [pc, #164]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 80160de:	f001 f8df 	bl	80172a0 <vAssertCalled>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 80160e2:	21c8      	movs	r1, #200	; 0xc8
 80160e4:	4630      	mov	r0, r6
 80160e6:	f7f3 f8db 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "In directory %s\n", pcRAMBuffer );
 80160ea:	4631      	mov	r1, r6
 80160ec:	482b      	ldr	r0, [pc, #172]	; (801619c <vCreateAndVerifyExampleFiles+0x300>)
 80160ee:	f000 fc2f 	bl	8016950 <lUDPLoggingPrintf>
	snprintf( pcFileName, ffconfigMAX_FILENAME, "%s%s", pcMountPath, pcFullPath );
 80160f2:	4b2d      	ldr	r3, [pc, #180]	; (80161a8 <vCreateAndVerifyExampleFiles+0x30c>)
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	9b04      	ldr	r3, [sp, #16]
 80160f8:	4a2c      	ldr	r2, [pc, #176]	; (80161ac <vCreateAndVerifyExampleFiles+0x310>)
 80160fa:	21c1      	movs	r1, #193	; 0xc1
 80160fc:	4648      	mov	r0, r9
 80160fe:	f000 ff6c 	bl	8016fda <snprintf>
	configASSERT( strcmp( pcRAMBuffer, pcFileName ) == 0 );
 8016102:	4649      	mov	r1, r9
 8016104:	4630      	mov	r0, r6
 8016106:	f7ea f863 	bl	80001d0 <strcmp>
 801610a:	b120      	cbz	r0, 8016116 <vCreateAndVerifyExampleFiles+0x27a>
 801610c:	f240 1139 	movw	r1, #313	; 0x139
 8016110:	481c      	ldr	r0, [pc, #112]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8016112:	f001 f8c5 	bl	80172a0 <vAssertCalled>

	/* Generate the file name. */
	snprintf( pcFileName, ffconfigMAX_FILENAME, "%s.txt", pcDirectory2 );
 8016116:	4b23      	ldr	r3, [pc, #140]	; (80161a4 <vCreateAndVerifyExampleFiles+0x308>)
 8016118:	4a25      	ldr	r2, [pc, #148]	; (80161b0 <vCreateAndVerifyExampleFiles+0x314>)
 801611a:	21c1      	movs	r1, #193	; 0xc1
 801611c:	4648      	mov	r0, r9
 801611e:	f000 ff5c 	bl	8016fda <snprintf>

	/* Print out the file name and the directory into which the file is being
	written. */
	FF_PRINTF( "Writing file %s in %s\n", pcFileName, pcRAMBuffer );
 8016122:	4632      	mov	r2, r6
 8016124:	4649      	mov	r1, r9
 8016126:	4823      	ldr	r0, [pc, #140]	; (80161b4 <vCreateAndVerifyExampleFiles+0x318>)
 8016128:	f000 fc12 	bl	8016950 <lUDPLoggingPrintf>

	pxFile = ff_fopen( pcFileName, "w" );
 801612c:	4918      	ldr	r1, [pc, #96]	; (8016190 <vCreateAndVerifyExampleFiles+0x2f4>)
 801612e:	4648      	mov	r0, r9
 8016130:	f7f2 fee5 	bl	8008efe <ff_fopen>
	configASSERT( pxFile );
 8016134:	4605      	mov	r5, r0
 8016136:	b188      	cbz	r0, 801615c <vCreateAndVerifyExampleFiles+0x2c0>
		for( xReadNumber = 0; xReadNumber < xFileNumber; xReadNumber++ )
 8016138:	2430      	movs	r4, #48	; 0x30
	/* Create a file 1 byte at a time.  The file is filled with incrementing
	ascii characters starting from '0'. */
	for( iByte = 0; iByte < fsPUTC_FILE_SIZE; iByte++ )
	{
		iReturned = ff_fputc( ( ( int ) '0' + iByte ), pxFile );
		configASSERT( iReturned ==  ( ( int ) '0' + iByte ) );
 801613a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8016184 <vCreateAndVerifyExampleFiles+0x2e8>
 801613e:	f44f 77a5 	mov.w	r7, #330	; 0x14a
 8016142:	e014      	b.n	801616e <vCreateAndVerifyExampleFiles+0x2d2>
	configASSERT( pcRAMBuffer );
 8016144:	f240 1119 	movw	r1, #281	; 0x119
 8016148:	480e      	ldr	r0, [pc, #56]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 801614a:	f001 f8a9 	bl	80172a0 <vAssertCalled>
 801614e:	e790      	b.n	8016072 <vCreateAndVerifyExampleFiles+0x1d6>
	configASSERT( pcFileName );
 8016150:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8016154:	480b      	ldr	r0, [pc, #44]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8016156:	f001 f8a3 	bl	80172a0 <vAssertCalled>
 801615a:	e78d      	b.n	8016078 <vCreateAndVerifyExampleFiles+0x1dc>
	configASSERT( pxFile );
 801615c:	f240 1143 	movw	r1, #323	; 0x143
 8016160:	4808      	ldr	r0, [pc, #32]	; (8016184 <vCreateAndVerifyExampleFiles+0x2e8>)
 8016162:	f001 f89d 	bl	80172a0 <vAssertCalled>
 8016166:	e7e7      	b.n	8016138 <vCreateAndVerifyExampleFiles+0x29c>
 8016168:	3401      	adds	r4, #1
	for( iByte = 0; iByte < fsPUTC_FILE_SIZE; iByte++ )
 801616a:	2c94      	cmp	r4, #148	; 0x94
 801616c:	d024      	beq.n	80161b8 <vCreateAndVerifyExampleFiles+0x31c>
		iReturned = ff_fputc( ( ( int ) '0' + iByte ), pxFile );
 801616e:	4629      	mov	r1, r5
 8016170:	4620      	mov	r0, r4
 8016172:	f7f2 ff49 	bl	8009008 <ff_fputc>
		configASSERT( iReturned ==  ( ( int ) '0' + iByte ) );
 8016176:	4284      	cmp	r4, r0
 8016178:	d0f6      	beq.n	8016168 <vCreateAndVerifyExampleFiles+0x2cc>
 801617a:	4639      	mov	r1, r7
 801617c:	4640      	mov	r0, r8
 801617e:	f001 f88f 	bl	80172a0 <vAssertCalled>
 8016182:	e7f1      	b.n	8016168 <vCreateAndVerifyExampleFiles+0x2cc>
 8016184:	08026628 	.word	0x08026628
 8016188:	0802666c 	.word	0x0802666c
 801618c:	0802667c 	.word	0x0802667c
 8016190:	08026694 	.word	0x08026694
 8016194:	08026698 	.word	0x08026698
 8016198:	0801bcb4 	.word	0x0801bcb4
 801619c:	080266b4 	.word	0x080266b4
 80161a0:	080266c8 	.word	0x080266c8
 80161a4:	080266d0 	.word	0x080266d0
 80161a8:	080266d8 	.word	0x080266d8
 80161ac:	08019328 	.word	0x08019328
 80161b0:	080266e4 	.word	0x080266e4
 80161b4:	080266ec 	.word	0x080266ec
	}

	/* Finished so close the file. */
	ff_fclose( pxFile );
 80161b8:	4628      	mov	r0, r5
 80161ba:	f7f2 fec5 	bl	8008f48 <ff_fclose>

	/* Move back to the root directory. */
	iReturned = ff_chdir( "../.." );
 80161be:	4864      	ldr	r0, [pc, #400]	; (8016350 <vCreateAndVerifyExampleFiles+0x4b4>)
 80161c0:	f7f3 fae2 	bl	8009788 <ff_chdir>
	configASSERT( iReturn == pdFREERTOS_ERRNO_NONE );
 80161c4:	f1ba 0f00 	cmp.w	sl, #0
 80161c8:	d004      	beq.n	80161d4 <vCreateAndVerifyExampleFiles+0x338>
 80161ca:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80161ce:	4861      	ldr	r0, [pc, #388]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 80161d0:	f001 f866 	bl	80172a0 <vAssertCalled>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 80161d4:	21c8      	movs	r1, #200	; 0xc8
 80161d6:	4630      	mov	r0, r6
 80161d8:	f7f3 f862 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "Back in root directory %s\n", pcRAMBuffer );
 80161dc:	4631      	mov	r1, r6
 80161de:	485e      	ldr	r0, [pc, #376]	; (8016358 <vCreateAndVerifyExampleFiles+0x4bc>)
 80161e0:	f000 fbb6 	bl	8016950 <lUDPLoggingPrintf>
	configASSERT( strcmp( pcRAMBuffer, pcMountPath ) == 0 );
 80161e4:	9904      	ldr	r1, [sp, #16]
 80161e6:	4630      	mov	r0, r6
 80161e8:	f7e9 fff2 	bl	80001d0 <strcmp>
 80161ec:	b120      	cbz	r0, 80161f8 <vCreateAndVerifyExampleFiles+0x35c>
 80161ee:	f240 1157 	movw	r1, #343	; 0x157
 80161f2:	4858      	ldr	r0, [pc, #352]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 80161f4:	f001 f854 	bl	80172a0 <vAssertCalled>

	vPortFree( pcRAMBuffer );
 80161f8:	4630      	mov	r0, r6
 80161fa:	f7fd f9eb 	bl	80135d4 <vPortFree>
	vPortFree( pcFileName );
 80161fe:	4648      	mov	r0, r9
 8016200:	f7fd f9e8 	bl	80135d4 <vPortFree>
FF_FILE *pxFile;
char *pcRAMBuffer, *pcFileName;

	/* Allocate buffers used to hold date written to/from the disk, and the
	file names. */
	pcRAMBuffer = ( char * ) pvPortMalloc( fsRAM_BUFFER_SIZE );
 8016204:	20c8      	movs	r0, #200	; 0xc8
 8016206:	f7fd f97f 	bl	8013508 <pvPortMalloc>
 801620a:	4681      	mov	r9, r0
	pcFileName = ( char * ) pvPortMalloc( ffconfigMAX_FILENAME );
 801620c:	20c1      	movs	r0, #193	; 0xc1
 801620e:	f7fd f97b 	bl	8013508 <pvPortMalloc>
 8016212:	4680      	mov	r8, r0
	configASSERT( pcRAMBuffer );
 8016214:	f1b9 0f00 	cmp.w	r9, #0
 8016218:	d03d      	beq.n	8016296 <vCreateAndVerifyExampleFiles+0x3fa>
	configASSERT( pcFileName );
 801621a:	f1b8 0f00 	cmp.w	r8, #0
 801621e:	d040      	beq.n	80162a2 <vCreateAndVerifyExampleFiles+0x406>

	/* Move into the directory in which the file was created. */
	snprintf( pcFileName, ffconfigMAX_FILENAME, "%s%s", pcMountPath, pcFullPath );
 8016220:	4b4e      	ldr	r3, [pc, #312]	; (801635c <vCreateAndVerifyExampleFiles+0x4c0>)
 8016222:	9300      	str	r3, [sp, #0]
 8016224:	9b04      	ldr	r3, [sp, #16]
 8016226:	4a4e      	ldr	r2, [pc, #312]	; (8016360 <vCreateAndVerifyExampleFiles+0x4c4>)
 8016228:	21c1      	movs	r1, #193	; 0xc1
 801622a:	4640      	mov	r0, r8
 801622c:	f000 fed5 	bl	8016fda <snprintf>
	iReturned = ff_chdir( pcFileName );
 8016230:	4640      	mov	r0, r8
 8016232:	f7f3 faa9 	bl	8009788 <ff_chdir>
	configASSERT( iReturned == pdFREERTOS_ERRNO_NONE );
 8016236:	b120      	cbz	r0, 8016242 <vCreateAndVerifyExampleFiles+0x3a6>
 8016238:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 801623c:	4845      	ldr	r0, [pc, #276]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 801623e:	f001 f82f 	bl	80172a0 <vAssertCalled>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 8016242:	21c8      	movs	r1, #200	; 0xc8
 8016244:	4648      	mov	r0, r9
 8016246:	f7f3 f82b 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "Back in directory %s\n", pcRAMBuffer );
 801624a:	4649      	mov	r1, r9
 801624c:	4845      	ldr	r0, [pc, #276]	; (8016364 <vCreateAndVerifyExampleFiles+0x4c8>)
 801624e:	f000 fb7f 	bl	8016950 <lUDPLoggingPrintf>
	configASSERT( strcmp( pcRAMBuffer, pcFileName ) == 0 );
 8016252:	4641      	mov	r1, r8
 8016254:	4648      	mov	r0, r9
 8016256:	f7e9 ffbb 	bl	80001d0 <strcmp>
 801625a:	b120      	cbz	r0, 8016266 <vCreateAndVerifyExampleFiles+0x3ca>
 801625c:	f240 1173 	movw	r1, #371	; 0x173
 8016260:	483c      	ldr	r0, [pc, #240]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 8016262:	f001 f81d 	bl	80172a0 <vAssertCalled>

	/* pcFileName is about to be overwritten - take a copy. */
	strcpy( pcRAMBuffer, pcFileName );
 8016266:	4641      	mov	r1, r8
 8016268:	4648      	mov	r0, r9
 801626a:	f001 faf1 	bl	8017850 <strcpy>

	/* Generate the file name. */
	sprintf( pcFileName, "%s.txt", pcDirectory2 );
 801626e:	4a3e      	ldr	r2, [pc, #248]	; (8016368 <vCreateAndVerifyExampleFiles+0x4cc>)
 8016270:	493e      	ldr	r1, [pc, #248]	; (801636c <vCreateAndVerifyExampleFiles+0x4d0>)
 8016272:	4640      	mov	r0, r8
 8016274:	f000 fd57 	bl	8016d26 <sprintf>

	/* Print out the file name and the directory from which the file is being
	read. */
	FF_PRINTF( "Reading file %s in %s\n", pcFileName, pcRAMBuffer );
 8016278:	464a      	mov	r2, r9
 801627a:	4641      	mov	r1, r8
 801627c:	483c      	ldr	r0, [pc, #240]	; (8016370 <vCreateAndVerifyExampleFiles+0x4d4>)
 801627e:	f000 fb67 	bl	8016950 <lUDPLoggingPrintf>

	/* This time the file is opened for reading. */
	pxFile = ff_fopen( pcFileName, "r" );
 8016282:	493c      	ldr	r1, [pc, #240]	; (8016374 <vCreateAndVerifyExampleFiles+0x4d8>)
 8016284:	4640      	mov	r0, r8
 8016286:	f7f2 fe3a 	bl	8008efe <ff_fopen>
 801628a:	4605      	mov	r5, r0
 801628c:	2430      	movs	r4, #48	; 0x30

	/* Read the file 1 byte at a time. */
	for( iByte = 0; iByte < fsPUTC_FILE_SIZE; iByte++ )
	{
		iReturned = ff_fgetc( pxFile );
		configASSERT( iReturned ==  ( ( int ) '0' + iByte ) );
 801628e:	4f31      	ldr	r7, [pc, #196]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 8016290:	f44f 76c3 	mov.w	r6, #390	; 0x186
 8016294:	e00e      	b.n	80162b4 <vCreateAndVerifyExampleFiles+0x418>
	configASSERT( pcRAMBuffer );
 8016296:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801629a:	482e      	ldr	r0, [pc, #184]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 801629c:	f001 f800 	bl	80172a0 <vAssertCalled>
 80162a0:	e7bb      	b.n	801621a <vCreateAndVerifyExampleFiles+0x37e>
	configASSERT( pcFileName );
 80162a2:	f240 1169 	movw	r1, #361	; 0x169
 80162a6:	482b      	ldr	r0, [pc, #172]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 80162a8:	f000 fffa 	bl	80172a0 <vAssertCalled>
 80162ac:	e7b8      	b.n	8016220 <vCreateAndVerifyExampleFiles+0x384>
 80162ae:	3401      	adds	r4, #1
	for( iByte = 0; iByte < fsPUTC_FILE_SIZE; iByte++ )
 80162b0:	2c94      	cmp	r4, #148	; 0x94
 80162b2:	d009      	beq.n	80162c8 <vCreateAndVerifyExampleFiles+0x42c>
		iReturned = ff_fgetc( pxFile );
 80162b4:	4628      	mov	r0, r5
 80162b6:	f7f2 fe97 	bl	8008fe8 <ff_fgetc>
		configASSERT( iReturned ==  ( ( int ) '0' + iByte ) );
 80162ba:	42a0      	cmp	r0, r4
 80162bc:	d0f7      	beq.n	80162ae <vCreateAndVerifyExampleFiles+0x412>
 80162be:	4631      	mov	r1, r6
 80162c0:	4638      	mov	r0, r7
 80162c2:	f000 ffed 	bl	80172a0 <vAssertCalled>
 80162c6:	e7f2      	b.n	80162ae <vCreateAndVerifyExampleFiles+0x412>
	}

	/* Should not be able to read another bytes. */
	iReturned = ff_fgetc( pxFile );
 80162c8:	4628      	mov	r0, r5
 80162ca:	f7f2 fe8d 	bl	8008fe8 <ff_fgetc>
	configASSERT( iReturned ==  FF_EOF );
 80162ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80162d2:	d004      	beq.n	80162de <vCreateAndVerifyExampleFiles+0x442>
 80162d4:	f240 118b 	movw	r1, #395	; 0x18b
 80162d8:	481e      	ldr	r0, [pc, #120]	; (8016354 <vCreateAndVerifyExampleFiles+0x4b8>)
 80162da:	f000 ffe1 	bl	80172a0 <vAssertCalled>

	/* Finished so close the file. */
	ff_fclose( pxFile );
 80162de:	4628      	mov	r0, r5
 80162e0:	f7f2 fe32 	bl	8008f48 <ff_fclose>

	/* Move back to the root directory. */
	iReturned = ff_chdir( "../.." );
 80162e4:	481a      	ldr	r0, [pc, #104]	; (8016350 <vCreateAndVerifyExampleFiles+0x4b4>)
 80162e6:	f7f3 fa4f 	bl	8009788 <ff_chdir>

	/* Obtain and print out the working directory. */
	ff_getcwd( pcRAMBuffer, fsRAM_BUFFER_SIZE );
 80162ea:	21c8      	movs	r1, #200	; 0xc8
 80162ec:	4648      	mov	r0, r9
 80162ee:	f7f2 ffd7 	bl	80092a0 <ff_getcwd>
	FF_PRINTF( "Back in root directory %s\n", pcRAMBuffer );
 80162f2:	4649      	mov	r1, r9
 80162f4:	4818      	ldr	r0, [pc, #96]	; (8016358 <vCreateAndVerifyExampleFiles+0x4bc>)
 80162f6:	f000 fb2b 	bl	8016950 <lUDPLoggingPrintf>

	vPortFree( pcRAMBuffer );
 80162fa:	4648      	mov	r0, r9
 80162fc:	f7fd f96a 	bl	80135d4 <vPortFree>
	vPortFree( pcFileName );
 8016300:	4640      	mov	r0, r8
 8016302:	f7fd f967 	bl	80135d4 <vPortFree>
	int iReturned;
	size_t x;
	FF_FILE *pxFile;

		/* Create the directory used as the root of the HTTP server. */
		iReturned = ff_mkdir( configHTTP_ROOT );
 8016306:	481c      	ldr	r0, [pc, #112]	; (8016378 <vCreateAndVerifyExampleFiles+0x4dc>)
 8016308:	f7f2 fe91 	bl	800902e <ff_mkdir>

		if( iReturned == pdFREERTOS_ERRNO_NONE )
 801630c:	b9e0      	cbnz	r0, 8016348 <vCreateAndVerifyExampleFiles+0x4ac>
		{
			/* Move into the configHTTP_ROOT directory. */
			ff_chdir( configHTTP_ROOT );
 801630e:	481a      	ldr	r0, [pc, #104]	; (8016378 <vCreateAndVerifyExampleFiles+0x4dc>)
 8016310:	f7f3 fa3a 	bl	8009788 <ff_chdir>
 8016314:	4c19      	ldr	r4, [pc, #100]	; (801637c <vCreateAndVerifyExampleFiles+0x4e0>)
 8016316:	f104 0824 	add.w	r8, r4, #36	; 0x24
			/* Create each file defined by the xHTTPFilesToCopy array, which is
			defined in DefaultWebPages.h. */
			for( x = 0; x < sizeof( xHTTPFilesToCopy ) / sizeof( xFileToCopy_t ); x++ )
			{
				/* Create the file. */
				pxFile = ff_fopen( xHTTPFilesToCopy[ x ].pcFileName, "w+" );
 801631a:	4f19      	ldr	r7, [pc, #100]	; (8016380 <vCreateAndVerifyExampleFiles+0x4e4>)

				if( pxFile != NULL )
				{
					/* Write out all the data to the file. */
					ff_fwrite( xHTTPFilesToCopy[ x ].pucFileData,
 801631c:	2601      	movs	r6, #1
 801631e:	e00b      	b.n	8016338 <vCreateAndVerifyExampleFiles+0x49c>
 8016320:	4603      	mov	r3, r0
 8016322:	4632      	mov	r2, r6
 8016324:	6861      	ldr	r1, [r4, #4]
 8016326:	68a0      	ldr	r0, [r4, #8]
 8016328:	f7f2 fe4c 	bl	8008fc4 <ff_fwrite>
							   xHTTPFilesToCopy[ x ].xFileSize,
							   1,
							   pxFile );

					ff_fclose( pxFile );
 801632c:	4628      	mov	r0, r5
 801632e:	f7f2 fe0b 	bl	8008f48 <ff_fclose>
 8016332:	340c      	adds	r4, #12
			for( x = 0; x < sizeof( xHTTPFilesToCopy ) / sizeof( xFileToCopy_t ); x++ )
 8016334:	45a0      	cmp	r8, r4
 8016336:	d007      	beq.n	8016348 <vCreateAndVerifyExampleFiles+0x4ac>
				pxFile = ff_fopen( xHTTPFilesToCopy[ x ].pcFileName, "w+" );
 8016338:	4639      	mov	r1, r7
 801633a:	6820      	ldr	r0, [r4, #0]
 801633c:	f7f2 fddf 	bl	8008efe <ff_fopen>
				if( pxFile != NULL )
 8016340:	4605      	mov	r5, r0
 8016342:	2800      	cmp	r0, #0
 8016344:	d1ec      	bne.n	8016320 <vCreateAndVerifyExampleFiles+0x484>
 8016346:	e7f4      	b.n	8016332 <vCreateAndVerifyExampleFiles+0x496>
}
 8016348:	b007      	add	sp, #28
 801634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634e:	bf00      	nop
 8016350:	08026704 	.word	0x08026704
 8016354:	08026628 	.word	0x08026628
 8016358:	0802670c 	.word	0x0802670c
 801635c:	080266d8 	.word	0x080266d8
 8016360:	08019328 	.word	0x08019328
 8016364:	08026728 	.word	0x08026728
 8016368:	080266d0 	.word	0x080266d0
 801636c:	080266e4 	.word	0x080266e4
 8016370:	08026740 	.word	0x08026740
 8016374:	0801bcb4 	.word	0x0801bcb4
 8016378:	08026758 	.word	0x08026758
 801637c:	08026764 	.word	0x08026764
 8016380:	08026760 	.word	0x08026760

08016384 <prvConnectionListeningTask>:
	usUsedStackSize = usStackSize;
}
/*-----------------------------------------------------------*/

static void prvConnectionListeningTask( void *pvParameters )
{
 8016384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016388:	b08c      	sub	sp, #48	; 0x30
struct freertos_sockaddr xClient, xBindAddress;
Socket_t xListeningSocket, xConnectedSocket;
socklen_t xSize = sizeof( xClient );
 801638a:	2308      	movs	r3, #8
 801638c:	9307      	str	r3, [sp, #28]

#if( ipconfigUSE_TCP_WIN == 1 )
	WinProperties_t xWinProps;

	/* Fill in the buffer and window sizes that will be used by the socket. */
	xWinProps.lTxBufSize = ipconfigTCP_TX_BUFFER_LENGTH;
 801638e:	f640 3368 	movw	r3, #2920	; 0xb68
 8016392:	9303      	str	r3, [sp, #12]
	xWinProps.lTxWinSize = configECHO_SERVER_TX_WINDOW_SIZE;
 8016394:	2002      	movs	r0, #2
 8016396:	9004      	str	r0, [sp, #16]
	xWinProps.lRxBufSize = ipconfigTCP_RX_BUFFER_LENGTH;
 8016398:	f241 131c 	movw	r3, #4380	; 0x111c
 801639c:	9305      	str	r3, [sp, #20]
	xWinProps.lRxWinSize = configECHO_SERVER_RX_WINDOW_SIZE;
 801639e:	9006      	str	r0, [sp, #24]

	/* Just to prevent compiler warnings. */
	( void ) pvParameters;

	/* Attempt to open the socket. */
	xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80163a0:	2206      	movs	r2, #6
 80163a2:	2101      	movs	r1, #1
 80163a4:	f7f6 fc12 	bl	800cbcc <FreeRTOS_socket>
 80163a8:	4605      	mov	r5, r0
	configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 80163aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80163ae:	d021      	beq.n	80163f4 <prvConnectionListeningTask+0x70>

	/* Set a time out so accept() will just wait for a connection. */
	FreeRTOS_setsockopt( xListeningSocket, 0, FREERTOS_SO_RCVTIMEO, &xReceiveTimeOut, sizeof( xReceiveTimeOut ) );
 80163b0:	2304      	movs	r3, #4
 80163b2:	9300      	str	r3, [sp, #0]
 80163b4:	4b1d      	ldr	r3, [pc, #116]	; (801642c <prvConnectionListeningTask+0xa8>)
 80163b6:	2200      	movs	r2, #0
 80163b8:	4611      	mov	r1, r2
 80163ba:	4628      	mov	r0, r5
 80163bc:	f7f7 fbd4 	bl	800db68 <FreeRTOS_setsockopt>

	/* Set the window and buffer sizes. */
	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		FreeRTOS_setsockopt( xListeningSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProps, sizeof( xWinProps ) );
 80163c0:	2310      	movs	r3, #16
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	ab03      	add	r3, sp, #12
 80163c6:	220d      	movs	r2, #13
 80163c8:	2100      	movs	r1, #0
 80163ca:	4628      	mov	r0, r5
 80163cc:	f7f7 fbcc 	bl	800db68 <FreeRTOS_setsockopt>
	#endif /* ipconfigUSE_TCP_WIN */

	/* Bind the socket to the port that the client task will send to, then
	listen for incoming connections. */
	xBindAddress.sin_port = tcpechoPORT_NUMBER;
	xBindAddress.sin_port = FreeRTOS_htons( xBindAddress.sin_port );
 80163d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80163d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 80163d8:	2208      	movs	r2, #8
 80163da:	a908      	add	r1, sp, #32
 80163dc:	4628      	mov	r0, r5
 80163de:	f7f6 fdba 	bl	800cf56 <FreeRTOS_bind>
	FreeRTOS_listen( xListeningSocket, xBacklog );
 80163e2:	2114      	movs	r1, #20
 80163e4:	4628      	mov	r0, r5
 80163e6:	f7f7 fa2a 	bl	800d83e <FreeRTOS_listen>

	for( ;; )
	{
		/* Wait for a client to connect. */
		xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
		configASSERT( xConnectedSocket != FREERTOS_INVALID_SOCKET );
 80163ea:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8016438 <prvConnectionListeningTask+0xb4>

		/* Spawn a task to handle the connection. */
		xTaskCreate( prvServerConnectionInstance, "EchoServer", usUsedStackSize, ( void * ) xConnectedSocket, tskIDLE_PRIORITY, NULL );
 80163ee:	4f10      	ldr	r7, [pc, #64]	; (8016430 <prvConnectionListeningTask+0xac>)
 80163f0:	4e10      	ldr	r6, [pc, #64]	; (8016434 <prvConnectionListeningTask+0xb0>)
 80163f2:	e00d      	b.n	8016410 <prvConnectionListeningTask+0x8c>
	configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 80163f4:	21b0      	movs	r1, #176	; 0xb0
 80163f6:	4810      	ldr	r0, [pc, #64]	; (8016438 <prvConnectionListeningTask+0xb4>)
 80163f8:	f000 ff52 	bl	80172a0 <vAssertCalled>
 80163fc:	e7d8      	b.n	80163b0 <prvConnectionListeningTask+0x2c>
		xTaskCreate( prvServerConnectionInstance, "EchoServer", usUsedStackSize, ( void * ) xConnectedSocket, tskIDLE_PRIORITY, NULL );
 80163fe:	883a      	ldrh	r2, [r7, #0]
 8016400:	2300      	movs	r3, #0
 8016402:	9301      	str	r3, [sp, #4]
 8016404:	9300      	str	r3, [sp, #0]
 8016406:	4623      	mov	r3, r4
 8016408:	4631      	mov	r1, r6
 801640a:	480c      	ldr	r0, [pc, #48]	; (801643c <prvConnectionListeningTask+0xb8>)
 801640c:	f7fd fe30 	bl	8014070 <xTaskCreate>
		xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 8016410:	aa07      	add	r2, sp, #28
 8016412:	a90a      	add	r1, sp, #40	; 0x28
 8016414:	4628      	mov	r0, r5
 8016416:	f7f6 ffd7 	bl	800d3c8 <FreeRTOS_accept>
 801641a:	4604      	mov	r4, r0
		configASSERT( xConnectedSocket != FREERTOS_INVALID_SOCKET );
 801641c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016420:	d1ed      	bne.n	80163fe <prvConnectionListeningTask+0x7a>
 8016422:	21c7      	movs	r1, #199	; 0xc7
 8016424:	4640      	mov	r0, r8
 8016426:	f000 ff3b 	bl	80172a0 <vAssertCalled>
 801642a:	e7e8      	b.n	80163fe <prvConnectionListeningTask+0x7a>
 801642c:	080267e0 	.word	0x080267e0
 8016430:	200010d4 	.word	0x200010d4
 8016434:	080267c4 	.word	0x080267c4
 8016438:	08026788 	.word	0x08026788
 801643c:	08016441 	.word	0x08016441

08016440 <prvServerConnectionInstance>:
	}
}
/*-----------------------------------------------------------*/

static void prvServerConnectionInstance( void *pvParameters )
{
 8016440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016444:	b083      	sub	sp, #12
 8016446:	4607      	mov	r7, r0
	xConnectedSocket = ( Socket_t ) pvParameters;

	/* Attempt to create the buffer used to receive the string to be echoed
	back.  This could be avoided using a zero copy interface that just returned
	the same buffer. */
	pucRxBuffer = ( uint8_t * ) pvPortMalloc( ipconfigTCP_MSS );
 8016448:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801644c:	f7fd f85c 	bl	8013508 <pvPortMalloc>

	if( pucRxBuffer != NULL )
 8016450:	4606      	mov	r6, r0
 8016452:	b368      	cbz	r0, 80164b0 <prvServerConnectionInstance+0x70>
	{
		FreeRTOS_setsockopt( xConnectedSocket, 0, FREERTOS_SO_RCVTIMEO, &xReceiveTimeOut, sizeof( xReceiveTimeOut ) );
 8016454:	2404      	movs	r4, #4
 8016456:	9400      	str	r4, [sp, #0]
 8016458:	4b28      	ldr	r3, [pc, #160]	; (80164fc <prvServerConnectionInstance+0xbc>)
 801645a:	2200      	movs	r2, #0
 801645c:	4611      	mov	r1, r2
 801645e:	4638      	mov	r0, r7
 8016460:	f7f7 fb82 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xConnectedSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xReceiveTimeOut ) );
 8016464:	9400      	str	r4, [sp, #0]
 8016466:	4b26      	ldr	r3, [pc, #152]	; (8016500 <prvServerConnectionInstance+0xc0>)
 8016468:	2201      	movs	r2, #1
 801646a:	2100      	movs	r1, #0
 801646c:	4638      	mov	r0, r7
 801646e:	f7f7 fb7b 	bl	800db68 <FreeRTOS_setsockopt>

		for( ;; )
		{
			/* Zero out the receive array so there is NULL at the end of the string
			when it is printed out. */
			memset( pucRxBuffer, 0x00, ipconfigTCP_MSS );
 8016472:	f240 59b4 	movw	r9, #1460	; 0x5b4
 8016476:	f04f 0800 	mov.w	r8, #0
 801647a:	464a      	mov	r2, r9
 801647c:	4641      	mov	r1, r8
 801647e:	4630      	mov	r0, r6
 8016480:	f001 f9a4 	bl	80177cc <memset>

			/* Receive data on the socket. */
			lBytes = FreeRTOS_recv( xConnectedSocket, pucRxBuffer, ipconfigTCP_MSS, 0 );
 8016484:	4643      	mov	r3, r8
 8016486:	464a      	mov	r2, r9
 8016488:	4631      	mov	r1, r6
 801648a:	4638      	mov	r0, r7
 801648c:	f7f7 f832 	bl	800d4f4 <FreeRTOS_recv>

			/* If data was received, echo it back. */
			if( lBytes >= 0 )
 8016490:	1e05      	subs	r5, r0, #0
 8016492:	db0d      	blt.n	80164b0 <prvServerConnectionInstance+0x70>
			{
				lSent = 0;
				lTotalSent = 0;

				/* Call send() until all the data has been sent. */
				while( ( lSent >= 0 ) && ( lTotalSent < lBytes ) )
 8016494:	ddf1      	ble.n	801647a <prvServerConnectionInstance+0x3a>
 8016496:	2400      	movs	r4, #0
				{
					lSent = FreeRTOS_send( xConnectedSocket, pucRxBuffer, lBytes - lTotalSent, 0 );
 8016498:	4643      	mov	r3, r8
 801649a:	1b2a      	subs	r2, r5, r4
 801649c:	4631      	mov	r1, r6
 801649e:	4638      	mov	r0, r7
 80164a0:	f7f7 f8f2 	bl	800d688 <FreeRTOS_send>
					lTotalSent += lSent;
 80164a4:	4404      	add	r4, r0
				while( ( lSent >= 0 ) && ( lTotalSent < lBytes ) )
 80164a6:	2800      	cmp	r0, #0
 80164a8:	db02      	blt.n	80164b0 <prvServerConnectionInstance+0x70>
 80164aa:	42a5      	cmp	r5, r4
 80164ac:	dcf4      	bgt.n	8016498 <prvServerConnectionInstance+0x58>
 80164ae:	e7e4      	b.n	801647a <prvServerConnectionInstance+0x3a>
			}
		}
	}

	/* Initiate a shutdown in case it has not already been initiated. */
	FreeRTOS_shutdown( xConnectedSocket, FREERTOS_SHUT_RDWR );
 80164b0:	2102      	movs	r1, #2
 80164b2:	4638      	mov	r0, r7
 80164b4:	f7f7 fa0b 	bl	800d8ce <FreeRTOS_shutdown>

	/* Wait for the shutdown to take effect, indicated by FreeRTOS_recv()
	returning an error. */
	xTimeOnShutdown = xTaskGetTickCount();
 80164b8:	f7fe f82a 	bl	8014510 <xTaskGetTickCount>
 80164bc:	4681      	mov	r9, r0
	do
	{
		if( FreeRTOS_recv( xConnectedSocket, pucRxBuffer, ipconfigTCP_MSS, 0 ) < 0 )
 80164be:	2500      	movs	r5, #0
 80164c0:	f240 54b4 	movw	r4, #1460	; 0x5b4
		{
			break;
		}
	} while( ( xTaskGetTickCount() - xTimeOnShutdown ) < tcpechoSHUTDOWN_DELAY );
 80164c4:	f241 3887 	movw	r8, #4999	; 0x1387
		if( FreeRTOS_recv( xConnectedSocket, pucRxBuffer, ipconfigTCP_MSS, 0 ) < 0 )
 80164c8:	462b      	mov	r3, r5
 80164ca:	4622      	mov	r2, r4
 80164cc:	4631      	mov	r1, r6
 80164ce:	4638      	mov	r0, r7
 80164d0:	f7f7 f810 	bl	800d4f4 <FreeRTOS_recv>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	db05      	blt.n	80164e4 <prvServerConnectionInstance+0xa4>
	} while( ( xTaskGetTickCount() - xTimeOnShutdown ) < tcpechoSHUTDOWN_DELAY );
 80164d8:	f7fe f81a 	bl	8014510 <xTaskGetTickCount>
 80164dc:	eba0 0009 	sub.w	r0, r0, r9
 80164e0:	4540      	cmp	r0, r8
 80164e2:	d9f1      	bls.n	80164c8 <prvServerConnectionInstance+0x88>

	/* Finished with the socket, buffer, the task. */
	vPortFree( pucRxBuffer );
 80164e4:	4630      	mov	r0, r6
 80164e6:	f7fd f875 	bl	80135d4 <vPortFree>
	FreeRTOS_closesocket( xConnectedSocket );
 80164ea:	4638      	mov	r0, r7
 80164ec:	f7f6 fe6e 	bl	800d1cc <FreeRTOS_closesocket>

	vTaskDelete( NULL );
 80164f0:	2000      	movs	r0, #0
 80164f2:	f7fd fea5 	bl	8014240 <vTaskDelete>
}
 80164f6:	b003      	add	sp, #12
 80164f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164fc:	080267e4 	.word	0x080267e4
 8016500:	080267e8 	.word	0x080267e8

08016504 <vStartSimpleTCPServerTasks>:
{
 8016504:	b510      	push	{r4, lr}
 8016506:	b082      	sub	sp, #8
 8016508:	4604      	mov	r4, r0
	xTaskCreate( prvConnectionListeningTask, "ServerListener", usStackSize, NULL, uxPriority + 1, NULL );
 801650a:	2300      	movs	r3, #0
 801650c:	9301      	str	r3, [sp, #4]
 801650e:	3101      	adds	r1, #1
 8016510:	9100      	str	r1, [sp, #0]
 8016512:	4602      	mov	r2, r0
 8016514:	4903      	ldr	r1, [pc, #12]	; (8016524 <vStartSimpleTCPServerTasks+0x20>)
 8016516:	4804      	ldr	r0, [pc, #16]	; (8016528 <vStartSimpleTCPServerTasks+0x24>)
 8016518:	f7fd fdaa 	bl	8014070 <xTaskCreate>
	usUsedStackSize = usStackSize;
 801651c:	4b03      	ldr	r3, [pc, #12]	; (801652c <vStartSimpleTCPServerTasks+0x28>)
 801651e:	801c      	strh	r4, [r3, #0]
}
 8016520:	b002      	add	sp, #8
 8016522:	bd10      	pop	{r4, pc}
 8016524:	080267d0 	.word	0x080267d0
 8016528:	08016385 	.word	0x08016385
 801652c:	200010d4 	.word	0x200010d4

08016530 <prvEchoClientTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvEchoClientTask( void *pvParameters )
{
 8016530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016534:	b08d      	sub	sp, #52	; 0x34
Socket_t xSocket;
struct freertos_sockaddr xEchoServerAddress;
int32_t lLoopCount = 0UL;
const int32_t lMaxLoopCount = 1;
volatile uint32_t ulTxCount = 0UL;
 8016536:	2300      	movs	r3, #0
 8016538:	9309      	str	r3, [sp, #36]	; 0x24
	#if( ipconfigUSE_TCP_WIN == 1 )

	WinProperties_t xWinProps;

		/* Fill in the buffer and window sizes that will be used by the socket. */
		xWinProps.lTxBufSize = ipconfigTCP_TX_BUFFER_LENGTH;
 801653a:	f640 3368 	movw	r3, #2920	; 0xb68
 801653e:	9305      	str	r3, [sp, #20]
		xWinProps.lTxWinSize = configECHO_CLIENT_TX_WINDOW_SIZE;
 8016540:	2202      	movs	r2, #2
 8016542:	9206      	str	r2, [sp, #24]
		xWinProps.lRxBufSize = ipconfigTCP_RX_BUFFER_LENGTH;
 8016544:	f241 111c 	movw	r1, #4380	; 0x111c
 8016548:	9107      	str	r1, [sp, #28]
		xWinProps.lRxWinSize = configECHO_CLIENT_RX_WINDOW_SIZE;
 801654a:	9208      	str	r2, [sp, #32]
	#endif /* ipconfigUSE_TCP_WIN */

	/* This task can be created a number of times.  Each instance is numbered
	to enable each instance to use a different Rx and Tx buffer.  The number is
	passed in as the task's parameter. */
	xInstance = ( BaseType_t ) pvParameters;
 801654c:	4683      	mov	fp, r0
 801654e:	fb00 f303 	mul.w	r3, r0, r3

	/* Point to the buffers to be used by this instance of this task. */
	pcTransmittedString = &( cTxBuffers[ xInstance ][ 0 ] );
 8016552:	4a67      	ldr	r2, [pc, #412]	; (80166f0 <prvEchoClientTask+0x1c0>)
 8016554:	441a      	add	r2, r3
 8016556:	9202      	str	r2, [sp, #8]
	pcReceivedString = &( cRxBuffers[ xInstance ][ 0 ] );
 8016558:	4f66      	ldr	r7, [pc, #408]	; (80166f4 <prvEchoClientTask+0x1c4>)
 801655a:	441f      	add	r7, r3

	/* Echo requests are sent to the echo server.  The address of the echo
	server is configured by the constants configECHO_SERVER_ADDR0 to
	configECHO_SERVER_ADDR3 in FreeRTOSConfig.h. */
	xEchoServerAddress.sin_port = FreeRTOS_htons( echoECHO_PORT );
 801655c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8016560:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	xEchoServerAddress.sin_addr = FreeRTOS_inet_addr_quick( configECHO_SERVER_ADDR0,
 8016564:	4b64      	ldr	r3, [pc, #400]	; (80166f8 <prvEchoClientTask+0x1c8>)
 8016566:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Randomise the number of characters that will be sent in the echo
	request. */
	do
	{
		lCharactersToAdd = ipconfigRAND32() % ( ulBufferLength - 20UL );
 8016568:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8016718 <prvEchoClientTask+0x1e8>
	} while ( ( lCharactersToAdd == 0 ) || ( lCharactersToAdd < lMinimumLength ) ); /* Must be at least enough to add the unique text to the start of the string later. */

	/* Fill the buffer. */
	for( lCharacter = 0; lCharacter < lCharactersToAdd; lCharacter++ )
	{
		cBuffer[ lCharacter ] = cChar;
 801656c:	4b60      	ldr	r3, [pc, #384]	; (80166f0 <prvEchoClientTask+0x1c0>)
 801656e:	f640 3268 	movw	r2, #2920	; 0xb68
 8016572:	fb02 3300 	mla	r3, r2, r0, r3
 8016576:	9303      	str	r3, [sp, #12]
 8016578:	e062      	b.n	8016640 <prvEchoClientTask+0x110>
		configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 801657a:	21eb      	movs	r1, #235	; 0xeb
 801657c:	485f      	ldr	r0, [pc, #380]	; (80166fc <prvEchoClientTask+0x1cc>)
 801657e:	f000 fe8f 	bl	80172a0 <vAssertCalled>
 8016582:	e066      	b.n	8016652 <prvEchoClientTask+0x122>
		cBuffer[ lCharacter ] = cChar;
 8016584:	f802 3b01 	strb.w	r3, [r2], #1
		cChar++;
 8016588:	3301      	adds	r3, #1
 801658a:	b2db      	uxtb	r3, r3

		if( cChar > '~' )
		{
			cChar = '0';
 801658c:	2b7f      	cmp	r3, #127	; 0x7f
 801658e:	bf28      	it	cs
 8016590:	2330      	movcs	r3, #48	; 0x30
	for( lCharacter = 0; lCharacter < lCharactersToAdd; lCharacter++ )
 8016592:	4291      	cmp	r1, r2
 8016594:	d1f6      	bne.n	8016584 <prvEchoClientTask+0x54>
				sprintf( pcTransmittedString, "TxRx message number %u", ( unsigned ) ulTxCount );
 8016596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016598:	4959      	ldr	r1, [pc, #356]	; (8016700 <prvEchoClientTask+0x1d0>)
 801659a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801659e:	4648      	mov	r0, r9
 80165a0:	f000 fbc1 	bl	8016d26 <sprintf>
				ulTxCount++;
 80165a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165a6:	3301      	adds	r3, #1
 80165a8:	9309      	str	r3, [sp, #36]	; 0x24
				lTransmitted = FreeRTOS_send(	xSocket,						/* The socket being sent to. */
 80165aa:	2300      	movs	r3, #0
 80165ac:	4622      	mov	r2, r4
 80165ae:	4649      	mov	r1, r9
 80165b0:	4630      	mov	r0, r6
 80165b2:	f7f7 f869 	bl	800d688 <FreeRTOS_send>
				if( lTransmitted < 0 )
 80165b6:	1e04      	subs	r4, r0, #0
 80165b8:	db26      	blt.n	8016608 <prvEchoClientTask+0xd8>
				memset( ( void * ) pcReceivedString, 0x00, echoBUFFER_SIZES );
 80165ba:	f640 3268 	movw	r2, #2920	; 0xb68
 80165be:	2100      	movs	r1, #0
 80165c0:	4638      	mov	r0, r7
 80165c2:	f001 f903 	bl	80177cc <memset>
				while( xReceivedBytes < lTransmitted )
 80165c6:	2c00      	cmp	r4, #0
 80165c8:	dd1e      	ble.n	8016608 <prvEchoClientTask+0xd8>
					xReturned = FreeRTOS_recv( xSocket,								/* The socket being received from. */
 80165ca:	2300      	movs	r3, #0
 80165cc:	eba8 0205 	sub.w	r2, r8, r5
 80165d0:	1979      	adds	r1, r7, r5
 80165d2:	4630      	mov	r0, r6
 80165d4:	f7f6 ff8e 	bl	800d4f4 <FreeRTOS_recv>
					if( xReturned < 0 )
 80165d8:	2800      	cmp	r0, #0
 80165da:	db06      	blt.n	80165ea <prvEchoClientTask+0xba>
					else if( xReturned == 0 )
 80165dc:	b120      	cbz	r0, 80165e8 <prvEchoClientTask+0xb8>
						xReceivedBytes += xReturned;
 80165de:	4405      	add	r5, r0
				while( xReceivedBytes < lTransmitted )
 80165e0:	42ac      	cmp	r4, r5
 80165e2:	dcf2      	bgt.n	80165ca <prvEchoClientTask+0x9a>
						xReceivedBytes += xReturned;
 80165e4:	4628      	mov	r0, r5
 80165e6:	e000      	b.n	80165ea <prvEchoClientTask+0xba>
 80165e8:	4628      	mov	r0, r5
				if( xReceivedBytes > 0 )
 80165ea:	2800      	cmp	r0, #0
 80165ec:	dd0c      	ble.n	8016608 <prvEchoClientTask+0xd8>
					configASSERT( strncmp( pcReceivedString, pcTransmittedString, lTransmitted ) == 0 );
 80165ee:	4622      	mov	r2, r4
 80165f0:	9902      	ldr	r1, [sp, #8]
 80165f2:	4638      	mov	r0, r7
 80165f4:	f001 fb5f 	bl	8017cb6 <strncmp>
 80165f8:	2800      	cmp	r0, #0
 80165fa:	d166      	bne.n	80166ca <prvEchoClientTask+0x19a>
						ulTxRxCycles[ xInstance ]++;
 80165fc:	4a41      	ldr	r2, [pc, #260]	; (8016704 <prvEchoClientTask+0x1d4>)
 80165fe:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 8016602:	3301      	adds	r3, #1
 8016604:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
			FreeRTOS_shutdown( xSocket, FREERTOS_SHUT_RDWR );
 8016608:	2102      	movs	r1, #2
 801660a:	4630      	mov	r0, r6
 801660c:	f7f7 f95f 	bl	800d8ce <FreeRTOS_shutdown>
			xTimeOnEntering = xTaskGetTickCount();
 8016610:	f7fd ff7e 	bl	8014510 <xTaskGetTickCount>
 8016614:	4604      	mov	r4, r0
				xReturned = FreeRTOS_recv( xSocket,	/* The socket being received from. */
 8016616:	2300      	movs	r3, #0
 8016618:	f640 3268 	movw	r2, #2920	; 0xb68
 801661c:	4639      	mov	r1, r7
 801661e:	4630      	mov	r0, r6
 8016620:	f7f6 ff68 	bl	800d4f4 <FreeRTOS_recv>
				if( xReturned < 0 )
 8016624:	2800      	cmp	r0, #0
 8016626:	db05      	blt.n	8016634 <prvEchoClientTask+0x104>
			} while( ( xTaskGetTickCount() - xTimeOnEntering ) < xReceiveTimeOut );
 8016628:	f7fd ff72 	bl	8014510 <xTaskGetTickCount>
 801662c:	1b00      	subs	r0, r0, r4
 801662e:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8016632:	d3f0      	bcc.n	8016616 <prvEchoClientTask+0xe6>
		FreeRTOS_closesocket( xSocket );
 8016634:	4630      	mov	r0, r6
 8016636:	f7f6 fdc9 	bl	800d1cc <FreeRTOS_closesocket>
		vTaskDelay( echoLOOP_DELAY );
 801663a:	2096      	movs	r0, #150	; 0x96
 801663c:	f7fe f8ba 	bl	80147b4 <vTaskDelay>
		xSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8016640:	2206      	movs	r2, #6
 8016642:	2101      	movs	r1, #1
 8016644:	2002      	movs	r0, #2
 8016646:	f7f6 fac1 	bl	800cbcc <FreeRTOS_socket>
 801664a:	4606      	mov	r6, r0
		configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 801664c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016650:	d093      	beq.n	801657a <prvEchoClientTask+0x4a>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVTIMEO, &xReceiveTimeOut, sizeof( xReceiveTimeOut ) );
 8016652:	2404      	movs	r4, #4
 8016654:	9400      	str	r4, [sp, #0]
 8016656:	4b2c      	ldr	r3, [pc, #176]	; (8016708 <prvEchoClientTask+0x1d8>)
 8016658:	2200      	movs	r2, #0
 801665a:	4611      	mov	r1, r2
 801665c:	4630      	mov	r0, r6
 801665e:	f7f7 fa83 	bl	800db68 <FreeRTOS_setsockopt>
		FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8016662:	9400      	str	r4, [sp, #0]
 8016664:	4b29      	ldr	r3, [pc, #164]	; (801670c <prvEchoClientTask+0x1dc>)
 8016666:	2201      	movs	r2, #1
 8016668:	2100      	movs	r1, #0
 801666a:	4630      	mov	r0, r6
 801666c:	f7f7 fa7c 	bl	800db68 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProps,	sizeof( xWinProps ) );
 8016670:	2310      	movs	r3, #16
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	ab05      	add	r3, sp, #20
 8016676:	220d      	movs	r2, #13
 8016678:	2100      	movs	r1, #0
 801667a:	4630      	mov	r0, r6
 801667c:	f7f7 fa74 	bl	800db68 <FreeRTOS_setsockopt>
		if( FreeRTOS_connect( xSocket, &xEchoServerAddress, sizeof( xEchoServerAddress ) ) == 0 )
 8016680:	2208      	movs	r2, #8
 8016682:	a90a      	add	r1, sp, #40	; 0x28
 8016684:	4630      	mov	r0, r6
 8016686:	f7f7 fbbd 	bl	800de04 <FreeRTOS_connect>
 801668a:	4605      	mov	r5, r0
 801668c:	2800      	cmp	r0, #0
 801668e:	d1d1      	bne.n	8016634 <prvEchoClientTask+0x104>
			ulConnections[ xInstance ]++;
 8016690:	4a1f      	ldr	r2, [pc, #124]	; (8016710 <prvEchoClientTask+0x1e0>)
 8016692:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 8016696:	3301      	adds	r3, #1
 8016698:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
		lCharactersToAdd = ipconfigRAND32() % ( ulBufferLength - 20UL );
 801669c:	f640 3954 	movw	r9, #2900	; 0xb54
 80166a0:	f000 ff6c 	bl	801757c <uxRand>
 80166a4:	fbaa 3400 	umull	r3, r4, sl, r0
 80166a8:	0ae4      	lsrs	r4, r4, #11
 80166aa:	fb09 0414 	mls	r4, r9, r4, r0
 80166ae:	46a0      	mov	r8, r4
	} while ( ( lCharactersToAdd == 0 ) || ( lCharactersToAdd < lMinimumLength ) ); /* Must be at least enough to add the unique text to the start of the string later. */
 80166b0:	2c3b      	cmp	r4, #59	; 0x3b
 80166b2:	ddf5      	ble.n	80166a0 <prvEchoClientTask+0x170>
	for( lCharacter = 0; lCharacter < lCharactersToAdd; lCharacter++ )
 80166b4:	2c00      	cmp	r4, #0
 80166b6:	f77f af6e 	ble.w	8016596 <prvEchoClientTask+0x66>
		cBuffer[ lCharacter ] = cChar;
 80166ba:	2330      	movs	r3, #48	; 0x30
 80166bc:	9a03      	ldr	r2, [sp, #12]
 80166be:	7013      	strb	r3, [r2, #0]
 80166c0:	9b02      	ldr	r3, [sp, #8]
 80166c2:	1c5a      	adds	r2, r3, #1
 80166c4:	1919      	adds	r1, r3, r4
		cChar++;
 80166c6:	2331      	movs	r3, #49	; 0x31
 80166c8:	e763      	b.n	8016592 <prvEchoClientTask+0x62>
					configASSERT( strncmp( pcReceivedString, pcTransmittedString, lTransmitted ) == 0 );
 80166ca:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80166ce:	480b      	ldr	r0, [pc, #44]	; (80166fc <prvEchoClientTask+0x1cc>)
 80166d0:	f000 fde6 	bl	80172a0 <vAssertCalled>
					if( strncmp( pcReceivedString, pcTransmittedString, lTransmitted ) == 0 )
 80166d4:	4622      	mov	r2, r4
 80166d6:	9902      	ldr	r1, [sp, #8]
 80166d8:	4638      	mov	r0, r7
 80166da:	f001 faec 	bl	8017cb6 <strncmp>
 80166de:	2800      	cmp	r0, #0
 80166e0:	d08c      	beq.n	80165fc <prvEchoClientTask+0xcc>
						ulTxRxFailures[ xInstance ]++;
 80166e2:	4a0c      	ldr	r2, [pc, #48]	; (8016714 <prvEchoClientTask+0x1e4>)
 80166e4:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 80166e8:	3301      	adds	r3, #1
 80166ea:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
						break;
 80166ee:	e78b      	b.n	8016608 <prvEchoClientTask+0xd8>
 80166f0:	20001c40 	.word	0x20001c40
 80166f4:	200010d8 	.word	0x200010d8
 80166f8:	6400a8c0 	.word	0x6400a8c0
 80166fc:	080267ec 	.word	0x080267ec
 8016700:	08026830 	.word	0x08026830
 8016704:	200027ac 	.word	0x200027ac
 8016708:	08026850 	.word	0x08026850
 801670c:	08026854 	.word	0x08026854
 8016710:	200027a8 	.word	0x200027a8
 8016714:	200027b0 	.word	0x200027b0
 8016718:	b4c9f9a5 	.word	0xb4c9f9a5

0801671c <vStartTCPEchoClientTasks_SingleTasks>:
{
 801671c:	b500      	push	{lr}
 801671e:	b083      	sub	sp, #12
		xTaskCreate( 	prvEchoClientTask,	/* The function that implements the task. */
 8016720:	2300      	movs	r3, #0
 8016722:	9301      	str	r3, [sp, #4]
 8016724:	9100      	str	r1, [sp, #0]
 8016726:	4602      	mov	r2, r0
 8016728:	4903      	ldr	r1, [pc, #12]	; (8016738 <vStartTCPEchoClientTasks_SingleTasks+0x1c>)
 801672a:	4804      	ldr	r0, [pc, #16]	; (801673c <vStartTCPEchoClientTasks_SingleTasks+0x20>)
 801672c:	f7fd fca0 	bl	8014070 <xTaskCreate>
}
 8016730:	b003      	add	sp, #12
 8016732:	f85d fb04 	ldr.w	pc, [sp], #4
 8016736:	bf00      	nop
 8016738:	08026848 	.word	0x08026848
 801673c:	08016531 	.word	0x08016531

08016740 <prvIncrementEventCount>:
{
	/* Each row in the xIPTraceValues[] table contains a pointer to a function
	that updates the value for that row.  Rows that simply increment an event
	count point to this function. */
	( void ) ulCount;
	( *pulCurrentValue )++;
 8016740:	6803      	ldr	r3, [r0, #0]
 8016742:	3301      	adds	r3, #1
 8016744:	6003      	str	r3, [r0, #0]
 8016746:	4770      	bx	lr

08016748 <prvStoreLowest>:
	/* Each row in the xIPTraceValues[] table contains a pointer to a function
	that updates the value for that row.  Rows that latch the lowest value
	point to this function (for example, this function can be used to latch
	the lowest number of network buffers that were available during the
	execution of the stack). */
	if( ulCount < *pulCurrentValue )
 8016748:	6803      	ldr	r3, [r0, #0]
 801674a:	428b      	cmp	r3, r1
	{
		*pulCurrentValue = ulCount;
 801674c:	bf88      	it	hi
 801674e:	6001      	strhi	r1, [r0, #0]
 8016750:	4770      	bx	lr

08016752 <xExampleDebugStatEntries>:
}
 8016752:	2014      	movs	r0, #20
 8016754:	4770      	bx	lr
	...

08016758 <vExampleDebugStatUpdate>:
{
 8016758:	b510      	push	{r4, lr}
		if( xIPTraceValues[ xIndex ].ucIdentifier == ucIdentifier )
 801675a:	4b0f      	ldr	r3, [pc, #60]	; (8016798 <vExampleDebugStatUpdate+0x40>)
 801675c:	781b      	ldrb	r3, [r3, #0]
 801675e:	4283      	cmp	r3, r0
 8016760:	d00d      	beq.n	801677e <vExampleDebugStatUpdate+0x26>
 8016762:	4b0d      	ldr	r3, [pc, #52]	; (8016798 <vExampleDebugStatUpdate+0x40>)
	for( xIndex = 0; xIndex < xEntries; xIndex++ )
 8016764:	2401      	movs	r4, #1
		if( xIPTraceValues[ xIndex ].ucIdentifier == ucIdentifier )
 8016766:	7c1a      	ldrb	r2, [r3, #16]
 8016768:	4282      	cmp	r2, r0
 801676a:	d009      	beq.n	8016780 <vExampleDebugStatUpdate+0x28>
	for( xIndex = 0; xIndex < xEntries; xIndex++ )
 801676c:	3401      	adds	r4, #1
 801676e:	3310      	adds	r3, #16
 8016770:	2c14      	cmp	r4, #20
 8016772:	d1f8      	bne.n	8016766 <vExampleDebugStatUpdate+0xe>
	configASSERT( xIndex != xEntries );
 8016774:	21bd      	movs	r1, #189	; 0xbd
 8016776:	4809      	ldr	r0, [pc, #36]	; (801679c <vExampleDebugStatUpdate+0x44>)
 8016778:	f000 fd92 	bl	80172a0 <vAssertCalled>
}
 801677c:	e00a      	b.n	8016794 <vExampleDebugStatUpdate+0x3c>
	for( xIndex = 0; xIndex < xEntries; xIndex++ )
 801677e:	2400      	movs	r4, #0
			xIPTraceValues[ xIndex ].vPerformAction( &( xIPTraceValues[ xIndex ].ulData ), ulValue );
 8016780:	4a05      	ldr	r2, [pc, #20]	; (8016798 <vExampleDebugStatUpdate+0x40>)
 8016782:	0123      	lsls	r3, r4, #4
 8016784:	f103 000c 	add.w	r0, r3, #12
 8016788:	4413      	add	r3, r2
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	4410      	add	r0, r2
 801678e:	4798      	blx	r3
	configASSERT( xIndex != xEntries );
 8016790:	2c14      	cmp	r4, #20
 8016792:	d0ef      	beq.n	8016774 <vExampleDebugStatUpdate+0x1c>
 8016794:	bd10      	pop	{r4, pc}
 8016796:	bf00      	nop
 8016798:	20000034 	.word	0x20000034
 801679c:	08026ba0 	.word	0x08026ba0

080167a0 <prvLoggingTask>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void prvLoggingTask( void *pvParameters )
{
 80167a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167a4:	b089      	sub	sp, #36	; 0x24
	( void ) pvParameters;

	/* A possibility to set some additional task properties. */
	iptraceUDP_LOGGING_TASK_STARTING();

	xRemoteAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 80167a6:	f64d 4305 	movw	r3, #56325	; 0xdc05
 80167aa:	f8ad 3012 	strh.w	r3, [sp, #18]
	#if defined( configUDP_LOGGING_ADDR0 )
	{
		/* Use a fixed address to where the logging will be sent. */
		xRemoteAddress.sin_addr = FreeRTOS_inet_addr_quick( configUDP_LOGGING_ADDR0,
 80167ae:	4b62      	ldr	r3, [pc, #392]	; (8016938 <prvLoggingTask+0x198>)
 80167b0:	9305      	str	r3, [sp, #20]
	#endif

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 80167b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80167b6:	2511      	movs	r5, #17
 80167b8:	4c60      	ldr	r4, [pc, #384]	; (801693c <prvLoggingTask+0x19c>)
		vTaskDelay( xBlockingTime );
 80167ba:	4630      	mov	r0, r6
 80167bc:	f7fd fffa 	bl	80147b4 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 80167c0:	462a      	mov	r2, r5
 80167c2:	2102      	movs	r1, #2
 80167c4:	4608      	mov	r0, r1
 80167c6:	f7f6 fa01 	bl	800cbcc <FreeRTOS_socket>
 80167ca:	6020      	str	r0, [r4, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 80167cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80167d0:	d0f3      	beq.n	80167ba <prvLoggingTask+0x1a>

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 80167d2:	f64d 3305 	movw	r3, #56069	; 0xdb05
 80167d6:	f8ad 301a 	strh.w	r3, [sp, #26]
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
 80167da:	f7f6 f93d 	bl	800ca58 <FreeRTOS_GetIPAddress>
 80167de:	9007      	str	r0, [sp, #28]

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 80167e0:	4e56      	ldr	r6, [pc, #344]	; (801693c <prvLoggingTask+0x19c>)
 80167e2:	2208      	movs	r2, #8
 80167e4:	a906      	add	r1, sp, #24
 80167e6:	6830      	ldr	r0, [r6, #0]
 80167e8:	f7f6 fbb5 	bl	800cf56 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80167ec:	ab08      	add	r3, sp, #32
 80167ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80167f2:	f843 2d14 	str.w	r2, [r3, #-20]!
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80167f6:	2204      	movs	r2, #4
 80167f8:	9200      	str	r2, [sp, #0]
 80167fa:	2201      	movs	r2, #1
 80167fc:	2100      	movs	r1, #0
 80167fe:	6830      	ldr	r0, [r6, #0]
 8016800:	f7f7 f9b2 	bl	800db68 <FreeRTOS_setsockopt>

	/* Send a dummy message to resolve the IP address before sending the logging 
	messages. */
	snprintf( cLoggingLine, configUDP_LOGGING_STRING_LENGTH, "Logging Probe\n" );
 8016804:	4d4e      	ldr	r5, [pc, #312]	; (8016940 <prvLoggingTask+0x1a0>)
 8016806:	4b4f      	ldr	r3, [pc, #316]	; (8016944 <prvLoggingTask+0x1a4>)
 8016808:	462c      	mov	r4, r5
 801680a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801680c:	c407      	stmia	r4!, {r0, r1, r2}
 801680e:	f824 3b02 	strh.w	r3, [r4], #2
 8016812:	0c1b      	lsrs	r3, r3, #16
 8016814:	7023      	strb	r3, [r4, #0]
	FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, strlen( cLoggingLine ), 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
 8016816:	4628      	mov	r0, r5
 8016818:	f7e9 fce4 	bl	80001e4 <strlen>
 801681c:	6834      	ldr	r4, [r6, #0]
 801681e:	2308      	movs	r3, #8
 8016820:	9301      	str	r3, [sp, #4]
 8016822:	ab04      	add	r3, sp, #16
 8016824:	9300      	str	r3, [sp, #0]
 8016826:	2300      	movs	r3, #0
 8016828:	4602      	mov	r2, r0
 801682a:	4629      	mov	r1, r5
 801682c:	4620      	mov	r0, r4
 801682e:	f7f6 fbc9 	bl	800cfc4 <FreeRTOS_sendto>
	vTaskDelay( xResolveDelay );
 8016832:	20fa      	movs	r0, #250	; 0xfa
 8016834:	f7fd ffbe 	bl	80147b4 <vTaskDelay>
	if( pxStreamBuffer != NULL )
 8016838:	4f43      	ldr	r7, [pc, #268]	; (8016948 <prvLoggingTask+0x1a8>)
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 801683a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 801694c <prvLoggingTask+0x1ac>
 801683e:	e06c      	b.n	801691a <prvLoggingTask+0x17a>
			vTaskSuspendAll();
 8016840:	f7fd fe5e 	bl	8014500 <vTaskSuspendAll>
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8016844:	2100      	movs	r1, #0
 8016846:	9100      	str	r1, [sp, #0]
 8016848:	2304      	movs	r3, #4
 801684a:	aa02      	add	r2, sp, #8
 801684c:	6838      	ldr	r0, [r7, #0]
 801684e:	f7f7 fd7f 	bl	800e350 <uxStreamBufferGet>
				if( xBufferLength < xMessageLength )
 8016852:	9b02      	ldr	r3, [sp, #8]
 8016854:	2bc8      	cmp	r3, #200	; 0xc8
 8016856:	d922      	bls.n	801689e <prvLoggingTask+0xfe>
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8016858:	2500      	movs	r5, #0
 801685a:	9500      	str	r5, [sp, #0]
 801685c:	4642      	mov	r2, r8
 801685e:	4629      	mov	r1, r5
 8016860:	6838      	ldr	r0, [r7, #0]
 8016862:	f7f7 fd75 	bl	800e350 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8016866:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 801686a:	464a      	mov	r2, r9
 801686c:	4641      	mov	r1, r8
 801686e:	4620      	mov	r0, r4
 8016870:	f000 ff87 	bl	8017782 <memcpy>
					xMessageLength = xBufferLength;
 8016874:	f8cd 9008 	str.w	r9, [sp, #8]
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8016878:	f884 50c7 	strb.w	r5, [r4, #199]	; 0xc7
			xTaskResumeAll();
 801687c:	f7fd ff1a 	bl	80146b4 <xTaskResumeAll>
	return xMessageLength;
 8016880:	9a02      	ldr	r2, [sp, #8]
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );

				if( xCount <= 0 )
 8016882:	2a00      	cmp	r2, #0
 8016884:	d049      	beq.n	801691a <prvLoggingTask+0x17a>
					newline.  If 'configUDP_LOGGING_NEEDS_CR_LF' is defined as non-zero,
					every "\n" will be translated into a "\r\n". */
					pcTarget = cLoggingLine;
					pcSource = cLoggingLine;

					while( ( *pcSource != 0x00 ) && ( pcSource < ( cLoggingLine + xCount ) ) )
 8016886:	7820      	ldrb	r0, [r4, #0]
 8016888:	b368      	cbz	r0, 80168e6 <prvLoggingTask+0x146>
 801688a:	18a3      	adds	r3, r4, r2
 801688c:	429c      	cmp	r4, r3
 801688e:	d22a      	bcs.n	80168e6 <prvLoggingTask+0x146>
 8016890:	4b2b      	ldr	r3, [pc, #172]	; (8016940 <prvLoggingTask+0x1a0>)
 8016892:	4619      	mov	r1, r3
					{
						*pcTarget = *pcSource;

						if( ( ( pcSource == cLoggingLine ) || ( pcSource[ -1 ] != logASCII_CR ) ) && ( pcSource[ 0 ] == logASCII_NL ) )
						{
							pcTarget[ 0 ] = logASCII_CR;
 8016894:	f04f 0c0d 	mov.w	ip, #13
							pcTarget[ 1 ] = logASCII_NL;
 8016898:	f04f 0e0a 	mov.w	lr, #10
 801689c:	e010      	b.n	80168c0 <prvLoggingTask+0x120>
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 801689e:	2500      	movs	r5, #0
 80168a0:	9500      	str	r5, [sp, #0]
 80168a2:	4622      	mov	r2, r4
 80168a4:	4629      	mov	r1, r5
 80168a6:	6838      	ldr	r0, [r7, #0]
 80168a8:	f7f7 fd52 	bl	800e350 <uxStreamBufferGet>
					pcBuffer[ xMessageLength ] = 0x00;
 80168ac:	9b02      	ldr	r3, [sp, #8]
 80168ae:	54e5      	strb	r5, [r4, r3]
 80168b0:	e7e4      	b.n	801687c <prvLoggingTask+0xdc>
								xCount++;
								pcTarget++;
							}
						}

						pcTarget++;
 80168b2:	3101      	adds	r1, #1
					while( ( *pcSource != 0x00 ) && ( pcSource < ( cLoggingLine + xCount ) ) )
 80168b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80168b8:	b1a8      	cbz	r0, 80168e6 <prvLoggingTask+0x146>
 80168ba:	18a5      	adds	r5, r4, r2
 80168bc:	42ab      	cmp	r3, r5
 80168be:	d212      	bcs.n	80168e6 <prvLoggingTask+0x146>
						*pcTarget = *pcSource;
 80168c0:	7008      	strb	r0, [r1, #0]
						if( ( ( pcSource == cLoggingLine ) || ( pcSource[ -1 ] != logASCII_CR ) ) && ( pcSource[ 0 ] == logASCII_NL ) )
 80168c2:	42a3      	cmp	r3, r4
 80168c4:	d003      	beq.n	80168ce <prvLoggingTask+0x12e>
 80168c6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80168ca:	280d      	cmp	r0, #13
 80168cc:	d0f1      	beq.n	80168b2 <prvLoggingTask+0x112>
 80168ce:	7818      	ldrb	r0, [r3, #0]
 80168d0:	280a      	cmp	r0, #10
 80168d2:	d1ee      	bne.n	80168b2 <prvLoggingTask+0x112>
							pcTarget[ 0 ] = logASCII_CR;
 80168d4:	f881 c000 	strb.w	ip, [r1]
							pcTarget[ 1 ] = logASCII_NL;
 80168d8:	f881 e001 	strb.w	lr, [r1, #1]
							if( xCount < ( sizeof( cLoggingLine ) - 1 ) )
 80168dc:	2ac6      	cmp	r2, #198	; 0xc6
								xCount++;
 80168de:	bf9c      	itt	ls
 80168e0:	3201      	addls	r2, #1
								pcTarget++;
 80168e2:	3101      	addls	r1, #1
 80168e4:	e7e5      	b.n	80168b2 <prvLoggingTask+0x112>
						pcSource++;
					}
				}
				#endif

				FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
 80168e6:	4b15      	ldr	r3, [pc, #84]	; (801693c <prvLoggingTask+0x19c>)
 80168e8:	6818      	ldr	r0, [r3, #0]
 80168ea:	2308      	movs	r3, #8
 80168ec:	9301      	str	r3, [sp, #4]
 80168ee:	ab04      	add	r3, sp, #16
 80168f0:	9300      	str	r3, [sp, #0]
 80168f2:	2300      	movs	r3, #0
 80168f4:	4621      	mov	r1, r4
 80168f6:	f7f6 fb65 	bl	800cfc4 <FreeRTOS_sendto>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80168fa:	3e01      	subs	r6, #1
 80168fc:	d00e      	beq.n	801691c <prvLoggingTask+0x17c>
size_t xMessageLength = 0;
 80168fe:	2300      	movs	r3, #0
 8016900:	9302      	str	r3, [sp, #8]
	if( pxStreamBuffer != NULL )
 8016902:	683a      	ldr	r2, [r7, #0]
 8016904:	b14a      	cbz	r2, 801691a <prvLoggingTask+0x17a>
size_t uxHead = pxBuffer->uxHead;
 8016906:	6893      	ldr	r3, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 8016908:	6811      	ldr	r1, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 801690a:	6912      	ldr	r2, [r2, #16]
 801690c:	4413      	add	r3, r2
 801690e:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 8016910:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 8016912:	bf98      	it	ls
 8016914:	1a9b      	subls	r3, r3, r2
		if( uxLength > sizeof( size_t ) )
 8016916:	2b04      	cmp	r3, #4
 8016918:	d892      	bhi.n	8016840 <prvLoggingTask+0xa0>
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 801691a:	4c09      	ldr	r4, [pc, #36]	; (8016940 <prvLoggingTask+0x1a0>)
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 801691c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8016920:	2501      	movs	r5, #1
 8016922:	4631      	mov	r1, r6
 8016924:	4628      	mov	r0, r5
 8016926:	f7fe fbdd 	bl	80150e4 <ulTaskNotifyTake>
		if( xGetPhyLinkStatus() != pdFALSE )
 801692a:	f7fa f98d 	bl	8010c48 <xGetPhyLinkStatus>
 801692e:	2800      	cmp	r0, #0
 8016930:	d0f7      	beq.n	8016922 <prvLoggingTask+0x182>
 8016932:	2614      	movs	r6, #20
 8016934:	e7e3      	b.n	80168fe <prvLoggingTask+0x15e>
 8016936:	bf00      	nop
 8016938:	6400a8c0 	.word	0x6400a8c0
 801693c:	20000174 	.word	0x20000174
 8016940:	200027b4 	.word	0x200027b4
 8016944:	08026c2c 	.word	0x08026c2c
 8016948:	2000287c 	.word	0x2000287c
 801694c:	2000288c 	.word	0x2000288c

08016950 <lUDPLoggingPrintf>:
{
 8016950:	b40f      	push	{r0, r1, r2, r3}
 8016952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016956:	b086      	sub	sp, #24
	if( xLoggingInitialised == pdFALSE )
 8016958:	4b4a      	ldr	r3, [pc, #296]	; (8016a84 <lUDPLoggingPrintf+0x134>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d05e      	beq.n	8016a1e <lUDPLoggingPrintf+0xce>
		va_start (args, pcFormatString);
 8016960:	ad0f      	add	r5, sp, #60	; 0x3c
 8016962:	9504      	str	r5, [sp, #16]
	configASSERT( pxStreamBuffer );
 8016964:	4b48      	ldr	r3, [pc, #288]	; (8016a88 <lUDPLoggingPrintf+0x138>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d077      	beq.n	8016a5c <lUDPLoggingPrintf+0x10c>
	vTaskSuspendAll();
 801696c:	f7fd fdc8 	bl	8014500 <vTaskSuspendAll>
		ullCurrentTime = ullGetHighResolutionTime();
 8016970:	f000 fb8e 	bl	8017090 <ullGetHighResolutionTime>
 8016974:	4680      	mov	r8, r0
 8016976:	4689      	mov	r9, r1
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8016978:	4a44      	ldr	r2, [pc, #272]	; (8016a8c <lUDPLoggingPrintf+0x13c>)
 801697a:	2300      	movs	r3, #0
 801697c:	f7e9 fc90 	bl	80002a0 <__aeabi_uldivmod>
 8016980:	4616      	mov	r6, r2
 8016982:	461f      	mov	r7, r3
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8016984:	2000      	movs	r0, #0
 8016986:	f7fd fdc9 	bl	801451c <pcTaskGetName>
 801698a:	4682      	mov	sl, r0
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 801698c:	4a3f      	ldr	r2, [pc, #252]	; (8016a8c <lUDPLoggingPrintf+0x13c>)
 801698e:	2300      	movs	r3, #0
 8016990:	4640      	mov	r0, r8
 8016992:	4649      	mov	r1, r9
 8016994:	f7e9 fc84 	bl	80002a0 <__aeabi_uldivmod>
 8016998:	4680      	mov	r8, r0
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 801699a:	4c3d      	ldr	r4, [pc, #244]	; (8016a90 <lUDPLoggingPrintf+0x140>)
 801699c:	f8cd a008 	str.w	sl, [sp, #8]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80169a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169a4:	2300      	movs	r3, #0
 80169a6:	4630      	mov	r0, r6
 80169a8:	4639      	mov	r1, r7
 80169aa:	f7e9 fc79 	bl	80002a0 <__aeabi_uldivmod>
 80169ae:	9201      	str	r2, [sp, #4]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 80169b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169b4:	2300      	movs	r3, #0
 80169b6:	4630      	mov	r0, r6
 80169b8:	4639      	mov	r1, r7
 80169ba:	f7e9 fc71 	bl	80002a0 <__aeabi_uldivmod>
 80169be:	9000      	str	r0, [sp, #0]
		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80169c0:	4643      	mov	r3, r8
 80169c2:	4a34      	ldr	r2, [pc, #208]	; (8016a94 <lUDPLoggingPrintf+0x144>)
 80169c4:	21c8      	movs	r1, #200	; 0xc8
 80169c6:	4620      	mov	r0, r4
 80169c8:	f000 fb07 	bl	8016fda <snprintf>
 80169cc:	9005      	str	r0, [sp, #20]
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80169ce:	462b      	mov	r3, r5
 80169d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169d2:	f1c0 01c8 	rsb	r1, r0, #200	; 0xc8
 80169d6:	4420      	add	r0, r4
 80169d8:	f000 faee 	bl	8016fb8 <vsnprintf>
 80169dc:	9a05      	ldr	r2, [sp, #20]
 80169de:	4402      	add	r2, r0
 80169e0:	9205      	str	r2, [sp, #20]
		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 80169e2:	4b29      	ldr	r3, [pc, #164]	; (8016a88 <lUDPLoggingPrintf+0x138>)
 80169e4:	6818      	ldr	r0, [r3, #0]
size_t uxHead = pxBuffer->uxHead;
 80169e6:	6884      	ldr	r4, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 80169e8:	6803      	ldr	r3, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 80169ea:	6901      	ldr	r1, [r0, #16]
 80169ec:	440b      	add	r3, r1
 80169ee:	3b01      	subs	r3, #1
 80169f0:	1b1b      	subs	r3, r3, r4
	if( uxCount >= pxBuffer->LENGTH )
 80169f2:	4299      	cmp	r1, r3
		uxCount -= pxBuffer->LENGTH;
 80169f4:	bf98      	it	ls
 80169f6:	1a5b      	subls	r3, r3, r1
		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 80169f8:	3204      	adds	r2, #4
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d334      	bcc.n	8016a68 <lUDPLoggingPrintf+0x118>
	xTaskResumeAll();
 80169fe:	f7fd fe59 	bl	80146b4 <xTaskResumeAll>
	if( xLoggingTask != NULL )
 8016a02:	4b25      	ldr	r3, [pc, #148]	; (8016a98 <lUDPLoggingPrintf+0x148>)
 8016a04:	6818      	ldr	r0, [r3, #0]
 8016a06:	b120      	cbz	r0, 8016a12 <lUDPLoggingPrintf+0xc2>
		xTaskNotifyGive( xLoggingTask );
 8016a08:	2300      	movs	r3, #0
 8016a0a:	2202      	movs	r2, #2
 8016a0c:	4619      	mov	r1, r3
 8016a0e:	f7fe fba5 	bl	801515c <xTaskGenericNotify>
	return xLength;
 8016a12:	9805      	ldr	r0, [sp, #20]
}
 8016a14:	b006      	add	sp, #24
 8016a16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a1a:	b004      	add	sp, #16
 8016a1c:	4770      	bx	lr
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016a1e:	f7fe f9af 	bl	8014d80 <xTaskGetSchedulerState>
 8016a22:	2802      	cmp	r0, #2
 8016a24:	d005      	beq.n	8016a32 <lUDPLoggingPrintf+0xe2>
	return xLoggingInitialised;
 8016a26:	4b17      	ldr	r3, [pc, #92]	; (8016a84 <lUDPLoggingPrintf+0x134>)
	if( prvInitialiseLogging() != pdFALSE )
 8016a28:	681b      	ldr	r3, [r3, #0]
		xLength = 0;
 8016a2a:	2000      	movs	r0, #0
	if( prvInitialiseLogging() != pdFALSE )
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d0f1      	beq.n	8016a14 <lUDPLoggingPrintf+0xc4>
 8016a30:	e796      	b.n	8016960 <lUDPLoggingPrintf+0x10>
			pxStreamBuffer = pvPortMalloc( xSize );
 8016a32:	f640 70b5 	movw	r0, #4021	; 0xfb5
 8016a36:	f7fc fd67 	bl	8013508 <pvPortMalloc>
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	4b12      	ldr	r3, [pc, #72]	; (8016a88 <lUDPLoggingPrintf+0x138>)
 8016a3e:	6018      	str	r0, [r3, #0]
			if( pxStreamBuffer != NULL )
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d0f0      	beq.n	8016a26 <lUDPLoggingPrintf+0xd6>
				memset( pxStreamBuffer, '\0', xSize );
 8016a44:	f640 72b5 	movw	r2, #4021	; 0xfb5
 8016a48:	2100      	movs	r1, #0
 8016a4a:	f000 febf 	bl	80177cc <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8016a4e:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8016a52:	6123      	str	r3, [r4, #16]
				xLoggingInitialised = pdTRUE;
 8016a54:	2201      	movs	r2, #1
 8016a56:	4b0b      	ldr	r3, [pc, #44]	; (8016a84 <lUDPLoggingPrintf+0x134>)
 8016a58:	601a      	str	r2, [r3, #0]
 8016a5a:	e781      	b.n	8016960 <lUDPLoggingPrintf+0x10>
	configASSERT( pxStreamBuffer );
 8016a5c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8016a60:	480e      	ldr	r0, [pc, #56]	; (8016a9c <lUDPLoggingPrintf+0x14c>)
 8016a62:	f000 fc1d 	bl	80172a0 <vAssertCalled>
 8016a66:	e781      	b.n	801696c <lUDPLoggingPrintf+0x1c>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 8016a68:	2304      	movs	r3, #4
 8016a6a:	aa05      	add	r2, sp, #20
 8016a6c:	2100      	movs	r1, #0
 8016a6e:	f7f7 fc0b 	bl	800e288 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 8016a72:	9b05      	ldr	r3, [sp, #20]
 8016a74:	4a06      	ldr	r2, [pc, #24]	; (8016a90 <lUDPLoggingPrintf+0x140>)
 8016a76:	2100      	movs	r1, #0
 8016a78:	4803      	ldr	r0, [pc, #12]	; (8016a88 <lUDPLoggingPrintf+0x138>)
 8016a7a:	6800      	ldr	r0, [r0, #0]
 8016a7c:	f7f7 fc04 	bl	800e288 <uxStreamBufferAdd>
 8016a80:	e7bd      	b.n	80169fe <lUDPLoggingPrintf+0xae>
 8016a82:	bf00      	nop
 8016a84:	20002954 	.word	0x20002954
 8016a88:	2000287c 	.word	0x2000287c
 8016a8c:	000f4240 	.word	0x000f4240
 8016a90:	2000288c 	.word	0x2000288c
 8016a94:	08026c14 	.word	0x08026c14
 8016a98:	20002958 	.word	0x20002958
 8016a9c:	08026be8 	.word	0x08026be8

08016aa0 <vUDPLoggingTaskCreate>:
{
 8016aa0:	b500      	push	{lr}
 8016aa2:	b083      	sub	sp, #12
	xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8016aa4:	4b06      	ldr	r3, [pc, #24]	; (8016ac0 <vUDPLoggingTaskCreate+0x20>)
 8016aa6:	9301      	str	r3, [sp, #4]
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	9300      	str	r3, [sp, #0]
 8016aac:	2300      	movs	r3, #0
 8016aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016ab2:	4904      	ldr	r1, [pc, #16]	; (8016ac4 <vUDPLoggingTaskCreate+0x24>)
 8016ab4:	4804      	ldr	r0, [pc, #16]	; (8016ac8 <vUDPLoggingTaskCreate+0x28>)
 8016ab6:	f7fd fadb 	bl	8014070 <xTaskCreate>
}
 8016aba:	b003      	add	sp, #12
 8016abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ac0:	20002958 	.word	0x20002958
 8016ac4:	08026c3c 	.word	0x08026c3c
 8016ac8:	080167a1 	.word	0x080167a1

08016acc <FreeRTOS_time>:
time_t uxTime;

 	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		uxTime = ( time_t ) ulSeconds;
 8016acc:	4b02      	ldr	r3, [pc, #8]	; (8016ad8 <FreeRTOS_time+0xc>)
 8016ace:	681b      	ldr	r3, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();
	if( pxTime != NULL )
 8016ad0:	b100      	cbz	r0, 8016ad4 <FreeRTOS_time+0x8>
	{
		*pxTime = uxTime;
 8016ad2:	6003      	str	r3, [r0, #0]
	}
	return uxTime;
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	4770      	bx	lr
 8016ad8:	20004e78 	.word	0x20004e78

08016adc <strbuf_init>:
	struct xPrintFlags flags;
};

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
	apStr->str = apBuf;
 8016adc:	6001      	str	r1, [r0, #0]
	apStr->orgStr = apBuf;
 8016ade:	6041      	str	r1, [r0, #4]
	apStr->nulPos = apMaxStr-1;
 8016ae0:	3a01      	subs	r2, #1
 8016ae2:	6082      	str	r2, [r0, #8]
	apStr->curLen = 0;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	60c3      	str	r3, [r0, #12]

	memset( &apStr->flags, '\0', sizeof( apStr->flags ) );
 8016ae8:	6103      	str	r3, [r0, #16]
 8016aea:	6143      	str	r3, [r0, #20]
 8016aec:	6183      	str	r3, [r0, #24]
 8016aee:	61c3      	str	r3, [r0, #28]
 8016af0:	4770      	bx	lr

08016af2 <strbuf_printchar>:
}
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
	if( apStr->str == NULL )
 8016af2:	6803      	ldr	r3, [r0, #0]
 8016af4:	b133      	cbz	r3, 8016b04 <strbuf_printchar+0x12>
	{
		vOutputChar( ( char ) c, xTicksToWait );
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str < apStr->nulPos )
 8016af6:	6882      	ldr	r2, [r0, #8]
 8016af8:	4293      	cmp	r3, r2
 8016afa:	d30f      	bcc.n	8016b1c <strbuf_printchar+0x2a>
	{
		*( apStr->str++ ) = c;
		apStr->curLen++;
		return pdTRUE;
	}
	if( apStr->str == apStr->nulPos )
 8016afc:	4293      	cmp	r3, r2
 8016afe:	d015      	beq.n	8016b2c <strbuf_printchar+0x3a>
	{
		*( apStr->str++ ) = '\0';
	}
	return pdFALSE;
 8016b00:	2000      	movs	r0, #0
 8016b02:	4770      	bx	lr
{
 8016b04:	b510      	push	{r4, lr}
 8016b06:	460b      	mov	r3, r1
 8016b08:	4604      	mov	r4, r0
		vOutputChar( ( char ) c, xTicksToWait );
 8016b0a:	2114      	movs	r1, #20
 8016b0c:	b2d8      	uxtb	r0, r3
 8016b0e:	f000 fd60 	bl	80175d2 <vOutputChar>
		apStr->curLen++;
 8016b12:	68e3      	ldr	r3, [r4, #12]
 8016b14:	3301      	adds	r3, #1
 8016b16:	60e3      	str	r3, [r4, #12]
		return pdTRUE;
 8016b18:	2001      	movs	r0, #1
 8016b1a:	bd10      	pop	{r4, pc}
		*( apStr->str++ ) = c;
 8016b1c:	1c5a      	adds	r2, r3, #1
 8016b1e:	6002      	str	r2, [r0, #0]
 8016b20:	7019      	strb	r1, [r3, #0]
		apStr->curLen++;
 8016b22:	68c3      	ldr	r3, [r0, #12]
 8016b24:	3301      	adds	r3, #1
 8016b26:	60c3      	str	r3, [r0, #12]
		return pdTRUE;
 8016b28:	2001      	movs	r0, #1
 8016b2a:	4770      	bx	lr
		*( apStr->str++ ) = '\0';
 8016b2c:	1c5a      	adds	r2, r3, #1
 8016b2e:	6002      	str	r2, [r0, #0]
 8016b30:	2000      	movs	r0, #0
 8016b32:	7018      	strb	r0, [r3, #0]
 8016b34:	4770      	bx	lr
	...

08016b38 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8016b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	460e      	mov	r6, r1
	register int padchar = ' ';
	int i,len;

	if( apBuf->flags.width > 0 )
 8016b40:	6940      	ldr	r0, [r0, #20]
 8016b42:	2800      	cmp	r0, #0
 8016b44:	dd2b      	ble.n	8016b9e <prints+0x66>
	{
		register int len = 0;
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8016b46:	780b      	ldrb	r3, [r1, #0]
 8016b48:	b32b      	cbz	r3, 8016b96 <prints+0x5e>
 8016b4a:	460a      	mov	r2, r1
 8016b4c:	2300      	movs	r3, #0
		{
			++len;
 8016b4e:	3301      	adds	r3, #1
		for( ptr = apString; *ptr; ++ptr )
 8016b50:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8016b54:	2900      	cmp	r1, #0
 8016b56:	d1fa      	bne.n	8016b4e <prints+0x16>
		}

		if( len >= apBuf->flags.width )
 8016b58:	4298      	cmp	r0, r3
 8016b5a:	dc1d      	bgt.n	8016b98 <prints+0x60>
		{
			apBuf->flags.width = 0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	6163      	str	r3, [r4, #20]
		else
		{
			apBuf->flags.width -= len;
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8016b60:	7f23      	ldrb	r3, [r4, #28]
 8016b62:	f003 0302 	and.w	r3, r3, #2
		{
			padchar = '0';
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	bf0c      	ite	eq
 8016b6a:	2520      	moveq	r5, #32
 8016b6c:	2530      	movne	r5, #48	; 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8016b6e:	7f23      	ldrb	r3, [r4, #28]
 8016b70:	f013 0f01 	tst.w	r3, #1
 8016b74:	d114      	bne.n	8016ba0 <prints+0x68>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8016b76:	6963      	ldr	r3, [r4, #20]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	dd11      	ble.n	8016ba0 <prints+0x68>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8016b7c:	4629      	mov	r1, r5
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f7ff ffb7 	bl	8016af2 <strbuf_printchar>
 8016b84:	4603      	mov	r3, r0
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d032      	beq.n	8016bf0 <prints+0xb8>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8016b8a:	6963      	ldr	r3, [r4, #20]
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	6163      	str	r3, [r4, #20]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	dcf3      	bgt.n	8016b7c <prints+0x44>
 8016b94:	e004      	b.n	8016ba0 <prints+0x68>
		for( ptr = apString; *ptr; ++ptr )
 8016b96:	2300      	movs	r3, #0
			apBuf->flags.width -= len;
 8016b98:	1ac3      	subs	r3, r0, r3
 8016b9a:	6163      	str	r3, [r4, #20]
 8016b9c:	e7e0      	b.n	8016b60 <prints+0x28>
	register int padchar = ' ';
 8016b9e:	2520      	movs	r5, #32
			{
				return pdFALSE;
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8016ba0:	69e3      	ldr	r3, [r4, #28]
 8016ba2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ba6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8016baa:	4a1e      	ldr	r2, [pc, #120]	; (8016c24 <prints+0xec>)
 8016bac:	4293      	cmp	r3, r2
 8016bae:	d022      	beq.n	8016bf6 <prints+0xbe>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8016bb0:	69a3      	ldr	r3, [r4, #24]
 8016bb2:	b173      	cbz	r3, 8016bd2 <prints+0x9a>
 8016bb4:	7831      	ldrb	r1, [r6, #0]
 8016bb6:	b161      	cbz	r1, 8016bd2 <prints+0x9a>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8016bb8:	4620      	mov	r0, r4
 8016bba:	f7ff ff9a 	bl	8016af2 <strbuf_printchar>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	b1b0      	cbz	r0, 8016bf0 <prints+0xb8>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8016bc2:	69a3      	ldr	r3, [r4, #24]
 8016bc4:	3b01      	subs	r3, #1
 8016bc6:	61a3      	str	r3, [r4, #24]
 8016bc8:	b11b      	cbz	r3, 8016bd2 <prints+0x9a>
 8016bca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016bce:	2900      	cmp	r1, #0
 8016bd0:	d1f2      	bne.n	8016bb8 <prints+0x80>
		{
			return pdFALSE;
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8016bd2:	6963      	ldr	r3, [r4, #20]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	dd22      	ble.n	8016c1e <prints+0xe6>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8016bd8:	4629      	mov	r1, r5
 8016bda:	4620      	mov	r0, r4
 8016bdc:	f7ff ff89 	bl	8016af2 <strbuf_printchar>
 8016be0:	4603      	mov	r3, r0
 8016be2:	b128      	cbz	r0, 8016bf0 <prints+0xb8>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8016be4:	6963      	ldr	r3, [r4, #20]
 8016be6:	3b01      	subs	r3, #1
 8016be8:	6163      	str	r3, [r4, #20]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	dcf4      	bgt.n	8016bd8 <prints+0xa0>
		{
			return pdFALSE;
		}
	}

	return pdTRUE;
 8016bee:	2301      	movs	r3, #1
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = strlen( apString );
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	f7e9 faf4 	bl	80001e4 <strlen>
		if( len < apBuf->flags.printLimit )
 8016bfc:	69a7      	ldr	r7, [r4, #24]
 8016bfe:	42b8      	cmp	r0, r7
 8016c00:	dad6      	bge.n	8016bb0 <prints+0x78>
			for( ; i; i-- )
 8016c02:	1a3f      	subs	r7, r7, r0
 8016c04:	d0d4      	beq.n	8016bb0 <prints+0x78>
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8016c06:	f04f 0830 	mov.w	r8, #48	; 0x30
 8016c0a:	4641      	mov	r1, r8
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f7ff ff70 	bl	8016af2 <strbuf_printchar>
 8016c12:	4603      	mov	r3, r0
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d0eb      	beq.n	8016bf0 <prints+0xb8>
			for( ; i; i-- )
 8016c18:	3f01      	subs	r7, #1
 8016c1a:	d1f6      	bne.n	8016c0a <prints+0xd2>
 8016c1c:	e7c8      	b.n	8016bb0 <prints+0x78>
	return pdTRUE;
 8016c1e:	2301      	movs	r3, #1
 8016c20:	e7e6      	b.n	8016bf0 <prints+0xb8>
 8016c22:	bf00      	nop
 8016c24:	00020001 	.word	0x00020001

08016c28 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8016c28:	b570      	push	{r4, r5, r6, lr}
 8016c2a:	b084      	sub	sp, #16
 8016c2c:	4605      	mov	r5, r0
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
	register unsigned int u = i;
	register unsigned base = apBuf->flags.base;
 8016c2e:	6902      	ldr	r2, [r0, #16]

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8016c30:	7f84      	ldrb	r4, [r0, #30]
 8016c32:	f044 0402 	orr.w	r4, r4, #2
 8016c36:	7784      	strb	r4, [r0, #30]

	if( i == 0 )
 8016c38:	b199      	cbz	r1, 8016c62 <printi+0x3a>
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	4610      	mov	r0, r2
		print_buf[ 0 ] = '0';
		print_buf[ 1 ] = '\0';
		return prints( apBuf, print_buf );
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8016c3e:	7fac      	ldrb	r4, [r5, #30]
 8016c40:	f014 0f01 	tst.w	r4, #1
 8016c44:	d001      	beq.n	8016c4a <printi+0x22>
 8016c46:	2a0a      	cmp	r2, #10
 8016c48:	d016      	beq.n	8016c78 <printi+0x50>
		u = -i;
	}

	s = print_buf + sizeof( print_buf ) - 1;

	*s = '\0';
 8016c4a:	2100      	movs	r1, #0
 8016c4c:	f88d 100f 	strb.w	r1, [sp, #15]
	switch( base )
 8016c50:	2a0a      	cmp	r2, #10
 8016c52:	d02b      	beq.n	8016cac <printi+0x84>
 8016c54:	2a10      	cmp	r2, #16
 8016c56:	d022      	beq.n	8016c9e <printi+0x76>
 8016c58:	2a08      	cmp	r2, #8
 8016c5a:	d027      	beq.n	8016cac <printi+0x84>
	s = print_buf + sizeof( print_buf ) - 1;
 8016c5c:	f10d 010f 	add.w	r1, sp, #15
 8016c60:	e03f      	b.n	8016ce2 <printi+0xba>
		print_buf[ 0 ] = '0';
 8016c62:	2330      	movs	r3, #48	; 0x30
 8016c64:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[ 1 ] = '\0';
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints( apBuf, print_buf );
 8016c6e:	a901      	add	r1, sp, #4
 8016c70:	f7ff ff62 	bl	8016b38 <prints>
 8016c74:	4603      	mov	r3, r0
 8016c76:	e038      	b.n	8016cea <printi+0xc2>
	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8016c78:	2900      	cmp	r1, #0
 8016c7a:	dae6      	bge.n	8016c4a <printi+0x22>
		u = -i;
 8016c7c:	424b      	negs	r3, r1
	*s = '\0';
 8016c7e:	2100      	movs	r1, #0
 8016c80:	f88d 100f 	strb.w	r1, [sp, #15]
	switch( base )
 8016c84:	2a0a      	cmp	r2, #10
 8016c86:	d006      	beq.n	8016c96 <printi+0x6e>
 8016c88:	2a10      	cmp	r2, #16
 8016c8a:	d006      	beq.n	8016c9a <printi+0x72>
 8016c8c:	2a08      	cmp	r2, #8
	s = print_buf + sizeof( print_buf ) - 1;
 8016c8e:	bf18      	it	ne
 8016c90:	f10d 040f 	addne.w	r4, sp, #15
	switch( base )
 8016c94:	d11b      	bne.n	8016cce <printi+0xa6>
		neg = 1;
 8016c96:	2601      	movs	r6, #1
 8016c98:	e009      	b.n	8016cae <printi+0x86>
 8016c9a:	2601      	movs	r6, #1
 8016c9c:	e000      	b.n	8016ca0 <printi+0x78>
	switch( base )
 8016c9e:	2600      	movs	r6, #0
	{
	case 16:
		while( u != 0 )
 8016ca0:	f10d 040f 	add.w	r4, sp, #15
 8016ca4:	b193      	cbz	r3, 8016ccc <printi+0xa4>
 8016ca6:	f10d 040f 	add.w	r4, sp, #15
 8016caa:	e026      	b.n	8016cfa <printi+0xd2>
	switch( base )
 8016cac:	2600      	movs	r6, #0
		break;

	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
 8016cae:	f10d 040f 	add.w	r4, sp, #15
 8016cb2:	b15b      	cbz	r3, 8016ccc <printi+0xa4>
 8016cb4:	f10d 040f 	add.w	r4, sp, #15
		{
			t = u % base;
 8016cb8:	fbb3 f2f0 	udiv	r2, r3, r0
 8016cbc:	fb00 3312 	mls	r3, r0, r2, r3
			*( --s ) = t + '0';
 8016cc0:	3330      	adds	r3, #48	; 0x30
 8016cc2:	f804 3d01 	strb.w	r3, [r4, #-1]!
			u /= base;
 8016cc6:	4613      	mov	r3, r2
		while( u )
 8016cc8:	2a00      	cmp	r2, #0
 8016cca:	d1f5      	bne.n	8016cb8 <printi+0x90>
		}
		break;
*/
	}

	if( neg != 0 )
 8016ccc:	b34e      	cbz	r6, 8016d22 <printi+0xfa>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8016cce:	696b      	ldr	r3, [r5, #20]
 8016cd0:	b11b      	cbz	r3, 8016cda <printi+0xb2>
 8016cd2:	7f2b      	ldrb	r3, [r5, #28]
 8016cd4:	f013 0f02 	tst.w	r3, #2
 8016cd8:	d117      	bne.n	8016d0a <printi+0xe2>
			}
			--apBuf->flags.width;
		}
		else
		{
			*( --s ) = '-';
 8016cda:	1e61      	subs	r1, r4, #1
 8016cdc:	232d      	movs	r3, #45	; 0x2d
 8016cde:	f804 3c01 	strb.w	r3, [r4, #-1]
		}
	}

	return prints( apBuf, s );
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	f7ff ff28 	bl	8016b38 <prints>
 8016ce8:	4603      	mov	r3, r0
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	b004      	add	sp, #16
 8016cee:	bd70      	pop	{r4, r5, r6, pc}
			*( --s ) = t + '0';
 8016cf0:	3230      	adds	r2, #48	; 0x30
 8016cf2:	f804 2d01 	strb.w	r2, [r4, #-1]!
		while( u != 0 )
 8016cf6:	091b      	lsrs	r3, r3, #4
 8016cf8:	d0e8      	beq.n	8016ccc <printi+0xa4>
			t = u & 0xF;
 8016cfa:	f003 020f 	and.w	r2, r3, #15
			if( t >= 10 )
 8016cfe:	2a09      	cmp	r2, #9
 8016d00:	ddf6      	ble.n	8016cf0 <printi+0xc8>
				t += apBuf->flags.letBase - '0' - 10;
 8016d02:	7f69      	ldrb	r1, [r5, #29]
 8016d04:	393a      	subs	r1, #58	; 0x3a
 8016d06:	440a      	add	r2, r1
 8016d08:	e7f2      	b.n	8016cf0 <printi+0xc8>
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8016d0a:	212d      	movs	r1, #45	; 0x2d
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f7ff fef0 	bl	8016af2 <strbuf_printchar>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d0e8      	beq.n	8016cea <printi+0xc2>
			--apBuf->flags.width;
 8016d18:	696b      	ldr	r3, [r5, #20]
 8016d1a:	3b01      	subs	r3, #1
 8016d1c:	616b      	str	r3, [r5, #20]
 8016d1e:	4621      	mov	r1, r4
 8016d20:	e7df      	b.n	8016ce2 <printi+0xba>
 8016d22:	4621      	mov	r1, r4
 8016d24:	e7dd      	b.n	8016ce2 <printi+0xba>

08016d26 <sprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8016d26:	b40e      	push	{r1, r2, r3}
 8016d28:	b510      	push	{r4, lr}
 8016d2a:	b08b      	sub	sp, #44	; 0x2c
 8016d2c:	4601      	mov	r1, r0
 8016d2e:	ab0d      	add	r3, sp, #52	; 0x34
 8016d30:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list args;

	va_start( args,  apFmt );
 8016d34:	9309      	str	r3, [sp, #36]	; 0x24
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8016d36:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8016d3a:	a801      	add	r0, sp, #4
 8016d3c:	f7ff fece 	bl	8016adc <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8016d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d42:	4621      	mov	r1, r4
 8016d44:	a801      	add	r0, sp, #4
 8016d46:	f000 f807 	bl	8016d58 <tiny_print>
	va_end( args );

	return strBuf.curLen;
}
 8016d4a:	9804      	ldr	r0, [sp, #16]
 8016d4c:	b00b      	add	sp, #44	; 0x2c
 8016d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d52:	b003      	add	sp, #12
 8016d54:	4770      	bx	lr
	...

08016d58 <tiny_print>:
{
 8016d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d5c:	b087      	sub	sp, #28
 8016d5e:	4604      	mov	r4, r0
 8016d60:	468a      	mov	sl, r1
 8016d62:	4616      	mov	r6, r2
		vOutputChar( ( char ) c, xTicksToWait );
 8016d64:	f04f 0b14 	mov.w	fp, #20
	sprintf( print_buf, "%u.%u.%u.%u",
 8016d68:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8016fb0 <tiny_print+0x258>
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8016d6c:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8016fb4 <tiny_print+0x25c>
		int ch = *( format++ );
 8016d70:	f10a 0501 	add.w	r5, sl, #1
 8016d74:	f89a 7000 	ldrb.w	r7, [sl]
		if( ch != '%' )
 8016d78:	2f25      	cmp	r7, #37	; 0x25
 8016d7a:	d163      	bne.n	8016e44 <tiny_print+0xec>
		ch = *( format++ );
 8016d7c:	f105 0a01 	add.w	sl, r5, #1
 8016d80:	782b      	ldrb	r3, [r5, #0]
		if( ch == '\0' )
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f000 810e 	beq.w	8016fa4 <tiny_print+0x24c>
		if( ch == '%' )
 8016d88:	2b25      	cmp	r3, #37	; 0x25
 8016d8a:	d073      	beq.n	8016e74 <tiny_print+0x11c>
		memset( &apBuf->flags, '\0', sizeof( apBuf->flags ) );
 8016d8c:	2100      	movs	r1, #0
 8016d8e:	6121      	str	r1, [r4, #16]
 8016d90:	6161      	str	r1, [r4, #20]
 8016d92:	61a1      	str	r1, [r4, #24]
 8016d94:	61e1      	str	r1, [r4, #28]
		if( ch == '-' )
 8016d96:	2b2d      	cmp	r3, #45	; 0x2d
 8016d98:	d073      	beq.n	8016e82 <tiny_print+0x12a>
		while( ch == '0' )
 8016d9a:	2b30      	cmp	r3, #48	; 0x30
 8016d9c:	d107      	bne.n	8016dae <tiny_print+0x56>
			ch = *( format++ );
 8016d9e:	f81a 3b01 	ldrb.w	r3, [sl], #1
			apBuf->flags.pad |= PAD_ZERO;
 8016da2:	7f22      	ldrb	r2, [r4, #28]
 8016da4:	f042 0202 	orr.w	r2, r2, #2
 8016da8:	7722      	strb	r2, [r4, #28]
		while( ch == '0' )
 8016daa:	2b30      	cmp	r3, #48	; 0x30
 8016dac:	d0f7      	beq.n	8016d9e <tiny_print+0x46>
		if( ch == '*' )
 8016dae:	2b2a      	cmp	r3, #42	; 0x2a
 8016db0:	d06d      	beq.n	8016e8e <tiny_print+0x136>
			while( ch >= '0' && ch <= '9' )
 8016db2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016db6:	2a09      	cmp	r2, #9
 8016db8:	d80c      	bhi.n	8016dd4 <tiny_print+0x7c>
				apBuf->flags.width *= 10;
 8016dba:	6962      	ldr	r2, [r4, #20]
 8016dbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				apBuf->flags.width += ch - '0';
 8016dc0:	3b30      	subs	r3, #48	; 0x30
 8016dc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016dc6:	6162      	str	r2, [r4, #20]
				ch = *( format++ );
 8016dc8:	f81a 3b01 	ldrb.w	r3, [sl], #1
			while( ch >= '0' && ch <= '9' )
 8016dcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016dd0:	2a09      	cmp	r2, #9
 8016dd2:	d9f2      	bls.n	8016dba <tiny_print+0x62>
		if( ch == '.' )
 8016dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8016dd6:	d062      	beq.n	8016e9e <tiny_print+0x146>
		if( apBuf->flags.printLimit == 0 )
 8016dd8:	69a2      	ldr	r2, [r4, #24]
 8016dda:	b912      	cbnz	r2, 8016de2 <tiny_print+0x8a>
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8016ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016de0:	61a2      	str	r2, [r4, #24]
		if( ch == 's' )
 8016de2:	2b73      	cmp	r3, #115	; 0x73
 8016de4:	d07e      	beq.n	8016ee4 <tiny_print+0x18c>
		if( ch == 'c' )
 8016de6:	2b63      	cmp	r3, #99	; 0x63
 8016de8:	f000 8087 	beq.w	8016efa <tiny_print+0x1a2>
		if( ch == 'l' )
 8016dec:	2b6c      	cmp	r3, #108	; 0x6c
 8016dee:	f000 808c 	beq.w	8016f0a <tiny_print+0x1b2>
		if( ch == 'L' )
 8016df2:	2b4c      	cmp	r3, #76	; 0x4c
 8016df4:	f000 8092 	beq.w	8016f1c <tiny_print+0x1c4>
		apBuf->flags.base = 10;
 8016df8:	220a      	movs	r2, #10
 8016dfa:	6122      	str	r2, [r4, #16]
		apBuf->flags.letBase = 'a';
 8016dfc:	2261      	movs	r2, #97	; 0x61
 8016dfe:	7762      	strb	r2, [r4, #29]
		if( ch == 'd' || ch == 'u' )
 8016e00:	2b64      	cmp	r3, #100	; 0x64
 8016e02:	f000 8094 	beq.w	8016f2e <tiny_print+0x1d6>
 8016e06:	2b75      	cmp	r3, #117	; 0x75
 8016e08:	f000 8091 	beq.w	8016f2e <tiny_print+0x1d6>
		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8016e0c:	2210      	movs	r2, #16
 8016e0e:	6122      	str	r2, [r4, #16]
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8016e10:	2b78      	cmp	r3, #120	; 0x78
 8016e12:	f000 809b 	beq.w	8016f4c <tiny_print+0x1f4>
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8016e16:	2b58      	cmp	r3, #88	; 0x58
 8016e18:	f000 80c1 	beq.w	8016f9e <tiny_print+0x246>
 8016e1c:	2b70      	cmp	r3, #112	; 0x70
 8016e1e:	f000 8099 	beq.w	8016f54 <tiny_print+0x1fc>
 8016e22:	2b6f      	cmp	r3, #111	; 0x6f
 8016e24:	d1a4      	bne.n	8016d70 <tiny_print+0x18>
				apBuf->flags.base = 8;
 8016e26:	2308      	movs	r3, #8
 8016e28:	6123      	str	r3, [r4, #16]
 8016e2a:	e093      	b.n	8016f54 <tiny_print+0x1fc>
		vOutputChar( ( char ) c, xTicksToWait );
 8016e2c:	4659      	mov	r1, fp
 8016e2e:	4638      	mov	r0, r7
 8016e30:	f000 fbcf 	bl	80175d2 <vOutputChar>
		if( c == 0 )
 8016e34:	b1b7      	cbz	r7, 8016e64 <tiny_print+0x10c>
		apStr->curLen++;
 8016e36:	68e3      	ldr	r3, [r4, #12]
 8016e38:	3301      	adds	r3, #1
 8016e3a:	60e3      	str	r3, [r4, #12]
				ch = *( format++ );
 8016e3c:	f815 7b01 	ldrb.w	r7, [r5], #1
			} while( ch != '%' );
 8016e40:	2f25      	cmp	r7, #37	; 0x25
 8016e42:	d09b      	beq.n	8016d7c <tiny_print+0x24>
	if( apStr->str == NULL )
 8016e44:	6823      	ldr	r3, [r4, #0]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0f0      	beq.n	8016e2c <tiny_print+0xd4>
	if( apStr->str < apStr->nulPos )
 8016e4a:	68a2      	ldr	r2, [r4, #8]
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d207      	bcs.n	8016e60 <tiny_print+0x108>
		*(apStr->str++) = c;
 8016e50:	1c5a      	adds	r2, r3, #1
 8016e52:	6022      	str	r2, [r4, #0]
 8016e54:	701f      	strb	r7, [r3, #0]
		if( c == 0 )
 8016e56:	b12f      	cbz	r7, 8016e64 <tiny_print+0x10c>
		apStr->curLen++;
 8016e58:	68e3      	ldr	r3, [r4, #12]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	60e3      	str	r3, [r4, #12]
 8016e5e:	e7ed      	b.n	8016e3c <tiny_print+0xe4>
	if( apStr->str == apStr->nulPos )
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d002      	beq.n	8016e6a <tiny_print+0x112>
}
 8016e64:	b007      	add	sp, #28
 8016e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*( apStr->str++ ) = '\0';
 8016e6a:	1c53      	adds	r3, r2, #1
 8016e6c:	6023      	str	r3, [r4, #0]
 8016e6e:	2300      	movs	r3, #0
 8016e70:	7013      	strb	r3, [r2, #0]
 8016e72:	e7f7      	b.n	8016e64 <tiny_print+0x10c>
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8016e74:	2125      	movs	r1, #37	; 0x25
 8016e76:	4620      	mov	r0, r4
 8016e78:	f7ff fe3b 	bl	8016af2 <strbuf_printchar>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d0f1      	beq.n	8016e64 <tiny_print+0x10c>
 8016e80:	e776      	b.n	8016d70 <tiny_print+0x18>
			ch = *( format++ );
 8016e82:	f105 0a02 	add.w	sl, r5, #2
 8016e86:	786b      	ldrb	r3, [r5, #1]
			apBuf->flags.pad = PAD_RIGHT;
 8016e88:	2201      	movs	r2, #1
 8016e8a:	7722      	strb	r2, [r4, #28]
 8016e8c:	e785      	b.n	8016d9a <tiny_print+0x42>
			ch = *( format++ );
 8016e8e:	f89a 3000 	ldrb.w	r3, [sl]
			apBuf->flags.width = va_arg( args, int );
 8016e92:	6832      	ldr	r2, [r6, #0]
 8016e94:	6162      	str	r2, [r4, #20]
 8016e96:	3604      	adds	r6, #4
			ch = *( format++ );
 8016e98:	f10a 0a01 	add.w	sl, sl, #1
 8016e9c:	e79a      	b.n	8016dd4 <tiny_print+0x7c>
			ch = *( format++ );
 8016e9e:	f10a 0101 	add.w	r1, sl, #1
 8016ea2:	f89a 2000 	ldrb.w	r2, [sl]
 8016ea6:	4613      	mov	r3, r2
			if( ch == '*' )
 8016ea8:	2a2a      	cmp	r2, #42	; 0x2a
 8016eaa:	d013      	beq.n	8016ed4 <tiny_print+0x17c>
				while( ch >= '0' && ch <= '9' )
 8016eac:	3a30      	subs	r2, #48	; 0x30
 8016eae:	2a09      	cmp	r2, #9
 8016eb0:	bf88      	it	hi
 8016eb2:	468a      	movhi	sl, r1
 8016eb4:	d890      	bhi.n	8016dd8 <tiny_print+0x80>
					apBuf->flags.printLimit *= 10;
 8016eb6:	69a2      	ldr	r2, [r4, #24]
 8016eb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					apBuf->flags.printLimit += ch - '0';
 8016ebc:	3b30      	subs	r3, #48	; 0x30
 8016ebe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016ec2:	61a2      	str	r2, [r4, #24]
					ch = *( format++ );
 8016ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
				while( ch >= '0' && ch <= '9' )
 8016ec8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016ecc:	2a09      	cmp	r2, #9
 8016ece:	d9f2      	bls.n	8016eb6 <tiny_print+0x15e>
					ch = *( format++ );
 8016ed0:	468a      	mov	sl, r1
 8016ed2:	e781      	b.n	8016dd8 <tiny_print+0x80>
				apBuf->flags.printLimit = va_arg( args, int );
 8016ed4:	6833      	ldr	r3, [r6, #0]
 8016ed6:	61a3      	str	r3, [r4, #24]
				ch = *( format++ );
 8016ed8:	f89a 3001 	ldrb.w	r3, [sl, #1]
				apBuf->flags.printLimit = va_arg( args, int );
 8016edc:	3604      	adds	r6, #4
				ch = *( format++ );
 8016ede:	f10a 0a02 	add.w	sl, sl, #2
 8016ee2:	e779      	b.n	8016dd8 <tiny_print+0x80>
			register char *s = ( char * )va_arg( args, int );
 8016ee4:	6831      	ldr	r1, [r6, #0]
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8016ee6:	2900      	cmp	r1, #0
 8016ee8:	bf08      	it	eq
 8016eea:	4641      	moveq	r1, r8
 8016eec:	4620      	mov	r0, r4
 8016eee:	f7ff fe23 	bl	8016b38 <prints>
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d056      	beq.n	8016fa4 <tiny_print+0x24c>
			register char *s = ( char * )va_arg( args, int );
 8016ef6:	3604      	adds	r6, #4
 8016ef8:	e73a      	b.n	8016d70 <tiny_print+0x18>
			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8016efa:	7831      	ldrb	r1, [r6, #0]
 8016efc:	4620      	mov	r0, r4
 8016efe:	f7ff fdf8 	bl	8016af2 <strbuf_printchar>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d0ae      	beq.n	8016e64 <tiny_print+0x10c>
			scr[0] = ( char ) va_arg( args, int );
 8016f06:	3604      	adds	r6, #4
 8016f08:	e732      	b.n	8016d70 <tiny_print+0x18>
			ch = *( format++ );
 8016f0a:	f89a 3000 	ldrb.w	r3, [sl]
			apBuf->flags.long32 = 1;
 8016f0e:	7fa2      	ldrb	r2, [r4, #30]
 8016f10:	f042 0204 	orr.w	r2, r2, #4
 8016f14:	77a2      	strb	r2, [r4, #30]
			ch = *( format++ );
 8016f16:	f10a 0a01 	add.w	sl, sl, #1
 8016f1a:	e76a      	b.n	8016df2 <tiny_print+0x9a>
			ch = *( format++ );
 8016f1c:	f89a 3000 	ldrb.w	r3, [sl]
			apBuf->flags.long64 = 1;
 8016f20:	7fa2      	ldrb	r2, [r4, #30]
 8016f22:	f042 0208 	orr.w	r2, r2, #8
 8016f26:	77a2      	strb	r2, [r4, #30]
			ch = *( format++ );
 8016f28:	f10a 0a01 	add.w	sl, sl, #1
 8016f2c:	e764      	b.n	8016df8 <tiny_print+0xa0>
			apBuf->flags.isSigned = ( ch == 'd' );
 8016f2e:	2b64      	cmp	r3, #100	; 0x64
 8016f30:	bf14      	ite	ne
 8016f32:	2300      	movne	r3, #0
 8016f34:	2301      	moveq	r3, #1
 8016f36:	7fa2      	ldrb	r2, [r4, #30]
 8016f38:	f363 0200 	bfi	r2, r3, #0, #1
 8016f3c:	77a2      	strb	r2, [r4, #30]
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8016f3e:	6831      	ldr	r1, [r6, #0]
 8016f40:	4620      	mov	r0, r4
 8016f42:	f7ff fe71 	bl	8016c28 <printi>
 8016f46:	b368      	cbz	r0, 8016fa4 <tiny_print+0x24c>
 8016f48:	3604      	adds	r6, #4
 8016f4a:	e711      	b.n	8016d70 <tiny_print+0x18>
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8016f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8016f50:	2b69      	cmp	r3, #105	; 0x69
 8016f52:	d006      	beq.n	8016f62 <tiny_print+0x20a>
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8016f54:	6831      	ldr	r1, [r6, #0]
 8016f56:	4620      	mov	r0, r4
 8016f58:	f7ff fe66 	bl	8016c28 <printi>
 8016f5c:	b310      	cbz	r0, 8016fa4 <tiny_print+0x24c>
 8016f5e:	3604      	adds	r6, #4
 8016f60:	e706      	b.n	8016d70 <tiny_print+0x18>
		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8016f62:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016f66:	2b70      	cmp	r3, #112	; 0x70
 8016f68:	d1f4      	bne.n	8016f54 <tiny_print+0x1fc>
			format += 2;	/* eat the "xi" of "xip" */
 8016f6a:	f10a 0a02 	add.w	sl, sl, #2
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8016f6e:	1d35      	adds	r5, r6, #4
 8016f70:	6832      	ldr	r2, [r6, #0]
	sprintf( print_buf, "%u.%u.%u.%u",
 8016f72:	b2d3      	uxtb	r3, r2
 8016f74:	9301      	str	r3, [sp, #4]
 8016f76:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8016f7a:	9300      	str	r3, [sp, #0]
 8016f7c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8016f80:	0e12      	lsrs	r2, r2, #24
 8016f82:	4649      	mov	r1, r9
 8016f84:	a802      	add	r0, sp, #8
 8016f86:	f7ff fece 	bl	8016d26 <sprintf>
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8016f8a:	7fa3      	ldrb	r3, [r4, #30]
 8016f8c:	f043 0302 	orr.w	r3, r3, #2
 8016f90:	77a3      	strb	r3, [r4, #30]
	prints( apBuf, print_buf );
 8016f92:	a902      	add	r1, sp, #8
 8016f94:	4620      	mov	r0, r4
 8016f96:	f7ff fdcf 	bl	8016b38 <prints>
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8016f9a:	462e      	mov	r6, r5
			continue;
 8016f9c:	e6e8      	b.n	8016d70 <tiny_print+0x18>
				apBuf->flags.letBase = 'A';
 8016f9e:	2341      	movs	r3, #65	; 0x41
 8016fa0:	7763      	strb	r3, [r4, #29]
 8016fa2:	e7d7      	b.n	8016f54 <tiny_print+0x1fc>
	strbuf_printchar( apBuf, '\0' );
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f7ff fda3 	bl	8016af2 <strbuf_printchar>
 8016fac:	e75a      	b.n	8016e64 <tiny_print+0x10c>
 8016fae:	bf00      	nop
 8016fb0:	0801c2ec 	.word	0x0801c2ec
 8016fb4:	08026c44 	.word	0x08026c44

08016fb8 <vsnprintf>:
{
 8016fb8:	b530      	push	{r4, r5, lr}
 8016fba:	b089      	sub	sp, #36	; 0x24
 8016fbc:	4614      	mov	r4, r2
 8016fbe:	461d      	mov	r5, r3
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8016fc0:	1842      	adds	r2, r0, r1
 8016fc2:	4601      	mov	r1, r0
 8016fc4:	4668      	mov	r0, sp
 8016fc6:	f7ff fd89 	bl	8016adc <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8016fca:	462a      	mov	r2, r5
 8016fcc:	4621      	mov	r1, r4
 8016fce:	4668      	mov	r0, sp
 8016fd0:	f7ff fec2 	bl	8016d58 <tiny_print>
}
 8016fd4:	9803      	ldr	r0, [sp, #12]
 8016fd6:	b009      	add	sp, #36	; 0x24
 8016fd8:	bd30      	pop	{r4, r5, pc}

08016fda <snprintf>:
{
 8016fda:	b40c      	push	{r2, r3}
 8016fdc:	b510      	push	{r4, lr}
 8016fde:	b08a      	sub	sp, #40	; 0x28
 8016fe0:	ab0c      	add	r3, sp, #48	; 0x30
 8016fe2:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start( args,  apFmt );
 8016fe6:	9309      	str	r3, [sp, #36]	; 0x24
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8016fe8:	1842      	adds	r2, r0, r1
 8016fea:	4601      	mov	r1, r0
 8016fec:	a801      	add	r0, sp, #4
 8016fee:	f7ff fd75 	bl	8016adc <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8016ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ff4:	4621      	mov	r1, r4
 8016ff6:	a801      	add	r0, sp, #4
 8016ff8:	f7ff feae 	bl	8016d58 <tiny_print>
}
 8016ffc:	9804      	ldr	r0, [sp, #16]
 8016ffe:	b00a      	add	sp, #40	; 0x28
 8017000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017004:	b002      	add	sp, #8
 8017006:	4770      	bx	lr

08017008 <TIM2_IRQHandler>:
static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
	ulTimer2Flags = tim2_handle.Instance->SR;
 8017008:	4b07      	ldr	r3, [pc, #28]	; (8017028 <TIM2_IRQHandler+0x20>)
 801700a:	681a      	ldr	r2, [r3, #0]
 801700c:	6913      	ldr	r3, [r2, #16]
 801700e:	4907      	ldr	r1, [pc, #28]	; (801702c <TIM2_IRQHandler+0x24>)
 8017010:	600b      	str	r3, [r1, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8017012:	f013 0f01 	tst.w	r3, #1
 8017016:	d006      	beq.n	8017026 <TIM2_IRQHandler+0x1e>
	{
		__HAL_TIM_CLEAR_FLAG( &tim2_handle, TIM_FLAG_UPDATE );
 8017018:	f06f 0301 	mvn.w	r3, #1
 801701c:	6113      	str	r3, [r2, #16]
		ulInterruptCount++;
 801701e:	4a04      	ldr	r2, [pc, #16]	; (8017030 <TIM2_IRQHandler+0x28>)
 8017020:	6813      	ldr	r3, [r2, #0]
 8017022:	3301      	adds	r3, #1
 8017024:	6013      	str	r3, [r2, #0]
 8017026:	4770      	bx	lr
 8017028:	20004e80 	.word	0x20004e80
 801702c:	20004e7c 	.word	0x20004e7c
 8017030:	2000295c 	.word	0x2000295c

08017034 <vStartHighResolutionTimer>:
}


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8017034:	b510      	push	{r4, lr}
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8017036:	4a12      	ldr	r2, [pc, #72]	; (8017080 <vStartHighResolutionTimer+0x4c>)
 8017038:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801703a:	f043 0301 	orr.w	r3, r3, #1
 801703e:	6413      	str	r3, [r2, #64]	; 0x40

	tim2_handle.Instance = TIM2;     /* Register base address             */
 8017040:	4c10      	ldr	r4, [pc, #64]	; (8017084 <vStartHighResolutionTimer+0x50>)
 8017042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017046:	6023      	str	r3, [r4, #0]

	tim2_handle.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8017048:	2353      	movs	r3, #83	; 0x53
 801704a:	6063      	str	r3, [r4, #4]
	tim2_handle.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 801704c:	2200      	movs	r2, #0
 801704e:	60a2      	str	r2, [r4, #8]
	tim2_handle.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8017050:	4b0d      	ldr	r3, [pc, #52]	; (8017088 <vStartHighResolutionTimer+0x54>)
 8017052:	60e3      	str	r3, [r4, #12]
	tim2_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8017054:	6122      	str	r2, [r4, #16]
	tim2_handle.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8017056:	6162      	str	r2, [r4, #20]
	tim2_handle.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017058:	2301      	movs	r3, #1
 801705a:	7623      	strb	r3, [r4, #24]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 801705c:	2106      	movs	r1, #6
 801705e:	201c      	movs	r0, #28
 8017060:	f7e9 fb64 	bl	800072c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8017064:	201c      	movs	r0, #28
 8017066:	f7e9 fb91 	bl	800078c <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &tim2_handle );
 801706a:	4620      	mov	r0, r4
 801706c:	f7ec fbe2 	bl	8003834 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &tim2_handle );
 8017070:	4620      	mov	r0, r4
 8017072:	f7ec fb68 	bl	8003746 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = tim2_handle.Instance->SR;
 8017076:	6823      	ldr	r3, [r4, #0]
 8017078:	691a      	ldr	r2, [r3, #16]
 801707a:	4b04      	ldr	r3, [pc, #16]	; (801708c <vStartHighResolutionTimer+0x58>)
 801707c:	601a      	str	r2, [r3, #0]
 801707e:	bd10      	pop	{r4, pc}
 8017080:	40023800 	.word	0x40023800
 8017084:	20004e80 	.word	0x20004e80
 8017088:	0098967f 	.word	0x0098967f
 801708c:	20004e7c 	.word	0x20004e7c

08017090 <ullGetHighResolutionTime>:
}

uint64_t ullGetHighResolutionTime()
{
 8017090:	b538      	push	{r3, r4, r5, lr}
uint64_t ullReturn;
	if( tim2_handle.Instance == NULL )
 8017092:	4b12      	ldr	r3, [pc, #72]	; (80170dc <ullGetHighResolutionTime+0x4c>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	b153      	cbz	r3, 80170ae <ullGetHighResolutionTime+0x1e>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = tim2_handle.Instance->CNT;
 8017098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			ulSlowCount = ulInterruptCount;
			ulCounts[ 1 ] = tim2_handle.Instance->CNT;
 801709a:	6a58      	ldr	r0, [r3, #36]	; 0x24
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 801709c:	4282      	cmp	r2, r0
 801709e:	d8fb      	bhi.n	8017098 <ullGetHighResolutionTime+0x8>
			ulSlowCount = ulInterruptCount;
 80170a0:	4b0f      	ldr	r3, [pc, #60]	; (80170e0 <ullGetHighResolutionTime+0x50>)
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	2100      	movs	r1, #0
 80170a6:	4b0f      	ldr	r3, [pc, #60]	; (80170e4 <ullGetHighResolutionTime+0x54>)
 80170a8:	fbe3 0102 	umlal	r0, r1, r3, r2
	}

	return ullReturn;
}
 80170ac:	bd38      	pop	{r3, r4, r5, pc}
		ullReturn = 1000ull * xTaskGetTickCount();
 80170ae:	f7fd fa2f 	bl	8014510 <xTaskGetTickCount>
 80170b2:	4604      	mov	r4, r0
 80170b4:	2500      	movs	r5, #0
 80170b6:	0142      	lsls	r2, r0, #5
 80170b8:	0ec3      	lsrs	r3, r0, #27
 80170ba:	1a12      	subs	r2, r2, r0
 80170bc:	eb63 0305 	sbc.w	r3, r3, r5
 80170c0:	009b      	lsls	r3, r3, #2
 80170c2:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80170c6:	0092      	lsls	r2, r2, #2
 80170c8:	1910      	adds	r0, r2, r4
 80170ca:	eb43 0105 	adc.w	r1, r3, r5
 80170ce:	00cb      	lsls	r3, r1, #3
 80170d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80170d4:	00c2      	lsls	r2, r0, #3
 80170d6:	4610      	mov	r0, r2
 80170d8:	4619      	mov	r1, r3
 80170da:	bd38      	pop	{r3, r4, r5, pc}
 80170dc:	20004e80 	.word	0x20004e80
 80170e0:	2000295c 	.word	0x2000295c
 80170e4:	00989680 	.word	0x00989680

080170e8 <main>:

/*-----------------------------------------------------------*/

/* See http://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_TCP/TCP-IP_FAT_Examples_ST_STM32F407.html */
int main( void )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b098      	sub	sp, #96	; 0x60
static void prvMiscInitialisation( void )
{
GPIO_InitTypeDef GPIO_InitStruct;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	__asm volatile( "cpsid i" );
 80170ec:	b672      	cpsid	i
	HAL_Init();
 80170ee:	f7e9 fad5 	bl	800069c <HAL_Init>
	__PWR_CLK_ENABLE();
 80170f2:	4d4e      	ldr	r5, [pc, #312]	; (801722c <main+0x144>)
 80170f4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80170f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170fa:	642b      	str	r3, [r5, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 80170fc:	4a4c      	ldr	r2, [pc, #304]	; (8017230 <main+0x148>)
 80170fe:	6813      	ldr	r3, [r2, #0]
 8017100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017104:	6013      	str	r3, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8017106:	2309      	movs	r3, #9
 8017108:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801710a:	2601      	movs	r6, #1
 801710c:	960d      	str	r6, [sp, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801710e:	9611      	str	r6, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017110:	2702      	movs	r7, #2
 8017112:	9712      	str	r7, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017114:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 8017118:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 25;
 801711c:	2319      	movs	r3, #25
 801711e:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8017120:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8017124:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017126:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8017128:	2307      	movs	r3, #7
 801712a:	9317      	str	r3, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig( &RCC_OscInitStruct );
 801712c:	a80c      	add	r0, sp, #48	; 0x30
 801712e:	f7eb fe8d 	bl	8002e4c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017132:	230d      	movs	r3, #13
 8017134:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017136:	9708      	str	r7, [sp, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017138:	2400      	movs	r4, #0
 801713a:	9409      	str	r4, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801713c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017140:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017146:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8017148:	2105      	movs	r1, #5
 801714a:	a807      	add	r0, sp, #28
 801714c:	f7ec f84a 	bl	80031e4 <HAL_RCC_ClockConfig>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8017150:	9703      	str	r7, [sp, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8017152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017156:	9306      	str	r3, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig( &PeriphClkInitStruct );
 8017158:	a803      	add	r0, sp, #12
 801715a:	f7ec f9f7 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 801715e:	4622      	mov	r2, r4
 8017160:	4641      	mov	r1, r8
 8017162:	4620      	mov	r0, r4
 8017164:	f7ec f956 	bl	8003414 <HAL_RCC_MCOConfig>

	/* Configure clocks. */
	prvConfigureClocks();

	/* GPIO Ports Clock Enable */
	__GPIOE_CLK_ENABLE();
 8017168:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801716a:	f043 0310 	orr.w	r3, r3, #16
 801716e:	632b      	str	r3, [r5, #48]	; 0x30
	__GPIOF_CLK_ENABLE();
 8017170:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017172:	f043 0320 	orr.w	r3, r3, #32
 8017176:	632b      	str	r3, [r5, #48]	; 0x30
	__GPIOH_CLK_ENABLE();
 8017178:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801717a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801717e:	632b      	str	r3, [r5, #48]	; 0x30
	__GPIOB_CLK_ENABLE();
 8017180:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017182:	433b      	orrs	r3, r7
 8017184:	632b      	str	r3, [r5, #48]	; 0x30
	__GPIOC_CLK_ENABLE();
 8017186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017188:	f043 0304 	orr.w	r3, r3, #4
 801718c:	632b      	str	r3, [r5, #48]	; 0x30

	/* Configure GPIO pins : PE2 PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 801718e:	2364      	movs	r3, #100	; 0x64
 8017190:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017192:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017194:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8017196:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF0_TRACE;
 8017198:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801719a:	a90c      	add	r1, sp, #48	; 0x30
 801719c:	4825      	ldr	r0, [pc, #148]	; (8017234 <main+0x14c>)
 801719e:	f7eb fd5b 	bl	8002c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG12 PG8 PG6 (LED). */
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80171a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80171a6:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80171a8:	960d      	str	r6, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80171aa:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80171ac:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80171ae:	a90c      	add	r1, sp, #48	; 0x30
 80171b0:	4821      	ldr	r0, [pc, #132]	; (8017238 <main+0x150>)
 80171b2:	f7eb fd51 	bl	8002c58 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH13 (SD card detect) */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80171b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80171ba:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80171bc:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80171be:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80171c0:	a90c      	add	r1, sp, #48	; 0x30
 80171c2:	481e      	ldr	r0, [pc, #120]	; (801723c <main+0x154>)
 80171c4:	f7eb fd48 	bl	8002c58 <HAL_GPIO_Init>

	/* Heap_5 is used so the maximum heap size can be calculated and initialised
	at run time. */
	pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &HEAP_START ) + 7 ) & ~0x07ul );

	ulHeapSize = ( uint32_t ) ( &HEAP_END - &HEAP_START );
 80171c8:	4b1d      	ldr	r3, [pc, #116]	; (8017240 <main+0x158>)
 80171ca:	4a1e      	ldr	r2, [pc, #120]	; (8017244 <main+0x15c>)
 80171cc:	1ad2      	subs	r2, r2, r3
 80171ce:	9203      	str	r2, [sp, #12]
	ulHeapSize &= ~0x07ul;
 80171d0:	9a03      	ldr	r2, [sp, #12]
 80171d2:	f022 0207 	bic.w	r2, r2, #7
 80171d6:	9203      	str	r2, [sp, #12]
	ulHeapSize -= 1024;
 80171d8:	9a03      	ldr	r2, [sp, #12]
 80171da:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80171de:	9203      	str	r2, [sp, #12]
	pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &HEAP_START ) + 7 ) & ~0x07ul );
 80171e0:	3307      	adds	r3, #7
 80171e2:	f023 0307 	bic.w	r3, r3, #7

	HeapRegion_t xHeapRegions[] =
 80171e6:	9307      	str	r3, [sp, #28]
 80171e8:	9b03      	ldr	r3, [sp, #12]
 80171ea:	9308      	str	r3, [sp, #32]
 80171ec:	9409      	str	r4, [sp, #36]	; 0x24
 80171ee:	940a      	str	r4, [sp, #40]	; 0x28
	{
		{ ( unsigned char *) pucHeapStart, ulHeapSize },
		{ NULL, 0 }
 	};

	vPortDefineHeapRegions( xHeapRegions );
 80171f0:	a807      	add	r0, sp, #28
 80171f2:	f7fc fa45 	bl	8013680 <vPortDefineHeapRegions>
	vStartHighResolutionTimer();
 80171f6:	f7ff ff1d 	bl	8017034 <vStartHighResolutionTimer>
	FreeRTOS_printf( ( "FreeRTOS_IPInit\n" ) );
 80171fa:	4813      	ldr	r0, [pc, #76]	; (8017248 <main+0x160>)
 80171fc:	f7ff fba8 	bl	8016950 <lUDPLoggingPrintf>
	FreeRTOS_IPInit( ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress );
 8017200:	4b12      	ldr	r3, [pc, #72]	; (801724c <main+0x164>)
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	4b12      	ldr	r3, [pc, #72]	; (8017250 <main+0x168>)
 8017206:	4a13      	ldr	r2, [pc, #76]	; (8017254 <main+0x16c>)
 8017208:	4913      	ldr	r1, [pc, #76]	; (8017258 <main+0x170>)
 801720a:	4814      	ldr	r0, [pc, #80]	; (801725c <main+0x174>)
 801720c:	f7f5 f82e 	bl	800c26c <FreeRTOS_IPInit>
		xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &xServerWorkTaskHandle );
 8017210:	4b13      	ldr	r3, [pc, #76]	; (8017260 <main+0x178>)
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	9400      	str	r4, [sp, #0]
 8017216:	4623      	mov	r3, r4
 8017218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801721c:	4911      	ldr	r1, [pc, #68]	; (8017264 <main+0x17c>)
 801721e:	4812      	ldr	r0, [pc, #72]	; (8017268 <main+0x180>)
 8017220:	f7fc ff26 	bl	8014070 <xTaskCreate>
	vTaskStartScheduler();
 8017224:	f7fd f930 	bl	8014488 <vTaskStartScheduler>
 8017228:	e7fe      	b.n	8017228 <main+0x140>
 801722a:	bf00      	nop
 801722c:	40023800 	.word	0x40023800
 8017230:	40007000 	.word	0x40007000
 8017234:	40021000 	.word	0x40021000
 8017238:	40021400 	.word	0x40021400
 801723c:	40021c00 	.word	0x40021c00
 8017240:	20004ec0 	.word	0x20004ec0
 8017244:	20020000 	.word	0x20020000
 8017248:	08026c4c 	.word	0x08026c4c
 801724c:	08026d74 	.word	0x08026d74
 8017250:	08026d68 	.word	0x08026d68
 8017254:	08026d6c 	.word	0x08026d6c
 8017258:	08026d7c 	.word	0x08026d7c
 801725c:	08026d70 	.word	0x08026d70
 8017260:	20002978 	.word	0x20002978
 8017264:	08026c60 	.word	0x08026c60
 8017268:	080172fd 	.word	0x080172fd

0801726c <vApplicationIdleHook>:
{
 801726c:	b508      	push	{r3, lr}
	xTimeNow = xTaskGetTickCount();
 801726e:	f7fd f94f 	bl	8014510 <xTaskGetTickCount>
	if( ( xTimeNow - xLastToggle ) >= xToggleRate )
 8017272:	4b09      	ldr	r3, [pc, #36]	; (8017298 <vApplicationIdleHook+0x2c>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	1ac0      	subs	r0, r0, r3
 8017278:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801727c:	d200      	bcs.n	8017280 <vApplicationIdleHook+0x14>
 801727e:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin( GPIOF, GPIO_PIN_9 );
 8017280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017284:	4805      	ldr	r0, [pc, #20]	; (801729c <vApplicationIdleHook+0x30>)
 8017286:	f7eb fdcf 	bl	8002e28 <HAL_GPIO_TogglePin>
		xLastToggle += xToggleRate;
 801728a:	4a03      	ldr	r2, [pc, #12]	; (8017298 <vApplicationIdleHook+0x2c>)
 801728c:	6813      	ldr	r3, [r2, #0]
 801728e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8017292:	6013      	str	r3, [r2, #0]
}
 8017294:	e7f3      	b.n	801727e <vApplicationIdleHook+0x12>
 8017296:	bf00      	nop
 8017298:	20002974 	.word	0x20002974
 801729c:	40021400 	.word	0x40021400

080172a0 <vAssertCalled>:
{
 80172a0:	b570      	push	{r4, r5, r6, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	4606      	mov	r6, r0
 80172a6:	460d      	mov	r5, r1
volatile uint32_t ulBlockVariable = 0UL;
 80172a8:	2400      	movs	r4, #0
 80172aa:	9403      	str	r4, [sp, #12]
	ulAssertedLine = ulLine;
 80172ac:	9101      	str	r1, [sp, #4]
 80172ae:	4621      	mov	r1, r4
 80172b0:	4620      	mov	r0, r4
 80172b2:	f7fd fc85 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
	iAssertedErrno = stdioGET_ERRNO();
 80172b6:	9002      	str	r0, [sp, #8]
 */
static portINLINE FF_Error_t stdioGET_FF_ERROR( void )
{
void *pvResult;

	pvResult = pvTaskGetThreadLocalStoragePointer( NULL, stdioFF_ERROR_THREAD_LOCAL_OFFSET );
 80172b8:	2102      	movs	r1, #2
 80172ba:	4620      	mov	r0, r4
 80172bc:	f7fd fc80 	bl	8014bc0 <pvTaskGetThreadLocalStoragePointer>
	xAssertedFF_Error = stdioGET_FF_ERROR( );
 80172c0:	9000      	str	r0, [sp, #0]
	( void ) ulAssertedLine;
 80172c2:	9b01      	ldr	r3, [sp, #4]
	( void ) iAssertedErrno;
 80172c4:	9b02      	ldr	r3, [sp, #8]
	( void ) xAssertedFF_Error;
 80172c6:	9b00      	ldr	r3, [sp, #0]
	FreeRTOS_printf( ( "vAssertCalled( %s, %ld\n", pcFile, ulLine ) );
 80172c8:	462a      	mov	r2, r5
 80172ca:	4631      	mov	r1, r6
 80172cc:	480a      	ldr	r0, [pc, #40]	; (80172f8 <vAssertCalled+0x58>)
 80172ce:	f7ff fb3f 	bl	8016950 <lUDPLoggingPrintf>
	__asm volatile
 80172d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d6:	f383 8811 	msr	BASEPRI, r3
 80172da:	f3bf 8f6f 	isb	sy
 80172de:	f3bf 8f4f 	dsb	sy
		while( ulBlockVariable == 0UL )
 80172e2:	9b03      	ldr	r3, [sp, #12]
 80172e4:	b91b      	cbnz	r3, 80172ee <vAssertCalled+0x4e>
			__asm volatile( "NOP" );
 80172e6:	bf00      	nop
		while( ulBlockVariable == 0UL )
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d0fb      	beq.n	80172e6 <vAssertCalled+0x46>
	__asm volatile
 80172ee:	2300      	movs	r3, #0
 80172f0:	f383 8811 	msr	BASEPRI, r3
}
 80172f4:	b004      	add	sp, #16
 80172f6:	bd70      	pop	{r4, r5, r6, pc}
 80172f8:	08026e00 	.word	0x08026e00

080172fc <prvServerWorkTask>:
	{
 80172fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		while( ( pxDisk = FF_SDDiskInit( mainSD_CARD_DISK_NAME ) ) == NULL )
 80172fe:	4e3c      	ldr	r6, [pc, #240]	; (80173f0 <prvServerWorkTask+0xf4>)
 8017300:	4d3c      	ldr	r5, [pc, #240]	; (80173f4 <prvServerWorkTask+0xf8>)
			vTaskDelay( xSDCardInsertDelay );
 8017302:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		while( ( pxDisk = FF_SDDiskInit( mainSD_CARD_DISK_NAME ) ) == NULL )
 8017306:	e002      	b.n	801730e <prvServerWorkTask+0x12>
			vTaskDelay( xSDCardInsertDelay );
 8017308:	4620      	mov	r0, r4
 801730a:	f7fd fa53 	bl	80147b4 <vTaskDelay>
		while( ( pxDisk = FF_SDDiskInit( mainSD_CARD_DISK_NAME ) ) == NULL )
 801730e:	4630      	mov	r0, r6
 8017310:	f7f3 f8fa 	bl	800a508 <FF_SDDiskInit>
 8017314:	6028      	str	r0, [r5, #0]
 8017316:	2800      	cmp	r0, #0
 8017318:	d0f6      	beq.n	8017308 <prvServerWorkTask+0xc>
		FreeRTOS_printf( ( "SD card detected, creating example files." ) );
 801731a:	4837      	ldr	r0, [pc, #220]	; (80173f8 <prvServerWorkTask+0xfc>)
 801731c:	f7ff fb18 	bl	8016950 <lUDPLoggingPrintf>
		FreeRTOS_printf( ( "Mount SD-card\n" ) );
 8017320:	4836      	ldr	r0, [pc, #216]	; (80173fc <prvServerWorkTask+0x100>)
 8017322:	f7ff fb15 	bl	8016950 <lUDPLoggingPrintf>
		if( pxDisk != NULL )
 8017326:	4b33      	ldr	r3, [pc, #204]	; (80173f4 <prvServerWorkTask+0xf8>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	b14b      	cbz	r3, 8017340 <prvServerWorkTask+0x44>
			ff_deltree( mainSD_CARD_TESTING_DIRECTORY );
 801732c:	4c34      	ldr	r4, [pc, #208]	; (8017400 <prvServerWorkTask+0x104>)
 801732e:	4620      	mov	r0, r4
 8017330:	f7f2 fa72 	bl	8009818 <ff_deltree>
			ff_mkdir( mainSD_CARD_TESTING_DIRECTORY );
 8017334:	4620      	mov	r0, r4
 8017336:	f7f1 fe7a 	bl	800902e <ff_mkdir>
			vCreateAndVerifyExampleFiles( mainSD_CARD_TESTING_DIRECTORY );
 801733a:	4620      	mov	r0, r4
 801733c:	f7fe fdae 	bl	8015e9c <vCreateAndVerifyExampleFiles>
		FreeRTOS_printf( ( "Example files created." ) );
 8017340:	4830      	ldr	r0, [pc, #192]	; (8017404 <prvServerWorkTask+0x108>)
 8017342:	f7ff fb05 	bl	8016950 <lUDPLoggingPrintf>
		vRegisterFileSystemCLICommands();
 8017346:	f7fe fa45 	bl	80157d4 <vRegisterFileSystemCLICommands>
		vTaskPrioritySet( NULL, mainTCP_SERVER_TASK_PRIORITY );
 801734a:	2103      	movs	r1, #3
 801734c:	2000      	movs	r0, #0
 801734e:	f7fd f829 	bl	80143a4 <vTaskPrioritySet>
		ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8017352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017356:	2001      	movs	r0, #1
 8017358:	f7fd fec4 	bl	80150e4 <ulTaskNotifyTake>
		pxTCPServer = FreeRTOS_CreateTCPServer( xServerConfiguration, sizeof( xServerConfiguration ) / sizeof( xServerConfiguration[ 0 ] ) );
 801735c:	2102      	movs	r1, #2
 801735e:	482a      	ldr	r0, [pc, #168]	; (8017408 <prvServerWorkTask+0x10c>)
 8017360:	f7f9 fc82 	bl	8010c68 <FreeRTOS_CreateTCPServer>
		configASSERT( pxTCPServer );
 8017364:	4607      	mov	r7, r0
 8017366:	b118      	cbz	r0, 8017370 <prvServerWorkTask+0x74>
		xIsPresent = FF_SDDiskDetect( pxDisk );
 8017368:	4c22      	ldr	r4, [pc, #136]	; (80173f4 <prvServerWorkTask+0xf8>)
 801736a:	4e28      	ldr	r6, [pc, #160]	; (801740c <prvServerWorkTask+0x110>)
		if( xWasPresent != xIsPresent )
 801736c:	4d28      	ldr	r5, [pc, #160]	; (8017410 <prvServerWorkTask+0x114>)
 801736e:	e01d      	b.n	80173ac <prvServerWorkTask+0xb0>
		configASSERT( pxTCPServer );
 8017370:	f240 11a7 	movw	r1, #423	; 0x1a7
 8017374:	4827      	ldr	r0, [pc, #156]	; (8017414 <prvServerWorkTask+0x118>)
 8017376:	f7ff ff93 	bl	80172a0 <vAssertCalled>
 801737a:	e7f5      	b.n	8017368 <prvServerWorkTask+0x6c>
				FreeRTOS_printf( ( "SD-card now present (%ld -> %ld)\n", xWasPresent, xIsPresent ) );
 801737c:	4602      	mov	r2, r0
 801737e:	4826      	ldr	r0, [pc, #152]	; (8017418 <prvServerWorkTask+0x11c>)
 8017380:	f7ff fae6 	bl	8016950 <lUDPLoggingPrintf>
				configASSERT( pxDisk );
 8017384:	6823      	ldr	r3, [r4, #0]
 8017386:	b34b      	cbz	r3, 80173dc <prvServerWorkTask+0xe0>
				xResult = FF_SDDiskMount( pxDisk );
 8017388:	6820      	ldr	r0, [r4, #0]
 801738a:	f7f2 fff7 	bl	800a37c <FF_SDDiskMount>
				if( xResult > 0 )
 801738e:	2800      	cmp	r0, #0
 8017390:	dd2a      	ble.n	80173e8 <prvServerWorkTask+0xec>
					FF_PRINTF( "FF_SDDiskMount: SD-card OK\n" );
 8017392:	4822      	ldr	r0, [pc, #136]	; (801741c <prvServerWorkTask+0x120>)
 8017394:	f7ff fadc 	bl	8016950 <lUDPLoggingPrintf>
					FF_SDDiskShowPartition( pxDisk );
 8017398:	6820      	ldr	r0, [r4, #0]
 801739a:	f7f3 f833 	bl	800a404 <FF_SDDiskShowPartition>
			xWasPresent = xIsPresent;
 801739e:	6833      	ldr	r3, [r6, #0]
 80173a0:	602b      	str	r3, [r5, #0]
			FreeRTOS_TCPServerWork( pxTCPServer, xInitialBlockTime );
 80173a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80173a6:	4638      	mov	r0, r7
 80173a8:	f7f9 fd18 	bl	8010ddc <FreeRTOS_TCPServerWork>
		xIsPresent = FF_SDDiskDetect( pxDisk );
 80173ac:	6820      	ldr	r0, [r4, #0]
 80173ae:	f7f3 f93d 	bl	800a62c <FF_SDDiskDetect>
 80173b2:	6030      	str	r0, [r6, #0]
		if( xWasPresent != xIsPresent )
 80173b4:	6829      	ldr	r1, [r5, #0]
 80173b6:	4288      	cmp	r0, r1
 80173b8:	d0f3      	beq.n	80173a2 <prvServerWorkTask+0xa6>
			if( xIsPresent == pdFALSE )
 80173ba:	2800      	cmp	r0, #0
 80173bc:	d1de      	bne.n	801737c <prvServerWorkTask+0x80>
				FreeRTOS_printf( ( "SD-card now removed (%ld -> %ld)\n", xWasPresent, xIsPresent ) );
 80173be:	2200      	movs	r2, #0
 80173c0:	4817      	ldr	r0, [pc, #92]	; (8017420 <prvServerWorkTask+0x124>)
 80173c2:	f7ff fac5 	bl	8016950 <lUDPLoggingPrintf>
				pxIOManager = sddisk_ioman( pxDisk );
 80173c6:	6820      	ldr	r0, [r4, #0]
 80173c8:	f7f2 fff6 	bl	800a3b8 <sddisk_ioman>
				if( pxIOManager != NULL )
 80173cc:	2800      	cmp	r0, #0
 80173ce:	d0e6      	beq.n	801739e <prvServerWorkTask+0xa2>
					FF_Invalidate( pxIOManager );
 80173d0:	f7ef fbc4 	bl	8006b5c <FF_Invalidate>
					FF_SDDiskUnmount( pxDisk );
 80173d4:	6820      	ldr	r0, [r4, #0]
 80173d6:	f7f2 ffb1 	bl	800a33c <FF_SDDiskUnmount>
 80173da:	e7e0      	b.n	801739e <prvServerWorkTask+0xa2>
				configASSERT( pxDisk );
 80173dc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80173e0:	480c      	ldr	r0, [pc, #48]	; (8017414 <prvServerWorkTask+0x118>)
 80173e2:	f7ff ff5d 	bl	80172a0 <vAssertCalled>
 80173e6:	e7cf      	b.n	8017388 <prvServerWorkTask+0x8c>
					FF_PRINTF( "FF_SDDiskMount: SD-card FAILED\n" );
 80173e8:	480e      	ldr	r0, [pc, #56]	; (8017424 <prvServerWorkTask+0x128>)
 80173ea:	f7ff fab1 	bl	8016950 <lUDPLoggingPrintf>
 80173ee:	e7d6      	b.n	801739e <prvServerWorkTask+0xa2>
 80173f0:	080193b0 	.word	0x080193b0
 80173f4:	20002960 	.word	0x20002960
 80173f8:	08026c74 	.word	0x08026c74
 80173fc:	08026ca0 	.word	0x08026ca0
 8017400:	08026cb0 	.word	0x08026cb0
 8017404:	08026cbc 	.word	0x08026cbc
 8017408:	08026e20 	.word	0x08026e20
 801740c:	20002970 	.word	0x20002970
 8017410:	20000178 	.word	0x20000178
 8017414:	08026cd4 	.word	0x08026cd4
 8017418:	08026d08 	.word	0x08026d08
 801741c:	08026d2c 	.word	0x08026d2c
 8017420:	08026ce4 	.word	0x08026ce4
 8017424:	08026d48 	.word	0x08026d48

08017428 <vApplicationCardDetectChangeHookFromISR>:
{
 8017428:	b508      	push	{r3, lr}
		if( pxTCPServer != NULL )
 801742a:	4b04      	ldr	r3, [pc, #16]	; (801743c <vApplicationCardDetectChangeHookFromISR+0x14>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	b11b      	cbz	r3, 8017438 <vApplicationCardDetectChangeHookFromISR+0x10>
 8017430:	4601      	mov	r1, r0
			FreeRTOS_TCPServerSignalFromISR( pxTCPServer, pxHigherPriorityTaskWoken );
 8017432:	4618      	mov	r0, r3
 8017434:	f7f9 fd6c 	bl	8010f10 <FreeRTOS_TCPServerSignalFromISR>
 8017438:	bd08      	pop	{r3, pc}
 801743a:	bf00      	nop
 801743c:	20002964 	.word	0x20002964

08017440 <vApplicationIPNetworkEventHook>:
{
 8017440:	b510      	push	{r4, lr}
 8017442:	b08a      	sub	sp, #40	; 0x28
 8017444:	4604      	mov	r4, r0
	FreeRTOS_printf( ( "vApplicationIPNetworkEventHook: event %ld\n", eNetworkEvent ) );
 8017446:	4601      	mov	r1, r0
 8017448:	483b      	ldr	r0, [pc, #236]	; (8017538 <vApplicationIPNetworkEventHook+0xf8>)
 801744a:	f7ff fa81 	bl	8016950 <lUDPLoggingPrintf>
	if( eNetworkEvent == eNetworkUp )
 801744e:	2c00      	cmp	r4, #0
 8017450:	d14e      	bne.n	80174f0 <vApplicationIPNetworkEventHook+0xb0>
		if( xTasksAlreadyCreated == pdFALSE )
 8017452:	4b3a      	ldr	r3, [pc, #232]	; (801753c <vApplicationIPNetworkEventHook+0xfc>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d04c      	beq.n	80174f4 <vApplicationIPNetworkEventHook+0xb4>
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 801745a:	ab06      	add	r3, sp, #24
 801745c:	aa07      	add	r2, sp, #28
 801745e:	a908      	add	r1, sp, #32
 8017460:	a809      	add	r0, sp, #36	; 0x24
 8017462:	f7f4 ffb9 	bl	800c3d8 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8017466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017468:	4c35      	ldr	r4, [pc, #212]	; (8017540 <vApplicationIPNetworkEventHook+0x100>)
 801746a:	0e13      	lsrs	r3, r2, #24
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8017478:	b2d2      	uxtb	r2, r2
 801747a:	4621      	mov	r1, r4
 801747c:	a802      	add	r0, sp, #8
 801747e:	f7ff fc52 	bl	8016d26 <sprintf>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8017482:	a902      	add	r1, sp, #8
 8017484:	482f      	ldr	r0, [pc, #188]	; (8017544 <vApplicationIPNetworkEventHook+0x104>)
 8017486:	f7ff fa63 	bl	8016950 <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 801748a:	9a08      	ldr	r2, [sp, #32]
 801748c:	0e13      	lsrs	r3, r2, #24
 801748e:	9301      	str	r3, [sp, #4]
 8017490:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8017494:	9300      	str	r3, [sp, #0]
 8017496:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801749a:	b2d2      	uxtb	r2, r2
 801749c:	4621      	mov	r1, r4
 801749e:	a802      	add	r0, sp, #8
 80174a0:	f7ff fc41 	bl	8016d26 <sprintf>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 80174a4:	a902      	add	r1, sp, #8
 80174a6:	4828      	ldr	r0, [pc, #160]	; (8017548 <vApplicationIPNetworkEventHook+0x108>)
 80174a8:	f7ff fa52 	bl	8016950 <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 80174ac:	9a07      	ldr	r2, [sp, #28]
 80174ae:	0e13      	lsrs	r3, r2, #24
 80174b0:	9301      	str	r3, [sp, #4]
 80174b2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80174bc:	b2d2      	uxtb	r2, r2
 80174be:	4621      	mov	r1, r4
 80174c0:	a802      	add	r0, sp, #8
 80174c2:	f7ff fc30 	bl	8016d26 <sprintf>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 80174c6:	a902      	add	r1, sp, #8
 80174c8:	4820      	ldr	r0, [pc, #128]	; (801754c <vApplicationIPNetworkEventHook+0x10c>)
 80174ca:	f7ff fa41 	bl	8016950 <lUDPLoggingPrintf>
		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 80174ce:	9a06      	ldr	r2, [sp, #24]
 80174d0:	0e13      	lsrs	r3, r2, #24
 80174d2:	9301      	str	r3, [sp, #4]
 80174d4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80174d8:	9300      	str	r3, [sp, #0]
 80174da:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80174de:	b2d2      	uxtb	r2, r2
 80174e0:	4621      	mov	r1, r4
 80174e2:	a802      	add	r0, sp, #8
 80174e4:	f7ff fc1f 	bl	8016d26 <sprintf>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 80174e8:	a902      	add	r1, sp, #8
 80174ea:	4819      	ldr	r0, [pc, #100]	; (8017550 <vApplicationIPNetworkEventHook+0x110>)
 80174ec:	f7ff fa30 	bl	8016950 <lUDPLoggingPrintf>
}
 80174f0:	b00a      	add	sp, #40	; 0x28
 80174f2:	bd10      	pop	{r4, pc}
				vUDPLoggingTaskCreate();
 80174f4:	f7ff fad4 	bl	8016aa0 <vUDPLoggingTaskCreate>
				xTaskNotifyGive( xServerWorkTaskHandle );
 80174f8:	2300      	movs	r3, #0
 80174fa:	2202      	movs	r2, #2
 80174fc:	4619      	mov	r1, r3
 80174fe:	4815      	ldr	r0, [pc, #84]	; (8017554 <vApplicationIPNetworkEventHook+0x114>)
 8017500:	6800      	ldr	r0, [r0, #0]
 8017502:	f7fd fe2b 	bl	801515c <xTaskGenericNotify>
				vStartTCPEchoClientTasks_SingleTasks( mainECHO_CLIENT_TASK_STACK_SIZE, mainECHO_CLIENT_TASK_PRIORITY );
 8017506:	2101      	movs	r1, #1
 8017508:	f44f 7000 	mov.w	r0, #512	; 0x200
 801750c:	f7ff f906 	bl	801671c <vStartTCPEchoClientTasks_SingleTasks>
				vStartSimpleTCPServerTasks( mainECHO_SERVER_STACK_SIZE, mainECHO_SERVER_TASK_PRIORITY );
 8017510:	2102      	movs	r1, #2
 8017512:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017516:	f7fe fff5 	bl	8016504 <vStartSimpleTCPServerTasks>
				vRegisterSampleCLICommands();
 801751a:	f7fe fa8f 	bl	8015a3c <vRegisterSampleCLICommands>
				vRegisterTCPCLICommands();
 801751e:	f7fe fbd1 	bl	8015cc4 <vRegisterTCPCLICommands>
				vStartUDPCommandInterpreterTask( mainUDP_CLI_TASK_STACK_SIZE, mainUDP_CLI_PORT_NUMBER, mainUDP_CLI_TASK_PRIORITY );
 8017522:	2201      	movs	r2, #1
 8017524:	f241 3189 	movw	r1, #5001	; 0x1389
 8017528:	f44f 7020 	mov.w	r0, #640	; 0x280
 801752c:	f7fe fca4 	bl	8015e78 <vStartUDPCommandInterpreterTask>
			xTasksAlreadyCreated = pdTRUE;
 8017530:	2201      	movs	r2, #1
 8017532:	4b02      	ldr	r3, [pc, #8]	; (801753c <vApplicationIPNetworkEventHook+0xfc>)
 8017534:	601a      	str	r2, [r3, #0]
 8017536:	e790      	b.n	801745a <vApplicationIPNetworkEventHook+0x1a>
 8017538:	08026d80 	.word	0x08026d80
 801753c:	2000297c 	.word	0x2000297c
 8017540:	0801c2ec 	.word	0x0801c2ec
 8017544:	08026dac 	.word	0x08026dac
 8017548:	08026dbc 	.word	0x08026dbc
 801754c:	08026dd0 	.word	0x08026dd0
 8017550:	08026de8 	.word	0x08026de8
 8017554:	20002978 	.word	0x20002978

08017558 <vApplicationMallocFailedHook>:
{
 8017558:	b082      	sub	sp, #8
volatile uint32_t ulMallocFailures = 0;
 801755a:	2300      	movs	r3, #0
 801755c:	9301      	str	r3, [sp, #4]
	ulMallocFailures++;
 801755e:	9b01      	ldr	r3, [sp, #4]
 8017560:	3301      	adds	r3, #1
 8017562:	9301      	str	r3, [sp, #4]
}
 8017564:	b002      	add	sp, #8
 8017566:	4770      	bx	lr

08017568 <vApplicationStackOverflowHook>:
	__asm volatile
 8017568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801756c:	f383 8811 	msr	BASEPRI, r3
 8017570:	f3bf 8f6f 	isb	sy
 8017574:	f3bf 8f4f 	dsb	sy
 8017578:	e7fe      	b.n	8017578 <vApplicationStackOverflowHook+0x10>
	...

0801757c <uxRand>:
{
 801757c:	b500      	push	{lr}
 801757e:	b085      	sub	sp, #20
	if( xInitialised == pdFALSE )
 8017580:	4b10      	ldr	r3, [pc, #64]	; (80175c4 <uxRand+0x48>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	b15b      	cbz	r3, 801759e <uxRand+0x22>
	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 8017586:	4b10      	ldr	r3, [pc, #64]	; (80175c8 <uxRand+0x4c>)
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	4810      	ldr	r0, [pc, #64]	; (80175cc <uxRand+0x50>)
 801758c:	fb00 f002 	mul.w	r0, r0, r2
 8017590:	3001      	adds	r0, #1
 8017592:	6018      	str	r0, [r3, #0]
}
 8017594:	f3c0 400e 	ubfx	r0, r0, #16, #15
 8017598:	b005      	add	sp, #20
 801759a:	f85d fb04 	ldr.w	pc, [sp], #4
		if( xTaskGetSchedulerState() !=  taskSCHEDULER_NOT_STARTED )
 801759e:	f7fd fbef 	bl	8014d80 <xTaskGetSchedulerState>
 80175a2:	2801      	cmp	r0, #1
 80175a4:	d0ef      	beq.n	8017586 <uxRand+0xa>
			HAL_RNG_Init( &xRND );
 80175a6:	a801      	add	r0, sp, #4
 80175a8:	f7ec f881 	bl	80036ae <HAL_RNG_Init>
			HAL_RNG_GenerateRandomNumber( &xRND, &ulSeed );
 80175ac:	4669      	mov	r1, sp
 80175ae:	a801      	add	r0, sp, #4
 80175b0:	f7ec f89a 	bl	80036e8 <HAL_RNG_GenerateRandomNumber>
	ulNextRand = ulSeed;
 80175b4:	9a00      	ldr	r2, [sp, #0]
 80175b6:	4b04      	ldr	r3, [pc, #16]	; (80175c8 <uxRand+0x4c>)
 80175b8:	601a      	str	r2, [r3, #0]
			xInitialised = pdTRUE;
 80175ba:	2201      	movs	r2, #1
 80175bc:	4b01      	ldr	r3, [pc, #4]	; (80175c4 <uxRand+0x48>)
 80175be:	601a      	str	r2, [r3, #0]
 80175c0:	e7e1      	b.n	8017586 <uxRand+0xa>
 80175c2:	bf00      	nop
 80175c4:	2000296c 	.word	0x2000296c
 80175c8:	20002968 	.word	0x20002968
 80175cc:	015a4e35 	.word	0x015a4e35

080175d0 <vApplicationPingReplyHook>:
{
 80175d0:	4770      	bx	lr

080175d2 <vOutputChar>:
}
/*-----------------------------------------------------------*/

void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 80175d2:	4770      	bx	lr

080175d4 <xApplicationDNSQueryHook>:
}
/*-----------------------------------------------------------*/


BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 80175d4:	b510      	push	{r4, lr}
 80175d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80175d8:	4906      	ldr	r1, [pc, #24]	; (80175f4 <xApplicationDNSQueryHook+0x20>)
 80175da:	f7ec fbe7 	bl	8003dac <strcasecmp>
 80175de:	b138      	cbz	r0, 80175f0 <xApplicationDNSQueryHook+0x1c>
	{
		xReturn = pdPASS;
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 80175e0:	4905      	ldr	r1, [pc, #20]	; (80175f8 <xApplicationDNSQueryHook+0x24>)
 80175e2:	4620      	mov	r0, r4
 80175e4:	f7ec fbe2 	bl	8003dac <strcasecmp>
 80175e8:	fab0 f080 	clz	r0, r0
 80175ec:	0940      	lsrs	r0, r0, #5
 80175ee:	bd10      	pop	{r4, pc}
 80175f0:	2001      	movs	r0, #1
	{
		xReturn = pdFAIL;
	}

	return xReturn;
}
 80175f2:	bd10      	pop	{r4, pc}
 80175f4:	08026c68 	.word	0x08026c68
 80175f8:	08026e18 	.word	0x08026e18

080175fc <xGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t xGetRunTimeCounterValue( void )
{
 80175fc:	b508      	push	{r3, lr}
static uint64_t ullHiresTime = 0; /* Is always 0? */

	return ( uint32_t ) ( ullGetHighResolutionTime() - ullHiresTime );
 80175fe:	f7ff fd47 	bl	8017090 <ullGetHighResolutionTime>
}
 8017602:	bd08      	pop	{r3, pc}

08017604 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8017604:	b508      	push	{r3, lr}
	/* Call the ST HAL tick function. */
	HAL_IncTick();
 8017606:	f7e9 f863 	bl	80006d0 <HAL_IncTick>
 801760a:	bd08      	pop	{r3, pc}

0801760c <HAL_ETH_MspInit>:
/* This is an ST HAL driver callback function. */
void HAL_ETH_MspInit( ETH_HandleTypeDef* xETHHandle )
{
GPIO_InitTypeDef GPIO_InitStruct;

	if( xETHHandle->Instance == ETH )
 801760c:	6802      	ldr	r2, [r0, #0]
 801760e:	4b3a      	ldr	r3, [pc, #232]	; (80176f8 <HAL_ETH_MspInit+0xec>)
 8017610:	429a      	cmp	r2, r3
 8017612:	d000      	beq.n	8017616 <HAL_ETH_MspInit+0xa>
 8017614:	4770      	bx	lr
{
 8017616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017618:	b087      	sub	sp, #28
	{
		/* Peripheral clock enable */
		__ETH_CLK_ENABLE();			/* defined as __HAL_RCC_ETH_CLK_ENABLE. */
 801761a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801761e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017620:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8017624:	631a      	str	r2, [r3, #48]	; 0x30
 8017626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017628:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801762c:	631a      	str	r2, [r3, #48]	; 0x30
 801762e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017630:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8017634:	631a      	str	r2, [r3, #48]	; 0x30
		__ETHMACRX_CLK_ENABLE();	/* defined as __HAL_RCC_ETHMACRX_CLK_ENABLE. */
 8017636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017638:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801763c:	631a      	str	r2, [r3, #48]	; 0x30
		__ETHMACTX_CLK_ENABLE();	/* defined as __HAL_RCC_ETHMACTX_CLK_ENABLE. */
 801763e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017640:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8017644:	631a      	str	r2, [r3, #48]	; 0x30
		PH6     ------> ETH_RXD2
		PH7     ------> ETH_RXD3

		PI10     ------> ETH_RX_ER
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_5;
 8017646:	f44f 7390 	mov.w	r3, #288	; 0x120
 801764a:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801764c:	2602      	movs	r6, #2
 801764e:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017650:	2400      	movs	r4, #0
 8017652:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8017654:	2503      	movs	r5, #3
 8017656:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017658:	270b      	movs	r7, #11
 801765a:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOB, &GPIO_InitStruct );
 801765c:	a901      	add	r1, sp, #4
 801765e:	4827      	ldr	r0, [pc, #156]	; (80176fc <HAL_ETH_MspInit+0xf0>)
 8017660:	f7eb fafa 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_11;
 8017664:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8017668:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801766a:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801766c:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801766e:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017670:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOG, &GPIO_InitStruct );
 8017672:	a901      	add	r1, sp, #4
 8017674:	4822      	ldr	r0, [pc, #136]	; (8017700 <HAL_ETH_MspInit+0xf4>)
 8017676:	f7eb faef 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801767a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801767e:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017680:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017682:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8017684:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017686:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOI, &GPIO_InitStruct );
 8017688:	a901      	add	r1, sp, #4
 801768a:	481e      	ldr	r0, [pc, #120]	; (8017704 <HAL_ETH_MspInit+0xf8>)
 801768c:	f7eb fae4 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_7;
 8017690:	23cc      	movs	r3, #204	; 0xcc
 8017692:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017694:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017696:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8017698:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801769a:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOH, &GPIO_InitStruct );
 801769c:	a901      	add	r1, sp, #4
 801769e:	481a      	ldr	r0, [pc, #104]	; (8017708 <HAL_ETH_MspInit+0xfc>)
 80176a0:	f7eb fada 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80176a4:	233e      	movs	r3, #62	; 0x3e
 80176a6:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176a8:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176aa:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80176ac:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80176ae:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 80176b0:	a901      	add	r1, sp, #4
 80176b2:	4816      	ldr	r0, [pc, #88]	; (801770c <HAL_ETH_MspInit+0x100>)
 80176b4:	f7eb fad0 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80176b8:	2386      	movs	r3, #134	; 0x86
 80176ba:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176bc:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176be:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80176c0:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80176c2:	9705      	str	r7, [sp, #20]
		HAL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 80176c4:	4f12      	ldr	r7, [pc, #72]	; (8017710 <HAL_ETH_MspInit+0x104>)
 80176c6:	a901      	add	r1, sp, #4
 80176c8:	4638      	mov	r0, r7
 80176ca:	f7eb fac5 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80176ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80176d2:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176d4:	9602      	str	r6, [sp, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176d6:	9403      	str	r4, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80176d8:	9504      	str	r5, [sp, #16]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80176da:	9405      	str	r4, [sp, #20]
		HAL_GPIO_Init( GPIOA, &GPIO_InitStruct );
 80176dc:	a901      	add	r1, sp, #4
 80176de:	4638      	mov	r0, r7
 80176e0:	f7eb faba 	bl	8002c58 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority( ETH_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0 );
 80176e4:	4622      	mov	r2, r4
 80176e6:	2105      	movs	r1, #5
 80176e8:	203d      	movs	r0, #61	; 0x3d
 80176ea:	f7e9 f81f 	bl	800072c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ( ETH_IRQn );
 80176ee:	203d      	movs	r0, #61	; 0x3d
 80176f0:	f7e9 f84c 	bl	800078c <HAL_NVIC_EnableIRQ>
	}
}
 80176f4:	b007      	add	sp, #28
 80176f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f8:	40028000 	.word	0x40028000
 80176fc:	40020400 	.word	0x40020400
 8017700:	40021800 	.word	0x40021800
 8017704:	40022000 	.word	0x40022000
 8017708:	40021c00 	.word	0x40021c00
 801770c:	40020800 	.word	0x40020800
 8017710:	40020000 	.word	0x40020000

08017714 <atol>:
 8017714:	220a      	movs	r2, #10
 8017716:	2100      	movs	r1, #0
 8017718:	f000 bb9a 	b.w	8017e50 <strtol>

0801771c <__libc_init_array>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	4e0d      	ldr	r6, [pc, #52]	; (8017754 <__libc_init_array+0x38>)
 8017720:	4c0d      	ldr	r4, [pc, #52]	; (8017758 <__libc_init_array+0x3c>)
 8017722:	1ba4      	subs	r4, r4, r6
 8017724:	10a4      	asrs	r4, r4, #2
 8017726:	2500      	movs	r5, #0
 8017728:	42a5      	cmp	r5, r4
 801772a:	d109      	bne.n	8017740 <__libc_init_array+0x24>
 801772c:	4e0b      	ldr	r6, [pc, #44]	; (801775c <__libc_init_array+0x40>)
 801772e:	4c0c      	ldr	r4, [pc, #48]	; (8017760 <__libc_init_array+0x44>)
 8017730:	f001 f8d4 	bl	80188dc <_init>
 8017734:	1ba4      	subs	r4, r4, r6
 8017736:	10a4      	asrs	r4, r4, #2
 8017738:	2500      	movs	r5, #0
 801773a:	42a5      	cmp	r5, r4
 801773c:	d105      	bne.n	801774a <__libc_init_array+0x2e>
 801773e:	bd70      	pop	{r4, r5, r6, pc}
 8017740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017744:	4798      	blx	r3
 8017746:	3501      	adds	r5, #1
 8017748:	e7ee      	b.n	8017728 <__libc_init_array+0xc>
 801774a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801774e:	4798      	blx	r3
 8017750:	3501      	adds	r5, #1
 8017752:	e7f2      	b.n	801773a <__libc_init_array+0x1e>
 8017754:	08027668 	.word	0x08027668
 8017758:	08027668 	.word	0x08027668
 801775c:	08027668 	.word	0x08027668
 8017760:	0802766c 	.word	0x0802766c

08017764 <memcmp>:
 8017764:	b510      	push	{r4, lr}
 8017766:	3901      	subs	r1, #1
 8017768:	4402      	add	r2, r0
 801776a:	4290      	cmp	r0, r2
 801776c:	d101      	bne.n	8017772 <memcmp+0xe>
 801776e:	2000      	movs	r0, #0
 8017770:	bd10      	pop	{r4, pc}
 8017772:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017776:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801777a:	42a3      	cmp	r3, r4
 801777c:	d0f5      	beq.n	801776a <memcmp+0x6>
 801777e:	1b18      	subs	r0, r3, r4
 8017780:	bd10      	pop	{r4, pc}

08017782 <memcpy>:
 8017782:	b510      	push	{r4, lr}
 8017784:	1e43      	subs	r3, r0, #1
 8017786:	440a      	add	r2, r1
 8017788:	4291      	cmp	r1, r2
 801778a:	d100      	bne.n	801778e <memcpy+0xc>
 801778c:	bd10      	pop	{r4, pc}
 801778e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017796:	e7f7      	b.n	8017788 <memcpy+0x6>

08017798 <memmove>:
 8017798:	4288      	cmp	r0, r1
 801779a:	b510      	push	{r4, lr}
 801779c:	eb01 0302 	add.w	r3, r1, r2
 80177a0:	d803      	bhi.n	80177aa <memmove+0x12>
 80177a2:	1e42      	subs	r2, r0, #1
 80177a4:	4299      	cmp	r1, r3
 80177a6:	d10c      	bne.n	80177c2 <memmove+0x2a>
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	4298      	cmp	r0, r3
 80177ac:	d2f9      	bcs.n	80177a2 <memmove+0xa>
 80177ae:	1881      	adds	r1, r0, r2
 80177b0:	1ad2      	subs	r2, r2, r3
 80177b2:	42d3      	cmn	r3, r2
 80177b4:	d100      	bne.n	80177b8 <memmove+0x20>
 80177b6:	bd10      	pop	{r4, pc}
 80177b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80177c0:	e7f7      	b.n	80177b2 <memmove+0x1a>
 80177c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80177ca:	e7eb      	b.n	80177a4 <memmove+0xc>

080177cc <memset>:
 80177cc:	4402      	add	r2, r0
 80177ce:	4603      	mov	r3, r0
 80177d0:	4293      	cmp	r3, r2
 80177d2:	d100      	bne.n	80177d6 <memset+0xa>
 80177d4:	4770      	bx	lr
 80177d6:	f803 1b01 	strb.w	r1, [r3], #1
 80177da:	e7f9      	b.n	80177d0 <memset+0x4>

080177dc <siscanf>:
 80177dc:	b40e      	push	{r1, r2, r3}
 80177de:	b530      	push	{r4, r5, lr}
 80177e0:	b09c      	sub	sp, #112	; 0x70
 80177e2:	ac1f      	add	r4, sp, #124	; 0x7c
 80177e4:	f44f 7201 	mov.w	r2, #516	; 0x204
 80177e8:	f854 5b04 	ldr.w	r5, [r4], #4
 80177ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 80177f0:	9002      	str	r0, [sp, #8]
 80177f2:	9006      	str	r0, [sp, #24]
 80177f4:	f7e8 fcf6 	bl	80001e4 <strlen>
 80177f8:	4b0b      	ldr	r3, [pc, #44]	; (8017828 <siscanf+0x4c>)
 80177fa:	9003      	str	r0, [sp, #12]
 80177fc:	9007      	str	r0, [sp, #28]
 80177fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017800:	480a      	ldr	r0, [pc, #40]	; (801782c <siscanf+0x50>)
 8017802:	9401      	str	r4, [sp, #4]
 8017804:	2300      	movs	r3, #0
 8017806:	930f      	str	r3, [sp, #60]	; 0x3c
 8017808:	9314      	str	r3, [sp, #80]	; 0x50
 801780a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801780e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017812:	462a      	mov	r2, r5
 8017814:	4623      	mov	r3, r4
 8017816:	a902      	add	r1, sp, #8
 8017818:	6800      	ldr	r0, [r0, #0]
 801781a:	f000 fc5b 	bl	80180d4 <__ssvfiscanf_r>
 801781e:	b01c      	add	sp, #112	; 0x70
 8017820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017824:	b003      	add	sp, #12
 8017826:	4770      	bx	lr
 8017828:	08017831 	.word	0x08017831
 801782c:	2000017c 	.word	0x2000017c

08017830 <__seofread>:
 8017830:	2000      	movs	r0, #0
 8017832:	4770      	bx	lr

08017834 <strchr>:
 8017834:	b2c9      	uxtb	r1, r1
 8017836:	4603      	mov	r3, r0
 8017838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801783c:	b11a      	cbz	r2, 8017846 <strchr+0x12>
 801783e:	4291      	cmp	r1, r2
 8017840:	d1f9      	bne.n	8017836 <strchr+0x2>
 8017842:	4618      	mov	r0, r3
 8017844:	4770      	bx	lr
 8017846:	2900      	cmp	r1, #0
 8017848:	bf0c      	ite	eq
 801784a:	4618      	moveq	r0, r3
 801784c:	2000      	movne	r0, #0
 801784e:	4770      	bx	lr

08017850 <strcpy>:
 8017850:	4603      	mov	r3, r0
 8017852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017856:	f803 2b01 	strb.w	r2, [r3], #1
 801785a:	2a00      	cmp	r2, #0
 801785c:	d1f9      	bne.n	8017852 <strcpy+0x2>
 801785e:	4770      	bx	lr

08017860 <_strerror_r>:
 8017860:	b510      	push	{r4, lr}
 8017862:	4604      	mov	r4, r0
 8017864:	4608      	mov	r0, r1
 8017866:	4611      	mov	r1, r2
 8017868:	288e      	cmp	r0, #142	; 0x8e
 801786a:	f200 812f 	bhi.w	8017acc <_strerror_r+0x26c>
 801786e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8017872:	0138      	.short	0x0138
 8017874:	0091008f 	.word	0x0091008f
 8017878:	00950093 	.word	0x00950093
 801787c:	00990097 	.word	0x00990097
 8017880:	009d009b 	.word	0x009d009b
 8017884:	00a300a1 	.word	0x00a300a1
 8017888:	00a900a7 	.word	0x00a900a7
 801788c:	00ad00ab 	.word	0x00ad00ab
 8017890:	00af012d 	.word	0x00af012d
 8017894:	00b300b1 	.word	0x00b300b1
 8017898:	00b700b5 	.word	0x00b700b5
 801789c:	00bf00bd 	.word	0x00bf00bd
 80178a0:	00c700c5 	.word	0x00c700c5
 80178a4:	00cb00c9 	.word	0x00cb00c9
 80178a8:	00d100cd 	.word	0x00d100cd
 80178ac:	00d700d5 	.word	0x00d700d5
 80178b0:	00db00d9 	.word	0x00db00d9
 80178b4:	00df00dd 	.word	0x00df00dd
 80178b8:	00e300e1 	.word	0x00e300e1
 80178bc:	012d012d 	.word	0x012d012d
 80178c0:	012d012d 	.word	0x012d012d
 80178c4:	012d012d 	.word	0x012d012d
 80178c8:	012d012d 	.word	0x012d012d
 80178cc:	00eb00e7 	.word	0x00eb00e7
 80178d0:	012d012d 	.word	0x012d012d
 80178d4:	012d012d 	.word	0x012d012d
 80178d8:	012d012d 	.word	0x012d012d
 80178dc:	012d012d 	.word	0x012d012d
 80178e0:	012d012d 	.word	0x012d012d
 80178e4:	012d012d 	.word	0x012d012d
 80178e8:	00ed012d 	.word	0x00ed012d
 80178ec:	00ef0107 	.word	0x00ef0107
 80178f0:	012d00f1 	.word	0x012d00f1
 80178f4:	012d012d 	.word	0x012d012d
 80178f8:	012d00f3 	.word	0x012d00f3
 80178fc:	012d012d 	.word	0x012d012d
 8017900:	012d00f5 	.word	0x012d00f5
 8017904:	00f9012d 	.word	0x00f9012d
 8017908:	012d012d 	.word	0x012d012d
 801790c:	012d00fb 	.word	0x012d00fb
 8017910:	012d012d 	.word	0x012d012d
 8017914:	012d012d 	.word	0x012d012d
 8017918:	012d012d 	.word	0x012d012d
 801791c:	012d012d 	.word	0x012d012d
 8017920:	00fd012d 	.word	0x00fd012d
 8017924:	00ff012d 	.word	0x00ff012d
 8017928:	01030101 	.word	0x01030101
 801792c:	012d012d 	.word	0x012d012d
 8017930:	012d0125 	.word	0x012d0125
 8017934:	012d012d 	.word	0x012d012d
 8017938:	012d012d 	.word	0x012d012d
 801793c:	012d012d 	.word	0x012d012d
 8017940:	0113012d 	.word	0x0113012d
 8017944:	01090105 	.word	0x01090105
 8017948:	010d010b 	.word	0x010d010b
 801794c:	012d010f 	.word	0x012d010f
 8017950:	01150111 	.word	0x01150111
 8017954:	00e90119 	.word	0x00e90119
 8017958:	012b00c1 	.word	0x012b00c1
 801795c:	00cf00b9 	.word	0x00cf00b9
 8017960:	009f00bb 	.word	0x009f00bb
 8017964:	012900a5 	.word	0x012900a5
 8017968:	012d00f7 	.word	0x012d00f7
 801796c:	00c30117 	.word	0x00c30117
 8017970:	011b011d 	.word	0x011b011d
 8017974:	012d012d 	.word	0x012d012d
 8017978:	012d012d 	.word	0x012d012d
 801797c:	00d3012d 	.word	0x00d3012d
 8017980:	012d012d 	.word	0x012d012d
 8017984:	00e5012d 	.word	0x00e5012d
 8017988:	011f0127 	.word	0x011f0127
 801798c:	01230121 	.word	0x01230121
 8017990:	4855      	ldr	r0, [pc, #340]	; (8017ae8 <_strerror_r+0x288>)
 8017992:	bd10      	pop	{r4, pc}
 8017994:	4855      	ldr	r0, [pc, #340]	; (8017aec <_strerror_r+0x28c>)
 8017996:	bd10      	pop	{r4, pc}
 8017998:	4855      	ldr	r0, [pc, #340]	; (8017af0 <_strerror_r+0x290>)
 801799a:	bd10      	pop	{r4, pc}
 801799c:	4855      	ldr	r0, [pc, #340]	; (8017af4 <_strerror_r+0x294>)
 801799e:	bd10      	pop	{r4, pc}
 80179a0:	4855      	ldr	r0, [pc, #340]	; (8017af8 <_strerror_r+0x298>)
 80179a2:	bd10      	pop	{r4, pc}
 80179a4:	4855      	ldr	r0, [pc, #340]	; (8017afc <_strerror_r+0x29c>)
 80179a6:	bd10      	pop	{r4, pc}
 80179a8:	4855      	ldr	r0, [pc, #340]	; (8017b00 <_strerror_r+0x2a0>)
 80179aa:	bd10      	pop	{r4, pc}
 80179ac:	4855      	ldr	r0, [pc, #340]	; (8017b04 <_strerror_r+0x2a4>)
 80179ae:	bd10      	pop	{r4, pc}
 80179b0:	4855      	ldr	r0, [pc, #340]	; (8017b08 <_strerror_r+0x2a8>)
 80179b2:	bd10      	pop	{r4, pc}
 80179b4:	4855      	ldr	r0, [pc, #340]	; (8017b0c <_strerror_r+0x2ac>)
 80179b6:	bd10      	pop	{r4, pc}
 80179b8:	4855      	ldr	r0, [pc, #340]	; (8017b10 <_strerror_r+0x2b0>)
 80179ba:	bd10      	pop	{r4, pc}
 80179bc:	4855      	ldr	r0, [pc, #340]	; (8017b14 <_strerror_r+0x2b4>)
 80179be:	bd10      	pop	{r4, pc}
 80179c0:	4855      	ldr	r0, [pc, #340]	; (8017b18 <_strerror_r+0x2b8>)
 80179c2:	bd10      	pop	{r4, pc}
 80179c4:	4855      	ldr	r0, [pc, #340]	; (8017b1c <_strerror_r+0x2bc>)
 80179c6:	bd10      	pop	{r4, pc}
 80179c8:	4855      	ldr	r0, [pc, #340]	; (8017b20 <_strerror_r+0x2c0>)
 80179ca:	bd10      	pop	{r4, pc}
 80179cc:	4855      	ldr	r0, [pc, #340]	; (8017b24 <_strerror_r+0x2c4>)
 80179ce:	bd10      	pop	{r4, pc}
 80179d0:	4855      	ldr	r0, [pc, #340]	; (8017b28 <_strerror_r+0x2c8>)
 80179d2:	bd10      	pop	{r4, pc}
 80179d4:	4855      	ldr	r0, [pc, #340]	; (8017b2c <_strerror_r+0x2cc>)
 80179d6:	bd10      	pop	{r4, pc}
 80179d8:	4855      	ldr	r0, [pc, #340]	; (8017b30 <_strerror_r+0x2d0>)
 80179da:	bd10      	pop	{r4, pc}
 80179dc:	4855      	ldr	r0, [pc, #340]	; (8017b34 <_strerror_r+0x2d4>)
 80179de:	bd10      	pop	{r4, pc}
 80179e0:	4855      	ldr	r0, [pc, #340]	; (8017b38 <_strerror_r+0x2d8>)
 80179e2:	bd10      	pop	{r4, pc}
 80179e4:	4855      	ldr	r0, [pc, #340]	; (8017b3c <_strerror_r+0x2dc>)
 80179e6:	bd10      	pop	{r4, pc}
 80179e8:	4855      	ldr	r0, [pc, #340]	; (8017b40 <_strerror_r+0x2e0>)
 80179ea:	bd10      	pop	{r4, pc}
 80179ec:	4855      	ldr	r0, [pc, #340]	; (8017b44 <_strerror_r+0x2e4>)
 80179ee:	bd10      	pop	{r4, pc}
 80179f0:	4855      	ldr	r0, [pc, #340]	; (8017b48 <_strerror_r+0x2e8>)
 80179f2:	bd10      	pop	{r4, pc}
 80179f4:	4855      	ldr	r0, [pc, #340]	; (8017b4c <_strerror_r+0x2ec>)
 80179f6:	bd10      	pop	{r4, pc}
 80179f8:	4855      	ldr	r0, [pc, #340]	; (8017b50 <_strerror_r+0x2f0>)
 80179fa:	bd10      	pop	{r4, pc}
 80179fc:	4855      	ldr	r0, [pc, #340]	; (8017b54 <_strerror_r+0x2f4>)
 80179fe:	bd10      	pop	{r4, pc}
 8017a00:	4855      	ldr	r0, [pc, #340]	; (8017b58 <_strerror_r+0x2f8>)
 8017a02:	bd10      	pop	{r4, pc}
 8017a04:	4855      	ldr	r0, [pc, #340]	; (8017b5c <_strerror_r+0x2fc>)
 8017a06:	bd10      	pop	{r4, pc}
 8017a08:	4855      	ldr	r0, [pc, #340]	; (8017b60 <_strerror_r+0x300>)
 8017a0a:	bd10      	pop	{r4, pc}
 8017a0c:	4855      	ldr	r0, [pc, #340]	; (8017b64 <_strerror_r+0x304>)
 8017a0e:	bd10      	pop	{r4, pc}
 8017a10:	4855      	ldr	r0, [pc, #340]	; (8017b68 <_strerror_r+0x308>)
 8017a12:	bd10      	pop	{r4, pc}
 8017a14:	4855      	ldr	r0, [pc, #340]	; (8017b6c <_strerror_r+0x30c>)
 8017a16:	bd10      	pop	{r4, pc}
 8017a18:	4855      	ldr	r0, [pc, #340]	; (8017b70 <_strerror_r+0x310>)
 8017a1a:	bd10      	pop	{r4, pc}
 8017a1c:	4855      	ldr	r0, [pc, #340]	; (8017b74 <_strerror_r+0x314>)
 8017a1e:	bd10      	pop	{r4, pc}
 8017a20:	4855      	ldr	r0, [pc, #340]	; (8017b78 <_strerror_r+0x318>)
 8017a22:	bd10      	pop	{r4, pc}
 8017a24:	4855      	ldr	r0, [pc, #340]	; (8017b7c <_strerror_r+0x31c>)
 8017a26:	bd10      	pop	{r4, pc}
 8017a28:	4855      	ldr	r0, [pc, #340]	; (8017b80 <_strerror_r+0x320>)
 8017a2a:	bd10      	pop	{r4, pc}
 8017a2c:	4855      	ldr	r0, [pc, #340]	; (8017b84 <_strerror_r+0x324>)
 8017a2e:	bd10      	pop	{r4, pc}
 8017a30:	4855      	ldr	r0, [pc, #340]	; (8017b88 <_strerror_r+0x328>)
 8017a32:	bd10      	pop	{r4, pc}
 8017a34:	4855      	ldr	r0, [pc, #340]	; (8017b8c <_strerror_r+0x32c>)
 8017a36:	bd10      	pop	{r4, pc}
 8017a38:	4855      	ldr	r0, [pc, #340]	; (8017b90 <_strerror_r+0x330>)
 8017a3a:	bd10      	pop	{r4, pc}
 8017a3c:	4855      	ldr	r0, [pc, #340]	; (8017b94 <_strerror_r+0x334>)
 8017a3e:	bd10      	pop	{r4, pc}
 8017a40:	4855      	ldr	r0, [pc, #340]	; (8017b98 <_strerror_r+0x338>)
 8017a42:	bd10      	pop	{r4, pc}
 8017a44:	4855      	ldr	r0, [pc, #340]	; (8017b9c <_strerror_r+0x33c>)
 8017a46:	bd10      	pop	{r4, pc}
 8017a48:	4855      	ldr	r0, [pc, #340]	; (8017ba0 <_strerror_r+0x340>)
 8017a4a:	bd10      	pop	{r4, pc}
 8017a4c:	4855      	ldr	r0, [pc, #340]	; (8017ba4 <_strerror_r+0x344>)
 8017a4e:	bd10      	pop	{r4, pc}
 8017a50:	4855      	ldr	r0, [pc, #340]	; (8017ba8 <_strerror_r+0x348>)
 8017a52:	bd10      	pop	{r4, pc}
 8017a54:	4855      	ldr	r0, [pc, #340]	; (8017bac <_strerror_r+0x34c>)
 8017a56:	bd10      	pop	{r4, pc}
 8017a58:	4855      	ldr	r0, [pc, #340]	; (8017bb0 <_strerror_r+0x350>)
 8017a5a:	bd10      	pop	{r4, pc}
 8017a5c:	4855      	ldr	r0, [pc, #340]	; (8017bb4 <_strerror_r+0x354>)
 8017a5e:	bd10      	pop	{r4, pc}
 8017a60:	4855      	ldr	r0, [pc, #340]	; (8017bb8 <_strerror_r+0x358>)
 8017a62:	bd10      	pop	{r4, pc}
 8017a64:	4855      	ldr	r0, [pc, #340]	; (8017bbc <_strerror_r+0x35c>)
 8017a66:	bd10      	pop	{r4, pc}
 8017a68:	4855      	ldr	r0, [pc, #340]	; (8017bc0 <_strerror_r+0x360>)
 8017a6a:	bd10      	pop	{r4, pc}
 8017a6c:	4855      	ldr	r0, [pc, #340]	; (8017bc4 <_strerror_r+0x364>)
 8017a6e:	bd10      	pop	{r4, pc}
 8017a70:	4855      	ldr	r0, [pc, #340]	; (8017bc8 <_strerror_r+0x368>)
 8017a72:	bd10      	pop	{r4, pc}
 8017a74:	4855      	ldr	r0, [pc, #340]	; (8017bcc <_strerror_r+0x36c>)
 8017a76:	bd10      	pop	{r4, pc}
 8017a78:	4855      	ldr	r0, [pc, #340]	; (8017bd0 <_strerror_r+0x370>)
 8017a7a:	bd10      	pop	{r4, pc}
 8017a7c:	4855      	ldr	r0, [pc, #340]	; (8017bd4 <_strerror_r+0x374>)
 8017a7e:	bd10      	pop	{r4, pc}
 8017a80:	4855      	ldr	r0, [pc, #340]	; (8017bd8 <_strerror_r+0x378>)
 8017a82:	bd10      	pop	{r4, pc}
 8017a84:	4855      	ldr	r0, [pc, #340]	; (8017bdc <_strerror_r+0x37c>)
 8017a86:	bd10      	pop	{r4, pc}
 8017a88:	4855      	ldr	r0, [pc, #340]	; (8017be0 <_strerror_r+0x380>)
 8017a8a:	bd10      	pop	{r4, pc}
 8017a8c:	4855      	ldr	r0, [pc, #340]	; (8017be4 <_strerror_r+0x384>)
 8017a8e:	bd10      	pop	{r4, pc}
 8017a90:	4855      	ldr	r0, [pc, #340]	; (8017be8 <_strerror_r+0x388>)
 8017a92:	bd10      	pop	{r4, pc}
 8017a94:	4855      	ldr	r0, [pc, #340]	; (8017bec <_strerror_r+0x38c>)
 8017a96:	bd10      	pop	{r4, pc}
 8017a98:	4855      	ldr	r0, [pc, #340]	; (8017bf0 <_strerror_r+0x390>)
 8017a9a:	bd10      	pop	{r4, pc}
 8017a9c:	4855      	ldr	r0, [pc, #340]	; (8017bf4 <_strerror_r+0x394>)
 8017a9e:	bd10      	pop	{r4, pc}
 8017aa0:	4855      	ldr	r0, [pc, #340]	; (8017bf8 <_strerror_r+0x398>)
 8017aa2:	bd10      	pop	{r4, pc}
 8017aa4:	4855      	ldr	r0, [pc, #340]	; (8017bfc <_strerror_r+0x39c>)
 8017aa6:	bd10      	pop	{r4, pc}
 8017aa8:	4855      	ldr	r0, [pc, #340]	; (8017c00 <_strerror_r+0x3a0>)
 8017aaa:	bd10      	pop	{r4, pc}
 8017aac:	4855      	ldr	r0, [pc, #340]	; (8017c04 <_strerror_r+0x3a4>)
 8017aae:	bd10      	pop	{r4, pc}
 8017ab0:	4855      	ldr	r0, [pc, #340]	; (8017c08 <_strerror_r+0x3a8>)
 8017ab2:	bd10      	pop	{r4, pc}
 8017ab4:	4855      	ldr	r0, [pc, #340]	; (8017c0c <_strerror_r+0x3ac>)
 8017ab6:	bd10      	pop	{r4, pc}
 8017ab8:	4855      	ldr	r0, [pc, #340]	; (8017c10 <_strerror_r+0x3b0>)
 8017aba:	bd10      	pop	{r4, pc}
 8017abc:	4855      	ldr	r0, [pc, #340]	; (8017c14 <_strerror_r+0x3b4>)
 8017abe:	bd10      	pop	{r4, pc}
 8017ac0:	4855      	ldr	r0, [pc, #340]	; (8017c18 <_strerror_r+0x3b8>)
 8017ac2:	bd10      	pop	{r4, pc}
 8017ac4:	4855      	ldr	r0, [pc, #340]	; (8017c1c <_strerror_r+0x3bc>)
 8017ac6:	bd10      	pop	{r4, pc}
 8017ac8:	4855      	ldr	r0, [pc, #340]	; (8017c20 <_strerror_r+0x3c0>)
 8017aca:	bd10      	pop	{r4, pc}
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	bf14      	ite	ne
 8017ad0:	461a      	movne	r2, r3
 8017ad2:	4622      	moveq	r2, r4
 8017ad4:	f000 f9d2 	bl	8017e7c <_user_strerror>
 8017ad8:	4b52      	ldr	r3, [pc, #328]	; (8017c24 <_strerror_r+0x3c4>)
 8017ada:	2800      	cmp	r0, #0
 8017adc:	bf08      	it	eq
 8017ade:	4618      	moveq	r0, r3
 8017ae0:	bd10      	pop	{r4, pc}
 8017ae2:	4851      	ldr	r0, [pc, #324]	; (8017c28 <_strerror_r+0x3c8>)
 8017ae4:	bd10      	pop	{r4, pc}
 8017ae6:	bf00      	nop
 8017ae8:	08026e48 	.word	0x08026e48
 8017aec:	08026e52 	.word	0x08026e52
 8017af0:	08026e6c 	.word	0x08026e6c
 8017af4:	08026e7c 	.word	0x08026e7c
 8017af8:	08026e94 	.word	0x08026e94
 8017afc:	08026e9e 	.word	0x08026e9e
 8017b00:	08026eb8 	.word	0x08026eb8
 8017b04:	08026eca 	.word	0x08026eca
 8017b08:	08026edc 	.word	0x08026edc
 8017b0c:	08026ef5 	.word	0x08026ef5
 8017b10:	08026f05 	.word	0x08026f05
 8017b14:	08026f11 	.word	0x08026f11
 8017b18:	08026f2e 	.word	0x08026f2e
 8017b1c:	08026f40 	.word	0x08026f40
 8017b20:	08026f51 	.word	0x08026f51
 8017b24:	08026f63 	.word	0x08026f63
 8017b28:	08026f6f 	.word	0x08026f6f
 8017b2c:	08026f87 	.word	0x08026f87
 8017b30:	08026f93 	.word	0x08026f93
 8017b34:	08026fa5 	.word	0x08026fa5
 8017b38:	08026fb4 	.word	0x08026fb4
 8017b3c:	08026fc4 	.word	0x08026fc4
 8017b40:	08026fd1 	.word	0x08026fd1
 8017b44:	08026ff0 	.word	0x08026ff0
 8017b48:	08026fff 	.word	0x08026fff
 8017b4c:	08027010 	.word	0x08027010
 8017b50:	08027034 	.word	0x08027034
 8017b54:	08027052 	.word	0x08027052
 8017b58:	08027070 	.word	0x08027070
 8017b5c:	08027090 	.word	0x08027090
 8017b60:	080270a7 	.word	0x080270a7
 8017b64:	080270b6 	.word	0x080270b6
 8017b68:	080270c5 	.word	0x080270c5
 8017b6c:	080270d9 	.word	0x080270d9
 8017b70:	080270f1 	.word	0x080270f1
 8017b74:	080270ff 	.word	0x080270ff
 8017b78:	0802710c 	.word	0x0802710c
 8017b7c:	08027122 	.word	0x08027122
 8017b80:	08027131 	.word	0x08027131
 8017b84:	0802713d 	.word	0x0802713d
 8017b88:	0802716c 	.word	0x0802716c
 8017b8c:	0802717d 	.word	0x0802717d
 8017b90:	08027198 	.word	0x08027198
 8017b94:	080271ab 	.word	0x080271ab
 8017b98:	080271c1 	.word	0x080271c1
 8017b9c:	080271ca 	.word	0x080271ca
 8017ba0:	080271e1 	.word	0x080271e1
 8017ba4:	080271e9 	.word	0x080271e9
 8017ba8:	080271f6 	.word	0x080271f6
 8017bac:	0802720b 	.word	0x0802720b
 8017bb0:	0802721f 	.word	0x0802721f
 8017bb4:	08027237 	.word	0x08027237
 8017bb8:	08027246 	.word	0x08027246
 8017bbc:	08027257 	.word	0x08027257
 8017bc0:	0802726a 	.word	0x0802726a
 8017bc4:	08027276 	.word	0x08027276
 8017bc8:	0802728f 	.word	0x0802728f
 8017bcc:	080272a3 	.word	0x080272a3
 8017bd0:	080272be 	.word	0x080272be
 8017bd4:	080272d6 	.word	0x080272d6
 8017bd8:	080272f0 	.word	0x080272f0
 8017bdc:	080272f8 	.word	0x080272f8
 8017be0:	08027328 	.word	0x08027328
 8017be4:	08027347 	.word	0x08027347
 8017be8:	08027366 	.word	0x08027366
 8017bec:	0802737d 	.word	0x0802737d
 8017bf0:	08027390 	.word	0x08027390
 8017bf4:	080273a9 	.word	0x080273a9
 8017bf8:	080273c0 	.word	0x080273c0
 8017bfc:	080273d6 	.word	0x080273d6
 8017c00:	080273f7 	.word	0x080273f7
 8017c04:	0802740f 	.word	0x0802740f
 8017c08:	0802742b 	.word	0x0802742b
 8017c0c:	0802743e 	.word	0x0802743e
 8017c10:	08027454 	.word	0x08027454
 8017c14:	08027468 	.word	0x08027468
 8017c18:	0802748a 	.word	0x0802748a
 8017c1c:	080274b0 	.word	0x080274b0
 8017c20:	080274c1 	.word	0x080274c1
 8017c24:	080274f8 	.word	0x080274f8
 8017c28:	08026e40 	.word	0x08026e40

08017c2c <strerror>:
 8017c2c:	4601      	mov	r1, r0
 8017c2e:	4803      	ldr	r0, [pc, #12]	; (8017c3c <strerror+0x10>)
 8017c30:	2300      	movs	r3, #0
 8017c32:	461a      	mov	r2, r3
 8017c34:	6800      	ldr	r0, [r0, #0]
 8017c36:	f7ff be13 	b.w	8017860 <_strerror_r>
 8017c3a:	bf00      	nop
 8017c3c:	2000017c 	.word	0x2000017c

08017c40 <strncasecmp>:
 8017c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c44:	4606      	mov	r6, r0
 8017c46:	460f      	mov	r7, r1
 8017c48:	eb00 0802 	add.w	r8, r0, r2
 8017c4c:	4546      	cmp	r6, r8
 8017c4e:	d019      	beq.n	8017c84 <strncasecmp+0x44>
 8017c50:	f816 4b01 	ldrb.w	r4, [r6], #1
 8017c54:	f000 f918 	bl	8017e88 <__locale_ctype_ptr>
 8017c58:	4420      	add	r0, r4
 8017c5a:	f817 5b01 	ldrb.w	r5, [r7], #1
 8017c5e:	7843      	ldrb	r3, [r0, #1]
 8017c60:	f003 0303 	and.w	r3, r3, #3
 8017c64:	2b01      	cmp	r3, #1
 8017c66:	bf08      	it	eq
 8017c68:	3420      	addeq	r4, #32
 8017c6a:	f000 f90d 	bl	8017e88 <__locale_ctype_ptr>
 8017c6e:	4428      	add	r0, r5
 8017c70:	7843      	ldrb	r3, [r0, #1]
 8017c72:	f003 0303 	and.w	r3, r3, #3
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	bf08      	it	eq
 8017c7a:	3520      	addeq	r5, #32
 8017c7c:	1b60      	subs	r0, r4, r5
 8017c7e:	d104      	bne.n	8017c8a <strncasecmp+0x4a>
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	d1e3      	bne.n	8017c4c <strncasecmp+0xc>
 8017c84:	2000      	movs	r0, #0
 8017c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c8e <strncat>:
 8017c8e:	b530      	push	{r4, r5, lr}
 8017c90:	4603      	mov	r3, r0
 8017c92:	781c      	ldrb	r4, [r3, #0]
 8017c94:	1c5d      	adds	r5, r3, #1
 8017c96:	b944      	cbnz	r4, 8017caa <strncat+0x1c>
 8017c98:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8017c9c:	d304      	bcc.n	8017ca8 <strncat+0x1a>
 8017c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ca2:	f803 4b01 	strb.w	r4, [r3], #1
 8017ca6:	b914      	cbnz	r4, 8017cae <strncat+0x20>
 8017ca8:	bd30      	pop	{r4, r5, pc}
 8017caa:	462b      	mov	r3, r5
 8017cac:	e7f1      	b.n	8017c92 <strncat+0x4>
 8017cae:	2a00      	cmp	r2, #0
 8017cb0:	d1f2      	bne.n	8017c98 <strncat+0xa>
 8017cb2:	701a      	strb	r2, [r3, #0]
 8017cb4:	e7f0      	b.n	8017c98 <strncat+0xa>

08017cb6 <strncmp>:
 8017cb6:	b510      	push	{r4, lr}
 8017cb8:	b16a      	cbz	r2, 8017cd6 <strncmp+0x20>
 8017cba:	3901      	subs	r1, #1
 8017cbc:	1884      	adds	r4, r0, r2
 8017cbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017cc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d103      	bne.n	8017cd2 <strncmp+0x1c>
 8017cca:	42a0      	cmp	r0, r4
 8017ccc:	d001      	beq.n	8017cd2 <strncmp+0x1c>
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d1f5      	bne.n	8017cbe <strncmp+0x8>
 8017cd2:	1a98      	subs	r0, r3, r2
 8017cd4:	bd10      	pop	{r4, pc}
 8017cd6:	4610      	mov	r0, r2
 8017cd8:	bd10      	pop	{r4, pc}

08017cda <strncpy>:
 8017cda:	b570      	push	{r4, r5, r6, lr}
 8017cdc:	4604      	mov	r4, r0
 8017cde:	b902      	cbnz	r2, 8017ce2 <strncpy+0x8>
 8017ce0:	bd70      	pop	{r4, r5, r6, pc}
 8017ce2:	4623      	mov	r3, r4
 8017ce4:	f811 5b01 	ldrb.w	r5, [r1], #1
 8017ce8:	f803 5b01 	strb.w	r5, [r3], #1
 8017cec:	1e56      	subs	r6, r2, #1
 8017cee:	b91d      	cbnz	r5, 8017cf8 <strncpy+0x1e>
 8017cf0:	4414      	add	r4, r2
 8017cf2:	42a3      	cmp	r3, r4
 8017cf4:	d103      	bne.n	8017cfe <strncpy+0x24>
 8017cf6:	bd70      	pop	{r4, r5, r6, pc}
 8017cf8:	461c      	mov	r4, r3
 8017cfa:	4632      	mov	r2, r6
 8017cfc:	e7ef      	b.n	8017cde <strncpy+0x4>
 8017cfe:	f803 5b01 	strb.w	r5, [r3], #1
 8017d02:	e7f6      	b.n	8017cf2 <strncpy+0x18>

08017d04 <strrchr>:
 8017d04:	b538      	push	{r3, r4, r5, lr}
 8017d06:	4603      	mov	r3, r0
 8017d08:	460d      	mov	r5, r1
 8017d0a:	b151      	cbz	r1, 8017d22 <strrchr+0x1e>
 8017d0c:	2400      	movs	r4, #0
 8017d0e:	4629      	mov	r1, r5
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7ff fd8f 	bl	8017834 <strchr>
 8017d16:	b908      	cbnz	r0, 8017d1c <strrchr+0x18>
 8017d18:	4620      	mov	r0, r4
 8017d1a:	bd38      	pop	{r3, r4, r5, pc}
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	4604      	mov	r4, r0
 8017d20:	e7f5      	b.n	8017d0e <strrchr+0xa>
 8017d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d26:	f7ff bd85 	b.w	8017834 <strchr>

08017d2a <_strtol_l.isra.0>:
 8017d2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d2e:	4680      	mov	r8, r0
 8017d30:	4689      	mov	r9, r1
 8017d32:	4692      	mov	sl, r2
 8017d34:	461f      	mov	r7, r3
 8017d36:	468b      	mov	fp, r1
 8017d38:	465d      	mov	r5, fp
 8017d3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d40:	f000 f89e 	bl	8017e80 <__locale_ctype_ptr_l>
 8017d44:	4420      	add	r0, r4
 8017d46:	7846      	ldrb	r6, [r0, #1]
 8017d48:	f016 0608 	ands.w	r6, r6, #8
 8017d4c:	d10b      	bne.n	8017d66 <_strtol_l.isra.0+0x3c>
 8017d4e:	2c2d      	cmp	r4, #45	; 0x2d
 8017d50:	d10b      	bne.n	8017d6a <_strtol_l.isra.0+0x40>
 8017d52:	782c      	ldrb	r4, [r5, #0]
 8017d54:	2601      	movs	r6, #1
 8017d56:	f10b 0502 	add.w	r5, fp, #2
 8017d5a:	b167      	cbz	r7, 8017d76 <_strtol_l.isra.0+0x4c>
 8017d5c:	2f10      	cmp	r7, #16
 8017d5e:	d114      	bne.n	8017d8a <_strtol_l.isra.0+0x60>
 8017d60:	2c30      	cmp	r4, #48	; 0x30
 8017d62:	d00a      	beq.n	8017d7a <_strtol_l.isra.0+0x50>
 8017d64:	e011      	b.n	8017d8a <_strtol_l.isra.0+0x60>
 8017d66:	46ab      	mov	fp, r5
 8017d68:	e7e6      	b.n	8017d38 <_strtol_l.isra.0+0xe>
 8017d6a:	2c2b      	cmp	r4, #43	; 0x2b
 8017d6c:	bf04      	itt	eq
 8017d6e:	782c      	ldrbeq	r4, [r5, #0]
 8017d70:	f10b 0502 	addeq.w	r5, fp, #2
 8017d74:	e7f1      	b.n	8017d5a <_strtol_l.isra.0+0x30>
 8017d76:	2c30      	cmp	r4, #48	; 0x30
 8017d78:	d127      	bne.n	8017dca <_strtol_l.isra.0+0xa0>
 8017d7a:	782b      	ldrb	r3, [r5, #0]
 8017d7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017d80:	2b58      	cmp	r3, #88	; 0x58
 8017d82:	d14b      	bne.n	8017e1c <_strtol_l.isra.0+0xf2>
 8017d84:	786c      	ldrb	r4, [r5, #1]
 8017d86:	2710      	movs	r7, #16
 8017d88:	3502      	adds	r5, #2
 8017d8a:	2e00      	cmp	r6, #0
 8017d8c:	bf0c      	ite	eq
 8017d8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017d92:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017d96:	2200      	movs	r2, #0
 8017d98:	fbb1 fef7 	udiv	lr, r1, r7
 8017d9c:	4610      	mov	r0, r2
 8017d9e:	fb07 1c1e 	mls	ip, r7, lr, r1
 8017da2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017da6:	2b09      	cmp	r3, #9
 8017da8:	d811      	bhi.n	8017dce <_strtol_l.isra.0+0xa4>
 8017daa:	461c      	mov	r4, r3
 8017dac:	42a7      	cmp	r7, r4
 8017dae:	dd1d      	ble.n	8017dec <_strtol_l.isra.0+0xc2>
 8017db0:	1c53      	adds	r3, r2, #1
 8017db2:	d007      	beq.n	8017dc4 <_strtol_l.isra.0+0x9a>
 8017db4:	4586      	cmp	lr, r0
 8017db6:	d316      	bcc.n	8017de6 <_strtol_l.isra.0+0xbc>
 8017db8:	d101      	bne.n	8017dbe <_strtol_l.isra.0+0x94>
 8017dba:	45a4      	cmp	ip, r4
 8017dbc:	db13      	blt.n	8017de6 <_strtol_l.isra.0+0xbc>
 8017dbe:	fb00 4007 	mla	r0, r0, r7, r4
 8017dc2:	2201      	movs	r2, #1
 8017dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dc8:	e7eb      	b.n	8017da2 <_strtol_l.isra.0+0x78>
 8017dca:	270a      	movs	r7, #10
 8017dcc:	e7dd      	b.n	8017d8a <_strtol_l.isra.0+0x60>
 8017dce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017dd2:	2b19      	cmp	r3, #25
 8017dd4:	d801      	bhi.n	8017dda <_strtol_l.isra.0+0xb0>
 8017dd6:	3c37      	subs	r4, #55	; 0x37
 8017dd8:	e7e8      	b.n	8017dac <_strtol_l.isra.0+0x82>
 8017dda:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017dde:	2b19      	cmp	r3, #25
 8017de0:	d804      	bhi.n	8017dec <_strtol_l.isra.0+0xc2>
 8017de2:	3c57      	subs	r4, #87	; 0x57
 8017de4:	e7e2      	b.n	8017dac <_strtol_l.isra.0+0x82>
 8017de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017dea:	e7eb      	b.n	8017dc4 <_strtol_l.isra.0+0x9a>
 8017dec:	1c53      	adds	r3, r2, #1
 8017dee:	d108      	bne.n	8017e02 <_strtol_l.isra.0+0xd8>
 8017df0:	2322      	movs	r3, #34	; 0x22
 8017df2:	f8c8 3000 	str.w	r3, [r8]
 8017df6:	4608      	mov	r0, r1
 8017df8:	f1ba 0f00 	cmp.w	sl, #0
 8017dfc:	d107      	bne.n	8017e0e <_strtol_l.isra.0+0xe4>
 8017dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e02:	b106      	cbz	r6, 8017e06 <_strtol_l.isra.0+0xdc>
 8017e04:	4240      	negs	r0, r0
 8017e06:	f1ba 0f00 	cmp.w	sl, #0
 8017e0a:	d00c      	beq.n	8017e26 <_strtol_l.isra.0+0xfc>
 8017e0c:	b122      	cbz	r2, 8017e18 <_strtol_l.isra.0+0xee>
 8017e0e:	3d01      	subs	r5, #1
 8017e10:	f8ca 5000 	str.w	r5, [sl]
 8017e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e18:	464d      	mov	r5, r9
 8017e1a:	e7f9      	b.n	8017e10 <_strtol_l.isra.0+0xe6>
 8017e1c:	2430      	movs	r4, #48	; 0x30
 8017e1e:	2f00      	cmp	r7, #0
 8017e20:	d1b3      	bne.n	8017d8a <_strtol_l.isra.0+0x60>
 8017e22:	2708      	movs	r7, #8
 8017e24:	e7b1      	b.n	8017d8a <_strtol_l.isra.0+0x60>
 8017e26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017e2c <_strtol_r>:
 8017e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e2e:	4c06      	ldr	r4, [pc, #24]	; (8017e48 <_strtol_r+0x1c>)
 8017e30:	4d06      	ldr	r5, [pc, #24]	; (8017e4c <_strtol_r+0x20>)
 8017e32:	6824      	ldr	r4, [r4, #0]
 8017e34:	6a24      	ldr	r4, [r4, #32]
 8017e36:	2c00      	cmp	r4, #0
 8017e38:	bf08      	it	eq
 8017e3a:	462c      	moveq	r4, r5
 8017e3c:	9400      	str	r4, [sp, #0]
 8017e3e:	f7ff ff74 	bl	8017d2a <_strtol_l.isra.0>
 8017e42:	b003      	add	sp, #12
 8017e44:	bd30      	pop	{r4, r5, pc}
 8017e46:	bf00      	nop
 8017e48:	2000017c 	.word	0x2000017c
 8017e4c:	200001e0 	.word	0x200001e0

08017e50 <strtol>:
 8017e50:	4b08      	ldr	r3, [pc, #32]	; (8017e74 <strtol+0x24>)
 8017e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e54:	681c      	ldr	r4, [r3, #0]
 8017e56:	4d08      	ldr	r5, [pc, #32]	; (8017e78 <strtol+0x28>)
 8017e58:	6a23      	ldr	r3, [r4, #32]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	bf08      	it	eq
 8017e5e:	462b      	moveq	r3, r5
 8017e60:	9300      	str	r3, [sp, #0]
 8017e62:	4613      	mov	r3, r2
 8017e64:	460a      	mov	r2, r1
 8017e66:	4601      	mov	r1, r0
 8017e68:	4620      	mov	r0, r4
 8017e6a:	f7ff ff5e 	bl	8017d2a <_strtol_l.isra.0>
 8017e6e:	b003      	add	sp, #12
 8017e70:	bd30      	pop	{r4, r5, pc}
 8017e72:	bf00      	nop
 8017e74:	2000017c 	.word	0x2000017c
 8017e78:	200001e0 	.word	0x200001e0

08017e7c <_user_strerror>:
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	4770      	bx	lr

08017e80 <__locale_ctype_ptr_l>:
 8017e80:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017e84:	4770      	bx	lr
	...

08017e88 <__locale_ctype_ptr>:
 8017e88:	4b04      	ldr	r3, [pc, #16]	; (8017e9c <__locale_ctype_ptr+0x14>)
 8017e8a:	4a05      	ldr	r2, [pc, #20]	; (8017ea0 <__locale_ctype_ptr+0x18>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	6a1b      	ldr	r3, [r3, #32]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	bf08      	it	eq
 8017e94:	4613      	moveq	r3, r2
 8017e96:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e9a:	4770      	bx	lr
 8017e9c:	2000017c 	.word	0x2000017c
 8017ea0:	200001e0 	.word	0x200001e0

08017ea4 <__ascii_mbtowc>:
 8017ea4:	b082      	sub	sp, #8
 8017ea6:	b901      	cbnz	r1, 8017eaa <__ascii_mbtowc+0x6>
 8017ea8:	a901      	add	r1, sp, #4
 8017eaa:	b142      	cbz	r2, 8017ebe <__ascii_mbtowc+0x1a>
 8017eac:	b14b      	cbz	r3, 8017ec2 <__ascii_mbtowc+0x1e>
 8017eae:	7813      	ldrb	r3, [r2, #0]
 8017eb0:	600b      	str	r3, [r1, #0]
 8017eb2:	7812      	ldrb	r2, [r2, #0]
 8017eb4:	1c10      	adds	r0, r2, #0
 8017eb6:	bf18      	it	ne
 8017eb8:	2001      	movne	r0, #1
 8017eba:	b002      	add	sp, #8
 8017ebc:	4770      	bx	lr
 8017ebe:	4610      	mov	r0, r2
 8017ec0:	e7fb      	b.n	8017eba <__ascii_mbtowc+0x16>
 8017ec2:	f06f 0001 	mvn.w	r0, #1
 8017ec6:	e7f8      	b.n	8017eba <__ascii_mbtowc+0x16>

08017ec8 <_free_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4605      	mov	r5, r0
 8017ecc:	2900      	cmp	r1, #0
 8017ece:	d045      	beq.n	8017f5c <_free_r+0x94>
 8017ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ed4:	1f0c      	subs	r4, r1, #4
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bfb8      	it	lt
 8017eda:	18e4      	addlt	r4, r4, r3
 8017edc:	f000 fcbe 	bl	801885c <__malloc_lock>
 8017ee0:	4a1f      	ldr	r2, [pc, #124]	; (8017f60 <_free_r+0x98>)
 8017ee2:	6813      	ldr	r3, [r2, #0]
 8017ee4:	4610      	mov	r0, r2
 8017ee6:	b933      	cbnz	r3, 8017ef6 <_free_r+0x2e>
 8017ee8:	6063      	str	r3, [r4, #4]
 8017eea:	6014      	str	r4, [r2, #0]
 8017eec:	4628      	mov	r0, r5
 8017eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ef2:	f000 bcb4 	b.w	801885e <__malloc_unlock>
 8017ef6:	42a3      	cmp	r3, r4
 8017ef8:	d90c      	bls.n	8017f14 <_free_r+0x4c>
 8017efa:	6821      	ldr	r1, [r4, #0]
 8017efc:	1862      	adds	r2, r4, r1
 8017efe:	4293      	cmp	r3, r2
 8017f00:	bf04      	itt	eq
 8017f02:	681a      	ldreq	r2, [r3, #0]
 8017f04:	685b      	ldreq	r3, [r3, #4]
 8017f06:	6063      	str	r3, [r4, #4]
 8017f08:	bf04      	itt	eq
 8017f0a:	1852      	addeq	r2, r2, r1
 8017f0c:	6022      	streq	r2, [r4, #0]
 8017f0e:	6004      	str	r4, [r0, #0]
 8017f10:	e7ec      	b.n	8017eec <_free_r+0x24>
 8017f12:	4613      	mov	r3, r2
 8017f14:	685a      	ldr	r2, [r3, #4]
 8017f16:	b10a      	cbz	r2, 8017f1c <_free_r+0x54>
 8017f18:	42a2      	cmp	r2, r4
 8017f1a:	d9fa      	bls.n	8017f12 <_free_r+0x4a>
 8017f1c:	6819      	ldr	r1, [r3, #0]
 8017f1e:	1858      	adds	r0, r3, r1
 8017f20:	42a0      	cmp	r0, r4
 8017f22:	d10b      	bne.n	8017f3c <_free_r+0x74>
 8017f24:	6820      	ldr	r0, [r4, #0]
 8017f26:	4401      	add	r1, r0
 8017f28:	1858      	adds	r0, r3, r1
 8017f2a:	4282      	cmp	r2, r0
 8017f2c:	6019      	str	r1, [r3, #0]
 8017f2e:	d1dd      	bne.n	8017eec <_free_r+0x24>
 8017f30:	6810      	ldr	r0, [r2, #0]
 8017f32:	6852      	ldr	r2, [r2, #4]
 8017f34:	605a      	str	r2, [r3, #4]
 8017f36:	4401      	add	r1, r0
 8017f38:	6019      	str	r1, [r3, #0]
 8017f3a:	e7d7      	b.n	8017eec <_free_r+0x24>
 8017f3c:	d902      	bls.n	8017f44 <_free_r+0x7c>
 8017f3e:	230c      	movs	r3, #12
 8017f40:	602b      	str	r3, [r5, #0]
 8017f42:	e7d3      	b.n	8017eec <_free_r+0x24>
 8017f44:	6820      	ldr	r0, [r4, #0]
 8017f46:	1821      	adds	r1, r4, r0
 8017f48:	428a      	cmp	r2, r1
 8017f4a:	bf04      	itt	eq
 8017f4c:	6811      	ldreq	r1, [r2, #0]
 8017f4e:	6852      	ldreq	r2, [r2, #4]
 8017f50:	6062      	str	r2, [r4, #4]
 8017f52:	bf04      	itt	eq
 8017f54:	1809      	addeq	r1, r1, r0
 8017f56:	6021      	streq	r1, [r4, #0]
 8017f58:	605c      	str	r4, [r3, #4]
 8017f5a:	e7c7      	b.n	8017eec <_free_r+0x24>
 8017f5c:	bd38      	pop	{r3, r4, r5, pc}
 8017f5e:	bf00      	nop
 8017f60:	20002980 	.word	0x20002980

08017f64 <_malloc_r>:
 8017f64:	b570      	push	{r4, r5, r6, lr}
 8017f66:	1ccd      	adds	r5, r1, #3
 8017f68:	f025 0503 	bic.w	r5, r5, #3
 8017f6c:	3508      	adds	r5, #8
 8017f6e:	2d0c      	cmp	r5, #12
 8017f70:	bf38      	it	cc
 8017f72:	250c      	movcc	r5, #12
 8017f74:	2d00      	cmp	r5, #0
 8017f76:	4606      	mov	r6, r0
 8017f78:	db01      	blt.n	8017f7e <_malloc_r+0x1a>
 8017f7a:	42a9      	cmp	r1, r5
 8017f7c:	d903      	bls.n	8017f86 <_malloc_r+0x22>
 8017f7e:	230c      	movs	r3, #12
 8017f80:	6033      	str	r3, [r6, #0]
 8017f82:	2000      	movs	r0, #0
 8017f84:	bd70      	pop	{r4, r5, r6, pc}
 8017f86:	f000 fc69 	bl	801885c <__malloc_lock>
 8017f8a:	4a23      	ldr	r2, [pc, #140]	; (8018018 <_malloc_r+0xb4>)
 8017f8c:	6814      	ldr	r4, [r2, #0]
 8017f8e:	4621      	mov	r1, r4
 8017f90:	b991      	cbnz	r1, 8017fb8 <_malloc_r+0x54>
 8017f92:	4c22      	ldr	r4, [pc, #136]	; (801801c <_malloc_r+0xb8>)
 8017f94:	6823      	ldr	r3, [r4, #0]
 8017f96:	b91b      	cbnz	r3, 8017fa0 <_malloc_r+0x3c>
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f000 fb47 	bl	801862c <_sbrk_r>
 8017f9e:	6020      	str	r0, [r4, #0]
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	f000 fb42 	bl	801862c <_sbrk_r>
 8017fa8:	1c43      	adds	r3, r0, #1
 8017faa:	d126      	bne.n	8017ffa <_malloc_r+0x96>
 8017fac:	230c      	movs	r3, #12
 8017fae:	6033      	str	r3, [r6, #0]
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f000 fc54 	bl	801885e <__malloc_unlock>
 8017fb6:	e7e4      	b.n	8017f82 <_malloc_r+0x1e>
 8017fb8:	680b      	ldr	r3, [r1, #0]
 8017fba:	1b5b      	subs	r3, r3, r5
 8017fbc:	d41a      	bmi.n	8017ff4 <_malloc_r+0x90>
 8017fbe:	2b0b      	cmp	r3, #11
 8017fc0:	d90f      	bls.n	8017fe2 <_malloc_r+0x7e>
 8017fc2:	600b      	str	r3, [r1, #0]
 8017fc4:	50cd      	str	r5, [r1, r3]
 8017fc6:	18cc      	adds	r4, r1, r3
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f000 fc48 	bl	801885e <__malloc_unlock>
 8017fce:	f104 000b 	add.w	r0, r4, #11
 8017fd2:	1d23      	adds	r3, r4, #4
 8017fd4:	f020 0007 	bic.w	r0, r0, #7
 8017fd8:	1ac3      	subs	r3, r0, r3
 8017fda:	d01b      	beq.n	8018014 <_malloc_r+0xb0>
 8017fdc:	425a      	negs	r2, r3
 8017fde:	50e2      	str	r2, [r4, r3]
 8017fe0:	bd70      	pop	{r4, r5, r6, pc}
 8017fe2:	428c      	cmp	r4, r1
 8017fe4:	bf0d      	iteet	eq
 8017fe6:	6863      	ldreq	r3, [r4, #4]
 8017fe8:	684b      	ldrne	r3, [r1, #4]
 8017fea:	6063      	strne	r3, [r4, #4]
 8017fec:	6013      	streq	r3, [r2, #0]
 8017fee:	bf18      	it	ne
 8017ff0:	460c      	movne	r4, r1
 8017ff2:	e7e9      	b.n	8017fc8 <_malloc_r+0x64>
 8017ff4:	460c      	mov	r4, r1
 8017ff6:	6849      	ldr	r1, [r1, #4]
 8017ff8:	e7ca      	b.n	8017f90 <_malloc_r+0x2c>
 8017ffa:	1cc4      	adds	r4, r0, #3
 8017ffc:	f024 0403 	bic.w	r4, r4, #3
 8018000:	42a0      	cmp	r0, r4
 8018002:	d005      	beq.n	8018010 <_malloc_r+0xac>
 8018004:	1a21      	subs	r1, r4, r0
 8018006:	4630      	mov	r0, r6
 8018008:	f000 fb10 	bl	801862c <_sbrk_r>
 801800c:	3001      	adds	r0, #1
 801800e:	d0cd      	beq.n	8017fac <_malloc_r+0x48>
 8018010:	6025      	str	r5, [r4, #0]
 8018012:	e7d9      	b.n	8017fc8 <_malloc_r+0x64>
 8018014:	bd70      	pop	{r4, r5, r6, pc}
 8018016:	bf00      	nop
 8018018:	20002980 	.word	0x20002980
 801801c:	20002984 	.word	0x20002984

08018020 <_sungetc_r>:
 8018020:	b538      	push	{r3, r4, r5, lr}
 8018022:	1c4b      	adds	r3, r1, #1
 8018024:	4614      	mov	r4, r2
 8018026:	d103      	bne.n	8018030 <_sungetc_r+0x10>
 8018028:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801802c:	4628      	mov	r0, r5
 801802e:	bd38      	pop	{r3, r4, r5, pc}
 8018030:	8993      	ldrh	r3, [r2, #12]
 8018032:	f023 0320 	bic.w	r3, r3, #32
 8018036:	8193      	strh	r3, [r2, #12]
 8018038:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801803a:	6852      	ldr	r2, [r2, #4]
 801803c:	b2cd      	uxtb	r5, r1
 801803e:	b18b      	cbz	r3, 8018064 <_sungetc_r+0x44>
 8018040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018042:	429a      	cmp	r2, r3
 8018044:	da08      	bge.n	8018058 <_sungetc_r+0x38>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	1e5a      	subs	r2, r3, #1
 801804a:	6022      	str	r2, [r4, #0]
 801804c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018050:	6863      	ldr	r3, [r4, #4]
 8018052:	3301      	adds	r3, #1
 8018054:	6063      	str	r3, [r4, #4]
 8018056:	e7e9      	b.n	801802c <_sungetc_r+0xc>
 8018058:	4621      	mov	r1, r4
 801805a:	f000 fbb7 	bl	80187cc <__submore>
 801805e:	2800      	cmp	r0, #0
 8018060:	d0f1      	beq.n	8018046 <_sungetc_r+0x26>
 8018062:	e7e1      	b.n	8018028 <_sungetc_r+0x8>
 8018064:	6921      	ldr	r1, [r4, #16]
 8018066:	6823      	ldr	r3, [r4, #0]
 8018068:	b151      	cbz	r1, 8018080 <_sungetc_r+0x60>
 801806a:	4299      	cmp	r1, r3
 801806c:	d208      	bcs.n	8018080 <_sungetc_r+0x60>
 801806e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018072:	428d      	cmp	r5, r1
 8018074:	d104      	bne.n	8018080 <_sungetc_r+0x60>
 8018076:	3b01      	subs	r3, #1
 8018078:	3201      	adds	r2, #1
 801807a:	6023      	str	r3, [r4, #0]
 801807c:	6062      	str	r2, [r4, #4]
 801807e:	e7d5      	b.n	801802c <_sungetc_r+0xc>
 8018080:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018086:	6363      	str	r3, [r4, #52]	; 0x34
 8018088:	2303      	movs	r3, #3
 801808a:	63a3      	str	r3, [r4, #56]	; 0x38
 801808c:	4623      	mov	r3, r4
 801808e:	6422      	str	r2, [r4, #64]	; 0x40
 8018090:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018094:	6023      	str	r3, [r4, #0]
 8018096:	2301      	movs	r3, #1
 8018098:	e7dc      	b.n	8018054 <_sungetc_r+0x34>

0801809a <__ssrefill_r>:
 801809a:	b510      	push	{r4, lr}
 801809c:	460c      	mov	r4, r1
 801809e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80180a0:	b169      	cbz	r1, 80180be <__ssrefill_r+0x24>
 80180a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180a6:	4299      	cmp	r1, r3
 80180a8:	d001      	beq.n	80180ae <__ssrefill_r+0x14>
 80180aa:	f7ff ff0d 	bl	8017ec8 <_free_r>
 80180ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80180b0:	6063      	str	r3, [r4, #4]
 80180b2:	2000      	movs	r0, #0
 80180b4:	6360      	str	r0, [r4, #52]	; 0x34
 80180b6:	b113      	cbz	r3, 80180be <__ssrefill_r+0x24>
 80180b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80180ba:	6023      	str	r3, [r4, #0]
 80180bc:	bd10      	pop	{r4, pc}
 80180be:	6923      	ldr	r3, [r4, #16]
 80180c0:	6023      	str	r3, [r4, #0]
 80180c2:	2300      	movs	r3, #0
 80180c4:	6063      	str	r3, [r4, #4]
 80180c6:	89a3      	ldrh	r3, [r4, #12]
 80180c8:	f043 0320 	orr.w	r3, r3, #32
 80180cc:	81a3      	strh	r3, [r4, #12]
 80180ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180d2:	bd10      	pop	{r4, pc}

080180d4 <__ssvfiscanf_r>:
 80180d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80180dc:	f10d 080c 	add.w	r8, sp, #12
 80180e0:	9301      	str	r3, [sp, #4]
 80180e2:	2300      	movs	r3, #0
 80180e4:	9346      	str	r3, [sp, #280]	; 0x118
 80180e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80180e8:	4ba0      	ldr	r3, [pc, #640]	; (801836c <__ssvfiscanf_r+0x298>)
 80180ea:	93a2      	str	r3, [sp, #648]	; 0x288
 80180ec:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8018374 <__ssvfiscanf_r+0x2a0>
 80180f0:	4b9f      	ldr	r3, [pc, #636]	; (8018370 <__ssvfiscanf_r+0x29c>)
 80180f2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80180f6:	4606      	mov	r6, r0
 80180f8:	460c      	mov	r4, r1
 80180fa:	93a3      	str	r3, [sp, #652]	; 0x28c
 80180fc:	4692      	mov	sl, r2
 80180fe:	270a      	movs	r7, #10
 8018100:	f89a 3000 	ldrb.w	r3, [sl]
 8018104:	2b00      	cmp	r3, #0
 8018106:	f000 812f 	beq.w	8018368 <__ssvfiscanf_r+0x294>
 801810a:	f7ff febd 	bl	8017e88 <__locale_ctype_ptr>
 801810e:	f89a b000 	ldrb.w	fp, [sl]
 8018112:	4458      	add	r0, fp
 8018114:	7843      	ldrb	r3, [r0, #1]
 8018116:	f013 0308 	ands.w	r3, r3, #8
 801811a:	d143      	bne.n	80181a4 <__ssvfiscanf_r+0xd0>
 801811c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018120:	f10a 0501 	add.w	r5, sl, #1
 8018124:	f040 8099 	bne.w	801825a <__ssvfiscanf_r+0x186>
 8018128:	9345      	str	r3, [sp, #276]	; 0x114
 801812a:	9343      	str	r3, [sp, #268]	; 0x10c
 801812c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018130:	2b2a      	cmp	r3, #42	; 0x2a
 8018132:	d103      	bne.n	801813c <__ssvfiscanf_r+0x68>
 8018134:	2310      	movs	r3, #16
 8018136:	9343      	str	r3, [sp, #268]	; 0x10c
 8018138:	f10a 0502 	add.w	r5, sl, #2
 801813c:	7829      	ldrb	r1, [r5, #0]
 801813e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018142:	2a09      	cmp	r2, #9
 8018144:	46aa      	mov	sl, r5
 8018146:	f105 0501 	add.w	r5, r5, #1
 801814a:	d941      	bls.n	80181d0 <__ssvfiscanf_r+0xfc>
 801814c:	2203      	movs	r2, #3
 801814e:	4889      	ldr	r0, [pc, #548]	; (8018374 <__ssvfiscanf_r+0x2a0>)
 8018150:	f7e8 f856 	bl	8000200 <memchr>
 8018154:	b138      	cbz	r0, 8018166 <__ssvfiscanf_r+0x92>
 8018156:	eba0 0309 	sub.w	r3, r0, r9
 801815a:	2001      	movs	r0, #1
 801815c:	4098      	lsls	r0, r3
 801815e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018160:	4318      	orrs	r0, r3
 8018162:	9043      	str	r0, [sp, #268]	; 0x10c
 8018164:	46aa      	mov	sl, r5
 8018166:	f89a 3000 	ldrb.w	r3, [sl]
 801816a:	2b67      	cmp	r3, #103	; 0x67
 801816c:	f10a 0501 	add.w	r5, sl, #1
 8018170:	d84a      	bhi.n	8018208 <__ssvfiscanf_r+0x134>
 8018172:	2b65      	cmp	r3, #101	; 0x65
 8018174:	f080 80b7 	bcs.w	80182e6 <__ssvfiscanf_r+0x212>
 8018178:	2b47      	cmp	r3, #71	; 0x47
 801817a:	d82f      	bhi.n	80181dc <__ssvfiscanf_r+0x108>
 801817c:	2b45      	cmp	r3, #69	; 0x45
 801817e:	f080 80b2 	bcs.w	80182e6 <__ssvfiscanf_r+0x212>
 8018182:	2b00      	cmp	r3, #0
 8018184:	f000 8082 	beq.w	801828c <__ssvfiscanf_r+0x1b8>
 8018188:	2b25      	cmp	r3, #37	; 0x25
 801818a:	d066      	beq.n	801825a <__ssvfiscanf_r+0x186>
 801818c:	2303      	movs	r3, #3
 801818e:	9349      	str	r3, [sp, #292]	; 0x124
 8018190:	9744      	str	r7, [sp, #272]	; 0x110
 8018192:	e045      	b.n	8018220 <__ssvfiscanf_r+0x14c>
 8018194:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8018196:	3101      	adds	r1, #1
 8018198:	9147      	str	r1, [sp, #284]	; 0x11c
 801819a:	6861      	ldr	r1, [r4, #4]
 801819c:	3301      	adds	r3, #1
 801819e:	3901      	subs	r1, #1
 80181a0:	6061      	str	r1, [r4, #4]
 80181a2:	6023      	str	r3, [r4, #0]
 80181a4:	6863      	ldr	r3, [r4, #4]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	dd0b      	ble.n	80181c2 <__ssvfiscanf_r+0xee>
 80181aa:	f7ff fe6d 	bl	8017e88 <__locale_ctype_ptr>
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	7819      	ldrb	r1, [r3, #0]
 80181b2:	4408      	add	r0, r1
 80181b4:	7841      	ldrb	r1, [r0, #1]
 80181b6:	070d      	lsls	r5, r1, #28
 80181b8:	d4ec      	bmi.n	8018194 <__ssvfiscanf_r+0xc0>
 80181ba:	f10a 0501 	add.w	r5, sl, #1
 80181be:	46aa      	mov	sl, r5
 80181c0:	e79e      	b.n	8018100 <__ssvfiscanf_r+0x2c>
 80181c2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80181c4:	4621      	mov	r1, r4
 80181c6:	4630      	mov	r0, r6
 80181c8:	4798      	blx	r3
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d0ed      	beq.n	80181aa <__ssvfiscanf_r+0xd6>
 80181ce:	e7f4      	b.n	80181ba <__ssvfiscanf_r+0xe6>
 80181d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80181d2:	fb07 1303 	mla	r3, r7, r3, r1
 80181d6:	3b30      	subs	r3, #48	; 0x30
 80181d8:	9345      	str	r3, [sp, #276]	; 0x114
 80181da:	e7af      	b.n	801813c <__ssvfiscanf_r+0x68>
 80181dc:	2b5b      	cmp	r3, #91	; 0x5b
 80181de:	d061      	beq.n	80182a4 <__ssvfiscanf_r+0x1d0>
 80181e0:	d80c      	bhi.n	80181fc <__ssvfiscanf_r+0x128>
 80181e2:	2b58      	cmp	r3, #88	; 0x58
 80181e4:	d1d2      	bne.n	801818c <__ssvfiscanf_r+0xb8>
 80181e6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80181e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80181ec:	9243      	str	r2, [sp, #268]	; 0x10c
 80181ee:	2210      	movs	r2, #16
 80181f0:	9244      	str	r2, [sp, #272]	; 0x110
 80181f2:	2b6f      	cmp	r3, #111	; 0x6f
 80181f4:	bfb4      	ite	lt
 80181f6:	2303      	movlt	r3, #3
 80181f8:	2304      	movge	r3, #4
 80181fa:	e010      	b.n	801821e <__ssvfiscanf_r+0x14a>
 80181fc:	2b63      	cmp	r3, #99	; 0x63
 80181fe:	d05c      	beq.n	80182ba <__ssvfiscanf_r+0x1e6>
 8018200:	2b64      	cmp	r3, #100	; 0x64
 8018202:	d1c3      	bne.n	801818c <__ssvfiscanf_r+0xb8>
 8018204:	9744      	str	r7, [sp, #272]	; 0x110
 8018206:	e7f4      	b.n	80181f2 <__ssvfiscanf_r+0x11e>
 8018208:	2b70      	cmp	r3, #112	; 0x70
 801820a:	d042      	beq.n	8018292 <__ssvfiscanf_r+0x1be>
 801820c:	d81d      	bhi.n	801824a <__ssvfiscanf_r+0x176>
 801820e:	2b6e      	cmp	r3, #110	; 0x6e
 8018210:	d059      	beq.n	80182c6 <__ssvfiscanf_r+0x1f2>
 8018212:	d843      	bhi.n	801829c <__ssvfiscanf_r+0x1c8>
 8018214:	2b69      	cmp	r3, #105	; 0x69
 8018216:	d1b9      	bne.n	801818c <__ssvfiscanf_r+0xb8>
 8018218:	2300      	movs	r3, #0
 801821a:	9344      	str	r3, [sp, #272]	; 0x110
 801821c:	2303      	movs	r3, #3
 801821e:	9349      	str	r3, [sp, #292]	; 0x124
 8018220:	6863      	ldr	r3, [r4, #4]
 8018222:	2b00      	cmp	r3, #0
 8018224:	dd61      	ble.n	80182ea <__ssvfiscanf_r+0x216>
 8018226:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018228:	0659      	lsls	r1, r3, #25
 801822a:	d56f      	bpl.n	801830c <__ssvfiscanf_r+0x238>
 801822c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801822e:	2b02      	cmp	r3, #2
 8018230:	dc7c      	bgt.n	801832c <__ssvfiscanf_r+0x258>
 8018232:	ab01      	add	r3, sp, #4
 8018234:	4622      	mov	r2, r4
 8018236:	a943      	add	r1, sp, #268	; 0x10c
 8018238:	4630      	mov	r0, r6
 801823a:	f000 f89f 	bl	801837c <_scanf_chars>
 801823e:	2801      	cmp	r0, #1
 8018240:	f000 8092 	beq.w	8018368 <__ssvfiscanf_r+0x294>
 8018244:	2802      	cmp	r0, #2
 8018246:	d1ba      	bne.n	80181be <__ssvfiscanf_r+0xea>
 8018248:	e01d      	b.n	8018286 <__ssvfiscanf_r+0x1b2>
 801824a:	2b75      	cmp	r3, #117	; 0x75
 801824c:	d0da      	beq.n	8018204 <__ssvfiscanf_r+0x130>
 801824e:	2b78      	cmp	r3, #120	; 0x78
 8018250:	d0c9      	beq.n	80181e6 <__ssvfiscanf_r+0x112>
 8018252:	2b73      	cmp	r3, #115	; 0x73
 8018254:	d19a      	bne.n	801818c <__ssvfiscanf_r+0xb8>
 8018256:	2302      	movs	r3, #2
 8018258:	e7e1      	b.n	801821e <__ssvfiscanf_r+0x14a>
 801825a:	6863      	ldr	r3, [r4, #4]
 801825c:	2b00      	cmp	r3, #0
 801825e:	dd0c      	ble.n	801827a <__ssvfiscanf_r+0x1a6>
 8018260:	6823      	ldr	r3, [r4, #0]
 8018262:	781a      	ldrb	r2, [r3, #0]
 8018264:	4593      	cmp	fp, r2
 8018266:	d17f      	bne.n	8018368 <__ssvfiscanf_r+0x294>
 8018268:	3301      	adds	r3, #1
 801826a:	6862      	ldr	r2, [r4, #4]
 801826c:	6023      	str	r3, [r4, #0]
 801826e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018270:	3a01      	subs	r2, #1
 8018272:	3301      	adds	r3, #1
 8018274:	6062      	str	r2, [r4, #4]
 8018276:	9347      	str	r3, [sp, #284]	; 0x11c
 8018278:	e7a1      	b.n	80181be <__ssvfiscanf_r+0xea>
 801827a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801827c:	4621      	mov	r1, r4
 801827e:	4630      	mov	r0, r6
 8018280:	4798      	blx	r3
 8018282:	2800      	cmp	r0, #0
 8018284:	d0ec      	beq.n	8018260 <__ssvfiscanf_r+0x18c>
 8018286:	9846      	ldr	r0, [sp, #280]	; 0x118
 8018288:	2800      	cmp	r0, #0
 801828a:	d163      	bne.n	8018354 <__ssvfiscanf_r+0x280>
 801828c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018290:	e066      	b.n	8018360 <__ssvfiscanf_r+0x28c>
 8018292:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8018294:	f042 0220 	orr.w	r2, r2, #32
 8018298:	9243      	str	r2, [sp, #268]	; 0x10c
 801829a:	e7a4      	b.n	80181e6 <__ssvfiscanf_r+0x112>
 801829c:	2308      	movs	r3, #8
 801829e:	9344      	str	r3, [sp, #272]	; 0x110
 80182a0:	2304      	movs	r3, #4
 80182a2:	e7bc      	b.n	801821e <__ssvfiscanf_r+0x14a>
 80182a4:	4629      	mov	r1, r5
 80182a6:	4640      	mov	r0, r8
 80182a8:	f000 f9d0 	bl	801864c <__sccl>
 80182ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80182ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80182b4:	4605      	mov	r5, r0
 80182b6:	2301      	movs	r3, #1
 80182b8:	e7b1      	b.n	801821e <__ssvfiscanf_r+0x14a>
 80182ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80182bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80182c2:	2300      	movs	r3, #0
 80182c4:	e7ab      	b.n	801821e <__ssvfiscanf_r+0x14a>
 80182c6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80182c8:	06d0      	lsls	r0, r2, #27
 80182ca:	f53f af78 	bmi.w	80181be <__ssvfiscanf_r+0xea>
 80182ce:	f012 0f01 	tst.w	r2, #1
 80182d2:	9a01      	ldr	r2, [sp, #4]
 80182d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80182d6:	f102 0104 	add.w	r1, r2, #4
 80182da:	9101      	str	r1, [sp, #4]
 80182dc:	6812      	ldr	r2, [r2, #0]
 80182de:	bf14      	ite	ne
 80182e0:	8013      	strhne	r3, [r2, #0]
 80182e2:	6013      	streq	r3, [r2, #0]
 80182e4:	e76b      	b.n	80181be <__ssvfiscanf_r+0xea>
 80182e6:	2305      	movs	r3, #5
 80182e8:	e799      	b.n	801821e <__ssvfiscanf_r+0x14a>
 80182ea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80182ec:	4621      	mov	r1, r4
 80182ee:	4630      	mov	r0, r6
 80182f0:	4798      	blx	r3
 80182f2:	2800      	cmp	r0, #0
 80182f4:	d097      	beq.n	8018226 <__ssvfiscanf_r+0x152>
 80182f6:	e7c6      	b.n	8018286 <__ssvfiscanf_r+0x1b2>
 80182f8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80182fa:	3201      	adds	r2, #1
 80182fc:	9247      	str	r2, [sp, #284]	; 0x11c
 80182fe:	6862      	ldr	r2, [r4, #4]
 8018300:	3a01      	subs	r2, #1
 8018302:	2a00      	cmp	r2, #0
 8018304:	6062      	str	r2, [r4, #4]
 8018306:	dd0a      	ble.n	801831e <__ssvfiscanf_r+0x24a>
 8018308:	3301      	adds	r3, #1
 801830a:	6023      	str	r3, [r4, #0]
 801830c:	f7ff fdbc 	bl	8017e88 <__locale_ctype_ptr>
 8018310:	6823      	ldr	r3, [r4, #0]
 8018312:	781a      	ldrb	r2, [r3, #0]
 8018314:	4410      	add	r0, r2
 8018316:	7842      	ldrb	r2, [r0, #1]
 8018318:	0712      	lsls	r2, r2, #28
 801831a:	d4ed      	bmi.n	80182f8 <__ssvfiscanf_r+0x224>
 801831c:	e786      	b.n	801822c <__ssvfiscanf_r+0x158>
 801831e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8018320:	4621      	mov	r1, r4
 8018322:	4630      	mov	r0, r6
 8018324:	4798      	blx	r3
 8018326:	2800      	cmp	r0, #0
 8018328:	d0f0      	beq.n	801830c <__ssvfiscanf_r+0x238>
 801832a:	e7ac      	b.n	8018286 <__ssvfiscanf_r+0x1b2>
 801832c:	2b04      	cmp	r3, #4
 801832e:	dc06      	bgt.n	801833e <__ssvfiscanf_r+0x26a>
 8018330:	ab01      	add	r3, sp, #4
 8018332:	4622      	mov	r2, r4
 8018334:	a943      	add	r1, sp, #268	; 0x10c
 8018336:	4630      	mov	r0, r6
 8018338:	f000 f884 	bl	8018444 <_scanf_i>
 801833c:	e77f      	b.n	801823e <__ssvfiscanf_r+0x16a>
 801833e:	4b0e      	ldr	r3, [pc, #56]	; (8018378 <__ssvfiscanf_r+0x2a4>)
 8018340:	2b00      	cmp	r3, #0
 8018342:	f43f af3c 	beq.w	80181be <__ssvfiscanf_r+0xea>
 8018346:	ab01      	add	r3, sp, #4
 8018348:	4622      	mov	r2, r4
 801834a:	a943      	add	r1, sp, #268	; 0x10c
 801834c:	4630      	mov	r0, r6
 801834e:	f3af 8000 	nop.w
 8018352:	e774      	b.n	801823e <__ssvfiscanf_r+0x16a>
 8018354:	89a3      	ldrh	r3, [r4, #12]
 8018356:	f013 0f40 	tst.w	r3, #64	; 0x40
 801835a:	bf18      	it	ne
 801835c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8018360:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8018364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018368:	9846      	ldr	r0, [sp, #280]	; 0x118
 801836a:	e7f9      	b.n	8018360 <__ssvfiscanf_r+0x28c>
 801836c:	08018021 	.word	0x08018021
 8018370:	0801809b 	.word	0x0801809b
 8018374:	080274e0 	.word	0x080274e0
 8018378:	00000000 	.word	0x00000000

0801837c <_scanf_chars>:
 801837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018380:	4615      	mov	r5, r2
 8018382:	688a      	ldr	r2, [r1, #8]
 8018384:	4680      	mov	r8, r0
 8018386:	460c      	mov	r4, r1
 8018388:	b932      	cbnz	r2, 8018398 <_scanf_chars+0x1c>
 801838a:	698a      	ldr	r2, [r1, #24]
 801838c:	2a00      	cmp	r2, #0
 801838e:	bf0c      	ite	eq
 8018390:	2201      	moveq	r2, #1
 8018392:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8018396:	608a      	str	r2, [r1, #8]
 8018398:	6822      	ldr	r2, [r4, #0]
 801839a:	06d1      	lsls	r1, r2, #27
 801839c:	bf5f      	itttt	pl
 801839e:	681a      	ldrpl	r2, [r3, #0]
 80183a0:	1d11      	addpl	r1, r2, #4
 80183a2:	6019      	strpl	r1, [r3, #0]
 80183a4:	6817      	ldrpl	r7, [r2, #0]
 80183a6:	2600      	movs	r6, #0
 80183a8:	69a3      	ldr	r3, [r4, #24]
 80183aa:	b1db      	cbz	r3, 80183e4 <_scanf_chars+0x68>
 80183ac:	2b01      	cmp	r3, #1
 80183ae:	d107      	bne.n	80183c0 <_scanf_chars+0x44>
 80183b0:	682b      	ldr	r3, [r5, #0]
 80183b2:	6962      	ldr	r2, [r4, #20]
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	5cd3      	ldrb	r3, [r2, r3]
 80183b8:	b9a3      	cbnz	r3, 80183e4 <_scanf_chars+0x68>
 80183ba:	2e00      	cmp	r6, #0
 80183bc:	d132      	bne.n	8018424 <_scanf_chars+0xa8>
 80183be:	e006      	b.n	80183ce <_scanf_chars+0x52>
 80183c0:	2b02      	cmp	r3, #2
 80183c2:	d007      	beq.n	80183d4 <_scanf_chars+0x58>
 80183c4:	2e00      	cmp	r6, #0
 80183c6:	d12d      	bne.n	8018424 <_scanf_chars+0xa8>
 80183c8:	69a3      	ldr	r3, [r4, #24]
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	d12a      	bne.n	8018424 <_scanf_chars+0xa8>
 80183ce:	2001      	movs	r0, #1
 80183d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183d4:	f7ff fd58 	bl	8017e88 <__locale_ctype_ptr>
 80183d8:	682b      	ldr	r3, [r5, #0]
 80183da:	781b      	ldrb	r3, [r3, #0]
 80183dc:	4418      	add	r0, r3
 80183de:	7843      	ldrb	r3, [r0, #1]
 80183e0:	071b      	lsls	r3, r3, #28
 80183e2:	d4ef      	bmi.n	80183c4 <_scanf_chars+0x48>
 80183e4:	6823      	ldr	r3, [r4, #0]
 80183e6:	06da      	lsls	r2, r3, #27
 80183e8:	bf5e      	ittt	pl
 80183ea:	682b      	ldrpl	r3, [r5, #0]
 80183ec:	781b      	ldrbpl	r3, [r3, #0]
 80183ee:	703b      	strbpl	r3, [r7, #0]
 80183f0:	682a      	ldr	r2, [r5, #0]
 80183f2:	686b      	ldr	r3, [r5, #4]
 80183f4:	f102 0201 	add.w	r2, r2, #1
 80183f8:	602a      	str	r2, [r5, #0]
 80183fa:	68a2      	ldr	r2, [r4, #8]
 80183fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018400:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8018404:	606b      	str	r3, [r5, #4]
 8018406:	f106 0601 	add.w	r6, r6, #1
 801840a:	bf58      	it	pl
 801840c:	3701      	addpl	r7, #1
 801840e:	60a2      	str	r2, [r4, #8]
 8018410:	b142      	cbz	r2, 8018424 <_scanf_chars+0xa8>
 8018412:	2b00      	cmp	r3, #0
 8018414:	dcc8      	bgt.n	80183a8 <_scanf_chars+0x2c>
 8018416:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801841a:	4629      	mov	r1, r5
 801841c:	4640      	mov	r0, r8
 801841e:	4798      	blx	r3
 8018420:	2800      	cmp	r0, #0
 8018422:	d0c1      	beq.n	80183a8 <_scanf_chars+0x2c>
 8018424:	6823      	ldr	r3, [r4, #0]
 8018426:	f013 0310 	ands.w	r3, r3, #16
 801842a:	d105      	bne.n	8018438 <_scanf_chars+0xbc>
 801842c:	68e2      	ldr	r2, [r4, #12]
 801842e:	3201      	adds	r2, #1
 8018430:	60e2      	str	r2, [r4, #12]
 8018432:	69a2      	ldr	r2, [r4, #24]
 8018434:	b102      	cbz	r2, 8018438 <_scanf_chars+0xbc>
 8018436:	703b      	strb	r3, [r7, #0]
 8018438:	6923      	ldr	r3, [r4, #16]
 801843a:	441e      	add	r6, r3
 801843c:	6126      	str	r6, [r4, #16]
 801843e:	2000      	movs	r0, #0
 8018440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018444 <_scanf_i>:
 8018444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018448:	469a      	mov	sl, r3
 801844a:	4b74      	ldr	r3, [pc, #464]	; (801861c <_scanf_i+0x1d8>)
 801844c:	460c      	mov	r4, r1
 801844e:	4683      	mov	fp, r0
 8018450:	4616      	mov	r6, r2
 8018452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018456:	b087      	sub	sp, #28
 8018458:	ab03      	add	r3, sp, #12
 801845a:	68a7      	ldr	r7, [r4, #8]
 801845c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018460:	4b6f      	ldr	r3, [pc, #444]	; (8018620 <_scanf_i+0x1dc>)
 8018462:	69a1      	ldr	r1, [r4, #24]
 8018464:	4a6f      	ldr	r2, [pc, #444]	; (8018624 <_scanf_i+0x1e0>)
 8018466:	2903      	cmp	r1, #3
 8018468:	bf18      	it	ne
 801846a:	461a      	movne	r2, r3
 801846c:	1e7b      	subs	r3, r7, #1
 801846e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018472:	bf84      	itt	hi
 8018474:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018478:	60a3      	strhi	r3, [r4, #8]
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	9200      	str	r2, [sp, #0]
 801847e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018482:	bf88      	it	hi
 8018484:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018488:	f104 091c 	add.w	r9, r4, #28
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	bf8c      	ite	hi
 8018490:	197f      	addhi	r7, r7, r5
 8018492:	2700      	movls	r7, #0
 8018494:	464b      	mov	r3, r9
 8018496:	f04f 0800 	mov.w	r8, #0
 801849a:	9301      	str	r3, [sp, #4]
 801849c:	6831      	ldr	r1, [r6, #0]
 801849e:	ab03      	add	r3, sp, #12
 80184a0:	2202      	movs	r2, #2
 80184a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80184a6:	7809      	ldrb	r1, [r1, #0]
 80184a8:	f7e7 feaa 	bl	8000200 <memchr>
 80184ac:	9b01      	ldr	r3, [sp, #4]
 80184ae:	b328      	cbz	r0, 80184fc <_scanf_i+0xb8>
 80184b0:	f1b8 0f01 	cmp.w	r8, #1
 80184b4:	d156      	bne.n	8018564 <_scanf_i+0x120>
 80184b6:	6862      	ldr	r2, [r4, #4]
 80184b8:	b92a      	cbnz	r2, 80184c6 <_scanf_i+0x82>
 80184ba:	2208      	movs	r2, #8
 80184bc:	6062      	str	r2, [r4, #4]
 80184be:	6822      	ldr	r2, [r4, #0]
 80184c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80184c4:	6022      	str	r2, [r4, #0]
 80184c6:	6822      	ldr	r2, [r4, #0]
 80184c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80184cc:	6022      	str	r2, [r4, #0]
 80184ce:	68a2      	ldr	r2, [r4, #8]
 80184d0:	1e51      	subs	r1, r2, #1
 80184d2:	60a1      	str	r1, [r4, #8]
 80184d4:	b192      	cbz	r2, 80184fc <_scanf_i+0xb8>
 80184d6:	6832      	ldr	r2, [r6, #0]
 80184d8:	1c51      	adds	r1, r2, #1
 80184da:	6031      	str	r1, [r6, #0]
 80184dc:	7812      	ldrb	r2, [r2, #0]
 80184de:	701a      	strb	r2, [r3, #0]
 80184e0:	1c5d      	adds	r5, r3, #1
 80184e2:	6873      	ldr	r3, [r6, #4]
 80184e4:	3b01      	subs	r3, #1
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	6073      	str	r3, [r6, #4]
 80184ea:	dc06      	bgt.n	80184fa <_scanf_i+0xb6>
 80184ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80184f0:	4631      	mov	r1, r6
 80184f2:	4658      	mov	r0, fp
 80184f4:	4798      	blx	r3
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d176      	bne.n	80185e8 <_scanf_i+0x1a4>
 80184fa:	462b      	mov	r3, r5
 80184fc:	f108 0801 	add.w	r8, r8, #1
 8018500:	f1b8 0f03 	cmp.w	r8, #3
 8018504:	d1c9      	bne.n	801849a <_scanf_i+0x56>
 8018506:	6862      	ldr	r2, [r4, #4]
 8018508:	b90a      	cbnz	r2, 801850e <_scanf_i+0xca>
 801850a:	220a      	movs	r2, #10
 801850c:	6062      	str	r2, [r4, #4]
 801850e:	6862      	ldr	r2, [r4, #4]
 8018510:	4945      	ldr	r1, [pc, #276]	; (8018628 <_scanf_i+0x1e4>)
 8018512:	6960      	ldr	r0, [r4, #20]
 8018514:	9301      	str	r3, [sp, #4]
 8018516:	1a89      	subs	r1, r1, r2
 8018518:	f000 f898 	bl	801864c <__sccl>
 801851c:	9b01      	ldr	r3, [sp, #4]
 801851e:	f04f 0800 	mov.w	r8, #0
 8018522:	461d      	mov	r5, r3
 8018524:	68a3      	ldr	r3, [r4, #8]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d038      	beq.n	801859c <_scanf_i+0x158>
 801852a:	6831      	ldr	r1, [r6, #0]
 801852c:	6960      	ldr	r0, [r4, #20]
 801852e:	780a      	ldrb	r2, [r1, #0]
 8018530:	5c80      	ldrb	r0, [r0, r2]
 8018532:	2800      	cmp	r0, #0
 8018534:	d032      	beq.n	801859c <_scanf_i+0x158>
 8018536:	2a30      	cmp	r2, #48	; 0x30
 8018538:	6822      	ldr	r2, [r4, #0]
 801853a:	d121      	bne.n	8018580 <_scanf_i+0x13c>
 801853c:	0510      	lsls	r0, r2, #20
 801853e:	d51f      	bpl.n	8018580 <_scanf_i+0x13c>
 8018540:	f108 0801 	add.w	r8, r8, #1
 8018544:	b117      	cbz	r7, 801854c <_scanf_i+0x108>
 8018546:	3301      	adds	r3, #1
 8018548:	3f01      	subs	r7, #1
 801854a:	60a3      	str	r3, [r4, #8]
 801854c:	6873      	ldr	r3, [r6, #4]
 801854e:	3b01      	subs	r3, #1
 8018550:	2b00      	cmp	r3, #0
 8018552:	6073      	str	r3, [r6, #4]
 8018554:	dd1b      	ble.n	801858e <_scanf_i+0x14a>
 8018556:	6833      	ldr	r3, [r6, #0]
 8018558:	3301      	adds	r3, #1
 801855a:	6033      	str	r3, [r6, #0]
 801855c:	68a3      	ldr	r3, [r4, #8]
 801855e:	3b01      	subs	r3, #1
 8018560:	60a3      	str	r3, [r4, #8]
 8018562:	e7df      	b.n	8018524 <_scanf_i+0xe0>
 8018564:	f1b8 0f02 	cmp.w	r8, #2
 8018568:	d1b1      	bne.n	80184ce <_scanf_i+0x8a>
 801856a:	6822      	ldr	r2, [r4, #0]
 801856c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018570:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018574:	d1c2      	bne.n	80184fc <_scanf_i+0xb8>
 8018576:	2110      	movs	r1, #16
 8018578:	6061      	str	r1, [r4, #4]
 801857a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801857e:	e7a5      	b.n	80184cc <_scanf_i+0x88>
 8018580:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018584:	6022      	str	r2, [r4, #0]
 8018586:	780b      	ldrb	r3, [r1, #0]
 8018588:	702b      	strb	r3, [r5, #0]
 801858a:	3501      	adds	r5, #1
 801858c:	e7de      	b.n	801854c <_scanf_i+0x108>
 801858e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018592:	4631      	mov	r1, r6
 8018594:	4658      	mov	r0, fp
 8018596:	4798      	blx	r3
 8018598:	2800      	cmp	r0, #0
 801859a:	d0df      	beq.n	801855c <_scanf_i+0x118>
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	05d9      	lsls	r1, r3, #23
 80185a0:	d50c      	bpl.n	80185bc <_scanf_i+0x178>
 80185a2:	454d      	cmp	r5, r9
 80185a4:	d908      	bls.n	80185b8 <_scanf_i+0x174>
 80185a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80185aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80185ae:	4632      	mov	r2, r6
 80185b0:	4658      	mov	r0, fp
 80185b2:	4798      	blx	r3
 80185b4:	1e6f      	subs	r7, r5, #1
 80185b6:	463d      	mov	r5, r7
 80185b8:	454d      	cmp	r5, r9
 80185ba:	d02c      	beq.n	8018616 <_scanf_i+0x1d2>
 80185bc:	6822      	ldr	r2, [r4, #0]
 80185be:	f012 0210 	ands.w	r2, r2, #16
 80185c2:	d11e      	bne.n	8018602 <_scanf_i+0x1be>
 80185c4:	702a      	strb	r2, [r5, #0]
 80185c6:	6863      	ldr	r3, [r4, #4]
 80185c8:	9e00      	ldr	r6, [sp, #0]
 80185ca:	4649      	mov	r1, r9
 80185cc:	4658      	mov	r0, fp
 80185ce:	47b0      	blx	r6
 80185d0:	6822      	ldr	r2, [r4, #0]
 80185d2:	f8da 3000 	ldr.w	r3, [sl]
 80185d6:	f012 0f20 	tst.w	r2, #32
 80185da:	d008      	beq.n	80185ee <_scanf_i+0x1aa>
 80185dc:	1d1a      	adds	r2, r3, #4
 80185de:	f8ca 2000 	str.w	r2, [sl]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	6018      	str	r0, [r3, #0]
 80185e6:	e009      	b.n	80185fc <_scanf_i+0x1b8>
 80185e8:	f04f 0800 	mov.w	r8, #0
 80185ec:	e7d6      	b.n	801859c <_scanf_i+0x158>
 80185ee:	07d2      	lsls	r2, r2, #31
 80185f0:	d5f4      	bpl.n	80185dc <_scanf_i+0x198>
 80185f2:	1d1a      	adds	r2, r3, #4
 80185f4:	f8ca 2000 	str.w	r2, [sl]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	8018      	strh	r0, [r3, #0]
 80185fc:	68e3      	ldr	r3, [r4, #12]
 80185fe:	3301      	adds	r3, #1
 8018600:	60e3      	str	r3, [r4, #12]
 8018602:	eba5 0509 	sub.w	r5, r5, r9
 8018606:	44a8      	add	r8, r5
 8018608:	6925      	ldr	r5, [r4, #16]
 801860a:	4445      	add	r5, r8
 801860c:	6125      	str	r5, [r4, #16]
 801860e:	2000      	movs	r0, #0
 8018610:	b007      	add	sp, #28
 8018612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018616:	2001      	movs	r0, #1
 8018618:	e7fa      	b.n	8018610 <_scanf_i+0x1cc>
 801861a:	bf00      	nop
 801861c:	080188f4 	.word	0x080188f4
 8018620:	080187a9 	.word	0x080187a9
 8018624:	08017e2d 	.word	0x08017e2d
 8018628:	080274f4 	.word	0x080274f4

0801862c <_sbrk_r>:
 801862c:	b538      	push	{r3, r4, r5, lr}
 801862e:	4c06      	ldr	r4, [pc, #24]	; (8018648 <_sbrk_r+0x1c>)
 8018630:	2300      	movs	r3, #0
 8018632:	4605      	mov	r5, r0
 8018634:	4608      	mov	r0, r1
 8018636:	6023      	str	r3, [r4, #0]
 8018638:	f000 f942 	bl	80188c0 <_sbrk>
 801863c:	1c43      	adds	r3, r0, #1
 801863e:	d102      	bne.n	8018646 <_sbrk_r+0x1a>
 8018640:	6823      	ldr	r3, [r4, #0]
 8018642:	b103      	cbz	r3, 8018646 <_sbrk_r+0x1a>
 8018644:	602b      	str	r3, [r5, #0]
 8018646:	bd38      	pop	{r3, r4, r5, pc}
 8018648:	20004ebc 	.word	0x20004ebc

0801864c <__sccl>:
 801864c:	b570      	push	{r4, r5, r6, lr}
 801864e:	780b      	ldrb	r3, [r1, #0]
 8018650:	2b5e      	cmp	r3, #94	; 0x5e
 8018652:	bf13      	iteet	ne
 8018654:	1c4a      	addne	r2, r1, #1
 8018656:	1c8a      	addeq	r2, r1, #2
 8018658:	784b      	ldrbeq	r3, [r1, #1]
 801865a:	2100      	movne	r1, #0
 801865c:	bf08      	it	eq
 801865e:	2101      	moveq	r1, #1
 8018660:	1e44      	subs	r4, r0, #1
 8018662:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018666:	f804 1f01 	strb.w	r1, [r4, #1]!
 801866a:	42a5      	cmp	r5, r4
 801866c:	d1fb      	bne.n	8018666 <__sccl+0x1a>
 801866e:	b913      	cbnz	r3, 8018676 <__sccl+0x2a>
 8018670:	3a01      	subs	r2, #1
 8018672:	4610      	mov	r0, r2
 8018674:	bd70      	pop	{r4, r5, r6, pc}
 8018676:	f081 0401 	eor.w	r4, r1, #1
 801867a:	54c4      	strb	r4, [r0, r3]
 801867c:	4611      	mov	r1, r2
 801867e:	780d      	ldrb	r5, [r1, #0]
 8018680:	2d2d      	cmp	r5, #45	; 0x2d
 8018682:	f101 0201 	add.w	r2, r1, #1
 8018686:	d006      	beq.n	8018696 <__sccl+0x4a>
 8018688:	2d5d      	cmp	r5, #93	; 0x5d
 801868a:	d0f2      	beq.n	8018672 <__sccl+0x26>
 801868c:	b90d      	cbnz	r5, 8018692 <__sccl+0x46>
 801868e:	460a      	mov	r2, r1
 8018690:	e7ef      	b.n	8018672 <__sccl+0x26>
 8018692:	462b      	mov	r3, r5
 8018694:	e7f1      	b.n	801867a <__sccl+0x2e>
 8018696:	784e      	ldrb	r6, [r1, #1]
 8018698:	2e5d      	cmp	r6, #93	; 0x5d
 801869a:	d0fa      	beq.n	8018692 <__sccl+0x46>
 801869c:	42b3      	cmp	r3, r6
 801869e:	dcf8      	bgt.n	8018692 <__sccl+0x46>
 80186a0:	3102      	adds	r1, #2
 80186a2:	3301      	adds	r3, #1
 80186a4:	429e      	cmp	r6, r3
 80186a6:	54c4      	strb	r4, [r0, r3]
 80186a8:	dcfb      	bgt.n	80186a2 <__sccl+0x56>
 80186aa:	e7e8      	b.n	801867e <__sccl+0x32>

080186ac <_strtoul_l.isra.0>:
 80186ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b0:	4680      	mov	r8, r0
 80186b2:	4689      	mov	r9, r1
 80186b4:	4692      	mov	sl, r2
 80186b6:	461e      	mov	r6, r3
 80186b8:	460f      	mov	r7, r1
 80186ba:	463d      	mov	r5, r7
 80186bc:	9808      	ldr	r0, [sp, #32]
 80186be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80186c2:	f7ff fbdd 	bl	8017e80 <__locale_ctype_ptr_l>
 80186c6:	4420      	add	r0, r4
 80186c8:	7843      	ldrb	r3, [r0, #1]
 80186ca:	f013 0308 	ands.w	r3, r3, #8
 80186ce:	d10a      	bne.n	80186e6 <_strtoul_l.isra.0+0x3a>
 80186d0:	2c2d      	cmp	r4, #45	; 0x2d
 80186d2:	d10a      	bne.n	80186ea <_strtoul_l.isra.0+0x3e>
 80186d4:	782c      	ldrb	r4, [r5, #0]
 80186d6:	2301      	movs	r3, #1
 80186d8:	1cbd      	adds	r5, r7, #2
 80186da:	b15e      	cbz	r6, 80186f4 <_strtoul_l.isra.0+0x48>
 80186dc:	2e10      	cmp	r6, #16
 80186de:	d113      	bne.n	8018708 <_strtoul_l.isra.0+0x5c>
 80186e0:	2c30      	cmp	r4, #48	; 0x30
 80186e2:	d009      	beq.n	80186f8 <_strtoul_l.isra.0+0x4c>
 80186e4:	e010      	b.n	8018708 <_strtoul_l.isra.0+0x5c>
 80186e6:	462f      	mov	r7, r5
 80186e8:	e7e7      	b.n	80186ba <_strtoul_l.isra.0+0xe>
 80186ea:	2c2b      	cmp	r4, #43	; 0x2b
 80186ec:	bf04      	itt	eq
 80186ee:	782c      	ldrbeq	r4, [r5, #0]
 80186f0:	1cbd      	addeq	r5, r7, #2
 80186f2:	e7f2      	b.n	80186da <_strtoul_l.isra.0+0x2e>
 80186f4:	2c30      	cmp	r4, #48	; 0x30
 80186f6:	d125      	bne.n	8018744 <_strtoul_l.isra.0+0x98>
 80186f8:	782a      	ldrb	r2, [r5, #0]
 80186fa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80186fe:	2a58      	cmp	r2, #88	; 0x58
 8018700:	d14a      	bne.n	8018798 <_strtoul_l.isra.0+0xec>
 8018702:	786c      	ldrb	r4, [r5, #1]
 8018704:	2610      	movs	r6, #16
 8018706:	3502      	adds	r5, #2
 8018708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801870c:	2700      	movs	r7, #0
 801870e:	fbb1 f1f6 	udiv	r1, r1, r6
 8018712:	fb06 fe01 	mul.w	lr, r6, r1
 8018716:	ea6f 0e0e 	mvn.w	lr, lr
 801871a:	4638      	mov	r0, r7
 801871c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8018720:	2a09      	cmp	r2, #9
 8018722:	d811      	bhi.n	8018748 <_strtoul_l.isra.0+0x9c>
 8018724:	4614      	mov	r4, r2
 8018726:	42a6      	cmp	r6, r4
 8018728:	dd1d      	ble.n	8018766 <_strtoul_l.isra.0+0xba>
 801872a:	2f00      	cmp	r7, #0
 801872c:	db18      	blt.n	8018760 <_strtoul_l.isra.0+0xb4>
 801872e:	4281      	cmp	r1, r0
 8018730:	d316      	bcc.n	8018760 <_strtoul_l.isra.0+0xb4>
 8018732:	d101      	bne.n	8018738 <_strtoul_l.isra.0+0x8c>
 8018734:	45a6      	cmp	lr, r4
 8018736:	db13      	blt.n	8018760 <_strtoul_l.isra.0+0xb4>
 8018738:	fb00 4006 	mla	r0, r0, r6, r4
 801873c:	2701      	movs	r7, #1
 801873e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018742:	e7eb      	b.n	801871c <_strtoul_l.isra.0+0x70>
 8018744:	260a      	movs	r6, #10
 8018746:	e7df      	b.n	8018708 <_strtoul_l.isra.0+0x5c>
 8018748:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 801874c:	2a19      	cmp	r2, #25
 801874e:	d801      	bhi.n	8018754 <_strtoul_l.isra.0+0xa8>
 8018750:	3c37      	subs	r4, #55	; 0x37
 8018752:	e7e8      	b.n	8018726 <_strtoul_l.isra.0+0x7a>
 8018754:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8018758:	2a19      	cmp	r2, #25
 801875a:	d804      	bhi.n	8018766 <_strtoul_l.isra.0+0xba>
 801875c:	3c57      	subs	r4, #87	; 0x57
 801875e:	e7e2      	b.n	8018726 <_strtoul_l.isra.0+0x7a>
 8018760:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018764:	e7eb      	b.n	801873e <_strtoul_l.isra.0+0x92>
 8018766:	2f00      	cmp	r7, #0
 8018768:	da09      	bge.n	801877e <_strtoul_l.isra.0+0xd2>
 801876a:	2322      	movs	r3, #34	; 0x22
 801876c:	f8c8 3000 	str.w	r3, [r8]
 8018770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018774:	f1ba 0f00 	cmp.w	sl, #0
 8018778:	d107      	bne.n	801878a <_strtoul_l.isra.0+0xde>
 801877a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801877e:	b103      	cbz	r3, 8018782 <_strtoul_l.isra.0+0xd6>
 8018780:	4240      	negs	r0, r0
 8018782:	f1ba 0f00 	cmp.w	sl, #0
 8018786:	d00c      	beq.n	80187a2 <_strtoul_l.isra.0+0xf6>
 8018788:	b127      	cbz	r7, 8018794 <_strtoul_l.isra.0+0xe8>
 801878a:	3d01      	subs	r5, #1
 801878c:	f8ca 5000 	str.w	r5, [sl]
 8018790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018794:	464d      	mov	r5, r9
 8018796:	e7f9      	b.n	801878c <_strtoul_l.isra.0+0xe0>
 8018798:	2430      	movs	r4, #48	; 0x30
 801879a:	2e00      	cmp	r6, #0
 801879c:	d1b4      	bne.n	8018708 <_strtoul_l.isra.0+0x5c>
 801879e:	2608      	movs	r6, #8
 80187a0:	e7b2      	b.n	8018708 <_strtoul_l.isra.0+0x5c>
 80187a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080187a8 <_strtoul_r>:
 80187a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187aa:	4c06      	ldr	r4, [pc, #24]	; (80187c4 <_strtoul_r+0x1c>)
 80187ac:	4d06      	ldr	r5, [pc, #24]	; (80187c8 <_strtoul_r+0x20>)
 80187ae:	6824      	ldr	r4, [r4, #0]
 80187b0:	6a24      	ldr	r4, [r4, #32]
 80187b2:	2c00      	cmp	r4, #0
 80187b4:	bf08      	it	eq
 80187b6:	462c      	moveq	r4, r5
 80187b8:	9400      	str	r4, [sp, #0]
 80187ba:	f7ff ff77 	bl	80186ac <_strtoul_l.isra.0>
 80187be:	b003      	add	sp, #12
 80187c0:	bd30      	pop	{r4, r5, pc}
 80187c2:	bf00      	nop
 80187c4:	2000017c 	.word	0x2000017c
 80187c8:	200001e0 	.word	0x200001e0

080187cc <__submore>:
 80187cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d0:	460c      	mov	r4, r1
 80187d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80187d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187d8:	4299      	cmp	r1, r3
 80187da:	d11e      	bne.n	801881a <__submore+0x4e>
 80187dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80187e0:	f7ff fbc0 	bl	8017f64 <_malloc_r>
 80187e4:	b918      	cbnz	r0, 80187ee <__submore+0x22>
 80187e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80187ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80187f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80187f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80187f8:	6360      	str	r0, [r4, #52]	; 0x34
 80187fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80187fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018802:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018806:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801880a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801880e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018812:	6020      	str	r0, [r4, #0]
 8018814:	2000      	movs	r0, #0
 8018816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801881a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801881c:	0077      	lsls	r7, r6, #1
 801881e:	463a      	mov	r2, r7
 8018820:	f000 f81e 	bl	8018860 <_realloc_r>
 8018824:	4605      	mov	r5, r0
 8018826:	2800      	cmp	r0, #0
 8018828:	d0dd      	beq.n	80187e6 <__submore+0x1a>
 801882a:	eb00 0806 	add.w	r8, r0, r6
 801882e:	4601      	mov	r1, r0
 8018830:	4632      	mov	r2, r6
 8018832:	4640      	mov	r0, r8
 8018834:	f7fe ffa5 	bl	8017782 <memcpy>
 8018838:	f8c4 8000 	str.w	r8, [r4]
 801883c:	6365      	str	r5, [r4, #52]	; 0x34
 801883e:	63a7      	str	r7, [r4, #56]	; 0x38
 8018840:	e7e8      	b.n	8018814 <__submore+0x48>

08018842 <__ascii_wctomb>:
 8018842:	b149      	cbz	r1, 8018858 <__ascii_wctomb+0x16>
 8018844:	2aff      	cmp	r2, #255	; 0xff
 8018846:	bf85      	ittet	hi
 8018848:	238a      	movhi	r3, #138	; 0x8a
 801884a:	6003      	strhi	r3, [r0, #0]
 801884c:	700a      	strbls	r2, [r1, #0]
 801884e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018852:	bf98      	it	ls
 8018854:	2001      	movls	r0, #1
 8018856:	4770      	bx	lr
 8018858:	4608      	mov	r0, r1
 801885a:	4770      	bx	lr

0801885c <__malloc_lock>:
 801885c:	4770      	bx	lr

0801885e <__malloc_unlock>:
 801885e:	4770      	bx	lr

08018860 <_realloc_r>:
 8018860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018862:	4607      	mov	r7, r0
 8018864:	4614      	mov	r4, r2
 8018866:	460e      	mov	r6, r1
 8018868:	b921      	cbnz	r1, 8018874 <_realloc_r+0x14>
 801886a:	4611      	mov	r1, r2
 801886c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018870:	f7ff bb78 	b.w	8017f64 <_malloc_r>
 8018874:	b922      	cbnz	r2, 8018880 <_realloc_r+0x20>
 8018876:	f7ff fb27 	bl	8017ec8 <_free_r>
 801887a:	4625      	mov	r5, r4
 801887c:	4628      	mov	r0, r5
 801887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018880:	f000 f814 	bl	80188ac <_malloc_usable_size_r>
 8018884:	4284      	cmp	r4, r0
 8018886:	d90f      	bls.n	80188a8 <_realloc_r+0x48>
 8018888:	4621      	mov	r1, r4
 801888a:	4638      	mov	r0, r7
 801888c:	f7ff fb6a 	bl	8017f64 <_malloc_r>
 8018890:	4605      	mov	r5, r0
 8018892:	2800      	cmp	r0, #0
 8018894:	d0f2      	beq.n	801887c <_realloc_r+0x1c>
 8018896:	4631      	mov	r1, r6
 8018898:	4622      	mov	r2, r4
 801889a:	f7fe ff72 	bl	8017782 <memcpy>
 801889e:	4631      	mov	r1, r6
 80188a0:	4638      	mov	r0, r7
 80188a2:	f7ff fb11 	bl	8017ec8 <_free_r>
 80188a6:	e7e9      	b.n	801887c <_realloc_r+0x1c>
 80188a8:	4635      	mov	r5, r6
 80188aa:	e7e7      	b.n	801887c <_realloc_r+0x1c>

080188ac <_malloc_usable_size_r>:
 80188ac:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80188b0:	2800      	cmp	r0, #0
 80188b2:	f1a0 0004 	sub.w	r0, r0, #4
 80188b6:	bfbc      	itt	lt
 80188b8:	580b      	ldrlt	r3, [r1, r0]
 80188ba:	18c0      	addlt	r0, r0, r3
 80188bc:	4770      	bx	lr
	...

080188c0 <_sbrk>:
 80188c0:	4b04      	ldr	r3, [pc, #16]	; (80188d4 <_sbrk+0x14>)
 80188c2:	6819      	ldr	r1, [r3, #0]
 80188c4:	4602      	mov	r2, r0
 80188c6:	b909      	cbnz	r1, 80188cc <_sbrk+0xc>
 80188c8:	4903      	ldr	r1, [pc, #12]	; (80188d8 <_sbrk+0x18>)
 80188ca:	6019      	str	r1, [r3, #0]
 80188cc:	6818      	ldr	r0, [r3, #0]
 80188ce:	4402      	add	r2, r0
 80188d0:	601a      	str	r2, [r3, #0]
 80188d2:	4770      	bx	lr
 80188d4:	20002988 	.word	0x20002988
 80188d8:	20004ec0 	.word	0x20004ec0

080188dc <_init>:
 80188dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188de:	bf00      	nop
 80188e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188e2:	bc08      	pop	{r3}
 80188e4:	469e      	mov	lr, r3
 80188e6:	4770      	bx	lr

080188e8 <_fini>:
 80188e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ea:	bf00      	nop
 80188ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ee:	bc08      	pop	{r3}
 80188f0:	469e      	mov	lr, r3
 80188f2:	4770      	bx	lr
